/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"application": 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "js/" + ({"vendors~actioncable":"vendors~actioncable"}[chunkId]||chunkId) + "-" + {"vendors~actioncable":"e125c147be2dabab34ad"}[chunkId] + ".chunk.js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 							error.name = 'ChunkLoadError';
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/packs/";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/javascript/packs/application.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/javascript/channels sync recursive _channel\\.js$":
/*!****************************************************!*\
  !*** ./app/javascript/channels sync _channel\.js$ ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = "./app/javascript/channels sync recursive _channel\\.js$";

/***/ }),

/***/ "./app/javascript/channels/index.js":
/*!******************************************!*\
  !*** ./app/javascript/channels/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Load all the channels within this directory and all subdirectories.
// Channel files must be named *_channel.js.
var channels = __webpack_require__("./app/javascript/channels sync recursive _channel\\.js$");

channels.keys().forEach(channels);

/***/ }),

/***/ "./app/javascript/packs/application.js":
/*!*********************************************!*\
  !*** ./app/javascript/packs/application.js ***!
  \*********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Rails, global, module) {/* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.esm.js");
/* harmony import */ var _hotwired_turbo_rails__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @hotwired/turbo-rails */ "./node_modules/@hotwired/turbo-rails/app/javascript/turbo/index.js");
var require;var require;// This file is automatically compiled by Webpack, along with any other files
// present in this directory. You're encouraged to place your actual application logic in
// a relevant structure within app/javascript and only use these pack files to reference
// that code so it'll be compiled.
__webpack_require__(/*! @rails/ujs */ "./node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js").start(); // require("jquery")


__webpack_require__(/*! turbolinks */ "./node_modules/turbolinks/dist/turbolinks.js").start();

__webpack_require__(/*! @rails/activestorage */ "./node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js").start();

__webpack_require__(/*! channels */ "./app/javascript/channels/index.js");

__webpack_require__(/*! local-time */ "./node_modules/local-time/app/assets/javascripts/local-time.js").start();

window.dropin = __webpack_require__(/*! braintree-web-drop-in */ "./node_modules/braintree-web-drop-in/dist/browser/dropin.js");
window.Rails = Rails;


document.addEventListener("turbolinks:load", function () {
  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
  var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
  });
  var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
  var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
    return new bootstrap.Popover(popoverTriggerEl);
  });
}); // Theme

function ownKeys(t, e) {
  var a,
      r = Object.keys(t);
  return Object.getOwnPropertySymbols && (a = Object.getOwnPropertySymbols(t), e && (a = a.filter(function (e) {
    return Object.getOwnPropertyDescriptor(t, e).enumerable;
  })), r.push.apply(r, a)), r;
}

function _objectSpread(t) {
  for (var e = 1; e < arguments.length; e++) {
    var a = null != arguments[e] ? arguments[e] : {};
    e % 2 ? ownKeys(Object(a), !0).forEach(function (e) {
      _defineProperty(t, e, a[e]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(a)) : ownKeys(Object(a)).forEach(function (e) {
      Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(a, e));
    });
  }

  return t;
}

function _defineProperty(e, t, a) {
  return t in e ? Object.defineProperty(e, t, {
    value: a,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[t] = a, e;
}
/**
* Finder | Directory & Listings Bootstrap Template
* Copyright 2021 Createx Studio
* Theme core scripts
*
* @author Createx Studio
* @version 1.0.0
*/


!function () {
  "use strict";

  var t, a, r;
  (function () {
    for (var a = document.querySelectorAll(".password-toggle"), e = 0; e < a.length; e++) {
      !function (e) {
        var t = a[e].querySelector(".form-control");
        a[e].querySelector(".password-toggle-btn").addEventListener("click", function (e) {
          "checkbox" === e.target.type && (e.target.checked ? t.type = "text" : t.type = "password");
        }, !1);
      }(e);
    }
  })(), function () {
    var e = document.querySelectorAll("[data-format]");
    if (0 !== e.length) for (var t = 0; t < e.length; t++) {
      var a = e[t].dataset.format,
          r = e[t].dataset.blocks,
          n = e[t].dataset.delimiter,
          r = void 0 !== r ? r.split(" ").map(Number) : "",
          n = void 0 !== n ? n : " ";

      switch (a) {
        case "card":
          new Cleave(e[t], {
            creditCard: !0
          });
          break;

        case "cvc":
          new Cleave(e[t], {
            numeral: !0,
            numeralIntegerScale: 3
          });
          break;

        case "date":
          new Cleave(e[t], {
            date: !0,
            datePattern: ["m", "y"]
          });
          break;

        case "date-long":
          new Cleave(e[t], {
            date: !0,
            delimiter: "-",
            datePattern: ["Y", "m", "d"]
          });
          break;

        case "time":
          new Cleave(e[t], {
            time: !0,
            datePattern: ["h", "m"]
          });
          break;

        case "custom":
          new Cleave(e[t], {
            delimiter: n,
            blocks: r
          });
          break;

        default:
          console.error("Sorry, your format " + a + " is not available. You can add it to the theme object method - inputFormatter in src/js/theme.js or choose one from the list of available formats: card, cvc, date, date-long, time or custom.");
      }
    }
  }(), window.addEventListener("load", function () {
    var e = document.getElementsByClassName("needs-validation");
    Array.prototype.filter.call(e, function (t) {
      t.addEventListener("submit", function (e) {
        !1 === t.checkValidity() && (e.preventDefault(), e.stopPropagation()), t.classList.add("was-validated");
      }, !1);
    });
  }, !1), null != (t = document.querySelector(".navbar.fixed-top")) && (t.classList, window.addEventListener("scroll", function (e) {
    20 < e.currentTarget.pageYOffset ? t.classList.add("navbar-stuck") : t.classList.remove("navbar-stuck");
  })), new SmoothScroll("[data-scroll]", {
    speed: 800,
    speedAsDuration: !0,
    offset: function offset(e, t) {
      return t.dataset.scrollOffset || 40;
    },
    header: "[data-scroll-header]",
    updateURL: !1
  }), null != (r = document.querySelector(".btn-scroll-top")) && (a = parseInt(600, 10), window.addEventListener("scroll", function (e) {
    e.currentTarget.pageYOffset > a ? r.classList.add("show") : r.classList.remove("show");
  })), [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map(function (e) {
    return new bootstrap.Tooltip(e, {
      trigger: "hover"
    });
  }), [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]')).map(function (e) {
    return new bootstrap.Popover(e);
  }), [].slice.call(document.querySelectorAll(".toast")).map(function (e) {
    return new bootstrap.Toast(e);
  }), function () {
    for (var i = document.querySelectorAll(".range-slider"), e = 0; e < i.length; e++) {
      !function (e) {
        var t = i[e].querySelector(".range-slider-ui"),
            a = i[e].querySelector(".range-slider-value-min"),
            r = i[e].querySelector(".range-slider-value-max"),
            n = {
          dataStartMin: parseInt(i[e].dataset.startMin, 10),
          dataStartMax: parseInt(i[e].dataset.startMax, 10),
          dataMin: parseInt(i[e].dataset.min, 10),
          dataMax: parseInt(i[e].dataset.max, 10),
          dataStep: parseInt(i[e].dataset.step, 10)
        },
            o = n.dataStartMax ? [n.dataStartMin, n.dataStartMax] : [n.dataStartMin],
            e = !!n.dataStartMax || "lower";
        noUiSlider.create(t, {
          start: o,
          connect: e,
          step: n.dataStep,
          tooltips: !0,
          range: {
            min: n.dataMin,
            max: n.dataMax
          },
          format: {
            to: function to(e) {
              return "$" + parseInt(e, 10);
            },
            from: function from(e) {
              return Number(e);
            }
          }
        }), t.noUiSlider.on("update", function (e, t) {
          e = (e = e[t]).replace(/\D/g, "");
          t ? r && (r.value = Math.round(e)) : a && (a.value = Math.round(e));
        }), a && a.addEventListener("change", function () {
          t.noUiSlider.set([this.value, null]);
        }), r && r.addEventListener("change", function () {
          t.noUiSlider.set([null, this.value]);
        });
      }(e);
    }
  }(), function () {
    for (var o = document.querySelectorAll('[data-bs-toggle="select"]'), e = 0; e < o.length; e++) {
      !function (e) {
        for (var t = o[e].querySelectorAll(".dropdown-item"), a = o[e].querySelector(".dropdown-toggle-label"), r = o[e].querySelector('input[type="hidden"]'), n = 0; n < t.length; n++) {
          t[n].addEventListener("click", function (e) {
            e.preventDefault();
            e = this.querySelector(".dropdown-item-label").innerText;
            a.innerText = e, null !== r && (r.value = e);
          });
        }
      }(e);
    }
  }(), function (e, t, a) {
    for (var r = 0; r < e.length; r++) {
      t.call(a, r, e[r]);
    }
  }(document.querySelectorAll(".tns-carousel-wrapper .tns-carousel-inner"), function (e, t) {
    var a = null != t.dataset.carouselOptions && "vertical" === JSON.parse(t.dataset.carouselOptions).axis ? ['<i class="fi-chevron-up"></i>', '<i class="fi-chevron-down"></i>'] : ['<i class="fi-chevron-left"></i>', '<i class="fi-chevron-right"></i>'],
        r = {
      container: t,
      controlsText: a,
      navPosition: "bottom",
      mouseDrag: !0,
      speed: 500,
      autoplayHoverPause: !0,
      autoplayButtonOutput: !1
    };
    null != t.dataset.carouselOptions && (o = JSON.parse(t.dataset.carouselOptions));
    var a = Object.assign({}, r, o),
        n = tns(a),
        r = t.closest(".tns-carousel-wrapper"),
        o = (r.querySelectorAll(".tns-item"), n.getInfo()),
        i = r.querySelector(".tns-current-slide"),
        a = r.querySelector(".tns-total-slides");
    r.classList.contains("tns-center") && (t = o.index, o.slideItems[t].classList.add("active"), n.events.on("indexChanged", function () {
      var e = n.getInfo(),
          t = e.indexCached,
          a = e.index;
      e.slideItems[t].classList.remove("active"), e.slideItems[a].classList.add("active");
    })), null !== r.querySelector(".tns-slides-count") && (i.innerHTML = o.displayIndex, a.innerHTML = o.slideCount, n.events.on("indexChanged", function () {
      var e = n.getInfo();
      i.innerHTML = e.displayIndex;
    }));
  }), function () {
    var e = document.querySelectorAll(".gallery");
    if (e.length) for (var t = 0; t < e.length; t++) {
      var a = !!e[t].dataset.thumbnails;
      lightGallery(e[t], {
        selector: ".gallery-item",
        download: !1,
        thumbnail: a,
        videojs: !0,
        youtubePlayerParams: {
          modestbranding: 1,
          showinfo: 0,
          rel: 0
        },
        vimeoPlayerParams: {
          byline: 0,
          portrait: 0,
          color: "fd5631"
        }
      });
    }
  }(), function () {
    var e = document.querySelectorAll('[data-bs-toggle="lightbox"]');
    if (e.length) for (var t = 0; t < e.length; t++) {
      lightGallery(e[t], {
        selector: "this",
        download: !1,
        videojs: !0,
        youtubePlayerParams: {
          modestbranding: 1,
          showinfo: 0,
          rel: 0
        },
        vimeoPlayerParams: {
          byline: 0,
          portrait: 0,
          color: "fd5631"
        }
      });
    }
  }(), function () {
    var e = document.querySelectorAll(".date-picker");
    if (0 !== e.length) for (var t = 0; t < e.length; t++) {
      var a = void 0;
      null != e[t].dataset.datepickerOptions && (a = JSON.parse(e[t].dataset.datepickerOptions));

      var r = e[t].classList.contains("date-range") ? {
        plugins: [new rangePlugin({
          input: e[t].dataset.linkedInput
        })]
      } : "{}",
          a = _objectSpread(_objectSpread(_objectSpread({}, {
        disableMobile: "true"
      }), r), a);

      flatpickr(e[t], a);
    }
  }(), function () {
    var i = document.querySelectorAll(".subscription-form");

    if (null !== i) {
      for (var e = 0; e < i.length; e++) {
        !function (e) {
          var t = i[e].querySelector('button[type="submit"]'),
              a = t.innerHTML,
              r = i[e].querySelector(".form-control"),
              n = i[e].querySelector(".subscription-form-antispam"),
              o = i[e].querySelector(".subscription-status");
          i[e].addEventListener("submit", function (e) {
            e && e.preventDefault(), "" === n.value && l(this, t, r, a, o);
          });
        }(e);
      }

      var l = function l(e, t, a, r, n) {
        t.innerHTML = "Sending...";
        var o = e.action.replace("/post?", "/post-json?"),
            e = "&" + a.name + "=" + encodeURIComponent(a.value),
            i = document.createElement("script");
        i.src = o + "&c=callback" + e, document.body.appendChild(i);
        var l = "callback";

        window[l] = function (e) {
          delete window[l], document.body.removeChild(i), t.innerHTML = r, "success" == e.result ? (a.classList.remove("is-invalid"), a.classList.add("is-valid"), n.classList.remove("status-error"), n.classList.add("status-success"), n.innerHTML = e.msg, setTimeout(function () {
            a.classList.remove("is-valid"), n.innerHTML = "", n.classList.remove("status-success");
          }, 6e3)) : (a.classList.remove("is-valid"), a.classList.add("is-invalid"), n.classList.remove("status-success"), n.classList.add("status-error"), n.innerHTML = e.msg.substring(4), setTimeout(function () {
            a.classList.remove("is-invalid"), n.innerHTML = "", n.classList.remove("status-error");
          }, 6e3));
        };
      };
    }
  }(), function () {
    var u = document.querySelectorAll(".interactive-map");
    if (0 !== u.length) for (var p, e = 0; e < u.length; e++) {
      !function (c) {
        var e = u[c].dataset.mapOptions,
            t = u[c].dataset.mapOptionsJson,
            d = void 0;

        if (e && "" !== e) {
          var a = JSON.parse(e),
              r = a.mapLayer || "https://api.maptiler.com/maps/voyager/{z}/{x}/{y}.png?key=5vRQzd34MMsINEyeKPIs",
              n = a.coordinates || [0, 0],
              o = a.zoom || 1,
              e = !1 !== a.scrollWheelZoom,
              i = a.markers,
              d = L.map(u[c], {
            scrollWheelZoom: e
          }).setView(n, o);
          if (L.tileLayer(r, {
            tileSize: 512,
            zoomOffset: -1,
            minZoom: 1,
            attribution: '<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>',
            crossOrigin: !0
          }).addTo(d), i) for (p = 0; p < i.length; p++) {
            var l = i[p].iconUrl,
                s = i[p].className,
                l = L.icon({
              iconUrl: l || "../img/map/marker-icon.png",
              iconSize: [25, 39],
              iconAnchor: [12, 39],
              shadowUrl: "../img/map/marker-shadow.png",
              shadowSize: [41, 41],
              shadowAnchor: [13, 41],
              popupAnchor: [1, -28],
              className: s
            }),
                s = i[p].popup,
                l = L.marker(i[p].coordinates, {
              icon: l
            }).addTo(d);
            s && l.bindPopup(s);
          }
        } else t && "" !== t ? fetch(t).then(function (e) {
          return e.json();
        }).then(function (e) {
          var t = e.mapLayer || "https://api.maptiler.com/maps/voyager/{z}/{x}/{y}.png?key=5vRQzd34MMsINEyeKPIs",
              a = e.coordinates || [0, 0],
              r = e.zoom || 1,
              n = !1 !== e.scrollWheelZoom,
              o = e.markers;
          if (d = L.map(u[c], {
            scrollWheelZoom: n
          }).setView(a, r), L.tileLayer(t, {
            tileSize: 512,
            zoomOffset: -1,
            minZoom: 1,
            attribution: '<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>',
            crossOrigin: !0
          }).addTo(d), o) for (var i = 0; i < o.length; i++) {
            var l = o[i].iconUrl,
                s = o[i].className,
                l = L.icon({
              iconUrl: l || "../img/map/marker-icon.png",
              iconSize: [25, 39],
              iconAnchor: [12, 39],
              shadowUrl: "../img/map/marker-shadow.png",
              shadowSize: [41, 41],
              shadowAnchor: [13, 41],
              popupAnchor: [1, -28],
              className: s
            }),
                s = o[i].popup,
                l = L.marker(o[i].coordinates, {
              icon: l
            }).addTo(d);
            s && l.bindPopup(s);
          }
        }) : (d = L.map(u[c]).setView([0, 0], 1), L.tileLayer("https://api.maptiler.com/maps/voyager/{z}/{x}/{y}.png?key=5vRQzd34MMsINEyeKPIs", {
          tileSize: 512,
          zoomOffset: -1,
          minZoom: 1,
          attribution: '<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>',
          crossOrigin: !0
        }).addTo(d));
      }(e);
    }
  }(), function () {
    for (var e = document.querySelectorAll(".parallax"), t = 0; t < e.length; t++) {
      new Parallax(e[t]);
    }
  }(), function () {
    var e = document.querySelectorAll(".file-uploader");

    if (0 !== e.length) {
      "undefined" != typeof FilePondPluginFileValidateType && FilePond.registerPlugin(FilePondPluginFileValidateType), "undefined" != typeof FilePondPluginFileValidateSize && FilePond.registerPlugin(FilePondPluginFileValidateSize), "undefined" != typeof FilePondPluginImagePreview && FilePond.registerPlugin(FilePondPluginImagePreview), "undefined" != typeof FilePondPluginImageCrop && FilePond.registerPlugin(FilePondPluginImageCrop), "undefined" != typeof FilePondPluginImageResize && FilePond.registerPlugin(FilePondPluginImageResize), "undefined" != typeof FilePondPluginImageTransform && FilePond.registerPlugin(FilePondPluginImageTransform);

      for (var t = 0; t < e.length; t++) {
        FilePond.create(e[t]);
      }
    }
  }(), function () {
    var r = document.querySelectorAll("[data-bs-binded-element]");
    if (0 !== r.length) for (var e = 0; e < r.length; e++) {
      !function (e) {
        var t = document.querySelector(r[e].dataset.bsBindedElement),
            a = r[e].dataset.bsUnsetValue;
        "SELECT" === r[e].tagName ? r[e].addEventListener("change", function (e) {
          t.innerText = e.target.value;
        }) : r[e].classList.contains("date-picker") ? r[e].addEventListener("change", function (e) {
          "" !== e.target.value ? t.innerText = e.target.value : t.innerText = a;
        }) : r[e].addEventListener("keyup", function (e) {
          "" !== e.target.value ? t.innerText = e.target.value : t.innerText = a;
        });
      }(e);
    }
  }(), function () {
    var e = document.querySelectorAll("[data-master-checkbox-for]");
    if (0 !== e.length) for (var t = 0; t < e.length; t++) {
      e[t].addEventListener("change", function () {
        var e = document.querySelector(this.dataset.masterCheckboxFor).querySelectorAll('input[type="checkbox"]');
        if (this.checked) for (var t = 0; t < e.length; t++) {
          e[t].checked = !0, e[t].dataset.checkboxToggleClass && document.querySelector(e[t].dataset.bsTarget).classList.add(e[t].dataset.checkboxToggleClass);
        } else for (var a = 0; a < e.length; a++) {
          e[a].checked = !1, e[a].dataset.checkboxToggleClass && document.querySelector(e[a].dataset.bsTarget).classList.remove(e[a].dataset.checkboxToggleClass);
        }
      });
    }
  }(), function () {
    for (var e = document.querySelectorAll("[data-bs-toggle-class]"), t = 0; t < e.length; t++) {
      e[t].addEventListener("click", function (e) {
        e.preventDefault();
        var t = document.querySelector(e.currentTarget.dataset.bsTarget),
            e = e.currentTarget.dataset.bsToggleClass;
        t.classList.toggle(e);
      });
    }
  }();
}(); // Simple bar

/**
* SimpleBar.js - v5.3.3
* Scrollbars, simpler.
* https://grsmto.github.io/simplebar/
*
* Made by Adrien Denat from a fork by Jonathan Nicol
* Under MIT License
*/

!function (t, e) {
  "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js") ? define(e) : (t = t || self).SimpleBar = e();
}(undefined, function () {
  "use strict";

  var t = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};

  function e(t, e) {
    return t(e = {
      exports: {}
    }, e.exports), e.exports;
  }

  var r,
      n,
      i,
      o = "object",
      s = function s(t) {
    return t && t.Math == Math && t;
  },
      a = s(typeof globalThis == o && globalThis) || s(typeof window == o && window) || s(typeof self == o && self) || s(typeof t == o && t) || Function("return this")(),
      c = function c(t) {
    try {
      return !!t();
    } catch (t) {
      return !0;
    }
  },
      l = !c(function () {
    return 7 != Object.defineProperty({}, "a", {
      get: function get() {
        return 7;
      }
    }).a;
  }),
      u = {}.propertyIsEnumerable,
      f = Object.getOwnPropertyDescriptor,
      h = {
    f: f && !u.call({
      1: 2
    }, 1) ? function (t) {
      var e = f(this, t);
      return !!e && e.enumerable;
    } : u
  },
      d = function d(t, e) {
    return {
      enumerable: !(1 & t),
      configurable: !(2 & t),
      writable: !(4 & t),
      value: e
    };
  },
      p = {}.toString,
      v = function v(t) {
    return p.call(t).slice(8, -1);
  },
      g = "".split,
      y = c(function () {
    return !Object("z").propertyIsEnumerable(0);
  }) ? function (t) {
    return "String" == v(t) ? g.call(t, "") : Object(t);
  } : Object,
      b = function b(t) {
    if (null == t) throw TypeError("Can't call method on " + t);
    return t;
  },
      m = function m(t) {
    return y(b(t));
  },
      x = function x(t) {
    return "object" == typeof t ? null !== t : "function" == typeof t;
  },
      E = function E(t, e) {
    if (!x(t)) return t;
    var r, n;
    if (e && "function" == typeof (r = t.toString) && !x(n = r.call(t))) return n;
    if ("function" == typeof (r = t.valueOf) && !x(n = r.call(t))) return n;
    if (!e && "function" == typeof (r = t.toString) && !x(n = r.call(t))) return n;
    throw TypeError("Can't convert object to primitive value");
  },
      w = {}.hasOwnProperty,
      O = function O(t, e) {
    return w.call(t, e);
  },
      _ = a.document,
      S = x(_) && x(_.createElement),
      A = function A(t) {
    return S ? _.createElement(t) : {};
  },
      k = !l && !c(function () {
    return 7 != Object.defineProperty(A("div"), "a", {
      get: function get() {
        return 7;
      }
    }).a;
  }),
      L = Object.getOwnPropertyDescriptor,
      M = {
    f: l ? L : function (t, e) {
      if (t = m(t), e = E(e, !0), k) try {
        return L(t, e);
      } catch (t) {}
      if (O(t, e)) return d(!h.f.call(t, e), t[e]);
    }
  },
      T = function T(t) {
    if (!x(t)) throw TypeError(String(t) + " is not an object");
    return t;
  },
      j = Object.defineProperty,
      R = {
    f: l ? j : function (t, e, r) {
      if (T(t), e = E(e, !0), T(r), k) try {
        return j(t, e, r);
      } catch (t) {}
      if ("get" in r || "set" in r) throw TypeError("Accessors not supported");
      return "value" in r && (t[e] = r.value), t;
    }
  },
      W = l ? function (t, e, r) {
    return R.f(t, e, d(1, r));
  } : function (t, e, r) {
    return t[e] = r, t;
  },
      z = function z(t, e) {
    try {
      W(a, t, e);
    } catch (r) {
      a[t] = e;
    }

    return e;
  },
      C = e(function (t) {
    var e = a["__core-js_shared__"] || z("__core-js_shared__", {});
    (t.exports = function (t, r) {
      return e[t] || (e[t] = void 0 !== r ? r : {});
    })("versions", []).push({
      version: "3.2.1",
      mode: "global",
      copyright: "© 2019 Denis Pushkarev (zloirock.ru)"
    });
  }),
      N = C("native-function-to-string", Function.toString),
      I = a.WeakMap,
      D = "function" == typeof I && /native code/.test(N.call(I)),
      P = 0,
      V = Math.random(),
      F = function F(t) {
    return "Symbol(" + String(void 0 === t ? "" : t) + ")_" + (++P + V).toString(36);
  },
      B = C("keys"),
      H = function H(t) {
    return B[t] || (B[t] = F(t));
  },
      q = {},
      $ = a.WeakMap;

  if (D) {
    var X = new $(),
        Y = X.get,
        G = X.has,
        U = X.set;
    r = function r(t, e) {
      return U.call(X, t, e), e;
    }, n = function n(t) {
      return Y.call(X, t) || {};
    }, i = function i(t) {
      return G.call(X, t);
    };
  } else {
    var Q = H("state");
    q[Q] = !0, r = function r(t, e) {
      return W(t, Q, e), e;
    }, n = function n(t) {
      return O(t, Q) ? t[Q] : {};
    }, i = function i(t) {
      return O(t, Q);
    };
  }

  var K = {
    set: r,
    get: n,
    has: i,
    enforce: function enforce(t) {
      return i(t) ? n(t) : r(t, {});
    },
    getterFor: function getterFor(t) {
      return function (e) {
        var r;
        if (!x(e) || (r = n(e)).type !== t) throw TypeError("Incompatible receiver, " + t + " required");
        return r;
      };
    }
  },
      J = e(function (t) {
    var e = K.get,
        r = K.enforce,
        n = String(N).split("toString");
    C("inspectSource", function (t) {
      return N.call(t);
    }), (t.exports = function (t, e, i, o) {
      var s = !!o && !!o.unsafe,
          c = !!o && !!o.enumerable,
          l = !!o && !!o.noTargetGet;
      "function" == typeof i && ("string" != typeof e || O(i, "name") || W(i, "name", e), r(i).source = n.join("string" == typeof e ? e : "")), t !== a ? (s ? !l && t[e] && (c = !0) : delete t[e], c ? t[e] = i : W(t, e, i)) : c ? t[e] = i : z(e, i);
    })(Function.prototype, "toString", function () {
      return "function" == typeof this && e(this).source || N.call(this);
    });
  }),
      Z = a,
      tt = function tt(t) {
    return "function" == typeof t ? t : void 0;
  },
      et = function et(t, e) {
    return arguments.length < 2 ? tt(Z[t]) || tt(a[t]) : Z[t] && Z[t][e] || a[t] && a[t][e];
  },
      rt = Math.ceil,
      nt = Math.floor,
      it = function it(t) {
    return isNaN(t = +t) ? 0 : (t > 0 ? nt : rt)(t);
  },
      ot = Math.min,
      st = function st(t) {
    return t > 0 ? ot(it(t), 9007199254740991) : 0;
  },
      at = Math.max,
      ct = Math.min,
      lt = function lt(t) {
    return function (e, r, n) {
      var i,
          o = m(e),
          s = st(o.length),
          a = function (t, e) {
        var r = it(t);
        return r < 0 ? at(r + e, 0) : ct(r, e);
      }(n, s);

      if (t && r != r) {
        for (; s > a;) {
          if ((i = o[a++]) != i) return !0;
        }
      } else for (; s > a; a++) {
        if ((t || a in o) && o[a] === r) return t || a || 0;
      }

      return !t && -1;
    };
  },
      ut = {
    includes: lt(!0),
    indexOf: lt(!1)
  }.indexOf,
      ft = function ft(t, e) {
    var r,
        n = m(t),
        i = 0,
        o = [];

    for (r in n) {
      !O(q, r) && O(n, r) && o.push(r);
    }

    for (; e.length > i;) {
      O(n, r = e[i++]) && (~ut(o, r) || o.push(r));
    }

    return o;
  },
      ht = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"],
      dt = ht.concat("length", "prototype"),
      pt = {
    f: Object.getOwnPropertyNames || function (t) {
      return ft(t, dt);
    }
  },
      vt = {
    f: Object.getOwnPropertySymbols
  },
      gt = et("Reflect", "ownKeys") || function (t) {
    var e = pt.f(T(t)),
        r = vt.f;
    return r ? e.concat(r(t)) : e;
  },
      yt = function yt(t, e) {
    for (var r = gt(e), n = R.f, i = M.f, o = 0; o < r.length; o++) {
      var s = r[o];
      O(t, s) || n(t, s, i(e, s));
    }
  },
      bt = /#|\.prototype\./,
      mt = function mt(t, e) {
    var r = Et[xt(t)];
    return r == Ot || r != wt && ("function" == typeof e ? c(e) : !!e);
  },
      xt = mt.normalize = function (t) {
    return String(t).replace(bt, ".").toLowerCase();
  },
      Et = mt.data = {},
      wt = mt.NATIVE = "N",
      Ot = mt.POLYFILL = "P",
      _t = mt,
      St = M.f,
      At = function At(t, e) {
    var r,
        n,
        i,
        o,
        s,
        c = t.target,
        l = t.global,
        u = t.stat;
    if (r = l ? a : u ? a[c] || z(c, {}) : (a[c] || {}).prototype) for (n in e) {
      if (o = e[n], i = t.noTargetGet ? (s = St(r, n)) && s.value : r[n], !_t(l ? n : c + (u ? "." : "#") + n, t.forced) && void 0 !== i) {
        if (typeof o == typeof i) continue;
        yt(o, i);
      }

      (t.sham || i && i.sham) && W(o, "sham", !0), J(r, n, o, t);
    }
  },
      kt = function kt(t) {
    if ("function" != typeof t) throw TypeError(String(t) + " is not a function");
    return t;
  },
      Lt = function Lt(t, e, r) {
    if (kt(t), void 0 === e) return t;

    switch (r) {
      case 0:
        return function () {
          return t.call(e);
        };

      case 1:
        return function (r) {
          return t.call(e, r);
        };

      case 2:
        return function (r, n) {
          return t.call(e, r, n);
        };

      case 3:
        return function (r, n, i) {
          return t.call(e, r, n, i);
        };
    }

    return function () {
      return t.apply(e, arguments);
    };
  },
      Mt = function Mt(t) {
    return Object(b(t));
  },
      Tt = Array.isArray || function (t) {
    return "Array" == v(t);
  },
      jt = !!Object.getOwnPropertySymbols && !c(function () {
    return !String(Symbol());
  }),
      Rt = a.Symbol,
      Wt = C("wks"),
      zt = function zt(t) {
    return Wt[t] || (Wt[t] = jt && Rt[t] || (jt ? Rt : F)("Symbol." + t));
  },
      Ct = zt("species"),
      Nt = function Nt(t, e) {
    var r;
    return Tt(t) && ("function" != typeof (r = t.constructor) || r !== Array && !Tt(r.prototype) ? x(r) && null === (r = r[Ct]) && (r = void 0) : r = void 0), new (void 0 === r ? Array : r)(0 === e ? 0 : e);
  },
      It = [].push,
      Dt = function Dt(t) {
    var e = 1 == t,
        r = 2 == t,
        n = 3 == t,
        i = 4 == t,
        o = 6 == t,
        s = 5 == t || o;
    return function (a, c, l, u) {
      for (var f, h, d = Mt(a), p = y(d), v = Lt(c, l, 3), g = st(p.length), b = 0, m = u || Nt, x = e ? m(a, g) : r ? m(a, 0) : void 0; g > b; b++) {
        if ((s || b in p) && (h = v(f = p[b], b, d), t)) if (e) x[b] = h;else if (h) switch (t) {
          case 3:
            return !0;

          case 5:
            return f;

          case 6:
            return b;

          case 2:
            It.call(x, f);
        } else if (i) return !1;
      }

      return o ? -1 : n || i ? i : x;
    };
  },
      Pt = {
    forEach: Dt(0),
    map: Dt(1),
    filter: Dt(2),
    some: Dt(3),
    every: Dt(4),
    find: Dt(5),
    findIndex: Dt(6)
  },
      Vt = function Vt(t, e) {
    var r = [][t];
    return !r || !c(function () {
      r.call(null, e || function () {
        throw 1;
      }, 1);
    });
  },
      Ft = Pt.forEach,
      Bt = Vt("forEach") ? function (t) {
    return Ft(this, t, arguments.length > 1 ? arguments[1] : void 0);
  } : [].forEach;

  At({
    target: "Array",
    proto: !0,
    forced: [].forEach != Bt
  }, {
    forEach: Bt
  });
  var Ht = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };

  for (var qt in Ht) {
    var $t = a[qt],
        Xt = $t && $t.prototype;
    if (Xt && Xt.forEach !== Bt) try {
      W(Xt, "forEach", Bt);
    } catch (t) {
      Xt.forEach = Bt;
    }
  }

  var Yt = !("undefined" == typeof window || !window.document || !window.document.createElement),
      Gt = zt("species"),
      Ut = Pt.filter;
  At({
    target: "Array",
    proto: !0,
    forced: !function (t) {
      return !c(function () {
        var e = [];
        return (e.constructor = {})[Gt] = function () {
          return {
            foo: 1
          };
        }, 1 !== e[t](Boolean).foo;
      });
    }("filter")
  }, {
    filter: function filter(t) {
      return Ut(this, t, arguments.length > 1 ? arguments[1] : void 0);
    }
  });

  var Qt = Object.keys || function (t) {
    return ft(t, ht);
  },
      Kt = l ? Object.defineProperties : function (t, e) {
    T(t);

    for (var r, n = Qt(e), i = n.length, o = 0; i > o;) {
      R.f(t, r = n[o++], e[r]);
    }

    return t;
  },
      Jt = et("document", "documentElement"),
      Zt = H("IE_PROTO"),
      te = function te() {},
      _ee = function ee() {
    var t,
        e = A("iframe"),
        r = ht.length;

    for (e.style.display = "none", Jt.appendChild(e), e.src = String("javascript:"), (t = e.contentWindow.document).open(), t.write("<script>document.F=Object</script>"), t.close(), _ee = t.F; r--;) {
      delete _ee.prototype[ht[r]];
    }

    return _ee();
  },
      re = Object.create || function (t, e) {
    var r;
    return null !== t ? (te.prototype = T(t), r = new te(), te.prototype = null, r[Zt] = t) : r = _ee(), void 0 === e ? r : Kt(r, e);
  };

  q[Zt] = !0;
  var ne = zt("unscopables"),
      ie = Array.prototype;
  null == ie[ne] && W(ie, ne, re(null));

  var oe,
      se,
      ae,
      ce = function ce(t) {
    ie[ne][t] = !0;
  },
      le = {},
      ue = !c(function () {
    function t() {}

    return t.prototype.constructor = null, Object.getPrototypeOf(new t()) !== t.prototype;
  }),
      fe = H("IE_PROTO"),
      he = Object.prototype,
      de = ue ? Object.getPrototypeOf : function (t) {
    return t = Mt(t), O(t, fe) ? t[fe] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? he : null;
  },
      pe = zt("iterator"),
      ve = !1;

  [].keys && ("next" in (ae = [].keys()) ? (se = de(de(ae))) !== Object.prototype && (oe = se) : ve = !0), null == oe && (oe = {}), O(oe, pe) || W(oe, pe, function () {
    return this;
  });

  var ge = {
    IteratorPrototype: oe,
    BUGGY_SAFARI_ITERATORS: ve
  },
      ye = R.f,
      be = zt("toStringTag"),
      me = function me(t, e, r) {
    t && !O(t = r ? t : t.prototype, be) && ye(t, be, {
      configurable: !0,
      value: e
    });
  },
      xe = ge.IteratorPrototype,
      Ee = function Ee() {
    return this;
  },
      we = Object.setPrototypeOf || ("__proto__" in {} ? function () {
    var t,
        e = !1,
        r = {};

    try {
      (t = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set).call(r, []), e = r instanceof Array;
    } catch (t) {}

    return function (r, n) {
      return T(r), function (t) {
        if (!x(t) && null !== t) throw TypeError("Can't set " + String(t) + " as a prototype");
      }(n), e ? t.call(r, n) : r.__proto__ = n, r;
    };
  }() : void 0),
      Oe = ge.IteratorPrototype,
      _e = ge.BUGGY_SAFARI_ITERATORS,
      Se = zt("iterator"),
      Ae = function Ae() {
    return this;
  },
      ke = function ke(t, e, r, n, i, o, s) {
    !function (t, e, r) {
      var n = e + " Iterator";
      t.prototype = re(xe, {
        next: d(1, r)
      }), me(t, n, !1), le[n] = Ee;
    }(r, e, n);

    var a,
        c,
        l,
        u = function u(t) {
      if (t === i && g) return g;
      if (!_e && t in p) return p[t];

      switch (t) {
        case "keys":
        case "values":
        case "entries":
          return function () {
            return new r(this, t);
          };
      }

      return function () {
        return new r(this);
      };
    },
        f = e + " Iterator",
        h = !1,
        p = t.prototype,
        v = p[Se] || p["@@iterator"] || i && p[i],
        g = !_e && v || u(i),
        y = "Array" == e && p.entries || v;

    if (y && (a = de(y.call(new t())), Oe !== Object.prototype && a.next && (de(a) !== Oe && (we ? we(a, Oe) : "function" != typeof a[Se] && W(a, Se, Ae)), me(a, f, !0))), "values" == i && v && "values" !== v.name && (h = !0, g = function g() {
      return v.call(this);
    }), p[Se] !== g && W(p, Se, g), le[e] = g, i) if (c = {
      values: u("values"),
      keys: o ? g : u("keys"),
      entries: u("entries")
    }, s) for (l in c) {
      !_e && !h && l in p || J(p, l, c[l]);
    } else At({
      target: e,
      proto: !0,
      forced: _e || h
    }, c);
    return c;
  },
      Le = K.set,
      Me = K.getterFor("Array Iterator"),
      Te = ke(Array, "Array", function (t, e) {
    Le(this, {
      type: "Array Iterator",
      target: m(t),
      index: 0,
      kind: e
    });
  }, function () {
    var t = Me(this),
        e = t.target,
        r = t.kind,
        n = t.index++;
    return !e || n >= e.length ? (t.target = void 0, {
      value: void 0,
      done: !0
    }) : "keys" == r ? {
      value: n,
      done: !1
    } : "values" == r ? {
      value: e[n],
      done: !1
    } : {
      value: [n, e[n]],
      done: !1
    };
  }, "values");

  le.Arguments = le.Array, ce("keys"), ce("values"), ce("entries");
  var je = Object.assign,
      Re = !je || c(function () {
    var t = {},
        e = {},
        r = Symbol();
    return t[r] = 7, "abcdefghijklmnopqrst".split("").forEach(function (t) {
      e[t] = t;
    }), 7 != je({}, t)[r] || "abcdefghijklmnopqrst" != Qt(je({}, e)).join("");
  }) ? function (t, e) {
    for (var r = Mt(t), n = arguments.length, i = 1, o = vt.f, s = h.f; n > i;) {
      for (var a, c = y(arguments[i++]), u = o ? Qt(c).concat(o(c)) : Qt(c), f = u.length, d = 0; f > d;) {
        a = u[d++], l && !s.call(c, a) || (r[a] = c[a]);
      }
    }

    return r;
  } : je;
  At({
    target: "Object",
    stat: !0,
    forced: Object.assign !== Re
  }, {
    assign: Re
  });

  var We = zt("toStringTag"),
      ze = "Arguments" == v(function () {
    return arguments;
  }()),
      Ce = function Ce(t) {
    var e, r, n;
    return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (r = function (t, e) {
      try {
        return t[e];
      } catch (t) {}
    }(e = Object(t), We)) ? r : ze ? v(e) : "Object" == (n = v(e)) && "function" == typeof e.callee ? "Arguments" : n;
  },
      Ne = {};

  Ne[zt("toStringTag")] = "z";
  var Ie = "[object z]" !== String(Ne) ? function () {
    return "[object " + Ce(this) + "]";
  } : Ne.toString,
      De = Object.prototype;
  Ie !== De.toString && J(De, "toString", Ie, {
    unsafe: !0
  });

  var Pe = "\t\n\x0B\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF",
      Ve = "[" + Pe + "]",
      Fe = RegExp("^" + Ve + Ve + "*"),
      Be = RegExp(Ve + Ve + "*$"),
      He = function He(t) {
    return function (e) {
      var r = String(b(e));
      return 1 & t && (r = r.replace(Fe, "")), 2 & t && (r = r.replace(Be, "")), r;
    };
  },
      qe = {
    start: He(1),
    end: He(2),
    trim: He(3)
  }.trim,
      $e = a.parseInt,
      Xe = /^[+-]?0[Xx]/,
      Ye = 8 !== $e(Pe + "08") || 22 !== $e(Pe + "0x16") ? function (t, e) {
    var r = qe(String(t));
    return $e(r, e >>> 0 || (Xe.test(r) ? 16 : 10));
  } : $e;

  At({
    global: !0,
    forced: parseInt != Ye
  }, {
    parseInt: Ye
  });

  var Ge = function Ge(t) {
    return function (e, r) {
      var n,
          i,
          o = String(b(e)),
          s = it(r),
          a = o.length;
      return s < 0 || s >= a ? t ? "" : void 0 : (n = o.charCodeAt(s)) < 55296 || n > 56319 || s + 1 === a || (i = o.charCodeAt(s + 1)) < 56320 || i > 57343 ? t ? o.charAt(s) : n : t ? o.slice(s, s + 2) : i - 56320 + (n - 55296 << 10) + 65536;
    };
  },
      Ue = {
    codeAt: Ge(!1),
    charAt: Ge(!0)
  },
      Qe = Ue.charAt,
      Ke = K.set,
      Je = K.getterFor("String Iterator");

  ke(String, "String", function (t) {
    Ke(this, {
      type: "String Iterator",
      string: String(t),
      index: 0
    });
  }, function () {
    var t,
        e = Je(this),
        r = e.string,
        n = e.index;
    return n >= r.length ? {
      value: void 0,
      done: !0
    } : (t = Qe(r, n), e.index += t.length, {
      value: t,
      done: !1
    });
  });

  var Ze = function Ze(t, e, r) {
    for (var n in e) {
      J(t, n, e[n], r);
    }

    return t;
  },
      tr = !c(function () {
    return Object.isExtensible(Object.preventExtensions({}));
  }),
      er = e(function (t) {
    var e = R.f,
        r = F("meta"),
        n = 0,
        i = Object.isExtensible || function () {
      return !0;
    },
        o = function o(t) {
      e(t, r, {
        value: {
          objectID: "O" + ++n,
          weakData: {}
        }
      });
    },
        s = t.exports = {
      REQUIRED: !1,
      fastKey: function fastKey(t, e) {
        if (!x(t)) return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;

        if (!O(t, r)) {
          if (!i(t)) return "F";
          if (!e) return "E";
          o(t);
        }

        return t[r].objectID;
      },
      getWeakData: function getWeakData(t, e) {
        if (!O(t, r)) {
          if (!i(t)) return !0;
          if (!e) return !1;
          o(t);
        }

        return t[r].weakData;
      },
      onFreeze: function onFreeze(t) {
        return tr && s.REQUIRED && i(t) && !O(t, r) && o(t), t;
      }
    };

    q[r] = !0;
  }),
      rr = (er.REQUIRED, er.fastKey, er.getWeakData, er.onFreeze, zt("iterator")),
      nr = Array.prototype,
      ir = zt("iterator"),
      or = function or(t, e, r, n) {
    try {
      return n ? e(T(r)[0], r[1]) : e(r);
    } catch (e) {
      var i = t["return"];
      throw void 0 !== i && T(i.call(t)), e;
    }
  },
      sr = e(function (t) {
    var e = function e(t, _e2) {
      this.stopped = t, this.result = _e2;
    };

    (t.exports = function (t, r, n, i, o) {
      var s,
          a,
          c,
          l,
          u,
          f,
          h,
          d = Lt(r, n, i ? 2 : 1);
      if (o) s = t;else {
        if ("function" != typeof (a = function (t) {
          if (null != t) return t[ir] || t["@@iterator"] || le[Ce(t)];
        }(t))) throw TypeError("Target is not iterable");

        if (void 0 !== (h = a) && (le.Array === h || nr[rr] === h)) {
          for (c = 0, l = st(t.length); l > c; c++) {
            if ((u = i ? d(T(f = t[c])[0], f[1]) : d(t[c])) && u instanceof e) return u;
          }

          return new e(!1);
        }

        s = a.call(t);
      }

      for (; !(f = s.next()).done;) {
        if ((u = or(s, d, f.value, i)) && u instanceof e) return u;
      }

      return new e(!1);
    }).stop = function (t) {
      return new e(!0, t);
    };
  }),
      ar = function ar(t, e, r) {
    if (!(t instanceof e)) throw TypeError("Incorrect " + (r ? r + " " : "") + "invocation");
    return t;
  },
      cr = zt("iterator"),
      lr = !1;

  try {
    var ur = 0,
        fr = {
      next: function next() {
        return {
          done: !!ur++
        };
      },
      "return": function _return() {
        lr = !0;
      }
    };
    fr[cr] = function () {
      return this;
    }, Array.from(fr, function () {
      throw 2;
    });
  } catch (t) {}

  var hr = function hr(t, e, r, n, i) {
    var o = a[t],
        s = o && o.prototype,
        l = o,
        u = n ? "set" : "add",
        f = {},
        h = function h(t) {
      var e = s[t];
      J(s, t, "add" == t ? function (t) {
        return e.call(this, 0 === t ? 0 : t), this;
      } : "delete" == t ? function (t) {
        return !(i && !x(t)) && e.call(this, 0 === t ? 0 : t);
      } : "get" == t ? function (t) {
        return i && !x(t) ? void 0 : e.call(this, 0 === t ? 0 : t);
      } : "has" == t ? function (t) {
        return !(i && !x(t)) && e.call(this, 0 === t ? 0 : t);
      } : function (t, r) {
        return e.call(this, 0 === t ? 0 : t, r), this;
      });
    };

    if (_t(t, "function" != typeof o || !(i || s.forEach && !c(function () {
      new o().entries().next();
    })))) l = r.getConstructor(e, t, n, u), er.REQUIRED = !0;else if (_t(t, !0)) {
      var d = new l(),
          p = d[u](i ? {} : -0, 1) != d,
          v = c(function () {
        d.has(1);
      }),
          g = function (t, e) {
        if (!e && !lr) return !1;
        var r = !1;

        try {
          var n = {};
          n[cr] = function () {
            return {
              next: function next() {
                return {
                  done: r = !0
                };
              }
            };
          }, t(n);
        } catch (t) {}

        return r;
      }(function (t) {
        new o(t);
      }),
          y = !i && c(function () {
        for (var t = new o(), e = 5; e--;) {
          t[u](e, e);
        }

        return !t.has(-0);
      });

      g || ((l = e(function (e, r) {
        ar(e, l, t);

        var i = function (t, e, r) {
          var n, i;
          return we && "function" == typeof (n = e.constructor) && n !== r && x(i = n.prototype) && i !== r.prototype && we(t, i), t;
        }(new o(), e, l);

        return null != r && sr(r, i[u], i, n), i;
      })).prototype = s, s.constructor = l), (v || y) && (h("delete"), h("has"), n && h("get")), (y || p) && h(u), i && s.clear && delete s.clear;
    }
    return f[t] = l, At({
      global: !0,
      forced: l != o
    }, f), me(l, t), i || r.setStrong(l, t, n), l;
  },
      dr = er.getWeakData,
      pr = K.set,
      vr = K.getterFor,
      gr = Pt.find,
      yr = Pt.findIndex,
      br = 0,
      mr = function mr(t) {
    return t.frozen || (t.frozen = new xr());
  },
      xr = function xr() {
    this.entries = [];
  },
      Er = function Er(t, e) {
    return gr(t.entries, function (t) {
      return t[0] === e;
    });
  };

  xr.prototype = {
    get: function get(t) {
      var e = Er(this, t);
      if (e) return e[1];
    },
    has: function has(t) {
      return !!Er(this, t);
    },
    set: function set(t, e) {
      var r = Er(this, t);
      r ? r[1] = e : this.entries.push([t, e]);
    },
    "delete": function _delete(t) {
      var e = yr(this.entries, function (e) {
        return e[0] === t;
      });
      return ~e && this.entries.splice(e, 1), !!~e;
    }
  };

  var wr = {
    getConstructor: function getConstructor(t, e, r, n) {
      var i = t(function (t, o) {
        ar(t, i, e), pr(t, {
          type: e,
          id: br++,
          frozen: void 0
        }), null != o && sr(o, t[n], t, r);
      }),
          o = vr(e),
          s = function s(t, e, r) {
        var n = o(t),
            i = dr(T(e), !0);
        return !0 === i ? mr(n).set(e, r) : i[n.id] = r, t;
      };

      return Ze(i.prototype, {
        "delete": function _delete(t) {
          var e = o(this);
          if (!x(t)) return !1;
          var r = dr(t);
          return !0 === r ? mr(e)["delete"](t) : r && O(r, e.id) && delete r[e.id];
        },
        has: function has(t) {
          var e = o(this);
          if (!x(t)) return !1;
          var r = dr(t);
          return !0 === r ? mr(e).has(t) : r && O(r, e.id);
        }
      }), Ze(i.prototype, r ? {
        get: function get(t) {
          var e = o(this);

          if (x(t)) {
            var r = dr(t);
            return !0 === r ? mr(e).get(t) : r ? r[e.id] : void 0;
          }
        },
        set: function set(t, e) {
          return s(this, t, e);
        }
      } : {
        add: function add(t) {
          return s(this, t, !0);
        }
      }), i;
    }
  },
      Or = (e(function (t) {
    var e,
        r = K.enforce,
        n = !a.ActiveXObject && "ActiveXObject" in a,
        i = Object.isExtensible,
        o = function o(t) {
      return function () {
        return t(this, arguments.length ? arguments[0] : void 0);
      };
    },
        s = t.exports = hr("WeakMap", o, wr, !0, !0);

    if (D && n) {
      e = wr.getConstructor(o, "WeakMap", !0), er.REQUIRED = !0;
      var c = s.prototype,
          l = c["delete"],
          u = c.has,
          f = c.get,
          h = c.set;
      Ze(c, {
        "delete": function _delete(t) {
          if (x(t) && !i(t)) {
            var n = r(this);
            return n.frozen || (n.frozen = new e()), l.call(this, t) || n.frozen["delete"](t);
          }

          return l.call(this, t);
        },
        has: function has(t) {
          if (x(t) && !i(t)) {
            var n = r(this);
            return n.frozen || (n.frozen = new e()), u.call(this, t) || n.frozen.has(t);
          }

          return u.call(this, t);
        },
        get: function get(t) {
          if (x(t) && !i(t)) {
            var n = r(this);
            return n.frozen || (n.frozen = new e()), u.call(this, t) ? f.call(this, t) : n.frozen.get(t);
          }

          return f.call(this, t);
        },
        set: function set(t, n) {
          if (x(t) && !i(t)) {
            var o = r(this);
            o.frozen || (o.frozen = new e()), u.call(this, t) ? h.call(this, t, n) : o.frozen.set(t, n);
          } else h.call(this, t, n);

          return this;
        }
      });
    }
  }), zt("iterator")),
      _r = zt("toStringTag"),
      Sr = Te.values;

  for (var Ar in Ht) {
    var kr = a[Ar],
        Lr = kr && kr.prototype;

    if (Lr) {
      if (Lr[Or] !== Sr) try {
        W(Lr, Or, Sr);
      } catch (t) {
        Lr[Or] = Sr;
      }
      if (Lr[_r] || W(Lr, _r, Ar), Ht[Ar]) for (var Mr in Te) {
        if (Lr[Mr] !== Te[Mr]) try {
          W(Lr, Mr, Te[Mr]);
        } catch (t) {
          Lr[Mr] = Te[Mr];
        }
      }
    }
  }

  var Tr = "Expected a function",
      jr = NaN,
      Rr = "[object Symbol]",
      Wr = /^\s+|\s+$/g,
      zr = /^[-+]0x[0-9a-f]+$/i,
      Cr = /^0b[01]+$/i,
      Nr = /^0o[0-7]+$/i,
      Ir = parseInt,
      Dr = "object" == typeof t && t && t.Object === Object && t,
      Pr = "object" == typeof self && self && self.Object === Object && self,
      Vr = Dr || Pr || Function("return this")(),
      Fr = Object.prototype.toString,
      Br = Math.max,
      Hr = Math.min,
      qr = function qr() {
    return Vr.Date.now();
  };

  function $r(t, e, r) {
    var n,
        i,
        o,
        s,
        a,
        c,
        l = 0,
        u = !1,
        f = !1,
        h = !0;
    if ("function" != typeof t) throw new TypeError(Tr);

    function d(e) {
      var r = n,
          o = i;
      return n = i = void 0, l = e, s = t.apply(o, r);
    }

    function p(t) {
      var r = t - c;
      return void 0 === c || r >= e || r < 0 || f && t - l >= o;
    }

    function v() {
      var t = qr();
      if (p(t)) return g(t);
      a = setTimeout(v, function (t) {
        var r = e - (t - c);
        return f ? Hr(r, o - (t - l)) : r;
      }(t));
    }

    function g(t) {
      return a = void 0, h && n ? d(t) : (n = i = void 0, s);
    }

    function y() {
      var t = qr(),
          r = p(t);

      if (n = arguments, i = this, c = t, r) {
        if (void 0 === a) return function (t) {
          return l = t, a = setTimeout(v, e), u ? d(t) : s;
        }(c);
        if (f) return a = setTimeout(v, e), d(c);
      }

      return void 0 === a && (a = setTimeout(v, e)), s;
    }

    return e = Yr(e) || 0, Xr(r) && (u = !!r.leading, o = (f = "maxWait" in r) ? Br(Yr(r.maxWait) || 0, e) : o, h = "trailing" in r ? !!r.trailing : h), y.cancel = function () {
      void 0 !== a && clearTimeout(a), l = 0, n = c = i = a = void 0;
    }, y.flush = function () {
      return void 0 === a ? s : g(qr());
    }, y;
  }

  function Xr(t) {
    var e = typeof t;
    return !!t && ("object" == e || "function" == e);
  }

  function Yr(t) {
    if ("number" == typeof t) return t;
    if (function (t) {
      return "symbol" == typeof t || function (t) {
        return !!t && "object" == typeof t;
      }(t) && Fr.call(t) == Rr;
    }(t)) return jr;

    if (Xr(t)) {
      var e = "function" == typeof t.valueOf ? t.valueOf() : t;
      t = Xr(e) ? e + "" : e;
    }

    if ("string" != typeof t) return 0 === t ? t : +t;
    t = t.replace(Wr, "");
    var r = Cr.test(t);
    return r || Nr.test(t) ? Ir(t.slice(2), r ? 2 : 8) : zr.test(t) ? jr : +t;
  }

  var Gr = function Gr(t, e, r) {
    var n = !0,
        i = !0;
    if ("function" != typeof t) throw new TypeError(Tr);
    return Xr(r) && (n = "leading" in r ? !!r.leading : n, i = "trailing" in r ? !!r.trailing : i), $r(t, e, {
      leading: n,
      maxWait: e,
      trailing: i
    });
  },
      Ur = "Expected a function",
      Qr = NaN,
      Kr = "[object Symbol]",
      Jr = /^\s+|\s+$/g,
      Zr = /^[-+]0x[0-9a-f]+$/i,
      tn = /^0b[01]+$/i,
      en = /^0o[0-7]+$/i,
      rn = parseInt,
      nn = "object" == typeof t && t && t.Object === Object && t,
      on = "object" == typeof self && self && self.Object === Object && self,
      sn = nn || on || Function("return this")(),
      an = Object.prototype.toString,
      cn = Math.max,
      ln = Math.min,
      un = function un() {
    return sn.Date.now();
  };

  function fn(t) {
    var e = typeof t;
    return !!t && ("object" == e || "function" == e);
  }

  function hn(t) {
    if ("number" == typeof t) return t;
    if (function (t) {
      return "symbol" == typeof t || function (t) {
        return !!t && "object" == typeof t;
      }(t) && an.call(t) == Kr;
    }(t)) return Qr;

    if (fn(t)) {
      var e = "function" == typeof t.valueOf ? t.valueOf() : t;
      t = fn(e) ? e + "" : e;
    }

    if ("string" != typeof t) return 0 === t ? t : +t;
    t = t.replace(Jr, "");
    var r = tn.test(t);
    return r || en.test(t) ? rn(t.slice(2), r ? 2 : 8) : Zr.test(t) ? Qr : +t;
  }

  var dn = function dn(t, e, r) {
    var n,
        i,
        o,
        s,
        a,
        c,
        l = 0,
        u = !1,
        f = !1,
        h = !0;
    if ("function" != typeof t) throw new TypeError(Ur);

    function d(e) {
      var r = n,
          o = i;
      return n = i = void 0, l = e, s = t.apply(o, r);
    }

    function p(t) {
      var r = t - c;
      return void 0 === c || r >= e || r < 0 || f && t - l >= o;
    }

    function v() {
      var t = un();
      if (p(t)) return g(t);
      a = setTimeout(v, function (t) {
        var r = e - (t - c);
        return f ? ln(r, o - (t - l)) : r;
      }(t));
    }

    function g(t) {
      return a = void 0, h && n ? d(t) : (n = i = void 0, s);
    }

    function y() {
      var t = un(),
          r = p(t);

      if (n = arguments, i = this, c = t, r) {
        if (void 0 === a) return function (t) {
          return l = t, a = setTimeout(v, e), u ? d(t) : s;
        }(c);
        if (f) return a = setTimeout(v, e), d(c);
      }

      return void 0 === a && (a = setTimeout(v, e)), s;
    }

    return e = hn(e) || 0, fn(r) && (u = !!r.leading, o = (f = "maxWait" in r) ? cn(hn(r.maxWait) || 0, e) : o, h = "trailing" in r ? !!r.trailing : h), y.cancel = function () {
      void 0 !== a && clearTimeout(a), l = 0, n = c = i = a = void 0;
    }, y.flush = function () {
      return void 0 === a ? s : g(un());
    }, y;
  },
      pn = "Expected a function",
      vn = "__lodash_hash_undefined__",
      gn = "[object Function]",
      yn = "[object GeneratorFunction]",
      bn = /^\[object .+?Constructor\]$/,
      mn = "object" == typeof t && t && t.Object === Object && t,
      xn = "object" == typeof self && self && self.Object === Object && self,
      En = mn || xn || Function("return this")();

  var wn = Array.prototype,
      On = Function.prototype,
      _n = Object.prototype,
      Sn = En["__core-js_shared__"],
      An = function () {
    var t = /[^.]+$/.exec(Sn && Sn.keys && Sn.keys.IE_PROTO || "");
    return t ? "Symbol(src)_1." + t : "";
  }(),
      kn = On.toString,
      Ln = _n.hasOwnProperty,
      Mn = _n.toString,
      Tn = RegExp("^" + kn.call(Ln).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
      jn = wn.splice,
      Rn = Vn(En, "Map"),
      Wn = Vn(Object, "create");

  function zn(t) {
    var e = -1,
        r = t ? t.length : 0;

    for (this.clear(); ++e < r;) {
      var n = t[e];
      this.set(n[0], n[1]);
    }
  }

  function Cn(t) {
    var e = -1,
        r = t ? t.length : 0;

    for (this.clear(); ++e < r;) {
      var n = t[e];
      this.set(n[0], n[1]);
    }
  }

  function Nn(t) {
    var e = -1,
        r = t ? t.length : 0;

    for (this.clear(); ++e < r;) {
      var n = t[e];
      this.set(n[0], n[1]);
    }
  }

  function In(t, e) {
    for (var r, n, i = t.length; i--;) {
      if ((r = t[i][0]) === (n = e) || r != r && n != n) return i;
    }

    return -1;
  }

  function Dn(t) {
    return !(!Bn(t) || (e = t, An && An in e)) && (function (t) {
      var e = Bn(t) ? Mn.call(t) : "";
      return e == gn || e == yn;
    }(t) || function (t) {
      var e = !1;
      if (null != t && "function" != typeof t.toString) try {
        e = !!(t + "");
      } catch (t) {}
      return e;
    }(t) ? Tn : bn).test(function (t) {
      if (null != t) {
        try {
          return kn.call(t);
        } catch (t) {}

        try {
          return t + "";
        } catch (t) {}
      }

      return "";
    }(t));
    var e;
  }

  function Pn(t, e) {
    var r,
        n,
        i = t.__data__;
    return ("string" == (n = typeof (r = e)) || "number" == n || "symbol" == n || "boolean" == n ? "__proto__" !== r : null === r) ? i["string" == typeof e ? "string" : "hash"] : i.map;
  }

  function Vn(t, e) {
    var r = function (t, e) {
      return null == t ? void 0 : t[e];
    }(t, e);

    return Dn(r) ? r : void 0;
  }

  function Fn(t, e) {
    if ("function" != typeof t || e && "function" != typeof e) throw new TypeError(pn);

    var r = function r() {
      var n = arguments,
          i = e ? e.apply(this, n) : n[0],
          o = r.cache;
      if (o.has(i)) return o.get(i);
      var s = t.apply(this, n);
      return r.cache = o.set(i, s), s;
    };

    return r.cache = new (Fn.Cache || Nn)(), r;
  }

  function Bn(t) {
    var e = typeof t;
    return !!t && ("object" == e || "function" == e);
  }

  zn.prototype.clear = function () {
    this.__data__ = Wn ? Wn(null) : {};
  }, zn.prototype["delete"] = function (t) {
    return this.has(t) && delete this.__data__[t];
  }, zn.prototype.get = function (t) {
    var e = this.__data__;

    if (Wn) {
      var r = e[t];
      return r === vn ? void 0 : r;
    }

    return Ln.call(e, t) ? e[t] : void 0;
  }, zn.prototype.has = function (t) {
    var e = this.__data__;
    return Wn ? void 0 !== e[t] : Ln.call(e, t);
  }, zn.prototype.set = function (t, e) {
    return this.__data__[t] = Wn && void 0 === e ? vn : e, this;
  }, Cn.prototype.clear = function () {
    this.__data__ = [];
  }, Cn.prototype["delete"] = function (t) {
    var e = this.__data__,
        r = In(e, t);
    return !(r < 0) && (r == e.length - 1 ? e.pop() : jn.call(e, r, 1), !0);
  }, Cn.prototype.get = function (t) {
    var e = this.__data__,
        r = In(e, t);
    return r < 0 ? void 0 : e[r][1];
  }, Cn.prototype.has = function (t) {
    return In(this.__data__, t) > -1;
  }, Cn.prototype.set = function (t, e) {
    var r = this.__data__,
        n = In(r, t);
    return n < 0 ? r.push([t, e]) : r[n][1] = e, this;
  }, Nn.prototype.clear = function () {
    this.__data__ = {
      hash: new zn(),
      map: new (Rn || Cn)(),
      string: new zn()
    };
  }, Nn.prototype["delete"] = function (t) {
    return Pn(this, t)["delete"](t);
  }, Nn.prototype.get = function (t) {
    return Pn(this, t).get(t);
  }, Nn.prototype.has = function (t) {
    return Pn(this, t).has(t);
  }, Nn.prototype.set = function (t, e) {
    return Pn(this, t).set(t, e), this;
  }, Fn.Cache = Nn;

  var Hn = Fn,
      qn = function () {
    if ("undefined" != typeof Map) return Map;

    function t(t, e) {
      var r = -1;
      return t.some(function (t, n) {
        return t[0] === e && (r = n, !0);
      }), r;
    }

    return function () {
      function e() {
        this.__entries__ = [];
      }

      return Object.defineProperty(e.prototype, "size", {
        get: function get() {
          return this.__entries__.length;
        },
        enumerable: !0,
        configurable: !0
      }), e.prototype.get = function (e) {
        var r = t(this.__entries__, e),
            n = this.__entries__[r];
        return n && n[1];
      }, e.prototype.set = function (e, r) {
        var n = t(this.__entries__, e);
        ~n ? this.__entries__[n][1] = r : this.__entries__.push([e, r]);
      }, e.prototype["delete"] = function (e) {
        var r = this.__entries__,
            n = t(r, e);
        ~n && r.splice(n, 1);
      }, e.prototype.has = function (e) {
        return !!~t(this.__entries__, e);
      }, e.prototype.clear = function () {
        this.__entries__.splice(0);
      }, e.prototype.forEach = function (t, e) {
        void 0 === e && (e = null);

        for (var r = 0, n = this.__entries__; r < n.length; r++) {
          var i = n[r];
          t.call(e, i[1], i[0]);
        }
      }, e;
    }();
  }(),
      $n = "undefined" != typeof window && "undefined" != typeof document && window.document === document,
      Xn = "undefined" != typeof global && global.Math === Math ? global : "undefined" != typeof self && self.Math === Math ? self : "undefined" != typeof window && window.Math === Math ? window : Function("return this")(),
      Yn = "function" == typeof requestAnimationFrame ? requestAnimationFrame.bind(Xn) : function (t) {
    return setTimeout(function () {
      return t(Date.now());
    }, 1e3 / 60);
  },
      Gn = 2;

  var Un = 20,
      Qn = ["top", "right", "bottom", "left", "width", "height", "size", "weight"],
      Kn = "undefined" != typeof MutationObserver,
      Jn = function () {
    function t() {
      this.connected_ = !1, this.mutationEventsAdded_ = !1, this.mutationsObserver_ = null, this.observers_ = [], this.onTransitionEnd_ = this.onTransitionEnd_.bind(this), this.refresh = function (t, e) {
        var r = !1,
            n = !1,
            i = 0;

        function o() {
          r && (r = !1, t()), n && a();
        }

        function s() {
          Yn(o);
        }

        function a() {
          var t = Date.now();

          if (r) {
            if (t - i < Gn) return;
            n = !0;
          } else r = !0, n = !1, setTimeout(s, e);

          i = t;
        }

        return a;
      }(this.refresh.bind(this), Un);
    }

    return t.prototype.addObserver = function (t) {
      ~this.observers_.indexOf(t) || this.observers_.push(t), this.connected_ || this.connect_();
    }, t.prototype.removeObserver = function (t) {
      var e = this.observers_,
          r = e.indexOf(t);
      ~r && e.splice(r, 1), !e.length && this.connected_ && this.disconnect_();
    }, t.prototype.refresh = function () {
      this.updateObservers_() && this.refresh();
    }, t.prototype.updateObservers_ = function () {
      var t = this.observers_.filter(function (t) {
        return t.gatherActive(), t.hasActive();
      });
      return t.forEach(function (t) {
        return t.broadcastActive();
      }), t.length > 0;
    }, t.prototype.connect_ = function () {
      $n && !this.connected_ && (document.addEventListener("transitionend", this.onTransitionEnd_), window.addEventListener("resize", this.refresh), Kn ? (this.mutationsObserver_ = new MutationObserver(this.refresh), this.mutationsObserver_.observe(document, {
        attributes: !0,
        childList: !0,
        characterData: !0,
        subtree: !0
      })) : (document.addEventListener("DOMSubtreeModified", this.refresh), this.mutationEventsAdded_ = !0), this.connected_ = !0);
    }, t.prototype.disconnect_ = function () {
      $n && this.connected_ && (document.removeEventListener("transitionend", this.onTransitionEnd_), window.removeEventListener("resize", this.refresh), this.mutationsObserver_ && this.mutationsObserver_.disconnect(), this.mutationEventsAdded_ && document.removeEventListener("DOMSubtreeModified", this.refresh), this.mutationsObserver_ = null, this.mutationEventsAdded_ = !1, this.connected_ = !1);
    }, t.prototype.onTransitionEnd_ = function (t) {
      var e = t.propertyName,
          r = void 0 === e ? "" : e;
      Qn.some(function (t) {
        return !!~r.indexOf(t);
      }) && this.refresh();
    }, t.getInstance = function () {
      return this.instance_ || (this.instance_ = new t()), this.instance_;
    }, t.instance_ = null, t;
  }(),
      Zn = function Zn(t, e) {
    for (var r = 0, n = Object.keys(e); r < n.length; r++) {
      var i = n[r];
      Object.defineProperty(t, i, {
        value: e[i],
        enumerable: !1,
        writable: !1,
        configurable: !0
      });
    }

    return t;
  },
      ti = function ti(t) {
    return t && t.ownerDocument && t.ownerDocument.defaultView || Xn;
  },
      ei = ai(0, 0, 0, 0);

  function ri(t) {
    return parseFloat(t) || 0;
  }

  function ni(t) {
    for (var e = [], r = 1; r < arguments.length; r++) {
      e[r - 1] = arguments[r];
    }

    return e.reduce(function (e, r) {
      return e + ri(t["border-" + r + "-width"]);
    }, 0);
  }

  function ii(t) {
    var e = t.clientWidth,
        r = t.clientHeight;
    if (!e && !r) return ei;

    var n = ti(t).getComputedStyle(t),
        i = function (t) {
      for (var e = {}, r = 0, n = ["top", "right", "bottom", "left"]; r < n.length; r++) {
        var i = n[r],
            o = t["padding-" + i];
        e[i] = ri(o);
      }

      return e;
    }(n),
        o = i.left + i.right,
        s = i.top + i.bottom,
        a = ri(n.width),
        c = ri(n.height);

    if ("border-box" === n.boxSizing && (Math.round(a + o) !== e && (a -= ni(n, "left", "right") + o), Math.round(c + s) !== r && (c -= ni(n, "top", "bottom") + s)), !function (t) {
      return t === ti(t).document.documentElement;
    }(t)) {
      var l = Math.round(a + o) - e,
          u = Math.round(c + s) - r;
      1 !== Math.abs(l) && (a -= l), 1 !== Math.abs(u) && (c -= u);
    }

    return ai(i.left, i.top, a, c);
  }

  var oi = "undefined" != typeof SVGGraphicsElement ? function (t) {
    return t instanceof ti(t).SVGGraphicsElement;
  } : function (t) {
    return t instanceof ti(t).SVGElement && "function" == typeof t.getBBox;
  };

  function si(t) {
    return $n ? oi(t) ? function (t) {
      var e = t.getBBox();
      return ai(0, 0, e.width, e.height);
    }(t) : ii(t) : ei;
  }

  function ai(t, e, r, n) {
    return {
      x: t,
      y: e,
      width: r,
      height: n
    };
  }

  var ci = function () {
    function t(t) {
      this.broadcastWidth = 0, this.broadcastHeight = 0, this.contentRect_ = ai(0, 0, 0, 0), this.target = t;
    }

    return t.prototype.isActive = function () {
      var t = si(this.target);
      return this.contentRect_ = t, t.width !== this.broadcastWidth || t.height !== this.broadcastHeight;
    }, t.prototype.broadcastRect = function () {
      var t = this.contentRect_;
      return this.broadcastWidth = t.width, this.broadcastHeight = t.height, t;
    }, t;
  }(),
      li = function li(t, e) {
    var r,
        n,
        i,
        o,
        s,
        a,
        c,
        l = (n = (r = e).x, i = r.y, o = r.width, s = r.height, a = "undefined" != typeof DOMRectReadOnly ? DOMRectReadOnly : Object, c = Object.create(a.prototype), Zn(c, {
      x: n,
      y: i,
      width: o,
      height: s,
      top: i,
      right: n + o,
      bottom: s + i,
      left: n
    }), c);
    Zn(this, {
      target: t,
      contentRect: l
    });
  },
      ui = function () {
    function t(t, e, r) {
      if (this.activeObservations_ = [], this.observations_ = new qn(), "function" != typeof t) throw new TypeError("The callback provided as parameter 1 is not a function.");
      this.callback_ = t, this.controller_ = e, this.callbackCtx_ = r;
    }

    return t.prototype.observe = function (t) {
      if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");

      if ("undefined" != typeof Element && Element instanceof Object) {
        if (!(t instanceof ti(t).Element)) throw new TypeError('parameter 1 is not of type "Element".');
        var e = this.observations_;
        e.has(t) || (e.set(t, new ci(t)), this.controller_.addObserver(this), this.controller_.refresh());
      }
    }, t.prototype.unobserve = function (t) {
      if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");

      if ("undefined" != typeof Element && Element instanceof Object) {
        if (!(t instanceof ti(t).Element)) throw new TypeError('parameter 1 is not of type "Element".');
        var e = this.observations_;
        e.has(t) && (e["delete"](t), e.size || this.controller_.removeObserver(this));
      }
    }, t.prototype.disconnect = function () {
      this.clearActive(), this.observations_.clear(), this.controller_.removeObserver(this);
    }, t.prototype.gatherActive = function () {
      var t = this;
      this.clearActive(), this.observations_.forEach(function (e) {
        e.isActive() && t.activeObservations_.push(e);
      });
    }, t.prototype.broadcastActive = function () {
      if (this.hasActive()) {
        var t = this.callbackCtx_,
            e = this.activeObservations_.map(function (t) {
          return new li(t.target, t.broadcastRect());
        });
        this.callback_.call(t, e, t), this.clearActive();
      }
    }, t.prototype.clearActive = function () {
      this.activeObservations_.splice(0);
    }, t.prototype.hasActive = function () {
      return this.activeObservations_.length > 0;
    }, t;
  }(),
      fi = "undefined" != typeof WeakMap ? new WeakMap() : new qn(),
      hi = function t(e) {
    if (!(this instanceof t)) throw new TypeError("Cannot call a class as a function.");
    if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
    var r = Jn.getInstance(),
        n = new ui(e, r, this);
    fi.set(this, n);
  };

  ["observe", "unobserve", "disconnect"].forEach(function (t) {
    hi.prototype[t] = function () {
      var e;
      return (e = fi.get(this))[t].apply(e, arguments);
    };
  });

  var di = void 0 !== Xn.ResizeObserver ? Xn.ResizeObserver : hi,
      pi = function pi(t) {
    return function (e, r, n, i) {
      kt(r);
      var o = Mt(e),
          s = y(o),
          a = st(o.length),
          c = t ? a - 1 : 0,
          l = t ? -1 : 1;
      if (n < 2) for (;;) {
        if (c in s) {
          i = s[c], c += l;
          break;
        }

        if (c += l, t ? c < 0 : a <= c) throw TypeError("Reduce of empty array with no initial value");
      }

      for (; t ? c >= 0 : a > c; c += l) {
        c in s && (i = r(i, s[c], c, o));
      }

      return i;
    };
  },
      vi = {
    left: pi(!1),
    right: pi(!0)
  }.left;

  At({
    target: "Array",
    proto: !0,
    forced: Vt("reduce")
  }, {
    reduce: function reduce(t) {
      return vi(this, t, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
    }
  });
  var gi = R.f,
      yi = Function.prototype,
      bi = yi.toString,
      mi = /^\s*function ([^ (]*)/;
  !l || "name" in yi || gi(yi, "name", {
    configurable: !0,
    get: function get() {
      try {
        return bi.call(this).match(mi)[1];
      } catch (t) {
        return "";
      }
    }
  });

  var xi,
      Ei,
      wi = function wi() {
    var t = T(this),
        e = "";
    return t.global && (e += "g"), t.ignoreCase && (e += "i"), t.multiline && (e += "m"), t.dotAll && (e += "s"), t.unicode && (e += "u"), t.sticky && (e += "y"), e;
  },
      Oi = RegExp.prototype.exec,
      _i = String.prototype.replace,
      Si = Oi,
      Ai = (xi = /a/, Ei = /b*/g, Oi.call(xi, "a"), Oi.call(Ei, "a"), 0 !== xi.lastIndex || 0 !== Ei.lastIndex),
      ki = void 0 !== /()??/.exec("")[1];

  (Ai || ki) && (Si = function Si(t) {
    var e,
        r,
        n,
        i,
        o = this;
    return ki && (r = new RegExp("^" + o.source + "$(?!\\s)", wi.call(o))), Ai && (e = o.lastIndex), n = Oi.call(o, t), Ai && n && (o.lastIndex = o.global ? n.index + n[0].length : e), ki && n && n.length > 1 && _i.call(n[0], r, function () {
      for (i = 1; i < arguments.length - 2; i++) {
        void 0 === arguments[i] && (n[i] = void 0);
      }
    }), n;
  });
  var Li = Si;
  At({
    target: "RegExp",
    proto: !0,
    forced: /./.exec !== Li
  }, {
    exec: Li
  });

  var Mi = zt("species"),
      Ti = !c(function () {
    var t = /./;
    return t.exec = function () {
      var t = [];
      return t.groups = {
        a: "7"
      }, t;
    }, "7" !== "".replace(t, "$<a>");
  }),
      ji = !c(function () {
    var t = /(?:)/,
        e = t.exec;

    t.exec = function () {
      return e.apply(this, arguments);
    };

    var r = "ab".split(t);
    return 2 !== r.length || "a" !== r[0] || "b" !== r[1];
  }),
      Ri = function Ri(t, e, r, n) {
    var i = zt(t),
        o = !c(function () {
      var e = {};
      return e[i] = function () {
        return 7;
      }, 7 != ""[t](e);
    }),
        s = o && !c(function () {
      var e = !1,
          r = /a/;
      return r.exec = function () {
        return e = !0, null;
      }, "split" === t && (r.constructor = {}, r.constructor[Mi] = function () {
        return r;
      }), r[i](""), !e;
    });

    if (!o || !s || "replace" === t && !Ti || "split" === t && !ji) {
      var a = /./[i],
          l = r(i, ""[t], function (t, e, r, n, i) {
        return e.exec === Li ? o && !i ? {
          done: !0,
          value: a.call(e, r, n)
        } : {
          done: !0,
          value: t.call(r, e, n)
        } : {
          done: !1
        };
      }),
          u = l[0],
          f = l[1];
      J(String.prototype, t, u), J(RegExp.prototype, i, 2 == e ? function (t, e) {
        return f.call(t, this, e);
      } : function (t) {
        return f.call(t, this);
      }), n && W(RegExp.prototype[i], "sham", !0);
    }
  },
      Wi = Ue.charAt,
      zi = function zi(t, e, r) {
    return e + (r ? Wi(t, e).length : 1);
  },
      Ci = function Ci(t, e) {
    var r = t.exec;

    if ("function" == typeof r) {
      var n = r.call(t, e);
      if ("object" != typeof n) throw TypeError("RegExp exec method returned something other than an Object or null");
      return n;
    }

    if ("RegExp" !== v(t)) throw TypeError("RegExp#exec called on incompatible receiver");
    return Li.call(t, e);
  };

  Ri("match", 1, function (t, e, r) {
    return [function (e) {
      var r = b(this),
          n = null == e ? void 0 : e[t];
      return void 0 !== n ? n.call(e, r) : new RegExp(e)[t](String(r));
    }, function (t) {
      var n = r(e, t, this);
      if (n.done) return n.value;
      var i = T(t),
          o = String(this);
      if (!i.global) return Ci(i, o);
      var s = i.unicode;
      i.lastIndex = 0;

      for (var a, c = [], l = 0; null !== (a = Ci(i, o));) {
        var u = String(a[0]);
        c[l] = u, "" === u && (i.lastIndex = zi(o, st(i.lastIndex), s)), l++;
      }

      return 0 === l ? null : c;
    }];
  });
  var Ni = Math.max,
      Ii = Math.min,
      Di = Math.floor,
      Pi = /\$([$&'`]|\d\d?|<[^>]*>)/g,
      Vi = /\$([$&'`]|\d\d?)/g;
  Ri("replace", 2, function (t, e, r) {
    return [function (r, n) {
      var i = b(this),
          o = null == r ? void 0 : r[t];
      return void 0 !== o ? o.call(r, i, n) : e.call(String(i), r, n);
    }, function (t, i) {
      var o = r(e, t, this, i);
      if (o.done) return o.value;
      var s = T(t),
          a = String(this),
          c = "function" == typeof i;
      c || (i = String(i));
      var l = s.global;

      if (l) {
        var u = s.unicode;
        s.lastIndex = 0;
      }

      for (var f = [];;) {
        var h = Ci(s, a);
        if (null === h) break;
        if (f.push(h), !l) break;
        "" === String(h[0]) && (s.lastIndex = zi(a, st(s.lastIndex), u));
      }

      for (var d, p = "", v = 0, g = 0; g < f.length; g++) {
        h = f[g];

        for (var y = String(h[0]), b = Ni(Ii(it(h.index), a.length), 0), m = [], x = 1; x < h.length; x++) {
          m.push(void 0 === (d = h[x]) ? d : String(d));
        }

        var E = h.groups;

        if (c) {
          var w = [y].concat(m, b, a);
          void 0 !== E && w.push(E);
          var O = String(i.apply(void 0, w));
        } else O = n(y, a, b, m, E, i);

        b >= v && (p += a.slice(v, b) + O, v = b + y.length);
      }

      return p + a.slice(v);
    }];

    function n(t, r, n, i, o, s) {
      var a = n + t.length,
          c = i.length,
          l = Vi;
      return void 0 !== o && (o = Mt(o), l = Pi), e.call(s, l, function (e, s) {
        var l;

        switch (s.charAt(0)) {
          case "$":
            return "$";

          case "&":
            return t;

          case "`":
            return r.slice(0, n);

          case "'":
            return r.slice(a);

          case "<":
            l = o[s.slice(1, -1)];
            break;

          default:
            var u = +s;
            if (0 === u) return e;

            if (u > c) {
              var f = Di(u / 10);
              return 0 === f ? e : f <= c ? void 0 === i[f - 1] ? s.charAt(1) : i[f - 1] + s.charAt(1) : e;
            }

            l = i[u - 1];
        }

        return void 0 === l ? "" : l;
      });
    }
  });

  var Fi = function Fi(t) {
    return Array.prototype.reduce.call(t, function (t, e) {
      var r = e.name.match(/data-simplebar-(.+)/);

      if (r) {
        var n = r[1].replace(/\W+(.)/g, function (t, e) {
          return e.toUpperCase();
        });

        switch (e.value) {
          case "true":
            t[n] = !0;
            break;

          case "false":
            t[n] = !1;
            break;

          case void 0:
            t[n] = !0;
            break;

          default:
            t[n] = e.value;
        }
      }

      return t;
    }, {});
  };

  function Bi(t) {
    return t && t.ownerDocument && t.ownerDocument.defaultView ? t.ownerDocument.defaultView : window;
  }

  function Hi(t) {
    return t && t.ownerDocument ? t.ownerDocument : document;
  }

  var qi = null,
      $i = null;

  function Xi(t) {
    if (null === qi) {
      var e = Hi(t);
      if (void 0 === e) return qi = 0;
      var r = e.body,
          n = e.createElement("div");
      n.classList.add("simplebar-hide-scrollbar"), r.appendChild(n);
      var i = n.getBoundingClientRect().right;
      r.removeChild(n), qi = i;
    }

    return qi;
  }

  Yt && window.addEventListener("resize", function () {
    $i !== window.devicePixelRatio && ($i = window.devicePixelRatio, qi = null);
  });

  var Yi = function () {
    function t(e, r) {
      var n = this;
      this.onScroll = function () {
        var t = Bi(n.el);
        n.scrollXTicking || (t.requestAnimationFrame(n.scrollX), n.scrollXTicking = !0), n.scrollYTicking || (t.requestAnimationFrame(n.scrollY), n.scrollYTicking = !0);
      }, this.scrollX = function () {
        n.axis.x.isOverflowing && (n.showScrollbar("x"), n.positionScrollbar("x")), n.scrollXTicking = !1;
      }, this.scrollY = function () {
        n.axis.y.isOverflowing && (n.showScrollbar("y"), n.positionScrollbar("y")), n.scrollYTicking = !1;
      }, this.onMouseEnter = function () {
        n.showScrollbar("x"), n.showScrollbar("y");
      }, this.onMouseMove = function (t) {
        n.mouseX = t.clientX, n.mouseY = t.clientY, (n.axis.x.isOverflowing || n.axis.x.forceVisible) && n.onMouseMoveForAxis("x"), (n.axis.y.isOverflowing || n.axis.y.forceVisible) && n.onMouseMoveForAxis("y");
      }, this.onMouseLeave = function () {
        n.onMouseMove.cancel(), (n.axis.x.isOverflowing || n.axis.x.forceVisible) && n.onMouseLeaveForAxis("x"), (n.axis.y.isOverflowing || n.axis.y.forceVisible) && n.onMouseLeaveForAxis("y"), n.mouseX = -1, n.mouseY = -1;
      }, this.onWindowResize = function () {
        n.scrollbarWidth = n.getScrollbarWidth(), n.hideNativeScrollbar();
      }, this.hideScrollbars = function () {
        n.axis.x.track.rect = n.axis.x.track.el.getBoundingClientRect(), n.axis.y.track.rect = n.axis.y.track.el.getBoundingClientRect(), n.isWithinBounds(n.axis.y.track.rect) || (n.axis.y.scrollbar.el.classList.remove(n.classNames.visible), n.axis.y.isVisible = !1), n.isWithinBounds(n.axis.x.track.rect) || (n.axis.x.scrollbar.el.classList.remove(n.classNames.visible), n.axis.x.isVisible = !1);
      }, this.onPointerEvent = function (t) {
        var e, r;
        n.axis.x.track.rect = n.axis.x.track.el.getBoundingClientRect(), n.axis.y.track.rect = n.axis.y.track.el.getBoundingClientRect(), (n.axis.x.isOverflowing || n.axis.x.forceVisible) && (e = n.isWithinBounds(n.axis.x.track.rect)), (n.axis.y.isOverflowing || n.axis.y.forceVisible) && (r = n.isWithinBounds(n.axis.y.track.rect)), (e || r) && (t.preventDefault(), t.stopPropagation(), "mousedown" === t.type && (e && (n.axis.x.scrollbar.rect = n.axis.x.scrollbar.el.getBoundingClientRect(), n.isWithinBounds(n.axis.x.scrollbar.rect) ? n.onDragStart(t, "x") : n.onTrackClick(t, "x")), r && (n.axis.y.scrollbar.rect = n.axis.y.scrollbar.el.getBoundingClientRect(), n.isWithinBounds(n.axis.y.scrollbar.rect) ? n.onDragStart(t, "y") : n.onTrackClick(t, "y"))));
      }, this.drag = function (e) {
        var r = n.axis[n.draggedAxis].track,
            i = r.rect[n.axis[n.draggedAxis].sizeAttr],
            o = n.axis[n.draggedAxis].scrollbar,
            s = n.contentWrapperEl[n.axis[n.draggedAxis].scrollSizeAttr],
            a = parseInt(n.elStyles[n.axis[n.draggedAxis].sizeAttr], 10);
        e.preventDefault(), e.stopPropagation();
        var c = (("y" === n.draggedAxis ? e.pageY : e.pageX) - r.rect[n.axis[n.draggedAxis].offsetAttr] - n.axis[n.draggedAxis].dragOffset) / (i - o.size) * (s - a);
        "x" === n.draggedAxis && (c = n.isRtl && t.getRtlHelpers().isRtlScrollbarInverted ? c - (i + o.size) : c, c = n.isRtl && t.getRtlHelpers().isRtlScrollingInverted ? -c : c), n.contentWrapperEl[n.axis[n.draggedAxis].scrollOffsetAttr] = c;
      }, this.onEndDrag = function (t) {
        var e = Hi(n.el),
            r = Bi(n.el);
        t.preventDefault(), t.stopPropagation(), n.el.classList.remove(n.classNames.dragging), e.removeEventListener("mousemove", n.drag, !0), e.removeEventListener("mouseup", n.onEndDrag, !0), n.removePreventClickId = r.setTimeout(function () {
          e.removeEventListener("click", n.preventClick, !0), e.removeEventListener("dblclick", n.preventClick, !0), n.removePreventClickId = null;
        });
      }, this.preventClick = function (t) {
        t.preventDefault(), t.stopPropagation();
      }, this.el = e, this.minScrollbarWidth = 20, this.options = Object.assign({}, t.defaultOptions, {}, r), this.classNames = Object.assign({}, t.defaultOptions.classNames, {}, this.options.classNames), this.axis = {
        x: {
          scrollOffsetAttr: "scrollLeft",
          sizeAttr: "width",
          scrollSizeAttr: "scrollWidth",
          offsetSizeAttr: "offsetWidth",
          offsetAttr: "left",
          overflowAttr: "overflowX",
          dragOffset: 0,
          isOverflowing: !0,
          isVisible: !1,
          forceVisible: !1,
          track: {},
          scrollbar: {}
        },
        y: {
          scrollOffsetAttr: "scrollTop",
          sizeAttr: "height",
          scrollSizeAttr: "scrollHeight",
          offsetSizeAttr: "offsetHeight",
          offsetAttr: "top",
          overflowAttr: "overflowY",
          dragOffset: 0,
          isOverflowing: !0,
          isVisible: !1,
          forceVisible: !1,
          track: {},
          scrollbar: {}
        }
      }, this.removePreventClickId = null, t.instances.has(this.el) || (this.recalculate = Gr(this.recalculate.bind(this), 64), this.onMouseMove = Gr(this.onMouseMove.bind(this), 64), this.hideScrollbars = dn(this.hideScrollbars.bind(this), this.options.timeout), this.onWindowResize = dn(this.onWindowResize.bind(this), 64, {
        leading: !0
      }), t.getRtlHelpers = Hn(t.getRtlHelpers), this.init());
    }

    t.getRtlHelpers = function () {
      var e = document.createElement("div");
      e.innerHTML = '<div class="hs-dummy-scrollbar-size"><div style="height: 200%; width: 200%; margin: 10px 0;"></div></div>';
      var r = e.firstElementChild;
      document.body.appendChild(r);
      var n = r.firstElementChild;
      r.scrollLeft = 0;
      var i = t.getOffset(r),
          o = t.getOffset(n);
      r.scrollLeft = 999;
      var s = t.getOffset(n);
      return {
        isRtlScrollingInverted: i.left !== o.left && o.left - s.left != 0,
        isRtlScrollbarInverted: i.left !== o.left
      };
    }, t.getOffset = function (t) {
      var e = t.getBoundingClientRect(),
          r = Hi(t),
          n = Bi(t);
      return {
        top: e.top + (n.pageYOffset || r.documentElement.scrollTop),
        left: e.left + (n.pageXOffset || r.documentElement.scrollLeft)
      };
    };
    var e = t.prototype;
    return e.init = function () {
      t.instances.set(this.el, this), Yt && (this.initDOM(), this.scrollbarWidth = this.getScrollbarWidth(), this.recalculate(), this.initListeners());
    }, e.initDOM = function () {
      var t = this;
      if (Array.prototype.filter.call(this.el.children, function (e) {
        return e.classList.contains(t.classNames.wrapper);
      }).length) this.wrapperEl = this.el.querySelector("." + this.classNames.wrapper), this.contentWrapperEl = this.options.scrollableNode || this.el.querySelector("." + this.classNames.contentWrapper), this.contentEl = this.options.contentNode || this.el.querySelector("." + this.classNames.contentEl), this.offsetEl = this.el.querySelector("." + this.classNames.offset), this.maskEl = this.el.querySelector("." + this.classNames.mask), this.placeholderEl = this.findChild(this.wrapperEl, "." + this.classNames.placeholder), this.heightAutoObserverWrapperEl = this.el.querySelector("." + this.classNames.heightAutoObserverWrapperEl), this.heightAutoObserverEl = this.el.querySelector("." + this.classNames.heightAutoObserverEl), this.axis.x.track.el = this.findChild(this.el, "." + this.classNames.track + "." + this.classNames.horizontal), this.axis.y.track.el = this.findChild(this.el, "." + this.classNames.track + "." + this.classNames.vertical);else {
        for (this.wrapperEl = document.createElement("div"), this.contentWrapperEl = document.createElement("div"), this.offsetEl = document.createElement("div"), this.maskEl = document.createElement("div"), this.contentEl = document.createElement("div"), this.placeholderEl = document.createElement("div"), this.heightAutoObserverWrapperEl = document.createElement("div"), this.heightAutoObserverEl = document.createElement("div"), this.wrapperEl.classList.add(this.classNames.wrapper), this.contentWrapperEl.classList.add(this.classNames.contentWrapper), this.offsetEl.classList.add(this.classNames.offset), this.maskEl.classList.add(this.classNames.mask), this.contentEl.classList.add(this.classNames.contentEl), this.placeholderEl.classList.add(this.classNames.placeholder), this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl), this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl); this.el.firstChild;) {
          this.contentEl.appendChild(this.el.firstChild);
        }

        this.contentWrapperEl.appendChild(this.contentEl), this.offsetEl.appendChild(this.contentWrapperEl), this.maskEl.appendChild(this.offsetEl), this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl), this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl), this.wrapperEl.appendChild(this.maskEl), this.wrapperEl.appendChild(this.placeholderEl), this.el.appendChild(this.wrapperEl);
      }

      if (!this.axis.x.track.el || !this.axis.y.track.el) {
        var e = document.createElement("div"),
            r = document.createElement("div");
        e.classList.add(this.classNames.track), r.classList.add(this.classNames.scrollbar), e.appendChild(r), this.axis.x.track.el = e.cloneNode(!0), this.axis.x.track.el.classList.add(this.classNames.horizontal), this.axis.y.track.el = e.cloneNode(!0), this.axis.y.track.el.classList.add(this.classNames.vertical), this.el.appendChild(this.axis.x.track.el), this.el.appendChild(this.axis.y.track.el);
      }

      this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector("." + this.classNames.scrollbar), this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector("." + this.classNames.scrollbar), this.options.autoHide || (this.axis.x.scrollbar.el.classList.add(this.classNames.visible), this.axis.y.scrollbar.el.classList.add(this.classNames.visible)), this.el.setAttribute("data-simplebar", "init");
    }, e.initListeners = function () {
      var t = this,
          e = Bi(this.el);
      this.options.autoHide && this.el.addEventListener("mouseenter", this.onMouseEnter), ["mousedown", "click", "dblclick"].forEach(function (e) {
        t.el.addEventListener(e, t.onPointerEvent, !0);
      }), ["touchstart", "touchend", "touchmove"].forEach(function (e) {
        t.el.addEventListener(e, t.onPointerEvent, {
          capture: !0,
          passive: !0
        });
      }), this.el.addEventListener("mousemove", this.onMouseMove), this.el.addEventListener("mouseleave", this.onMouseLeave), this.contentWrapperEl.addEventListener("scroll", this.onScroll), e.addEventListener("resize", this.onWindowResize);
      var r = !1,
          n = e.ResizeObserver || di;
      this.resizeObserver = new n(function () {
        r && t.recalculate();
      }), this.resizeObserver.observe(this.el), this.resizeObserver.observe(this.contentEl), e.requestAnimationFrame(function () {
        r = !0;
      }), this.mutationObserver = new e.MutationObserver(this.recalculate), this.mutationObserver.observe(this.contentEl, {
        childList: !0,
        subtree: !0,
        characterData: !0
      });
    }, e.recalculate = function () {
      var t = Bi(this.el);
      this.elStyles = t.getComputedStyle(this.el), this.isRtl = "rtl" === this.elStyles.direction;
      var e = this.heightAutoObserverEl.offsetHeight <= 1,
          r = this.heightAutoObserverEl.offsetWidth <= 1,
          n = this.contentEl.offsetWidth,
          i = this.contentWrapperEl.offsetWidth,
          o = this.elStyles.overflowX,
          s = this.elStyles.overflowY;
      this.contentEl.style.padding = this.elStyles.paddingTop + " " + this.elStyles.paddingRight + " " + this.elStyles.paddingBottom + " " + this.elStyles.paddingLeft, this.wrapperEl.style.margin = "-" + this.elStyles.paddingTop + " -" + this.elStyles.paddingRight + " -" + this.elStyles.paddingBottom + " -" + this.elStyles.paddingLeft;
      var a = this.contentEl.scrollHeight,
          c = this.contentEl.scrollWidth;
      this.contentWrapperEl.style.height = e ? "auto" : "100%", this.placeholderEl.style.width = r ? n + "px" : "auto", this.placeholderEl.style.height = a + "px";
      var l = this.contentWrapperEl.offsetHeight;
      this.axis.x.isOverflowing = c > n, this.axis.y.isOverflowing = a > l, this.axis.x.isOverflowing = "hidden" !== o && this.axis.x.isOverflowing, this.axis.y.isOverflowing = "hidden" !== s && this.axis.y.isOverflowing, this.axis.x.forceVisible = "x" === this.options.forceVisible || !0 === this.options.forceVisible, this.axis.y.forceVisible = "y" === this.options.forceVisible || !0 === this.options.forceVisible, this.hideNativeScrollbar();
      var u = this.axis.x.isOverflowing ? this.scrollbarWidth : 0,
          f = this.axis.y.isOverflowing ? this.scrollbarWidth : 0;
      this.axis.x.isOverflowing = this.axis.x.isOverflowing && c > i - f, this.axis.y.isOverflowing = this.axis.y.isOverflowing && a > l - u, this.axis.x.scrollbar.size = this.getScrollbarSize("x"), this.axis.y.scrollbar.size = this.getScrollbarSize("y"), this.axis.x.scrollbar.el.style.width = this.axis.x.scrollbar.size + "px", this.axis.y.scrollbar.el.style.height = this.axis.y.scrollbar.size + "px", this.positionScrollbar("x"), this.positionScrollbar("y"), this.toggleTrackVisibility("x"), this.toggleTrackVisibility("y");
    }, e.getScrollbarSize = function (t) {
      if (void 0 === t && (t = "y"), !this.axis[t].isOverflowing) return 0;
      var e,
          r = this.contentEl[this.axis[t].scrollSizeAttr],
          n = this.axis[t].track.el[this.axis[t].offsetSizeAttr],
          i = n / r;
      return e = Math.max(~~(i * n), this.options.scrollbarMinSize), this.options.scrollbarMaxSize && (e = Math.min(e, this.options.scrollbarMaxSize)), e;
    }, e.positionScrollbar = function (e) {
      if (void 0 === e && (e = "y"), this.axis[e].isOverflowing) {
        var r = this.contentWrapperEl[this.axis[e].scrollSizeAttr],
            n = this.axis[e].track.el[this.axis[e].offsetSizeAttr],
            i = parseInt(this.elStyles[this.axis[e].sizeAttr], 10),
            o = this.axis[e].scrollbar,
            s = this.contentWrapperEl[this.axis[e].scrollOffsetAttr],
            a = (s = "x" === e && this.isRtl && t.getRtlHelpers().isRtlScrollingInverted ? -s : s) / (r - i),
            c = ~~((n - o.size) * a);
        c = "x" === e && this.isRtl && t.getRtlHelpers().isRtlScrollbarInverted ? c + (n - o.size) : c, o.el.style.transform = "x" === e ? "translate3d(" + c + "px, 0, 0)" : "translate3d(0, " + c + "px, 0)";
      }
    }, e.toggleTrackVisibility = function (t) {
      void 0 === t && (t = "y");
      var e = this.axis[t].track.el,
          r = this.axis[t].scrollbar.el;
      this.axis[t].isOverflowing || this.axis[t].forceVisible ? (e.style.visibility = "visible", this.contentWrapperEl.style[this.axis[t].overflowAttr] = "scroll") : (e.style.visibility = "hidden", this.contentWrapperEl.style[this.axis[t].overflowAttr] = "hidden"), this.axis[t].isOverflowing ? r.style.display = "block" : r.style.display = "none";
    }, e.hideNativeScrollbar = function () {
      this.offsetEl.style[this.isRtl ? "left" : "right"] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? "-" + this.scrollbarWidth + "px" : 0, this.offsetEl.style.bottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? "-" + this.scrollbarWidth + "px" : 0;
    }, e.onMouseMoveForAxis = function (t) {
      void 0 === t && (t = "y"), this.axis[t].track.rect = this.axis[t].track.el.getBoundingClientRect(), this.axis[t].scrollbar.rect = this.axis[t].scrollbar.el.getBoundingClientRect(), this.isWithinBounds(this.axis[t].scrollbar.rect) ? this.axis[t].scrollbar.el.classList.add(this.classNames.hover) : this.axis[t].scrollbar.el.classList.remove(this.classNames.hover), this.isWithinBounds(this.axis[t].track.rect) ? (this.showScrollbar(t), this.axis[t].track.el.classList.add(this.classNames.hover)) : this.axis[t].track.el.classList.remove(this.classNames.hover);
    }, e.onMouseLeaveForAxis = function (t) {
      void 0 === t && (t = "y"), this.axis[t].track.el.classList.remove(this.classNames.hover), this.axis[t].scrollbar.el.classList.remove(this.classNames.hover);
    }, e.showScrollbar = function (t) {
      void 0 === t && (t = "y");
      var e = this.axis[t].scrollbar.el;
      this.axis[t].isVisible || (e.classList.add(this.classNames.visible), this.axis[t].isVisible = !0), this.options.autoHide && this.hideScrollbars();
    }, e.onDragStart = function (t, e) {
      void 0 === e && (e = "y");
      var r = Hi(this.el),
          n = Bi(this.el),
          i = this.axis[e].scrollbar,
          o = "y" === e ? t.pageY : t.pageX;
      this.axis[e].dragOffset = o - i.rect[this.axis[e].offsetAttr], this.draggedAxis = e, this.el.classList.add(this.classNames.dragging), r.addEventListener("mousemove", this.drag, !0), r.addEventListener("mouseup", this.onEndDrag, !0), null === this.removePreventClickId ? (r.addEventListener("click", this.preventClick, !0), r.addEventListener("dblclick", this.preventClick, !0)) : (n.clearTimeout(this.removePreventClickId), this.removePreventClickId = null);
    }, e.onTrackClick = function (t, e) {
      var r = this;

      if (void 0 === e && (e = "y"), this.options.clickOnTrack) {
        var n = Bi(this.el);
        this.axis[e].scrollbar.rect = this.axis[e].scrollbar.el.getBoundingClientRect();
        var i = this.axis[e].scrollbar.rect[this.axis[e].offsetAttr],
            o = parseInt(this.elStyles[this.axis[e].sizeAttr], 10),
            s = this.contentWrapperEl[this.axis[e].scrollOffsetAttr],
            a = ("y" === e ? this.mouseY - i : this.mouseX - i) < 0 ? -1 : 1,
            c = -1 === a ? s - o : s + o;
        !function t() {
          var i, o;
          -1 === a ? s > c && (s -= r.options.clickOnTrackSpeed, r.contentWrapperEl.scrollTo(((i = {})[r.axis[e].offsetAttr] = s, i)), n.requestAnimationFrame(t)) : s < c && (s += r.options.clickOnTrackSpeed, r.contentWrapperEl.scrollTo(((o = {})[r.axis[e].offsetAttr] = s, o)), n.requestAnimationFrame(t));
        }();
      }
    }, e.getContentElement = function () {
      return this.contentEl;
    }, e.getScrollElement = function () {
      return this.contentWrapperEl;
    }, e.getScrollbarWidth = function () {
      try {
        return "none" === getComputedStyle(this.contentWrapperEl, "::-webkit-scrollbar").display || "scrollbarWidth" in document.documentElement.style || "-ms-overflow-style" in document.documentElement.style ? 0 : Xi(this.el);
      } catch (t) {
        return Xi(this.el);
      }
    }, e.removeListeners = function () {
      var t = this,
          e = Bi(this.el);
      this.options.autoHide && this.el.removeEventListener("mouseenter", this.onMouseEnter), ["mousedown", "click", "dblclick"].forEach(function (e) {
        t.el.removeEventListener(e, t.onPointerEvent, !0);
      }), ["touchstart", "touchend", "touchmove"].forEach(function (e) {
        t.el.removeEventListener(e, t.onPointerEvent, {
          capture: !0,
          passive: !0
        });
      }), this.el.removeEventListener("mousemove", this.onMouseMove), this.el.removeEventListener("mouseleave", this.onMouseLeave), this.contentWrapperEl && this.contentWrapperEl.removeEventListener("scroll", this.onScroll), e.removeEventListener("resize", this.onWindowResize), this.mutationObserver && this.mutationObserver.disconnect(), this.resizeObserver && this.resizeObserver.disconnect(), this.recalculate.cancel(), this.onMouseMove.cancel(), this.hideScrollbars.cancel(), this.onWindowResize.cancel();
    }, e.unMount = function () {
      this.removeListeners(), t.instances["delete"](this.el);
    }, e.isWithinBounds = function (t) {
      return this.mouseX >= t.left && this.mouseX <= t.left + t.width && this.mouseY >= t.top && this.mouseY <= t.top + t.height;
    }, e.findChild = function (t, e) {
      var r = t.matches || t.webkitMatchesSelector || t.mozMatchesSelector || t.msMatchesSelector;
      return Array.prototype.filter.call(t.children, function (t) {
        return r.call(t, e);
      })[0];
    }, t;
  }();

  return Yi.defaultOptions = {
    autoHide: !0,
    forceVisible: !1,
    clickOnTrack: !0,
    clickOnTrackSpeed: 40,
    classNames: {
      contentEl: "simplebar-content",
      contentWrapper: "simplebar-content-wrapper",
      offset: "simplebar-offset",
      mask: "simplebar-mask",
      wrapper: "simplebar-wrapper",
      placeholder: "simplebar-placeholder",
      scrollbar: "simplebar-scrollbar",
      track: "simplebar-track",
      heightAutoObserverWrapperEl: "simplebar-height-auto-observer-wrapper",
      heightAutoObserverEl: "simplebar-height-auto-observer",
      visible: "simplebar-visible",
      horizontal: "simplebar-horizontal",
      vertical: "simplebar-vertical",
      hover: "simplebar-hover",
      dragging: "simplebar-dragging"
    },
    scrollbarMinSize: 25,
    scrollbarMaxSize: 0,
    timeout: 1e3
  }, Yi.instances = new WeakMap(), Yi.initDOMLoadedElements = function () {
    document.removeEventListener("DOMContentLoaded", this.initDOMLoadedElements), window.removeEventListener("load", this.initDOMLoadedElements), Array.prototype.forEach.call(document.querySelectorAll("[data-simplebar]"), function (t) {
      "init" === t.getAttribute("data-simplebar") || Yi.instances.has(t) || new Yi(t, Fi(t.attributes));
    });
  }, Yi.removeObserver = function () {
    this.globalObserver.disconnect();
  }, Yi.initHtmlApi = function () {
    this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this), "undefined" != typeof MutationObserver && (this.globalObserver = new MutationObserver(Yi.handleMutations), this.globalObserver.observe(document, {
      childList: !0,
      subtree: !0
    })), "complete" === document.readyState || "loading" !== document.readyState && !document.documentElement.doScroll ? window.setTimeout(this.initDOMLoadedElements) : (document.addEventListener("DOMContentLoaded", this.initDOMLoadedElements), window.addEventListener("load", this.initDOMLoadedElements));
  }, Yi.handleMutations = function (t) {
    t.forEach(function (t) {
      Array.prototype.forEach.call(t.addedNodes, function (t) {
        1 === t.nodeType && (t.hasAttribute("data-simplebar") ? !Yi.instances.has(t) && new Yi(t, Fi(t.attributes)) : Array.prototype.forEach.call(t.querySelectorAll("[data-simplebar]"), function (t) {
          "init" === t.getAttribute("data-simplebar") || Yi.instances.has(t) || new Yi(t, Fi(t.attributes));
        }));
      }), Array.prototype.forEach.call(t.removedNodes, function (t) {
        1 === t.nodeType && (t.hasAttribute('[data-simplebar="init"]') ? Yi.instances.has(t) && Yi.instances.get(t).unMount() : Array.prototype.forEach.call(t.querySelectorAll('[data-simplebar="init"]'), function (t) {
          Yi.instances.has(t) && Yi.instances.get(t).unMount();
        }));
      });
    });
  }, Yi.getOptions = Fi, Yt && Yi.initHtmlApi(), Yi;
}); //  Smooth Scroll (polyfills)

/*! smooth-scroll v16.1.3 | (c) 2020 Chris Ferdinandi | MIT License | http://github.com/cferdinandi/smooth-scroll */

window.Element && !Element.prototype.closest && (Element.prototype.closest = function (e) {
  var t,
      n = (this.document || this.ownerDocument).querySelectorAll(e),
      o = this;

  do {
    for (t = n.length; 0 <= --t && n.item(t) !== o;) {
      ;
    }
  } while (t < 0 && (o = o.parentElement));

  return o;
}), function () {
  if ("function" == typeof window.CustomEvent) return;

  function e(e, t) {
    t = t || {
      bubbles: !1,
      cancelable: !1,
      detail: void 0
    };
    var n = document.createEvent("CustomEvent");
    return n.initCustomEvent(e, t.bubbles, t.cancelable, t.detail), n;
  }

  e.prototype = window.Event.prototype, window.CustomEvent = e;
}(), function () {
  for (var r = 0, e = ["ms", "moz", "webkit", "o"], t = 0; t < e.length && !window.requestAnimationFrame; ++t) {
    window.requestAnimationFrame = window[e[t] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[e[t] + "CancelAnimationFrame"] || window[e[t] + "CancelRequestAnimationFrame"];
  }

  window.requestAnimationFrame || (window.requestAnimationFrame = function (e, t) {
    var n = new Date().getTime(),
        o = Math.max(0, 16 - (n - r)),
        a = window.setTimeout(function () {
      e(n + o);
    }, o);
    return r = n + o, a;
  }), window.cancelAnimationFrame || (window.cancelAnimationFrame = function (e) {
    clearTimeout(e);
  });
}(), function (e, t) {
  "function" == typeof define && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js") ? define([], function () {
    return t(e);
  }) : "object" == typeof exports ? module.exports = t(e) : e.SmoothScroll = t(e);
}("undefined" != typeof global ? global : "undefined" != typeof window ? window : undefined, function (M) {
  "use strict";

  var q = {
    ignore: "[data-scroll-ignore]",
    header: null,
    topOnEmptyHash: !0,
    speed: 500,
    speedAsDuration: !1,
    durationMax: null,
    durationMin: null,
    clip: !0,
    offset: 0,
    easing: "easeInOutCubic",
    customEasing: null,
    updateURL: !0,
    popstate: !0,
    emitEvents: !0
  },
      I = function I() {
    var n = {};
    return Array.prototype.forEach.call(arguments, function (e) {
      for (var t in e) {
        if (!e.hasOwnProperty(t)) return;
        n[t] = e[t];
      }
    }), n;
  },
      r = function r(e) {
    "#" === e.charAt(0) && (e = e.substr(1));

    for (var t, n = String(e), o = n.length, a = -1, r = "", i = n.charCodeAt(0); ++a < o;) {
      if (0 === (t = n.charCodeAt(a))) throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      1 <= t && t <= 31 || 127 == t || 0 === a && 48 <= t && t <= 57 || 1 === a && 48 <= t && t <= 57 && 45 === i ? r += "\\" + t.toString(16) + " " : r += 128 <= t || 45 === t || 95 === t || 48 <= t && t <= 57 || 65 <= t && t <= 90 || 97 <= t && t <= 122 ? n.charAt(a) : "\\" + n.charAt(a);
    }

    return "#" + r;
  },
      F = function F() {
    return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight);
  },
      L = function L(e) {
    return e ? (t = e, parseInt(M.getComputedStyle(t).height, 10) + e.offsetTop) : 0;
    var t;
  },
      x = function x(e, t, n) {
    0 === e && document.body.focus(), n || (e.focus(), document.activeElement !== e && (e.setAttribute("tabindex", "-1"), e.focus(), e.style.outline = "none"), M.scrollTo(0, t));
  },
      H = function H(e, t, n, o) {
    if (t.emitEvents && "function" == typeof M.CustomEvent) {
      var a = new CustomEvent(e, {
        bubbles: !0,
        detail: {
          anchor: n,
          toggle: o
        }
      });
      document.dispatchEvent(a);
    }
  };

  return function (o, e) {
    var b,
        a,
        A,
        O,
        C = {};
    C.cancelScroll = function (e) {
      cancelAnimationFrame(O), O = null, e || H("scrollCancel", b);
    }, C.animateScroll = function (a, r, e) {
      C.cancelScroll();
      var i = I(b || q, e || {}),
          c = "[object Number]" === Object.prototype.toString.call(a),
          t = c || !a.tagName ? null : a;

      if (c || t) {
        var s = M.pageYOffset;
        i.header && !A && (A = document.querySelector(i.header));

        var n,
            o,
            u,
            l,
            m,
            d,
            f,
            h,
            p = L(A),
            g = c ? a : function (e, t, n, o) {
          var a = 0;
          if (e.offsetParent) for (; a += e.offsetTop, e = e.offsetParent;) {
            ;
          }
          return a = Math.max(a - t - n, 0), o && (a = Math.min(a, F() - M.innerHeight)), a;
        }(t, p, parseInt("function" == typeof i.offset ? i.offset(a, r) : i.offset, 10), i.clip),
            y = g - s,
            v = F(),
            w = 0,
            S = (n = y, u = (o = i).speedAsDuration ? o.speed : Math.abs(n / 1e3 * o.speed), o.durationMax && u > o.durationMax ? o.durationMax : o.durationMin && u < o.durationMin ? o.durationMin : parseInt(u, 10)),
            E = function E(e) {
          var t, n, o;
          l || (l = e), w += e - l, d = s + y * (n = m = 1 < (m = 0 === S ? 0 : w / S) ? 1 : m, "easeInQuad" === (t = i).easing && (o = n * n), "easeOutQuad" === t.easing && (o = n * (2 - n)), "easeInOutQuad" === t.easing && (o = n < 0.5 ? 2 * n * n : (4 - 2 * n) * n - 1), "easeInCubic" === t.easing && (o = n * n * n), "easeOutCubic" === t.easing && (o = --n * n * n + 1), "easeInOutCubic" === t.easing && (o = n < 0.5 ? 4 * n * n * n : (n - 1) * (2 * n - 2) * (2 * n - 2) + 1), "easeInQuart" === t.easing && (o = n * n * n * n), "easeOutQuart" === t.easing && (o = 1 - --n * n * n * n), "easeInOutQuart" === t.easing && (o = n < 0.5 ? 8 * n * n * n * n : 1 - 8 * --n * n * n * n), "easeInQuint" === t.easing && (o = n * n * n * n * n), "easeOutQuint" === t.easing && (o = 1 + --n * n * n * n * n), "easeInOutQuint" === t.easing && (o = n < 0.5 ? 16 * n * n * n * n * n : 1 + 16 * --n * n * n * n * n), t.customEasing && (o = t.customEasing(n)), o || n), M.scrollTo(0, Math.floor(d)), function (e, t) {
            var n = M.pageYOffset;
            if (e == t || n == t || (s < t && M.innerHeight + n) >= v) return C.cancelScroll(!0), x(a, t, c), H("scrollStop", i, a, r), !(O = l = null);
          }(d, g) || (O = M.requestAnimationFrame(E), l = e);
        };

        0 === M.pageYOffset && M.scrollTo(0, 0), f = a, h = i, c || history.pushState && h.updateURL && history.pushState({
          smoothScroll: JSON.stringify(h),
          anchor: f.id
        }, document.title, f === document.documentElement ? "#top" : "#" + f.id), "matchMedia" in M && M.matchMedia("(prefers-reduced-motion)").matches ? x(a, Math.floor(g), !1) : (H("scrollStart", i, a, r), C.cancelScroll(!0), M.requestAnimationFrame(E));
      }
    };

    var t = function t(e) {
      if (!e.defaultPrevented && !(0 !== e.button || e.metaKey || e.ctrlKey || e.shiftKey) && "closest" in e.target && (a = e.target.closest(o)) && "a" === a.tagName.toLowerCase() && !e.target.closest(b.ignore) && a.hostname === M.location.hostname && a.pathname === M.location.pathname && /#/.test(a.href)) {
        var t, n;

        try {
          t = r(decodeURIComponent(a.hash));
        } catch (e) {
          t = r(a.hash);
        }

        if ("#" === t) {
          if (!b.topOnEmptyHash) return;
          n = document.documentElement;
        } else n = document.querySelector(t);

        (n = n || "#top" !== t ? n : document.documentElement) && (e.preventDefault(), function (e) {
          if (history.replaceState && e.updateURL && !history.state) {
            var t = M.location.hash;
            t = t || "", history.replaceState({
              smoothScroll: JSON.stringify(e),
              anchor: t || M.pageYOffset
            }, document.title, t || M.location.href);
          }
        }(b), C.animateScroll(n, a));
      }
    },
        n = function n(e) {
      if (null !== history.state && history.state.smoothScroll && history.state.smoothScroll === JSON.stringify(b)) {
        var t = history.state.anchor;
        "string" == typeof t && t && !(t = document.querySelector(r(history.state.anchor))) || C.animateScroll(t, null, {
          updateURL: !1
        });
      }
    };

    C.destroy = function () {
      b && (document.removeEventListener("click", t, !1), M.removeEventListener("popstate", n, !1), C.cancelScroll(), O = A = a = b = null);
    };

    return function () {
      if (!("querySelector" in document && "addEventListener" in M && "requestAnimationFrame" in M && "closest" in M.Element.prototype)) throw "Smooth Scroll: This browser does not support the required JavaScript methods and browser APIs.";
      C.destroy(), b = I(q, e || {}), A = b.header ? document.querySelector(b.header) : null, document.addEventListener("click", t, !1), b.updateURL && b.popstate && M.addEventListener("popstate", n, !1);
    }(), C;
  };
}); // Tiny Slider

var tns = function () {
  var t = window,
      Ai = t.requestAnimationFrame || t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || t.msRequestAnimationFrame || function (t) {
    return setTimeout(t, 16);
  },
      e = window,
      Ni = e.cancelAnimationFrame || e.mozCancelAnimationFrame || function (t) {
    clearTimeout(t);
  };

  function Li() {
    for (var t, e, n, i = arguments[0] || {}, a = 1, r = arguments.length; a < r; a++) {
      if (null !== (t = arguments[a])) for (e in t) {
        i !== (n = t[e]) && void 0 !== n && (i[e] = n);
      }
    }

    return i;
  }

  function Bi(t) {
    return 0 <= ["true", "false"].indexOf(t) ? JSON.parse(t) : t;
  }

  function Si(t, e, n, i) {
    if (i) try {
      t.setItem(e, n);
    } catch (t) {}
    return n;
  }

  function Hi() {
    var t = document,
        e = t.body;
    return e || ((e = t.createElement("body")).fake = !0), e;
  }

  var n = document.documentElement;

  function Oi(t) {
    var e = "";
    return t.fake && (e = n.style.overflow, t.style.background = "", t.style.overflow = n.style.overflow = "hidden", n.appendChild(t)), e;
  }

  function Di(t, e) {
    t.fake && (t.remove(), n.style.overflow = e, n.offsetHeight);
  }

  function ki(t, e, n, i) {
    "insertRule" in t ? t.insertRule(e + "{" + n + "}", i) : t.addRule(e, n, i);
  }

  function Ri(t) {
    return ("insertRule" in t ? t.cssRules : t.rules).length;
  }

  function Ii(t, e, n) {
    for (var i = 0, a = t.length; i < a; i++) {
      e.call(n, t[i], i);
    }
  }

  var i = ("classList" in document.createElement("_")),
      Pi = i ? function (t, e) {
    return t.classList.contains(e);
  } : function (t, e) {
    return 0 <= t.className.indexOf(e);
  },
      zi = i ? function (t, e) {
    Pi(t, e) || t.classList.add(e);
  } : function (t, e) {
    Pi(t, e) || (t.className += " " + e);
  },
      Wi = i ? function (t, e) {
    Pi(t, e) && t.classList.remove(e);
  } : function (t, e) {
    Pi(t, e) && (t.className = t.className.replace(e, ""));
  };

  function qi(t, e) {
    return t.hasAttribute(e);
  }

  function Fi(t, e) {
    return t.getAttribute(e);
  }

  function r(t) {
    return void 0 !== t.item;
  }

  function ji(t, e) {
    if (t = r(t) || t instanceof Array ? t : [t], "[object Object]" === Object.prototype.toString.call(e)) for (var n = t.length; n--;) {
      for (var i in e) {
        t[n].setAttribute(i, e[i]);
      }
    }
  }

  function Vi(t, e) {
    t = r(t) || t instanceof Array ? t : [t];

    for (var n = (e = e instanceof Array ? e : [e]).length, i = t.length; i--;) {
      for (var a = n; a--;) {
        t[i].removeAttribute(e[a]);
      }
    }
  }

  function Gi(t) {
    for (var e = [], n = 0, i = t.length; n < i; n++) {
      e.push(t[n]);
    }

    return e;
  }

  function Qi(t, e) {
    "none" !== t.style.display && (t.style.display = "none");
  }

  function Xi(t, e) {
    "none" === t.style.display && (t.style.display = "");
  }

  function Yi(t) {
    return "none" !== window.getComputedStyle(t).display;
  }

  function Ki(e) {
    if ("string" == typeof e) {
      var n = [e],
          i = e.charAt(0).toUpperCase() + e.substr(1);
      ["Webkit", "Moz", "ms", "O"].forEach(function (t) {
        "ms" === t && "transform" !== e || n.push(t + i);
      }), e = n;
    }

    for (var t = document.createElement("fakeelement"), a = (e.length, 0); a < e.length; a++) {
      var r = e[a];
      if (void 0 !== t.style[r]) return r;
    }

    return !1;
  }

  function Ji(t, e) {
    var n = !1;
    return /^Webkit/.test(t) ? n = "webkit" + e + "End" : /^O/.test(t) ? n = "o" + e + "End" : t && (n = e.toLowerCase() + "end"), n;
  }

  var a = !1;

  try {
    var o = Object.defineProperty({}, "passive", {
      get: function get() {
        a = !0;
      }
    });
    window.addEventListener("test", null, o);
  } catch (t) {}

  var u = !!a && {
    passive: !0
  };

  function Ui(t, e, n) {
    for (var i in e) {
      var a = 0 <= ["touchstart", "touchmove"].indexOf(i) && !n && u;
      t.addEventListener(i, e[i], a);
    }
  }

  function _i(t, e) {
    for (var n in e) {
      var i = 0 <= ["touchstart", "touchmove"].indexOf(n) && u;
      t.removeEventListener(n, e[n], i);
    }
  }

  function Zi() {
    return {
      topics: {},
      on: function on(t, e) {
        this.topics[t] = this.topics[t] || [], this.topics[t].push(e);
      },
      off: function off(t, e) {
        if (this.topics[t]) for (var n = 0; n < this.topics[t].length; n++) {
          if (this.topics[t][n] === e) {
            this.topics[t].splice(n, 1);
            break;
          }
        }
      },
      emit: function emit(e, n) {
        n.type = e, this.topics[e] && this.topics[e].forEach(function (t) {
          t(n, e);
        });
      }
    };
  }

  Object.keys || (Object.keys = function (t) {
    var e = [];

    for (var n in t) {
      Object.prototype.hasOwnProperty.call(t, n) && e.push(n);
    }

    return e;
  }), "remove" in Element.prototype || (Element.prototype.remove = function () {
    this.parentNode && this.parentNode.removeChild(this);
  });

  var $i = function $i(H) {
    H = Li({
      container: ".slider",
      mode: "carousel",
      axis: "horizontal",
      items: 1,
      gutter: 0,
      edgePadding: 0,
      fixedWidth: !1,
      autoWidth: !1,
      viewportMax: !1,
      slideBy: 1,
      center: !1,
      controls: !0,
      controlsPosition: "top",
      controlsText: ["prev", "next"],
      controlsContainer: !1,
      prevButton: !1,
      nextButton: !1,
      nav: !0,
      navPosition: "top",
      navContainer: !1,
      navAsThumbnails: !1,
      arrowKeys: !1,
      speed: 300,
      autoplay: !1,
      autoplayPosition: "top",
      autoplayTimeout: 5e3,
      autoplayDirection: "forward",
      autoplayText: ["start", "stop"],
      autoplayHoverPause: !1,
      autoplayButton: !1,
      autoplayButtonOutput: !0,
      autoplayResetOnVisibility: !0,
      animateIn: "tns-fadeIn",
      animateOut: "tns-fadeOut",
      animateNormal: "tns-normal",
      animateDelay: !1,
      loop: !0,
      rewind: !1,
      autoHeight: !1,
      responsive: !1,
      lazyload: !1,
      lazyloadSelector: ".tns-lazy-img",
      touch: !0,
      mouseDrag: !1,
      swipeAngle: 15,
      nested: !1,
      preventActionWhenRunning: !1,
      preventScrollOnTouch: !1,
      freezable: !0,
      onInit: !1,
      useLocalStorage: !0,
      nonce: !1
    }, H || {});
    var O = document,
        m = window,
        a = {
      ENTER: 13,
      SPACE: 32,
      LEFT: 37,
      RIGHT: 39
    },
        e = {},
        n = H.useLocalStorage;

    if (n) {
      var t = navigator.userAgent,
          i = new Date();

      try {
        (e = m.localStorage) ? (e.setItem(i, i), n = e.getItem(i) == i, e.removeItem(i)) : n = !1, n || (e = {});
      } catch (t) {
        n = !1;
      }

      n && (e.tnsApp && e.tnsApp !== t && ["tC", "tPL", "tMQ", "tTf", "t3D", "tTDu", "tTDe", "tADu", "tADe", "tTE", "tAE"].forEach(function (t) {
        e.removeItem(t);
      }), localStorage.tnsApp = t);
    }

    var y = e.tC ? Bi(e.tC) : Si(e, "tC", function () {
      var t = document,
          e = Hi(),
          n = Oi(e),
          i = t.createElement("div"),
          a = !1;
      e.appendChild(i);

      try {
        for (var r, o = "(10px * 10)", u = ["calc" + o, "-moz-calc" + o, "-webkit-calc" + o], l = 0; l < 3; l++) {
          if (r = u[l], i.style.width = r, 100 === i.offsetWidth) {
            a = r.replace(o, "");
            break;
          }
        }
      } catch (t) {}

      return e.fake ? Di(e, n) : i.remove(), a;
    }(), n),
        g = e.tPL ? Bi(e.tPL) : Si(e, "tPL", function () {
      var t,
          e = document,
          n = Hi(),
          i = Oi(n),
          a = e.createElement("div"),
          r = e.createElement("div"),
          o = "";
      a.className = "tns-t-subp2", r.className = "tns-t-ct";

      for (var u = 0; u < 70; u++) {
        o += "<div></div>";
      }

      return r.innerHTML = o, a.appendChild(r), n.appendChild(a), t = Math.abs(a.getBoundingClientRect().left - r.children[67].getBoundingClientRect().left) < 2, n.fake ? Di(n, i) : a.remove(), t;
    }(), n),
        D = e.tMQ ? Bi(e.tMQ) : Si(e, "tMQ", function () {
      if (window.matchMedia || window.msMatchMedia) return !0;
      var t,
          e = document,
          n = Hi(),
          i = Oi(n),
          a = e.createElement("div"),
          r = e.createElement("style"),
          o = "@media all and (min-width:1px){.tns-mq-test{position:absolute}}";
      return r.type = "text/css", a.className = "tns-mq-test", n.appendChild(r), n.appendChild(a), r.styleSheet ? r.styleSheet.cssText = o : r.appendChild(e.createTextNode(o)), t = window.getComputedStyle ? window.getComputedStyle(a).position : a.currentStyle.position, n.fake ? Di(n, i) : a.remove(), "absolute" === t;
    }(), n),
        r = e.tTf ? Bi(e.tTf) : Si(e, "tTf", Ki("transform"), n),
        o = e.t3D ? Bi(e.t3D) : Si(e, "t3D", function (t) {
      if (!t) return !1;
      if (!window.getComputedStyle) return !1;
      var e,
          n = document,
          i = Hi(),
          a = Oi(i),
          r = n.createElement("p"),
          o = 9 < t.length ? "-" + t.slice(0, -9).toLowerCase() + "-" : "";
      return o += "transform", i.insertBefore(r, null), r.style[t] = "translate3d(1px,1px,1px)", e = window.getComputedStyle(r).getPropertyValue(o), i.fake ? Di(i, a) : r.remove(), void 0 !== e && 0 < e.length && "none" !== e;
    }(r), n),
        x = e.tTDu ? Bi(e.tTDu) : Si(e, "tTDu", Ki("transitionDuration"), n),
        u = e.tTDe ? Bi(e.tTDe) : Si(e, "tTDe", Ki("transitionDelay"), n),
        b = e.tADu ? Bi(e.tADu) : Si(e, "tADu", Ki("animationDuration"), n),
        l = e.tADe ? Bi(e.tADe) : Si(e, "tADe", Ki("animationDelay"), n),
        s = e.tTE ? Bi(e.tTE) : Si(e, "tTE", Ji(x, "Transition"), n),
        c = e.tAE ? Bi(e.tAE) : Si(e, "tAE", Ji(b, "Animation"), n),
        f = m.console && "function" == typeof m.console.warn,
        d = ["container", "controlsContainer", "prevButton", "nextButton", "navContainer", "autoplayButton"],
        v = {};

    if (d.forEach(function (t) {
      if ("string" == typeof H[t]) {
        var e = H[t],
            n = O.querySelector(e);
        if (v[t] = e, !n || !n.nodeName) return void (f && console.warn("Can't find", H[t]));
        H[t] = n;
      }
    }), !(H.container.children.length < 1)) {
      var k = H.responsive,
          R = H.nested,
          I = "carousel" === H.mode;

      if (k) {
        0 in k && (H = Li(H, k[0]), delete k[0]);
        var p = {};

        for (var h in k) {
          var w = k[h];
          w = "number" == typeof w ? {
            items: w
          } : w, p[h] = w;
        }

        k = p, p = null;
      }

      if (I || function t(e) {
        for (var n in e) {
          I || ("slideBy" === n && (e[n] = "page"), "edgePadding" === n && (e[n] = !1), "autoHeight" === n && (e[n] = !1)), "responsive" === n && t(e[n]);
        }
      }(H), !I) {
        H.axis = "horizontal", H.slideBy = "page", H.edgePadding = !1;
        var P = H.animateIn,
            z = H.animateOut,
            C = H.animateDelay,
            W = H.animateNormal;
      }

      var M,
          q,
          F = "horizontal" === H.axis,
          T = O.createElement("div"),
          j = O.createElement("div"),
          V = H.container,
          E = V.parentNode,
          A = V.outerHTML,
          G = V.children,
          Q = G.length,
          X = rn(),
          Y = !1;
      k && En(), I && (V.className += " tns-vpfix");

      var N,
          L,
          B,
          S,
          K,
          J,
          U,
          _,
          Z,
          $ = H.autoWidth,
          tt = sn("fixedWidth"),
          et = sn("edgePadding"),
          nt = sn("gutter"),
          it = un(),
          at = sn("center"),
          rt = $ ? 1 : Math.floor(sn("items")),
          ot = sn("slideBy"),
          ut = H.viewportMax || H.fixedWidthViewportWidth,
          lt = sn("arrowKeys"),
          st = sn("speed"),
          ct = H.rewind,
          ft = !ct && H.loop,
          dt = sn("autoHeight"),
          vt = sn("controls"),
          pt = sn("controlsText"),
          ht = sn("nav"),
          mt = sn("touch"),
          yt = sn("mouseDrag"),
          gt = sn("autoplay"),
          xt = sn("autoplayTimeout"),
          bt = sn("autoplayText"),
          wt = sn("autoplayHoverPause"),
          Ct = sn("autoplayResetOnVisibility"),
          Mt = (U = null, _ = sn("nonce"), Z = document.createElement("style"), U && Z.setAttribute("media", U), _ && Z.setAttribute("nonce", _), document.querySelector("head").appendChild(Z), Z.sheet ? Z.sheet : Z.styleSheet),
          Tt = H.lazyload,
          Et = H.lazyloadSelector,
          At = [],
          Nt = ft ? (K = function () {
        {
          if ($ || tt && !ut) return Q - 1;
          var t = tt ? "fixedWidth" : "items",
              e = [];
          if ((tt || H[t] < Q) && e.push(H[t]), k) for (var n in k) {
            var i = k[n][t];
            i && (tt || i < Q) && e.push(i);
          }
          return e.length || e.push(0), Math.ceil(tt ? ut / Math.min.apply(null, e) : Math.max.apply(null, e));
        }
      }(), J = I ? Math.ceil((5 * K - Q) / 2) : 4 * K - Q, J = Math.max(K, J), ln("edgePadding") ? J + 1 : J) : 0,
          Lt = I ? Q + 2 * Nt : Q + Nt,
          Bt = !(!tt && !$ || ft),
          St = tt ? _n() : null,
          Ht = !I || !ft,
          Ot = F ? "left" : "top",
          Dt = "",
          kt = "",
          Rt = tt ? function () {
        return at && !ft ? Q - 1 : Math.ceil(-St / (tt + nt));
      } : $ ? function () {
        for (var t = 0; t < Lt; t++) {
          if (N[t] >= -St) return t;
        }
      } : function () {
        return at && I && !ft ? Q - 1 : ft || I ? Math.max(0, Lt - Math.ceil(rt)) : Lt - 1;
      },
          It = en(sn("startIndex")),
          Pt = It,
          zt = (tn(), 0),
          Wt = $ ? null : Rt(),
          qt = H.preventActionWhenRunning,
          Ft = H.swipeAngle,
          jt = !Ft || "?",
          Vt = !1,
          Gt = H.onInit,
          Qt = new Zi(),
          Xt = " tns-slider tns-" + H.mode,
          Yt = V.id || (S = window.tnsId, window.tnsId = S ? S + 1 : 1, "tns" + window.tnsId),
          Kt = sn("disable"),
          Jt = !1,
          Ut = H.freezable,
          _t = !(!Ut || $) && Tn(),
          Zt = !1,
          $t = {
        click: oi,
        keydown: function keydown(t) {
          t = pi(t);
          var e = [a.LEFT, a.RIGHT].indexOf(t.keyCode);
          0 <= e && (0 === e ? we.disabled || oi(t, -1) : Ce.disabled || oi(t, 1));
        }
      },
          te = {
        click: function click(t) {
          if (Vt) {
            if (qt) return;
            ai();
          }

          var e = hi(t = pi(t));

          for (; e !== Ae && !qi(e, "data-nav");) {
            e = e.parentNode;
          }

          if (qi(e, "data-nav")) {
            var n = Se = Number(Fi(e, "data-nav")),
                i = tt || $ ? n * Q / Le : n * rt,
                a = le ? n : Math.min(Math.ceil(i), Q - 1);
            ri(a, t), He === n && (Pe && fi(), Se = -1);
          }
        },
        keydown: function keydown(t) {
          t = pi(t);
          var e = O.activeElement;
          if (!qi(e, "data-nav")) return;
          var n = [a.LEFT, a.RIGHT, a.ENTER, a.SPACE].indexOf(t.keyCode),
              i = Number(Fi(e, "data-nav"));
          0 <= n && (0 === n ? 0 < i && vi(Ee[i - 1]) : 1 === n ? i < Le - 1 && vi(Ee[i + 1]) : ri(Se = i, t));
        }
      },
          ee = {
        mouseover: function mouseover() {
          Pe && (li(), ze = !0);
        },
        mouseout: function mouseout() {
          ze && (ui(), ze = !1);
        }
      },
          ne = {
        visibilitychange: function visibilitychange() {
          O.hidden ? Pe && (li(), qe = !0) : qe && (ui(), qe = !1);
        }
      },
          ie = {
        keydown: function keydown(t) {
          t = pi(t);
          var e = [a.LEFT, a.RIGHT].indexOf(t.keyCode);
          0 <= e && oi(t, 0 === e ? -1 : 1);
        }
      },
          ae = {
        touchstart: xi,
        touchmove: bi,
        touchend: wi,
        touchcancel: wi
      },
          re = {
        mousedown: xi,
        mousemove: bi,
        mouseup: wi,
        mouseleave: wi
      },
          oe = ln("controls"),
          ue = ln("nav"),
          le = !!$ || H.navAsThumbnails,
          se = ln("autoplay"),
          ce = ln("touch"),
          fe = ln("mouseDrag"),
          de = "tns-slide-active",
          ve = "tns-slide-cloned",
          pe = "tns-complete",
          he = {
        load: function load(t) {
          kn(hi(t));
        },
        error: function error(t) {
          e = hi(t), zi(e, "failed"), Rn(e);
          var e;
        }
      },
          me = "force" === H.preventScrollOnTouch;

      if (oe) var ye,
          ge,
          xe = H.controlsContainer,
          be = H.controlsContainer ? H.controlsContainer.outerHTML : "",
          we = H.prevButton,
          Ce = H.nextButton,
          Me = H.prevButton ? H.prevButton.outerHTML : "",
          Te = H.nextButton ? H.nextButton.outerHTML : "";
      if (ue) var Ee,
          Ae = H.navContainer,
          Ne = H.navContainer ? H.navContainer.outerHTML : "",
          Le = $ ? Q : Mi(),
          Be = 0,
          Se = -1,
          He = an(),
          Oe = He,
          De = "tns-nav-active",
          ke = "Carousel Page ",
          Re = " (Current Slide)";
      if (se) var Ie,
          Pe,
          ze,
          We,
          qe,
          Fe = "forward" === H.autoplayDirection ? 1 : -1,
          je = H.autoplayButton,
          Ve = H.autoplayButton ? H.autoplayButton.outerHTML : "",
          Ge = ["<span class='tns-visually-hidden'>", " animation</span>"];
      if (ce || fe) var Qe,
          Xe,
          Ye = {},
          Ke = {},
          Je = !1,
          Ue = F ? function (t, e) {
        return t.x - e.x;
      } : function (t, e) {
        return t.y - e.y;
      };
      $ || $e(Kt || _t), r && (Ot = r, Dt = "translate", o ? (Dt += F ? "3d(" : "3d(0px, ", kt = F ? ", 0px, 0px)" : ", 0px)") : (Dt += F ? "X(" : "Y(", kt = ")")), I && (V.className = V.className.replace("tns-vpfix", "")), function () {
        ln("gutter");
        T.className = "tns-outer", j.className = "tns-inner", T.id = Yt + "-ow", j.id = Yt + "-iw", "" === V.id && (V.id = Yt);
        Xt += g || $ ? " tns-subpixel" : " tns-no-subpixel", Xt += y ? " tns-calc" : " tns-no-calc", $ && (Xt += " tns-autowidth");
        Xt += " tns-" + H.axis, V.className += Xt, I ? ((M = O.createElement("div")).id = Yt + "-mw", M.className = "tns-ovh", T.appendChild(M), M.appendChild(j)) : T.appendChild(j);

        if (dt) {
          var t = M || j;
          t.className += " tns-ah";
        }

        if (E.insertBefore(T, V), j.appendChild(V), Ii(G, function (t, e) {
          zi(t, "tns-item"), t.id || (t.id = Yt + "-item" + e), !I && W && zi(t, W), ji(t, {
            "aria-hidden": "true",
            tabindex: "-1"
          });
        }), Nt) {
          for (var e = O.createDocumentFragment(), n = O.createDocumentFragment(), i = Nt; i--;) {
            var a = i % Q,
                r = G[a].cloneNode(!0);

            if (zi(r, ve), Vi(r, "id"), n.insertBefore(r, n.firstChild), I) {
              var o = G[Q - 1 - a].cloneNode(!0);
              zi(o, ve), Vi(o, "id"), e.appendChild(o);
            }
          }

          V.insertBefore(e, V.firstChild), V.appendChild(n), G = V.children;
        }
      }(), function () {
        if (!I) for (var t = It, e = It + Math.min(Q, rt); t < e; t++) {
          var n = G[t];
          n.style.left = 100 * (t - It) / rt + "%", zi(n, P), Wi(n, W);
        }
        F && (g || $ ? (ki(Mt, "#" + Yt + " > .tns-item", "font-size:" + m.getComputedStyle(G[0]).fontSize + ";", Ri(Mt)), ki(Mt, "#" + Yt, "font-size:0;", Ri(Mt))) : I && Ii(G, function (t, e) {
          var n;
          t.style.marginLeft = (n = e, y ? y + "(" + 100 * n + "% / " + Lt + ")" : 100 * n / Lt + "%");
        }));

        if (D) {
          if (x) {
            var i = M && H.autoHeight ? hn(H.speed) : "";
            ki(Mt, "#" + Yt + "-mw", i, Ri(Mt));
          }

          i = cn(H.edgePadding, H.gutter, H.fixedWidth, H.speed, H.autoHeight), ki(Mt, "#" + Yt + "-iw", i, Ri(Mt)), I && (i = F && !$ ? "width:" + fn(H.fixedWidth, H.gutter, H.items) + ";" : "", x && (i += hn(st)), ki(Mt, "#" + Yt, i, Ri(Mt))), i = F && !$ ? dn(H.fixedWidth, H.gutter, H.items) : "", H.gutter && (i += vn(H.gutter)), I || (x && (i += hn(st)), b && (i += mn(st))), i && ki(Mt, "#" + Yt + " > .tns-item", i, Ri(Mt));
        } else {
          I && dt && (M.style[x] = st / 1e3 + "s"), j.style.cssText = cn(et, nt, tt, dt), I && F && !$ && (V.style.width = fn(tt, nt, rt));
          var i = F && !$ ? dn(tt, nt, rt) : "";
          nt && (i += vn(nt)), i && ki(Mt, "#" + Yt + " > .tns-item", i, Ri(Mt));
        }

        if (k && D) for (var a in k) {
          a = parseInt(a);
          var r = k[a],
              i = "",
              o = "",
              u = "",
              l = "",
              s = "",
              c = $ ? null : sn("items", a),
              f = sn("fixedWidth", a),
              d = sn("speed", a),
              v = sn("edgePadding", a),
              p = sn("autoHeight", a),
              h = sn("gutter", a);
          x && M && sn("autoHeight", a) && "speed" in r && (o = "#" + Yt + "-mw{" + hn(d) + "}"), ("edgePadding" in r || "gutter" in r) && (u = "#" + Yt + "-iw{" + cn(v, h, f, d, p) + "}"), I && F && !$ && ("fixedWidth" in r || "items" in r || tt && "gutter" in r) && (l = "width:" + fn(f, h, c) + ";"), x && "speed" in r && (l += hn(d)), l && (l = "#" + Yt + "{" + l + "}"), ("fixedWidth" in r || tt && "gutter" in r || !I && "items" in r) && (s += dn(f, h, c)), "gutter" in r && (s += vn(h)), !I && "speed" in r && (x && (s += hn(d)), b && (s += mn(d))), s && (s = "#" + Yt + " > .tns-item{" + s + "}"), (i = o + u + l + s) && Mt.insertRule("@media (min-width: " + a / 16 + "em) {" + i + "}", Mt.cssRules.length);
        }
      }(), yn();

      var _e = ft ? I ? function () {
        var t = zt,
            e = Wt;
        t += ot, e -= ot, et ? (t += 1, e -= 1) : tt && (it + nt) % (tt + nt) && (e -= 1), Nt && (e < It ? It -= Q : It < t && (It += Q));
      } : function () {
        if (Wt < It) for (; zt + Q <= It;) {
          It -= Q;
        } else if (It < zt) for (; It <= Wt - Q;) {
          It += Q;
        }
      } : function () {
        It = Math.max(zt, Math.min(Wt, It));
      },
          Ze = I ? function () {
        var e, n, i, a, t, r, o, u, l, s, c;
        Jn(V, ""), x || !st ? (ti(), st && Yi(V) || ai()) : (e = V, n = Ot, i = Dt, a = kt, t = Zn(), r = st, o = ai, u = Math.min(r, 10), l = 0 <= t.indexOf("%") ? "%" : "px", t = t.replace(l, ""), s = Number(e.style[n].replace(i, "").replace(a, "").replace(l, "")), c = (t - s) / r * u, setTimeout(function t() {
          r -= u, s += c, e.style[n] = i + s + l + a, 0 < r ? setTimeout(t, u) : o();
        }, u)), F || Ci();
      } : function () {
        At = [];
        var t = {};
        t[s] = t[c] = ai, _i(G[Pt], t), Ui(G[It], t), ei(Pt, P, z, !0), ei(It, W, P), s && c && st && Yi(V) || ai();
      };

      return {
        version: "2.9.3",
        getInfo: Ei,
        events: Qt,
        goTo: ri,
        play: function play() {
          gt && !Pe && (ci(), We = !1);
        },
        pause: function pause() {
          Pe && (fi(), We = !0);
        },
        isOn: Y,
        updateSliderHeight: Fn,
        refresh: yn,
        destroy: function destroy() {
          if (Mt.disabled = !0, Mt.ownerNode && Mt.ownerNode.remove(), _i(m, {
            resize: Cn
          }), lt && _i(O, ie), xe && _i(xe, $t), Ae && _i(Ae, te), _i(V, ee), _i(V, ne), je && _i(je, {
            click: di
          }), gt && clearInterval(Ie), I && s) {
            var t = {};
            t[s] = ai, _i(V, t);
          }

          mt && _i(V, ae), yt && _i(V, re);
          var r = [A, be, Me, Te, Ne, Ve];

          for (var e in d.forEach(function (t, e) {
            var n = "container" === t ? T : H[t];

            if ("object" == typeof n && n) {
              var i = !!n.previousElementSibling && n.previousElementSibling,
                  a = n.parentNode;
              n.outerHTML = r[e], H[t] = i ? i.nextElementSibling : a.firstElementChild;
            }
          }), d = P = z = C = W = F = T = j = V = E = A = G = Q = q = X = $ = tt = et = nt = it = rt = ot = ut = lt = st = ct = ft = dt = Mt = Tt = N = At = Nt = Lt = Bt = St = Ht = Ot = Dt = kt = Rt = It = Pt = zt = Wt = Ft = jt = Vt = Gt = Qt = Xt = Yt = Kt = Jt = Ut = _t = Zt = $t = te = ee = ne = ie = ae = re = oe = ue = le = se = ce = fe = de = pe = he = L = vt = pt = xe = be = we = Ce = ye = ge = ht = Ae = Ne = Ee = Le = Be = Se = He = Oe = De = ke = Re = gt = xt = Fe = bt = wt = je = Ve = Ct = Ge = Ie = Pe = ze = We = qe = Ye = Ke = Qe = Je = Xe = Ue = mt = yt = null, this) {
            "rebuild" !== e && (this[e] = null);
          }

          Y = !1;
        },
        rebuild: function rebuild() {
          return $i(Li(H, v));
        }
      };
    }

    function $e(t) {
      t && (vt = ht = mt = yt = lt = gt = wt = Ct = !1);
    }

    function tn() {
      for (var t = I ? It - Nt : It; t < 0;) {
        t += Q;
      }

      return t % Q + 1;
    }

    function en(t) {
      return t = t ? Math.max(0, Math.min(ft ? Q - 1 : Q - rt, t)) : 0, I ? t + Nt : t;
    }

    function nn(t) {
      for (null == t && (t = It), I && (t -= Nt); t < 0;) {
        t += Q;
      }

      return Math.floor(t % Q);
    }

    function an() {
      var t,
          e = nn();
      return t = le ? e : tt || $ ? Math.ceil((e + 1) * Le / Q - 1) : Math.floor(e / rt), !ft && I && It === Wt && (t = Le - 1), t;
    }

    function rn() {
      return m.innerWidth || O.documentElement.clientWidth || O.body.clientWidth;
    }

    function on(t) {
      return "top" === t ? "afterbegin" : "beforeend";
    }

    function un() {
      var t = et ? 2 * et - nt : 0;
      return function t(e) {
        if (null != e) {
          var n,
              i,
              a = O.createElement("div");
          return e.appendChild(a), i = (n = a.getBoundingClientRect()).right - n.left, a.remove(), i || t(e.parentNode);
        }
      }(E) - t;
    }

    function ln(t) {
      if (H[t]) return !0;
      if (k) for (var e in k) {
        if (k[e][t]) return !0;
      }
      return !1;
    }

    function sn(t, e) {
      if (null == e && (e = X), "items" === t && tt) return Math.floor((it + nt) / (tt + nt)) || 1;
      var n = H[t];
      if (k) for (var i in k) {
        e >= parseInt(i) && t in k[i] && (n = k[i][t]);
      }
      return "slideBy" === t && "page" === n && (n = sn("items")), I || "slideBy" !== t && "items" !== t || (n = Math.floor(n)), n;
    }

    function cn(t, e, n, i, a) {
      var r = "";

      if (void 0 !== t) {
        var o = t;
        e && (o -= e), r = F ? "margin: 0 " + o + "px 0 " + t + "px;" : "margin: " + t + "px 0 " + o + "px 0;";
      } else if (e && !n) {
        var u = "-" + e + "px";
        r = "margin: 0 " + (F ? u + " 0 0" : "0 " + u + " 0") + ";";
      }

      return !I && a && x && i && (r += hn(i)), r;
    }

    function fn(t, e, n) {
      return t ? (t + e) * Lt + "px" : y ? y + "(" + 100 * Lt + "% / " + n + ")" : 100 * Lt / n + "%";
    }

    function dn(t, e, n) {
      var i;
      if (t) i = t + e + "px";else {
        I || (n = Math.floor(n));
        var a = I ? Lt : n;
        i = y ? y + "(100% / " + a + ")" : 100 / a + "%";
      }
      return i = "width:" + i, "inner" !== R ? i + ";" : i + " !important;";
    }

    function vn(t) {
      var e = "";
      !1 !== t && (e = (F ? "padding-" : "margin-") + (F ? "right" : "bottom") + ": " + t + "px;");
      return e;
    }

    function pn(t, e) {
      var n = t.substring(0, t.length - e).toLowerCase();
      return n && (n = "-" + n + "-"), n;
    }

    function hn(t) {
      return pn(x, 18) + "transition-duration:" + t / 1e3 + "s;";
    }

    function mn(t) {
      return pn(b, 17) + "animation-duration:" + t / 1e3 + "s;";
    }

    function yn() {
      if (ln("autoHeight") || $ || !F) {
        var t = V.querySelectorAll("img");
        Ii(t, function (t) {
          var e = t.src;
          Tt || (e && e.indexOf("data:image") < 0 ? (t.src = "", Ui(t, he), zi(t, "loading"), t.src = e) : kn(t));
        }), Ai(function () {
          zn(Gi(t), function () {
            L = !0;
          });
        }), ln("autoHeight") && (t = In(It, Math.min(It + rt - 1, Lt - 1))), Tt ? gn() : Ai(function () {
          zn(Gi(t), gn);
        });
      } else I && $n(), bn(), wn();
    }

    function gn() {
      if ($ && 1 < Q) {
        var i = ft ? It : Q - 1;
        !function t() {
          var e = G[i].getBoundingClientRect().left,
              n = G[i - 1].getBoundingClientRect().right;
          Math.abs(e - n) <= 1 ? xn() : setTimeout(function () {
            t();
          }, 16);
        }();
      } else xn();
    }

    function xn() {
      F && !$ || (jn(), $ ? (St = _n(), Ut && (_t = Tn()), Wt = Rt(), $e(Kt || _t)) : Ci()), I && $n(), bn(), wn();
    }

    function bn() {
      if (Vn(), T.insertAdjacentHTML("afterbegin", '<div class="tns-liveregion tns-visually-hidden" aria-live="polite" aria-atomic="true">slide <span class="current">' + Hn() + "</span>  of " + Q + "</div>"), B = T.querySelector(".tns-liveregion .current"), se) {
        var t = gt ? "stop" : "start";
        je ? ji(je, {
          "data-action": t
        }) : H.autoplayButtonOutput && (T.insertAdjacentHTML(on(H.autoplayPosition), '<button type="button" data-action="' + t + '">' + Ge[0] + t + Ge[1] + bt[0] + "</button>"), je = T.querySelector("[data-action]")), je && Ui(je, {
          click: di
        }), gt && (ci(), wt && Ui(V, ee), Ct && Ui(V, ne));
      }

      if (ue) {
        if (Ae) ji(Ae, {
          "aria-label": "Carousel Pagination"
        }), Ii(Ee = Ae.children, function (t, e) {
          ji(t, {
            "data-nav": e,
            tabindex: "-1",
            "aria-label": ke + (e + 1),
            "aria-controls": Yt
          });
        });else {
          for (var e = "", n = le ? "" : 'style="display:none"', i = 0; i < Q; i++) {
            e += '<button type="button" data-nav="' + i + '" tabindex="-1" aria-controls="' + Yt + '" ' + n + ' aria-label="' + ke + (i + 1) + '"></button>';
          }

          e = '<div class="tns-nav" aria-label="Carousel Pagination">' + e + "</div>", T.insertAdjacentHTML(on(H.navPosition), e), Ae = T.querySelector(".tns-nav"), Ee = Ae.children;
        }

        if (Ti(), x) {
          var a = x.substring(0, x.length - 18).toLowerCase(),
              r = "transition: all " + st / 1e3 + "s";
          a && (r = "-" + a + "-" + r), ki(Mt, "[aria-controls^=" + Yt + "-item]", r, Ri(Mt));
        }

        ji(Ee[He], {
          "aria-label": ke + (He + 1) + Re
        }), Vi(Ee[He], "tabindex"), zi(Ee[He], De), Ui(Ae, te);
      }

      oe && (xe || we && Ce || (T.insertAdjacentHTML(on(H.controlsPosition), '<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button type="button" data-controls="prev" tabindex="-1" aria-controls="' + Yt + '">' + pt[0] + '</button><button type="button" data-controls="next" tabindex="-1" aria-controls="' + Yt + '">' + pt[1] + "</button></div>"), xe = T.querySelector(".tns-controls")), we && Ce || (we = xe.children[0], Ce = xe.children[1]), H.controlsContainer && ji(xe, {
        "aria-label": "Carousel Navigation",
        tabindex: "0"
      }), (H.controlsContainer || H.prevButton && H.nextButton) && ji([we, Ce], {
        "aria-controls": Yt,
        tabindex: "-1"
      }), (H.controlsContainer || H.prevButton && H.nextButton) && (ji(we, {
        "data-controls": "prev"
      }), ji(Ce, {
        "data-controls": "next"
      })), ye = Qn(we), ge = Qn(Ce), Kn(), xe ? Ui(xe, $t) : (Ui(we, $t), Ui(Ce, $t))), An();
    }

    function wn() {
      if (I && s) {
        var t = {};
        t[s] = ai, Ui(V, t);
      }

      mt && Ui(V, ae, H.preventScrollOnTouch), yt && Ui(V, re), lt && Ui(O, ie), "inner" === R ? Qt.on("outerResized", function () {
        Mn(), Qt.emit("innerLoaded", Ei());
      }) : (k || tt || $ || dt || !F) && Ui(m, {
        resize: Cn
      }), dt && ("outer" === R ? Qt.on("innerLoaded", Pn) : Kt || Pn()), Dn(), Kt ? Bn() : _t && Ln(), Qt.on("indexChanged", Wn), "inner" === R && Qt.emit("innerLoaded", Ei()), "function" == typeof Gt && Gt(Ei()), Y = !0;
    }

    function Cn(t) {
      Ai(function () {
        Mn(pi(t));
      });
    }

    function Mn(t) {
      if (Y) {
        "outer" === R && Qt.emit("outerResized", Ei(t)), X = rn();
        var e,
            n = q,
            i = !1;
        k && (En(), (e = n !== q) && Qt.emit("newBreakpointStart", Ei(t)));
        var a,
            r,
            o,
            u,
            l = rt,
            s = Kt,
            c = _t,
            f = lt,
            d = vt,
            v = ht,
            p = mt,
            h = yt,
            m = gt,
            y = wt,
            g = Ct,
            x = It;

        if (e) {
          var b = tt,
              w = dt,
              C = pt,
              M = at,
              T = bt;
          if (!D) var E = nt,
              A = et;
        }

        if (lt = sn("arrowKeys"), vt = sn("controls"), ht = sn("nav"), mt = sn("touch"), at = sn("center"), yt = sn("mouseDrag"), gt = sn("autoplay"), wt = sn("autoplayHoverPause"), Ct = sn("autoplayResetOnVisibility"), e && (Kt = sn("disable"), tt = sn("fixedWidth"), st = sn("speed"), dt = sn("autoHeight"), pt = sn("controlsText"), bt = sn("autoplayText"), xt = sn("autoplayTimeout"), D || (et = sn("edgePadding"), nt = sn("gutter"))), $e(Kt), it = un(), F && !$ || Kt || (jn(), F || (Ci(), i = !0)), (tt || $) && (St = _n(), Wt = Rt()), (e || tt) && (rt = sn("items"), ot = sn("slideBy"), (r = rt !== l) && (tt || $ || (Wt = Rt()), _e())), e && Kt !== s && (Kt ? Bn() : function () {
          if (!Jt) return;
          if (Mt.disabled = !1, V.className += Xt, $n(), ft) for (var t = Nt; t--;) {
            I && Xi(G[t]), Xi(G[Lt - t - 1]);
          }
          if (!I) for (var e = It, n = It + Q; e < n; e++) {
            var i = G[e],
                a = e < It + rt ? P : W;
            i.style.left = 100 * (e - It) / rt + "%", zi(i, a);
          }
          Nn(), Jt = !1;
        }()), Ut && (e || tt || $) && (_t = Tn()) !== c && (_t ? (ti(Zn(en(0))), Ln()) : (!function () {
          if (!Zt) return;
          et && D && (j.style.margin = "");
          if (Nt) for (var t = "tns-transparent", e = Nt; e--;) {
            I && Wi(G[e], t), Wi(G[Lt - e - 1], t);
          }
          Nn(), Zt = !1;
        }(), i = !0)), $e(Kt || _t), gt || (wt = Ct = !1), lt !== f && (lt ? Ui(O, ie) : _i(O, ie)), vt !== d && (vt ? xe ? Xi(xe) : (we && Xi(we), Ce && Xi(Ce)) : xe ? Qi(xe) : (we && Qi(we), Ce && Qi(Ce))), ht !== v && (ht ? (Xi(Ae), Ti()) : Qi(Ae)), mt !== p && (mt ? Ui(V, ae, H.preventScrollOnTouch) : _i(V, ae)), yt !== h && (yt ? Ui(V, re) : _i(V, re)), gt !== m && (gt ? (je && Xi(je), Pe || We || ci()) : (je && Qi(je), Pe && fi())), wt !== y && (wt ? Ui(V, ee) : _i(V, ee)), Ct !== g && (Ct ? Ui(O, ne) : _i(O, ne)), e) {
          if (tt === b && at === M || (i = !0), dt !== w && (dt || (j.style.height = "")), vt && pt !== C && (we.innerHTML = pt[0], Ce.innerHTML = pt[1]), je && bt !== T) {
            var N = gt ? 1 : 0,
                L = je.innerHTML,
                B = L.length - T[N].length;
            L.substring(B) === T[N] && (je.innerHTML = L.substring(0, B) + bt[N]);
          }
        } else at && (tt || $) && (i = !0);

        if ((r || tt && !$) && (Le = Mi(), Ti()), (a = It !== x) ? (Qt.emit("indexChanged", Ei()), i = !0) : r ? a || Wn() : (tt || $) && (Dn(), Vn(), Sn()), r && !I && function () {
          for (var t = It + Math.min(Q, rt), e = Lt; e--;) {
            var n = G[e];
            It <= e && e < t ? (zi(n, "tns-moving"), n.style.left = 100 * (e - It) / rt + "%", zi(n, P), Wi(n, W)) : n.style.left && (n.style.left = "", zi(n, W), Wi(n, P)), Wi(n, z);
          }

          setTimeout(function () {
            Ii(G, function (t) {
              Wi(t, "tns-moving");
            });
          }, 300);
        }(), !Kt && !_t) {
          if (e && !D && (et === A && nt === E || (j.style.cssText = cn(et, nt, tt, st, dt)), F)) {
            I && (V.style.width = fn(tt, nt, rt));
            var S = dn(tt, nt, rt) + vn(nt);
            u = Ri(o = Mt) - 1, "deleteRule" in o ? o.deleteRule(u) : o.removeRule(u), ki(Mt, "#" + Yt + " > .tns-item", S, Ri(Mt));
          }

          dt && Pn(), i && ($n(), Pt = It);
        }

        e && Qt.emit("newBreakpointEnd", Ei(t));
      }
    }

    function Tn() {
      if (!tt && !$) return Q <= (at ? rt - (rt - 1) / 2 : rt);
      var t = tt ? (tt + nt) * Q : N[Q],
          e = et ? it + 2 * et : it + nt;
      return at && (e -= tt ? (it - tt) / 2 : (it - (N[It + 1] - N[It] - nt)) / 2), t <= e;
    }

    function En() {
      for (var t in q = 0, k) {
        (t = parseInt(t)) <= X && (q = t);
      }
    }

    function An() {
      !gt && je && Qi(je), !ht && Ae && Qi(Ae), vt || (xe ? Qi(xe) : (we && Qi(we), Ce && Qi(Ce)));
    }

    function Nn() {
      gt && je && Xi(je), ht && Ae && Xi(Ae), vt && (xe ? Xi(xe) : (we && Xi(we), Ce && Xi(Ce)));
    }

    function Ln() {
      if (!Zt) {
        if (et && (j.style.margin = "0px"), Nt) for (var t = "tns-transparent", e = Nt; e--;) {
          I && zi(G[e], t), zi(G[Lt - e - 1], t);
        }
        An(), Zt = !0;
      }
    }

    function Bn() {
      if (!Jt) {
        if (Mt.disabled = !0, V.className = V.className.replace(Xt.substring(1), ""), Vi(V, ["style"]), ft) for (var t = Nt; t--;) {
          I && Qi(G[t]), Qi(G[Lt - t - 1]);
        }
        if (F && I || Vi(j, ["style"]), !I) for (var e = It, n = It + Q; e < n; e++) {
          var i = G[e];
          Vi(i, ["style"]), Wi(i, P), Wi(i, W);
        }
        An(), Jt = !0;
      }
    }

    function Sn() {
      var t = Hn();
      B.innerHTML !== t && (B.innerHTML = t);
    }

    function Hn() {
      var t = On(),
          e = t[0] + 1,
          n = t[1] + 1;
      return e === n ? e + "" : e + " to " + n;
    }

    function On(t) {
      null == t && (t = Zn());
      var n,
          i,
          a,
          r = It;
      if (at || et ? ($ || tt) && (i = -(parseFloat(t) + et), a = i + it + 2 * et) : $ && (i = N[It], a = i + it), $) N.forEach(function (t, e) {
        e < Lt && ((at || et) && t <= i + 0.5 && (r = e), 0.5 <= a - t && (n = e));
      });else {
        if (tt) {
          var e = tt + nt;
          at || et ? (r = Math.floor(i / e), n = Math.ceil(a / e - 1)) : n = r + Math.ceil(it / e) - 1;
        } else if (at || et) {
          var o = rt - 1;

          if (at ? (r -= o / 2, n = It + o / 2) : n = It + o, et) {
            var u = et * rt / it;
            r -= u, n += u;
          }

          r = Math.floor(r), n = Math.ceil(n);
        } else n = r + rt - 1;

        r = Math.max(r, 0), n = Math.min(n, Lt - 1);
      }
      return [r, n];
    }

    function Dn() {
      if (Tt && !Kt) {
        var t = On();
        t.push(Et), In.apply(null, t).forEach(function (t) {
          if (!Pi(t, pe)) {
            var e = {};
            e[s] = function (t) {
              t.stopPropagation();
            }, Ui(t, e), Ui(t, he), t.src = Fi(t, "data-src");
            var n = Fi(t, "data-srcset");
            n && (t.srcset = n), zi(t, "loading");
          }
        });
      }
    }

    function kn(t) {
      zi(t, "loaded"), Rn(t);
    }

    function Rn(t) {
      zi(t, pe), Wi(t, "loading"), _i(t, he);
    }

    function In(t, e, n) {
      var i = [];

      for (n || (n = "img"); t <= e;) {
        Ii(G[t].querySelectorAll(n), function (t) {
          i.push(t);
        }), t++;
      }

      return i;
    }

    function Pn() {
      var t = In.apply(null, On());
      Ai(function () {
        zn(t, Fn);
      });
    }

    function zn(n, t) {
      return L ? t() : (n.forEach(function (t, e) {
        !Tt && t.complete && Rn(t), Pi(t, pe) && n.splice(e, 1);
      }), n.length ? void Ai(function () {
        zn(n, t);
      }) : t());
    }

    function Wn() {
      Dn(), Vn(), Sn(), Kn(), function () {
        if (ht && (He = 0 <= Se ? Se : an(), Se = -1, He !== Oe)) {
          var t = Ee[Oe],
              e = Ee[He];
          ji(t, {
            tabindex: "-1",
            "aria-label": ke + (Oe + 1)
          }), Wi(t, De), ji(e, {
            "aria-label": ke + (He + 1) + Re
          }), Vi(e, "tabindex"), zi(e, De), Oe = He;
        }
      }();
    }

    function qn(t, e) {
      for (var n = [], i = t, a = Math.min(t + e, Lt); i < a; i++) {
        n.push(G[i].offsetHeight);
      }

      return Math.max.apply(null, n);
    }

    function Fn() {
      var t = dt ? qn(It, rt) : qn(Nt, Q),
          e = M || j;
      e.style.height !== t && (e.style.height = t + "px");
    }

    function jn() {
      N = [0];
      var n = F ? "left" : "top",
          i = F ? "right" : "bottom",
          a = G[0].getBoundingClientRect()[n];
      Ii(G, function (t, e) {
        e && N.push(t.getBoundingClientRect()[n] - a), e === Lt - 1 && N.push(t.getBoundingClientRect()[i] - a);
      });
    }

    function Vn() {
      var t = On(),
          n = t[0],
          i = t[1];
      Ii(G, function (t, e) {
        n <= e && e <= i ? qi(t, "aria-hidden") && (Vi(t, ["aria-hidden", "tabindex"]), zi(t, de)) : qi(t, "aria-hidden") || (ji(t, {
          "aria-hidden": "true",
          tabindex: "-1"
        }), Wi(t, de));
      });
    }

    function Gn(t) {
      return t.nodeName.toLowerCase();
    }

    function Qn(t) {
      return "button" === Gn(t);
    }

    function Xn(t) {
      return "true" === t.getAttribute("aria-disabled");
    }

    function Yn(t, e, n) {
      t ? e.disabled = n : e.setAttribute("aria-disabled", n.toString());
    }

    function Kn() {
      if (vt && !ct && !ft) {
        var t = ye ? we.disabled : Xn(we),
            e = ge ? Ce.disabled : Xn(Ce),
            n = It <= zt,
            i = !ct && Wt <= It;
        n && !t && Yn(ye, we, !0), !n && t && Yn(ye, we, !1), i && !e && Yn(ge, Ce, !0), !i && e && Yn(ge, Ce, !1);
      }
    }

    function Jn(t, e) {
      x && (t.style[x] = e);
    }

    function Un(t) {
      return null == t && (t = It), $ ? (it - (et ? nt : 0) - (N[t + 1] - N[t] - nt)) / 2 : tt ? (it - tt) / 2 : (rt - 1) / 2;
    }

    function _n() {
      var t = it + (et ? nt : 0) - (tt ? (tt + nt) * Lt : N[Lt]);
      return at && !ft && (t = tt ? -(tt + nt) * (Lt - 1) - Un() : Un(Lt - 1) - N[Lt - 1]), 0 < t && (t = 0), t;
    }

    function Zn(t) {
      var e;
      if (null == t && (t = It), F && !$) {
        if (tt) e = -(tt + nt) * t, at && (e += Un());else {
          var n = r ? Lt : rt;
          at && (t -= Un()), e = 100 * -t / n;
        }
      } else e = -N[t], at && $ && (e += Un());
      return Bt && (e = Math.max(e, St)), e += !F || $ || tt ? "px" : "%";
    }

    function $n(t) {
      Jn(V, "0s"), ti(t);
    }

    function ti(t) {
      null == t && (t = Zn()), V.style[Ot] = Dt + t + kt;
    }

    function ei(t, e, n, i) {
      var a = t + rt;
      ft || (a = Math.min(a, Lt));

      for (var r = t; r < a; r++) {
        var o = G[r];
        i || (o.style.left = 100 * (r - It) / rt + "%"), C && u && (o.style[u] = o.style[l] = C * (r - t) / 1e3 + "s"), Wi(o, e), zi(o, n), i && At.push(o);
      }
    }

    function ni(t, e) {
      Ht && _e(), (It !== Pt || e) && (Qt.emit("indexChanged", Ei()), Qt.emit("transitionStart", Ei()), dt && Pn(), Pe && t && 0 <= ["click", "keydown"].indexOf(t.type) && fi(), Vt = !0, Ze());
    }

    function ii(t) {
      return t.toLowerCase().replace(/-/g, "");
    }

    function ai(t) {
      if (I || Vt) {
        if (Qt.emit("transitionEnd", Ei(t)), !I && 0 < At.length) for (var e = 0; e < At.length; e++) {
          var n = At[e];
          n.style.left = "", l && u && (n.style[l] = "", n.style[u] = ""), Wi(n, z), zi(n, W);
        }

        if (!t || !I && t.target.parentNode === V || t.target === V && ii(t.propertyName) === ii(Ot)) {
          if (!Ht) {
            var i = It;
            _e(), It !== i && (Qt.emit("indexChanged", Ei()), $n());
          }

          "inner" === R && Qt.emit("innerLoaded", Ei()), Vt = !1, Pt = It;
        }
      }
    }

    function ri(t, e) {
      if (!_t) if ("prev" === t) oi(e, -1);else if ("next" === t) oi(e, 1);else {
        if (Vt) {
          if (qt) return;
          ai();
        }

        var n = nn(),
            i = 0;

        if ("first" === t ? i = -n : "last" === t ? i = I ? Q - rt - n : Q - 1 - n : ("number" != typeof t && (t = parseInt(t)), isNaN(t) || (e || (t = Math.max(0, Math.min(Q - 1, t))), i = t - n)), !I && i && Math.abs(i) < rt) {
          var a = 0 < i ? 1 : -1;
          i += zt <= It + i - Q ? Q * a : 2 * Q * a * -1;
        }

        It += i, I && ft && (It < zt && (It += Q), Wt < It && (It -= Q)), nn(It) !== nn(Pt) && ni(e);
      }
    }

    function oi(t, e) {
      if (Vt) {
        if (qt) return;
        ai();
      }

      var n;

      if (!e) {
        for (var i = hi(t = pi(t)); i !== xe && [we, Ce].indexOf(i) < 0;) {
          i = i.parentNode;
        }

        var a = [we, Ce].indexOf(i);
        0 <= a && (n = !0, e = 0 === a ? -1 : 1);
      }

      if (ct) {
        if (It === zt && -1 === e) return void ri("last", t);
        if (It === Wt && 1 === e) return void ri("first", t);
      }

      e && (It += ot * e, $ && (It = Math.floor(It)), ni(n || t && "keydown" === t.type ? t : null));
    }

    function ui() {
      Ie = setInterval(function () {
        oi(null, Fe);
      }, xt), Pe = !0;
    }

    function li() {
      clearInterval(Ie), Pe = !1;
    }

    function si(t, e) {
      ji(je, {
        "data-action": t
      }), je.innerHTML = Ge[0] + t + Ge[1] + e;
    }

    function ci() {
      ui(), je && si("stop", bt[1]);
    }

    function fi() {
      li(), je && si("start", bt[0]);
    }

    function di() {
      Pe ? (fi(), We = !0) : (ci(), We = !1);
    }

    function vi(t) {
      t.focus();
    }

    function pi(t) {
      return mi(t = t || m.event) ? t.changedTouches[0] : t;
    }

    function hi(t) {
      return t.target || m.event.srcElement;
    }

    function mi(t) {
      return 0 <= t.type.indexOf("touch");
    }

    function yi(t) {
      t.preventDefault ? t.preventDefault() : t.returnValue = !1;
    }

    function gi() {
      return a = Ke.y - Ye.y, r = Ke.x - Ye.x, t = Math.atan2(a, r) * (180 / Math.PI), e = Ft, n = !1, i = Math.abs(90 - Math.abs(t)), 90 - e <= i ? n = "horizontal" : i <= e && (n = "vertical"), n === H.axis;
      var t, e, n, i, a, r;
    }

    function xi(t) {
      if (Vt) {
        if (qt) return;
        ai();
      }

      gt && Pe && li(), Je = !0, Xe && (Ni(Xe), Xe = null);
      var e = pi(t);
      Qt.emit(mi(t) ? "touchStart" : "dragStart", Ei(t)), !mi(t) && 0 <= ["img", "a"].indexOf(Gn(hi(t))) && yi(t), Ke.x = Ye.x = e.clientX, Ke.y = Ye.y = e.clientY, I && (Qe = parseFloat(V.style[Ot].replace(Dt, "")), Jn(V, "0s"));
    }

    function bi(t) {
      if (Je) {
        var e = pi(t);
        Ke.x = e.clientX, Ke.y = e.clientY, I ? Xe || (Xe = Ai(function () {
          !function t(e) {
            if (!jt) return void (Je = !1);
            Ni(Xe);
            Je && (Xe = Ai(function () {
              t(e);
            }));
            "?" === jt && (jt = gi());

            if (jt) {
              !me && mi(e) && (me = !0);

              try {
                e.type && Qt.emit(mi(e) ? "touchMove" : "dragMove", Ei(e));
              } catch (t) {}

              var n = Qe,
                  i = Ue(Ke, Ye);
              if (!F || tt || $) n += i, n += "px";else {
                var a = r ? i * rt * 100 / ((it + nt) * Lt) : 100 * i / (it + nt);
                n += a, n += "%";
              }
              V.style[Ot] = Dt + n + kt;
            }
          }(t);
        })) : ("?" === jt && (jt = gi()), jt && (me = !0)), ("boolean" != typeof t.cancelable || t.cancelable) && me && t.preventDefault();
      }
    }

    function wi(i) {
      if (Je) {
        Xe && (Ni(Xe), Xe = null), I && Jn(V, ""), Je = !1;
        var t = pi(i);
        Ke.x = t.clientX, Ke.y = t.clientY;
        var a = Ue(Ke, Ye);

        if (Math.abs(a)) {
          if (!mi(i)) {
            var n = hi(i);
            Ui(n, {
              click: function t(e) {
                yi(e), _i(n, {
                  click: t
                });
              }
            });
          }

          I ? Xe = Ai(function () {
            if (F && !$) {
              var t = -a * rt / (it + nt);
              t = 0 < a ? Math.floor(t) : Math.ceil(t), It += t;
            } else {
              var e = -(Qe + a);
              if (e <= 0) It = zt;else if (e >= N[Lt - 1]) It = Wt;else for (var n = 0; n < Lt && e >= N[n];) {
                e > N[It = n] && a < 0 && (It += 1), n++;
              }
            }

            ni(i, a), Qt.emit(mi(i) ? "touchEnd" : "dragEnd", Ei(i));
          }) : jt && oi(i, 0 < a ? -1 : 1);
        }
      }

      "auto" === H.preventScrollOnTouch && (me = !1), Ft && (jt = "?"), gt && !Pe && ui();
    }

    function Ci() {
      (M || j).style.height = N[It + rt] - N[It] + "px";
    }

    function Mi() {
      var t = tt ? (tt + nt) * Q / it : Q / rt;
      return Math.min(Math.ceil(t), Q);
    }

    function Ti() {
      if (ht && !le && Le !== Be) {
        var t = Be,
            e = Le,
            n = Xi;

        for (Le < Be && (t = Le, e = Be, n = Qi); t < e;) {
          n(Ee[t]), t++;
        }

        Be = Le;
      }
    }

    function Ei(t) {
      return {
        container: V,
        slideItems: G,
        navContainer: Ae,
        navItems: Ee,
        controlsContainer: xe,
        hasControls: oe,
        prevButton: we,
        nextButton: Ce,
        items: rt,
        slideBy: ot,
        cloneCount: Nt,
        slideCount: Q,
        slideCountNew: Lt,
        index: It,
        indexCached: Pt,
        displayIndex: tn(),
        navCurrentIndex: He,
        navCurrentIndexCached: Oe,
        pages: Le,
        pagesCached: Be,
        sheet: Mt,
        isOn: Y,
        event: t || {}
      };
    }

    f && console.warn("No slides found in", H.container);
  };

  return $i;
}(); // Parallax


!function (t) {
  if ("object" == typeof exports && "undefined" != typeof module) module.exports = t();else if ("function" == typeof define && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) define([], t);else {
    ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).Parallax = t();
  }
}(function () {
  return function t(e, i, n) {
    function o(r, a) {
      if (!i[r]) {
        if (!e[r]) {
          var l = "function" == typeof require && require;
          if (!a && l) return require(r, !0);
          if (s) return s(r, !0);
          var h = new Error("Cannot find module '" + r + "'");
          throw h.code = "MODULE_NOT_FOUND", h;
        }

        var u = i[r] = {
          exports: {}
        };
        e[r][0].call(u.exports, function (t) {
          var i = e[r][1][t];
          return o(i || t);
        }, u, u.exports, t, e, i, n);
      }

      return i[r].exports;
    }

    for (var s = "function" == typeof require && require, r = 0; r < n.length; r++) {
      o(n[r]);
    }

    return o;
  }({
    1: [function (t, e, i) {
      "use strict";

      function n(t) {
        if (null === t || void 0 === t) throw new TypeError("Object.assign cannot be called with null or undefined");
        return Object(t);
      }

      var o = Object.getOwnPropertySymbols,
          s = Object.prototype.hasOwnProperty,
          r = Object.prototype.propertyIsEnumerable;
      e.exports = function () {
        try {
          if (!Object.assign) return !1;
          var t = new String("abc");
          if (t[5] = "de", "5" === Object.getOwnPropertyNames(t)[0]) return !1;

          for (var e = {}, i = 0; i < 10; i++) {
            e["_" + String.fromCharCode(i)] = i;
          }

          if ("0123456789" !== Object.getOwnPropertyNames(e).map(function (t) {
            return e[t];
          }).join("")) return !1;
          var n = {};
          return "abcdefghijklmnopqrst".split("").forEach(function (t) {
            n[t] = t;
          }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, n)).join("");
        } catch (t) {
          return !1;
        }
      }() ? Object.assign : function (t, e) {
        for (var i, a, l = n(t), h = 1; h < arguments.length; h++) {
          i = Object(arguments[h]);

          for (var u in i) {
            s.call(i, u) && (l[u] = i[u]);
          }

          if (o) {
            a = o(i);

            for (var c = 0; c < a.length; c++) {
              r.call(i, a[c]) && (l[a[c]] = i[a[c]]);
            }
          }
        }

        return l;
      };
    }, {}],
    2: [function (t, e, i) {
      (function (t) {
        (function () {
          var i, n, o, s, r, a;
          "undefined" != typeof performance && null !== performance && performance.now ? e.exports = function () {
            return performance.now();
          } : void 0 !== t && null !== t && t.hrtime ? (e.exports = function () {
            return (i() - r) / 1e6;
          }, n = t.hrtime, s = (i = function i() {
            var t;
            return 1e9 * (t = n())[0] + t[1];
          })(), a = 1e9 * t.uptime(), r = s - a) : Date.now ? (e.exports = function () {
            return Date.now() - o;
          }, o = Date.now()) : (e.exports = function () {
            return new Date().getTime() - o;
          }, o = new Date().getTime());
        }).call(this);
      }).call(this, t("_process"));
    }, {
      _process: 3
    }],
    3: [function (t, e, i) {
      function n() {
        throw new Error("setTimeout has not been defined");
      }

      function o() {
        throw new Error("clearTimeout has not been defined");
      }

      function s(t) {
        if (c === setTimeout) return setTimeout(t, 0);
        if ((c === n || !c) && setTimeout) return c = setTimeout, setTimeout(t, 0);

        try {
          return c(t, 0);
        } catch (e) {
          try {
            return c.call(null, t, 0);
          } catch (e) {
            return c.call(this, t, 0);
          }
        }
      }

      function r(t) {
        if (d === clearTimeout) return clearTimeout(t);
        if ((d === o || !d) && clearTimeout) return d = clearTimeout, clearTimeout(t);

        try {
          return d(t);
        } catch (e) {
          try {
            return d.call(null, t);
          } catch (e) {
            return d.call(this, t);
          }
        }
      }

      function a() {
        v && p && (v = !1, p.length ? f = p.concat(f) : y = -1, f.length && l());
      }

      function l() {
        if (!v) {
          var t = s(a);
          v = !0;

          for (var e = f.length; e;) {
            for (p = f, f = []; ++y < e;) {
              p && p[y].run();
            }

            y = -1, e = f.length;
          }

          p = null, v = !1, r(t);
        }
      }

      function h(t, e) {
        this.fun = t, this.array = e;
      }

      function u() {}

      var c,
          d,
          m = e.exports = {};
      !function () {
        try {
          c = "function" == typeof setTimeout ? setTimeout : n;
        } catch (t) {
          c = n;
        }

        try {
          d = "function" == typeof clearTimeout ? clearTimeout : o;
        } catch (t) {
          d = o;
        }
      }();
      var p,
          f = [],
          v = !1,
          y = -1;
      m.nextTick = function (t) {
        var e = new Array(arguments.length - 1);
        if (arguments.length > 1) for (var i = 1; i < arguments.length; i++) {
          e[i - 1] = arguments[i];
        }
        f.push(new h(t, e)), 1 !== f.length || v || s(l);
      }, h.prototype.run = function () {
        this.fun.apply(null, this.array);
      }, m.title = "browser", m.browser = !0, m.env = {}, m.argv = [], m.version = "", m.versions = {}, m.on = u, m.addListener = u, m.once = u, m.off = u, m.removeListener = u, m.removeAllListeners = u, m.emit = u, m.prependListener = u, m.prependOnceListener = u, m.listeners = function (t) {
        return [];
      }, m.binding = function (t) {
        throw new Error("process.binding is not supported");
      }, m.cwd = function () {
        return "/";
      }, m.chdir = function (t) {
        throw new Error("process.chdir is not supported");
      }, m.umask = function () {
        return 0;
      };
    }, {}],
    4: [function (t, e, i) {
      (function (i) {
        for (var n = t("performance-now"), o = "undefined" == typeof window ? i : window, s = ["moz", "webkit"], r = "AnimationFrame", a = o["request" + r], l = o["cancel" + r] || o["cancelRequest" + r], h = 0; !a && h < s.length; h++) {
          a = o[s[h] + "Request" + r], l = o[s[h] + "Cancel" + r] || o[s[h] + "CancelRequest" + r];
        }

        if (!a || !l) {
          var u = 0,
              c = 0,
              d = [];
          a = function a(t) {
            if (0 === d.length) {
              var e = n(),
                  i = Math.max(0, 1e3 / 60 - (e - u));
              u = i + e, setTimeout(function () {
                var t = d.slice(0);
                d.length = 0;

                for (var e = 0; e < t.length; e++) {
                  if (!t[e].cancelled) try {
                    t[e].callback(u);
                  } catch (t) {
                    setTimeout(function () {
                      throw t;
                    }, 0);
                  }
                }
              }, Math.round(i));
            }

            return d.push({
              handle: ++c,
              callback: t,
              cancelled: !1
            }), c;
          }, l = function l(t) {
            for (var e = 0; e < d.length; e++) {
              d[e].handle === t && (d[e].cancelled = !0);
            }
          };
        }

        e.exports = function (t) {
          return a.call(o, t);
        }, e.exports.cancel = function () {
          l.apply(o, arguments);
        }, e.exports.polyfill = function () {
          o.requestAnimationFrame = a, o.cancelAnimationFrame = l;
        };
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      "performance-now": 2
    }],
    5: [function (t, e, i) {
      "use strict";

      function n(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
      }

      var o = function () {
        function t(t, e) {
          for (var i = 0; i < e.length; i++) {
            var n = e[i];
            n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
          }
        }

        return function (e, i, n) {
          return i && t(e.prototype, i), n && t(e, n), e;
        };
      }(),
          s = t("raf"),
          r = t("object-assign"),
          a = {
        propertyCache: {},
        vendors: [null, ["-webkit-", "webkit"], ["-moz-", "Moz"], ["-o-", "O"], ["-ms-", "ms"]],
        clamp: function clamp(t, e, i) {
          return e < i ? t < e ? e : t > i ? i : t : t < i ? i : t > e ? e : t;
        },
        data: function data(t, e) {
          return a.deserialize(t.getAttribute("data-" + e));
        },
        deserialize: function deserialize(t) {
          return "true" === t || "false" !== t && ("null" === t ? null : !isNaN(parseFloat(t)) && isFinite(t) ? parseFloat(t) : t);
        },
        camelCase: function camelCase(t) {
          return t.replace(/-+(.)?/g, function (t, e) {
            return e ? e.toUpperCase() : "";
          });
        },
        accelerate: function accelerate(t) {
          a.css(t, "transform", "translate3d(0,0,0) rotate(0.0001deg)"), a.css(t, "transform-style", "preserve-3d"), a.css(t, "backface-visibility", "hidden");
        },
        transformSupport: function transformSupport(t) {
          for (var e = document.createElement("div"), i = !1, n = null, o = !1, s = null, r = null, l = 0, h = a.vendors.length; l < h; l++) {
            if (null !== a.vendors[l] ? (s = a.vendors[l][0] + "transform", r = a.vendors[l][1] + "Transform") : (s = "transform", r = "transform"), void 0 !== e.style[r]) {
              i = !0;
              break;
            }
          }

          switch (t) {
            case "2D":
              o = i;
              break;

            case "3D":
              if (i) {
                var u = document.body || document.createElement("body"),
                    c = document.documentElement,
                    d = c.style.overflow,
                    m = !1;
                document.body || (m = !0, c.style.overflow = "hidden", c.appendChild(u), u.style.overflow = "hidden", u.style.background = ""), u.appendChild(e), e.style[r] = "translate3d(1px,1px,1px)", o = void 0 !== (n = window.getComputedStyle(e).getPropertyValue(s)) && n.length > 0 && "none" !== n, c.style.overflow = d, u.removeChild(e), m && (u.removeAttribute("style"), u.parentNode.removeChild(u));
              }

          }

          return o;
        },
        css: function css(t, e, i) {
          var n = a.propertyCache[e];
          if (!n) for (var o = 0, s = a.vendors.length; o < s; o++) {
            if (n = null !== a.vendors[o] ? a.camelCase(a.vendors[o][1] + "-" + e) : e, void 0 !== t.style[n]) {
              a.propertyCache[e] = n;
              break;
            }
          }
          t.style[n] = i;
        }
      },
          l = {
        relativeInput: !1,
        clipRelativeInput: !1,
        inputElement: null,
        hoverOnly: !1,
        calibrationThreshold: 100,
        calibrationDelay: 500,
        supportDelay: 500,
        calibrateX: !1,
        calibrateY: !0,
        invertX: !0,
        invertY: !0,
        limitX: !1,
        limitY: !1,
        scalarX: 10,
        scalarY: 10,
        frictionX: 0.1,
        frictionY: 0.1,
        originX: 0.5,
        originY: 0.5,
        pointerEvents: !1,
        precision: 1,
        onReady: null,
        selector: null
      },
          h = function () {
        function t(e, i) {
          n(this, t), this.element = e;
          var o = {
            calibrateX: a.data(this.element, "calibrate-x"),
            calibrateY: a.data(this.element, "calibrate-y"),
            invertX: a.data(this.element, "invert-x"),
            invertY: a.data(this.element, "invert-y"),
            limitX: a.data(this.element, "limit-x"),
            limitY: a.data(this.element, "limit-y"),
            scalarX: a.data(this.element, "scalar-x"),
            scalarY: a.data(this.element, "scalar-y"),
            frictionX: a.data(this.element, "friction-x"),
            frictionY: a.data(this.element, "friction-y"),
            originX: a.data(this.element, "origin-x"),
            originY: a.data(this.element, "origin-y"),
            pointerEvents: a.data(this.element, "pointer-events"),
            precision: a.data(this.element, "precision"),
            relativeInput: a.data(this.element, "relative-input"),
            clipRelativeInput: a.data(this.element, "clip-relative-input"),
            hoverOnly: a.data(this.element, "hover-only"),
            inputElement: document.querySelector(a.data(this.element, "input-element")),
            selector: a.data(this.element, "selector")
          };

          for (var s in o) {
            null === o[s] && delete o[s];
          }

          r(this, l, o, i), this.inputElement || (this.inputElement = this.element), this.calibrationTimer = null, this.calibrationFlag = !0, this.enabled = !1, this.depthsX = [], this.depthsY = [], this.raf = null, this.bounds = null, this.elementPositionX = 0, this.elementPositionY = 0, this.elementWidth = 0, this.elementHeight = 0, this.elementCenterX = 0, this.elementCenterY = 0, this.elementRangeX = 0, this.elementRangeY = 0, this.calibrationX = 0, this.calibrationY = 0, this.inputX = 0, this.inputY = 0, this.motionX = 0, this.motionY = 0, this.velocityX = 0, this.velocityY = 0, this.onMouseMove = this.onMouseMove.bind(this), this.onDeviceOrientation = this.onDeviceOrientation.bind(this), this.onDeviceMotion = this.onDeviceMotion.bind(this), this.onOrientationTimer = this.onOrientationTimer.bind(this), this.onMotionTimer = this.onMotionTimer.bind(this), this.onCalibrationTimer = this.onCalibrationTimer.bind(this), this.onAnimationFrame = this.onAnimationFrame.bind(this), this.onWindowResize = this.onWindowResize.bind(this), this.windowWidth = null, this.windowHeight = null, this.windowCenterX = null, this.windowCenterY = null, this.windowRadiusX = null, this.windowRadiusY = null, this.portrait = !1, this.desktop = !navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|BB10|mobi|tablet|opera mini|nexus 7)/i), this.motionSupport = !!window.DeviceMotionEvent && !this.desktop, this.orientationSupport = !!window.DeviceOrientationEvent && !this.desktop, this.orientationStatus = 0, this.motionStatus = 0, this.initialise();
        }

        return o(t, [{
          key: "initialise",
          value: function value() {
            void 0 === this.transform2DSupport && (this.transform2DSupport = a.transformSupport("2D"), this.transform3DSupport = a.transformSupport("3D")), this.transform3DSupport && a.accelerate(this.element), "static" === window.getComputedStyle(this.element).getPropertyValue("position") && (this.element.style.position = "relative"), this.pointerEvents || (this.element.style.pointerEvents = "none"), this.updateLayers(), this.updateDimensions(), this.enable(), this.queueCalibration(this.calibrationDelay);
          }
        }, {
          key: "doReadyCallback",
          value: function value() {
            this.onReady && this.onReady();
          }
        }, {
          key: "updateLayers",
          value: function value() {
            this.selector ? this.layers = this.element.querySelectorAll(this.selector) : this.layers = this.element.children, this.layers.length || console.warn("ParallaxJS: Your scene does not have any layers."), this.depthsX = [], this.depthsY = [];

            for (var t = 0; t < this.layers.length; t++) {
              var e = this.layers[t];
              this.transform3DSupport && a.accelerate(e), e.style.position = t ? "absolute" : "relative", e.style.display = "block", e.style.left = 0, e.style.top = 0;
              var i = a.data(e, "depth") || 0;
              this.depthsX.push(a.data(e, "depth-x") || i), this.depthsY.push(a.data(e, "depth-y") || i);
            }
          }
        }, {
          key: "updateDimensions",
          value: function value() {
            this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight, this.windowCenterX = this.windowWidth * this.originX, this.windowCenterY = this.windowHeight * this.originY, this.windowRadiusX = Math.max(this.windowCenterX, this.windowWidth - this.windowCenterX), this.windowRadiusY = Math.max(this.windowCenterY, this.windowHeight - this.windowCenterY);
          }
        }, {
          key: "updateBounds",
          value: function value() {
            this.bounds = this.inputElement.getBoundingClientRect(), this.elementPositionX = this.bounds.left, this.elementPositionY = this.bounds.top, this.elementWidth = this.bounds.width, this.elementHeight = this.bounds.height, this.elementCenterX = this.elementWidth * this.originX, this.elementCenterY = this.elementHeight * this.originY, this.elementRangeX = Math.max(this.elementCenterX, this.elementWidth - this.elementCenterX), this.elementRangeY = Math.max(this.elementCenterY, this.elementHeight - this.elementCenterY);
          }
        }, {
          key: "queueCalibration",
          value: function value(t) {
            clearTimeout(this.calibrationTimer), this.calibrationTimer = setTimeout(this.onCalibrationTimer, t);
          }
        }, {
          key: "enable",
          value: function value() {
            this.enabled || (this.enabled = !0, this.orientationSupport ? (this.portrait = !1, window.addEventListener("deviceorientation", this.onDeviceOrientation), this.detectionTimer = setTimeout(this.onOrientationTimer, this.supportDelay)) : this.motionSupport ? (this.portrait = !1, window.addEventListener("devicemotion", this.onDeviceMotion), this.detectionTimer = setTimeout(this.onMotionTimer, this.supportDelay)) : (this.calibrationX = 0, this.calibrationY = 0, this.portrait = !1, window.addEventListener("mousemove", this.onMouseMove), this.doReadyCallback()), window.addEventListener("resize", this.onWindowResize), this.raf = s(this.onAnimationFrame));
          }
        }, {
          key: "disable",
          value: function value() {
            this.enabled && (this.enabled = !1, this.orientationSupport ? window.removeEventListener("deviceorientation", this.onDeviceOrientation) : this.motionSupport ? window.removeEventListener("devicemotion", this.onDeviceMotion) : window.removeEventListener("mousemove", this.onMouseMove), window.removeEventListener("resize", this.onWindowResize), s.cancel(this.raf));
          }
        }, {
          key: "calibrate",
          value: function value(t, e) {
            this.calibrateX = void 0 === t ? this.calibrateX : t, this.calibrateY = void 0 === e ? this.calibrateY : e;
          }
        }, {
          key: "invert",
          value: function value(t, e) {
            this.invertX = void 0 === t ? this.invertX : t, this.invertY = void 0 === e ? this.invertY : e;
          }
        }, {
          key: "friction",
          value: function value(t, e) {
            this.frictionX = void 0 === t ? this.frictionX : t, this.frictionY = void 0 === e ? this.frictionY : e;
          }
        }, {
          key: "scalar",
          value: function value(t, e) {
            this.scalarX = void 0 === t ? this.scalarX : t, this.scalarY = void 0 === e ? this.scalarY : e;
          }
        }, {
          key: "limit",
          value: function value(t, e) {
            this.limitX = void 0 === t ? this.limitX : t, this.limitY = void 0 === e ? this.limitY : e;
          }
        }, {
          key: "origin",
          value: function value(t, e) {
            this.originX = void 0 === t ? this.originX : t, this.originY = void 0 === e ? this.originY : e;
          }
        }, {
          key: "setInputElement",
          value: function value(t) {
            this.inputElement = t, this.updateDimensions();
          }
        }, {
          key: "setPosition",
          value: function value(t, e, i) {
            e = e.toFixed(this.precision) + "px", i = i.toFixed(this.precision) + "px", this.transform3DSupport ? a.css(t, "transform", "translate3d(" + e + "," + i + ",0)") : this.transform2DSupport ? a.css(t, "transform", "translate(" + e + "," + i + ")") : (t.style.left = e, t.style.top = i);
          }
        }, {
          key: "onOrientationTimer",
          value: function value() {
            this.orientationSupport && 0 === this.orientationStatus ? (this.disable(), this.orientationSupport = !1, this.enable()) : this.doReadyCallback();
          }
        }, {
          key: "onMotionTimer",
          value: function value() {
            this.motionSupport && 0 === this.motionStatus ? (this.disable(), this.motionSupport = !1, this.enable()) : this.doReadyCallback();
          }
        }, {
          key: "onCalibrationTimer",
          value: function value() {
            this.calibrationFlag = !0;
          }
        }, {
          key: "onWindowResize",
          value: function value() {
            this.updateDimensions();
          }
        }, {
          key: "onAnimationFrame",
          value: function value() {
            this.updateBounds();
            var t = this.inputX - this.calibrationX,
                e = this.inputY - this.calibrationY;
            (Math.abs(t) > this.calibrationThreshold || Math.abs(e) > this.calibrationThreshold) && this.queueCalibration(0), this.portrait ? (this.motionX = this.calibrateX ? e : this.inputY, this.motionY = this.calibrateY ? t : this.inputX) : (this.motionX = this.calibrateX ? t : this.inputX, this.motionY = this.calibrateY ? e : this.inputY), this.motionX *= this.elementWidth * (this.scalarX / 100), this.motionY *= this.elementHeight * (this.scalarY / 100), isNaN(parseFloat(this.limitX)) || (this.motionX = a.clamp(this.motionX, -this.limitX, this.limitX)), isNaN(parseFloat(this.limitY)) || (this.motionY = a.clamp(this.motionY, -this.limitY, this.limitY)), this.velocityX += (this.motionX - this.velocityX) * this.frictionX, this.velocityY += (this.motionY - this.velocityY) * this.frictionY;

            for (var i = 0; i < this.layers.length; i++) {
              var n = this.layers[i],
                  o = this.depthsX[i],
                  r = this.depthsY[i],
                  l = this.velocityX * (o * (this.invertX ? -1 : 1)),
                  h = this.velocityY * (r * (this.invertY ? -1 : 1));
              this.setPosition(n, l, h);
            }

            this.raf = s(this.onAnimationFrame);
          }
        }, {
          key: "rotate",
          value: function value(t, e) {
            var i = (t || 0) / 30,
                n = (e || 0) / 30,
                o = this.windowHeight > this.windowWidth;
            this.portrait !== o && (this.portrait = o, this.calibrationFlag = !0), this.calibrationFlag && (this.calibrationFlag = !1, this.calibrationX = i, this.calibrationY = n), this.inputX = i, this.inputY = n;
          }
        }, {
          key: "onDeviceOrientation",
          value: function value(t) {
            var e = t.beta,
                i = t.gamma;
            null !== e && null !== i && (this.orientationStatus = 1, this.rotate(e, i));
          }
        }, {
          key: "onDeviceMotion",
          value: function value(t) {
            var e = t.rotationRate.beta,
                i = t.rotationRate.gamma;
            null !== e && null !== i && (this.motionStatus = 1, this.rotate(e, i));
          }
        }, {
          key: "onMouseMove",
          value: function value(t) {
            var e = t.clientX,
                i = t.clientY;
            if (this.hoverOnly && (e < this.elementPositionX || e > this.elementPositionX + this.elementWidth || i < this.elementPositionY || i > this.elementPositionY + this.elementHeight)) return this.inputX = 0, void (this.inputY = 0);
            this.relativeInput ? (this.clipRelativeInput && (e = Math.max(e, this.elementPositionX), e = Math.min(e, this.elementPositionX + this.elementWidth), i = Math.max(i, this.elementPositionY), i = Math.min(i, this.elementPositionY + this.elementHeight)), this.elementRangeX && this.elementRangeY && (this.inputX = (e - this.elementPositionX - this.elementCenterX) / this.elementRangeX, this.inputY = (i - this.elementPositionY - this.elementCenterY) / this.elementRangeY)) : this.windowRadiusX && this.windowRadiusY && (this.inputX = (e - this.windowCenterX) / this.windowRadiusX, this.inputY = (i - this.windowCenterY) / this.windowRadiusY);
          }
        }, {
          key: "destroy",
          value: function value() {
            this.disable(), clearTimeout(this.calibrationTimer), clearTimeout(this.detectionTimer), this.element.removeAttribute("style");

            for (var t = 0; t < this.layers.length; t++) {
              this.layers[t].removeAttribute("style");
            }

            delete this.element, delete this.layers;
          }
        }, {
          key: "version",
          value: function value() {
            return "3.1.0";
          }
        }]), t;
      }();

      e.exports = h;
    }, {
      "object-assign": 1,
      raf: 4
    }]
  }, {}, [5])(5);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! @rails/ujs */ "./node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js"), __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable.js ***!
  \**************************************************************************/
/*! exports provided: getConsumer, setConsumer, createConsumer, subscribeTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getConsumer", function() { return getConsumer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setConsumer", function() { return setConsumer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createConsumer", function() { return createConsumer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeTo", function() { return subscribeTo; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var consumer;
function getConsumer() {
  return _getConsumer.apply(this, arguments);
}

function _getConsumer() {
  _getConsumer = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", consumer || setConsumer(createConsumer().then(setConsumer)));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getConsumer.apply(this, arguments);
}

function setConsumer(newConsumer) {
  return consumer = newConsumer;
}
function createConsumer() {
  return _createConsumer.apply(this, arguments);
}

function _createConsumer() {
  _createConsumer = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {
    var _yield$import, createConsumer;

    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return __webpack_require__.e(/*! import() | actioncable */ "vendors~actioncable").then(__webpack_require__.bind(null, /*! @rails/actioncable/src */ "./node_modules/@rails/actioncable/src/index.js"));

          case 2:
            _yield$import = _context2.sent;
            createConsumer = _yield$import.createConsumer;
            return _context2.abrupt("return", createConsumer());

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _createConsumer.apply(this, arguments);
}

function subscribeTo(_x, _x2) {
  return _subscribeTo.apply(this, arguments);
}

function _subscribeTo() {
  _subscribeTo = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3(channel, mixin) {
    var _yield$getConsumer, subscriptions;

    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return getConsumer();

          case 2:
            _yield$getConsumer = _context3.sent;
            subscriptions = _yield$getConsumer.subscriptions;
            return _context3.abrupt("return", subscriptions.create(channel, mixin));

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _subscribeTo.apply(this, arguments);
}

/***/ }),

/***/ "./node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable_stream_source_element.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable_stream_source_element.js ***!
  \************************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _hotwired_turbo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @hotwired/turbo */ "./node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js");
/* harmony import */ var _cable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cable */ "./node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }



function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var TurboCableStreamSourceElement = /*#__PURE__*/function (_HTMLElement) {
  _inherits(TurboCableStreamSourceElement, _HTMLElement);

  var _super = _createSuper(TurboCableStreamSourceElement);

  function TurboCableStreamSourceElement() {
    _classCallCheck(this, TurboCableStreamSourceElement);

    return _super.apply(this, arguments);
  }

  _createClass(TurboCableStreamSourceElement, [{
    key: "connectedCallback",
    value: function () {
      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Object(_hotwired_turbo__WEBPACK_IMPORTED_MODULE_1__["connectStreamSource"])(this);
                _context.next = 3;
                return Object(_cable__WEBPACK_IMPORTED_MODULE_2__["subscribeTo"])(this.channel, {
                  received: this.dispatchMessageEvent.bind(this)
                });

              case 3:
                this.subscription = _context.sent;

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connectedCallback() {
        return _connectedCallback.apply(this, arguments);
      }

      return connectedCallback;
    }()
  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      Object(_hotwired_turbo__WEBPACK_IMPORTED_MODULE_1__["disconnectStreamSource"])(this);
      if (this.subscription) this.subscription.unsubscribe();
    }
  }, {
    key: "dispatchMessageEvent",
    value: function dispatchMessageEvent(data) {
      var event = new MessageEvent("message", {
        data: data
      });
      return this.dispatchEvent(event);
    }
  }, {
    key: "channel",
    get: function get() {
      var channel = this.getAttribute("channel");
      var signed_stream_name = this.getAttribute("signed-stream-name");
      return {
        channel: channel,
        signed_stream_name: signed_stream_name
      };
    }
  }]);

  return TurboCableStreamSourceElement;
}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

customElements.define("turbo-cable-stream-source", TurboCableStreamSourceElement);

/***/ }),

/***/ "./node_modules/@hotwired/turbo-rails/app/javascript/turbo/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@hotwired/turbo-rails/app/javascript/turbo/index.js ***!
  \**************************************************************************/
/*! exports provided: Turbo, cable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _cable_stream_source_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cable_stream_source_element */ "./node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable_stream_source_element.js");
/* harmony import */ var _hotwired_turbo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @hotwired/turbo */ "./node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "Turbo", function() { return _hotwired_turbo__WEBPACK_IMPORTED_MODULE_1__; });
/* harmony import */ var _cable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cable */ "./node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "cable", function() { return _cable__WEBPACK_IMPORTED_MODULE_2__; });






/***/ }),

/***/ "./node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js ***!
  \***************************************************************/
/*! exports provided: PageRenderer, PageSnapshot, clearCache, connectStreamSource, disconnectStreamSource, navigator, registerAdapter, renderStreamMessage, session, setConfirmMethod, setProgressBarDelay, start, visit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageRenderer", function() { return PageRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageSnapshot", function() { return PageSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearCache", function() { return clearCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectStreamSource", function() { return connectStreamSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disconnectStreamSource", function() { return disconnectStreamSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "navigator", function() { return navigator$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerAdapter", function() { return registerAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderStreamMessage", function() { return renderStreamMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "session", function() { return session; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setConfirmMethod", function() { return setConfirmMethod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setProgressBarDelay", function() { return setProgressBarDelay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "start", function() { return start; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "visit", function() { return visit; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
var _templateObject, _templateObject2;

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }



function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/*
Turbo 7.1.0
Copyright © 2021 Basecamp, LLC
 */
(function () {
  if (window.Reflect === undefined || window.customElements === undefined || window.customElements.polyfillWrapFlushCallback) {
    return;
  }

  var BuiltInHTMLElement = HTMLElement;
  var wrapperForTheName = {
    'HTMLElement': function HTMLElement() {
      return Reflect.construct(BuiltInHTMLElement, [], this.constructor);
    }
  };
  window.HTMLElement = wrapperForTheName['HTMLElement'];
  HTMLElement.prototype = BuiltInHTMLElement.prototype;
  HTMLElement.prototype.constructor = HTMLElement;
  Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);
})();
/**
 * The MIT License (MIT)
 * 
 * Copyright (c) 2019 Javan Makhmali
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


(function (prototype) {
  if (typeof prototype.requestSubmit == "function") return;

  prototype.requestSubmit = function (submitter) {
    if (submitter) {
      validateSubmitter(submitter, this);
      submitter.click();
    } else {
      submitter = document.createElement("input");
      submitter.type = "submit";
      submitter.hidden = true;
      this.appendChild(submitter);
      submitter.click();
      this.removeChild(submitter);
    }
  };

  function validateSubmitter(submitter, form) {
    submitter instanceof HTMLElement || raise(TypeError, "parameter 1 is not of type 'HTMLElement'");
    submitter.type == "submit" || raise(TypeError, "The specified element is not a submit button");
    submitter.form == form || raise(DOMException, "The specified element is not owned by this form element", "NotFoundError");
  }

  function raise(errorConstructor, message, name) {
    throw new errorConstructor("Failed to execute 'requestSubmit' on 'HTMLFormElement': " + message + ".", name);
  }
})(HTMLFormElement.prototype);

var submittersByForm = new WeakMap();

function findSubmitterFromClickTarget(target) {
  var element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
  var candidate = element ? element.closest("input, button") : null;
  return (candidate === null || candidate === void 0 ? void 0 : candidate.type) == "submit" ? candidate : null;
}

function clickCaptured(event) {
  var submitter = findSubmitterFromClickTarget(event.target);

  if (submitter && submitter.form) {
    submittersByForm.set(submitter.form, submitter);
  }
}

(function () {
  if ("submitter" in Event.prototype) return;
  var prototype;

  if ("SubmitEvent" in window && /Apple Computer/.test(navigator.vendor)) {
    prototype = window.SubmitEvent.prototype;
  } else if ("SubmitEvent" in window) {
    return;
  } else {
    prototype = window.Event.prototype;
  }

  addEventListener("click", clickCaptured, true);
  Object.defineProperty(prototype, "submitter", {
    get: function get() {
      if (this.type == "submit" && this.target instanceof HTMLFormElement) {
        return submittersByForm.get(this.target);
      }
    }
  });
})();

var FrameLoadingStyle;

(function (FrameLoadingStyle) {
  FrameLoadingStyle["eager"] = "eager";
  FrameLoadingStyle["lazy"] = "lazy";
})(FrameLoadingStyle || (FrameLoadingStyle = {}));

var FrameElement = /*#__PURE__*/function (_HTMLElement) {
  _inherits(FrameElement, _HTMLElement);

  var _super = _createSuper(FrameElement);

  function FrameElement() {
    var _this;

    _classCallCheck(this, FrameElement);

    _this = _super.call(this);
    _this.loaded = Promise.resolve();
    _this.delegate = new FrameElement.delegateConstructor(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(FrameElement, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      this.delegate.connect();
    }
  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      this.delegate.disconnect();
    }
  }, {
    key: "reload",
    value: function reload() {
      var src = this.src;
      this.src = null;
      this.src = src;
    }
  }, {
    key: "attributeChangedCallback",
    value: function attributeChangedCallback(name) {
      if (name == "loading") {
        this.delegate.loadingStyleChanged();
      } else if (name == "src") {
        this.delegate.sourceURLChanged();
      } else {
        this.delegate.disabledChanged();
      }
    }
  }, {
    key: "src",
    get: function get() {
      return this.getAttribute("src");
    },
    set: function set(value) {
      if (value) {
        this.setAttribute("src", value);
      } else {
        this.removeAttribute("src");
      }
    }
  }, {
    key: "loading",
    get: function get() {
      return frameLoadingStyleFromString(this.getAttribute("loading") || "");
    },
    set: function set(value) {
      if (value) {
        this.setAttribute("loading", value);
      } else {
        this.removeAttribute("loading");
      }
    }
  }, {
    key: "disabled",
    get: function get() {
      return this.hasAttribute("disabled");
    },
    set: function set(value) {
      if (value) {
        this.setAttribute("disabled", "");
      } else {
        this.removeAttribute("disabled");
      }
    }
  }, {
    key: "autoscroll",
    get: function get() {
      return this.hasAttribute("autoscroll");
    },
    set: function set(value) {
      if (value) {
        this.setAttribute("autoscroll", "");
      } else {
        this.removeAttribute("autoscroll");
      }
    }
  }, {
    key: "complete",
    get: function get() {
      return !this.delegate.isLoading;
    }
  }, {
    key: "isActive",
    get: function get() {
      return this.ownerDocument === document && !this.isPreview;
    }
  }, {
    key: "isPreview",
    get: function get() {
      var _a, _b;

      return (_b = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.documentElement) === null || _b === void 0 ? void 0 : _b.hasAttribute("data-turbo-preview");
    }
  }], [{
    key: "observedAttributes",
    get: function get() {
      return ["disabled", "loading", "src"];
    }
  }]);

  return FrameElement;
}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

function frameLoadingStyleFromString(style) {
  switch (style.toLowerCase()) {
    case "lazy":
      return FrameLoadingStyle.lazy;

    default:
      return FrameLoadingStyle.eager;
  }
}

function expandURL(locatable) {
  return new URL(locatable.toString(), document.baseURI);
}

function getAnchor(url) {
  var anchorMatch;

  if (url.hash) {
    return url.hash.slice(1);
  } else if (anchorMatch = url.href.match(/#(.*)$/)) {
    return anchorMatch[1];
  }
}

function getAction(form, submitter) {
  var action = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formaction")) || form.getAttribute("action") || form.action;
  return expandURL(action);
}

function getExtension(url) {
  return (getLastPathComponent(url).match(/\.[^.]*$/) || [])[0] || "";
}

function isHTML(url) {
  return !!getExtension(url).match(/^(?:|\.(?:htm|html|xhtml))$/);
}

function isPrefixedBy(baseURL, url) {
  var prefix = getPrefix(url);
  return baseURL.href === expandURL(prefix).href || baseURL.href.startsWith(prefix);
}

function locationIsVisitable(location, rootLocation) {
  return isPrefixedBy(location, rootLocation) && isHTML(location);
}

function getRequestURL(url) {
  var anchor = getAnchor(url);
  return anchor != null ? url.href.slice(0, -(anchor.length + 1)) : url.href;
}

function toCacheKey(url) {
  return getRequestURL(url);
}

function urlsAreEqual(left, right) {
  return expandURL(left).href == expandURL(right).href;
}

function getPathComponents(url) {
  return url.pathname.split("/").slice(1);
}

function getLastPathComponent(url) {
  return getPathComponents(url).slice(-1)[0];
}

function getPrefix(url) {
  return addTrailingSlash(url.origin + url.pathname);
}

function addTrailingSlash(value) {
  return value.endsWith("/") ? value : value + "/";
}

var FetchResponse = /*#__PURE__*/function () {
  function FetchResponse(response) {
    _classCallCheck(this, FetchResponse);

    this.response = response;
  }

  _createClass(FetchResponse, [{
    key: "succeeded",
    get: function get() {
      return this.response.ok;
    }
  }, {
    key: "failed",
    get: function get() {
      return !this.succeeded;
    }
  }, {
    key: "clientError",
    get: function get() {
      return this.statusCode >= 400 && this.statusCode <= 499;
    }
  }, {
    key: "serverError",
    get: function get() {
      return this.statusCode >= 500 && this.statusCode <= 599;
    }
  }, {
    key: "redirected",
    get: function get() {
      return this.response.redirected;
    }
  }, {
    key: "location",
    get: function get() {
      return expandURL(this.response.url);
    }
  }, {
    key: "isHTML",
    get: function get() {
      return this.contentType && this.contentType.match(/^(?:text\/([^\s;,]+\b)?html|application\/xhtml\+xml)\b/);
    }
  }, {
    key: "statusCode",
    get: function get() {
      return this.response.status;
    }
  }, {
    key: "contentType",
    get: function get() {
      return this.header("Content-Type");
    }
  }, {
    key: "responseText",
    get: function get() {
      return this.response.clone().text();
    }
  }, {
    key: "responseHTML",
    get: function get() {
      if (this.isHTML) {
        return this.response.clone().text();
      } else {
        return Promise.resolve(undefined);
      }
    }
  }, {
    key: "header",
    value: function header(name) {
      return this.response.headers.get(name);
    }
  }]);

  return FetchResponse;
}();

function dispatch(eventName) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      target = _ref.target,
      cancelable = _ref.cancelable,
      detail = _ref.detail;

  var event = new CustomEvent(eventName, {
    cancelable: cancelable,
    bubbles: true,
    detail: detail
  });

  if (target && target.isConnected) {
    target.dispatchEvent(event);
  } else {
    document.documentElement.dispatchEvent(event);
  }

  return event;
}

function nextAnimationFrame() {
  return new Promise(function (resolve) {
    return requestAnimationFrame(function () {
      return resolve();
    });
  });
}

function nextEventLoopTick() {
  return new Promise(function (resolve) {
    return setTimeout(function () {
      return resolve();
    }, 0);
  });
}

function nextMicrotask() {
  return Promise.resolve();
}

function parseHTMLDocument() {
  var html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  return new DOMParser().parseFromString(html, "text/html");
}

function unindent(strings) {
  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    values[_key - 1] = arguments[_key];
  }

  var lines = interpolate(strings, values).replace(/^\n/, "").split("\n");
  var match = lines[0].match(/^\s+/);
  var indent = match ? match[0].length : 0;
  return lines.map(function (line) {
    return line.slice(indent);
  }).join("\n");
}

function interpolate(strings, values) {
  return strings.reduce(function (result, string, i) {
    var value = values[i] == undefined ? "" : values[i];
    return result + string + value;
  }, "");
}

function uuid() {
  return Array.apply(null, {
    length: 36
  }).map(function (_, i) {
    if (i == 8 || i == 13 || i == 18 || i == 23) {
      return "-";
    } else if (i == 14) {
      return "4";
    } else if (i == 19) {
      return (Math.floor(Math.random() * 4) + 8).toString(16);
    } else {
      return Math.floor(Math.random() * 15).toString(16);
    }
  }).join("");
}

function getAttribute(attributeName) {
  for (var _len2 = arguments.length, elements = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    elements[_key2 - 1] = arguments[_key2];
  }

  var _iterator = _createForOfIteratorHelper(elements.map(function (element) {
    return element === null || element === void 0 ? void 0 : element.getAttribute(attributeName);
  })),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var value = _step.value;
      if (typeof value == "string") return value;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return null;
}

function markAsBusy() {
  for (var _len3 = arguments.length, elements = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    elements[_key3] = arguments[_key3];
  }

  for (var _i = 0, _elements = elements; _i < _elements.length; _i++) {
    var element = _elements[_i];

    if (element.localName == "turbo-frame") {
      element.setAttribute("busy", "");
    }

    element.setAttribute("aria-busy", "true");
  }
}

function clearBusyState() {
  for (var _len4 = arguments.length, elements = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    elements[_key4] = arguments[_key4];
  }

  for (var _i2 = 0, _elements2 = elements; _i2 < _elements2.length; _i2++) {
    var element = _elements2[_i2];

    if (element.localName == "turbo-frame") {
      element.removeAttribute("busy");
    }

    element.removeAttribute("aria-busy");
  }
}

var FetchMethod;

(function (FetchMethod) {
  FetchMethod[FetchMethod["get"] = 0] = "get";
  FetchMethod[FetchMethod["post"] = 1] = "post";
  FetchMethod[FetchMethod["put"] = 2] = "put";
  FetchMethod[FetchMethod["patch"] = 3] = "patch";
  FetchMethod[FetchMethod["delete"] = 4] = "delete";
})(FetchMethod || (FetchMethod = {}));

function fetchMethodFromString(method) {
  switch (method.toLowerCase()) {
    case "get":
      return FetchMethod.get;

    case "post":
      return FetchMethod.post;

    case "put":
      return FetchMethod.put;

    case "patch":
      return FetchMethod.patch;

    case "delete":
      return FetchMethod.delete;
  }
}

var FetchRequest = /*#__PURE__*/function () {
  function FetchRequest(delegate, method, location) {
    var body = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new URLSearchParams();
    var target = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

    _classCallCheck(this, FetchRequest);

    this.abortController = new AbortController();

    this.resolveRequestPromise = function (value) {};

    this.delegate = delegate;
    this.method = method;
    this.headers = this.defaultHeaders;
    this.body = body;
    this.url = location;
    this.target = target;
  }

  _createClass(FetchRequest, [{
    key: "location",
    get: function get() {
      return this.url;
    }
  }, {
    key: "params",
    get: function get() {
      return this.url.searchParams;
    }
  }, {
    key: "entries",
    get: function get() {
      return this.body ? Array.from(this.body.entries()) : [];
    }
  }, {
    key: "cancel",
    value: function cancel() {
      this.abortController.abort();
    }
  }, {
    key: "perform",
    value: function () {
      var _perform = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
        var _a, _b, fetchOptions, response;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                fetchOptions = this.fetchOptions;
                (_b = (_a = this.delegate).prepareHeadersForRequest) === null || _b === void 0 ? void 0 : _b.call(_a, this.headers, this);
                _context.next = 4;
                return this.allowRequestToBeIntercepted(fetchOptions);

              case 4:
                _context.prev = 4;
                this.delegate.requestStarted(this);
                _context.next = 8;
                return fetch(this.url.href, fetchOptions);

              case 8:
                response = _context.sent;
                _context.next = 11;
                return this.receive(response);

              case 11:
                return _context.abrupt("return", _context.sent);

              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](4);

                if (!(_context.t0.name !== 'AbortError')) {
                  _context.next = 19;
                  break;
                }

                this.delegate.requestErrored(this, _context.t0);
                throw _context.t0;

              case 19:
                _context.prev = 19;
                this.delegate.requestFinished(this);
                return _context.finish(19);

              case 22:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 14, 19, 22]]);
      }));

      function perform() {
        return _perform.apply(this, arguments);
      }

      return perform;
    }()
  }, {
    key: "receive",
    value: function () {
      var _receive = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2(response) {
        var fetchResponse, event;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                fetchResponse = new FetchResponse(response);
                event = dispatch("turbo:before-fetch-response", {
                  cancelable: true,
                  detail: {
                    fetchResponse: fetchResponse
                  },
                  target: this.target
                });

                if (event.defaultPrevented) {
                  this.delegate.requestPreventedHandlingResponse(this, fetchResponse);
                } else if (fetchResponse.succeeded) {
                  this.delegate.requestSucceededWithResponse(this, fetchResponse);
                } else {
                  this.delegate.requestFailedWithResponse(this, fetchResponse);
                }

                return _context2.abrupt("return", fetchResponse);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function receive(_x) {
        return _receive.apply(this, arguments);
      }

      return receive;
    }()
  }, {
    key: "fetchOptions",
    get: function get() {
      var _a;

      return {
        method: FetchMethod[this.method].toUpperCase(),
        credentials: "same-origin",
        headers: this.headers,
        redirect: "follow",
        body: this.isIdempotent ? null : this.body,
        signal: this.abortSignal,
        referrer: (_a = this.delegate.referrer) === null || _a === void 0 ? void 0 : _a.href
      };
    }
  }, {
    key: "defaultHeaders",
    get: function get() {
      return {
        "Accept": "text/html, application/xhtml+xml"
      };
    }
  }, {
    key: "isIdempotent",
    get: function get() {
      return this.method == FetchMethod.get;
    }
  }, {
    key: "abortSignal",
    get: function get() {
      return this.abortController.signal;
    }
  }, {
    key: "allowRequestToBeIntercepted",
    value: function () {
      var _allowRequestToBeIntercepted = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3(fetchOptions) {
        var _this2 = this;

        var requestInterception, event;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                requestInterception = new Promise(function (resolve) {
                  return _this2.resolveRequestPromise = resolve;
                });
                event = dispatch("turbo:before-fetch-request", {
                  cancelable: true,
                  detail: {
                    fetchOptions: fetchOptions,
                    url: this.url,
                    resume: this.resolveRequestPromise
                  },
                  target: this.target
                });

                if (!event.defaultPrevented) {
                  _context3.next = 5;
                  break;
                }

                _context3.next = 5;
                return requestInterception;

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function allowRequestToBeIntercepted(_x2) {
        return _allowRequestToBeIntercepted.apply(this, arguments);
      }

      return allowRequestToBeIntercepted;
    }()
  }]);

  return FetchRequest;
}();

var AppearanceObserver = /*#__PURE__*/function () {
  function AppearanceObserver(delegate, element) {
    var _this3 = this;

    _classCallCheck(this, AppearanceObserver);

    this.started = false;

    this.intersect = function (entries) {
      var lastEntry = entries.slice(-1)[0];

      if (lastEntry === null || lastEntry === void 0 ? void 0 : lastEntry.isIntersecting) {
        _this3.delegate.elementAppearedInViewport(_this3.element);
      }
    };

    this.delegate = delegate;
    this.element = element;
    this.intersectionObserver = new IntersectionObserver(this.intersect);
  }

  _createClass(AppearanceObserver, [{
    key: "start",
    value: function start() {
      if (!this.started) {
        this.started = true;
        this.intersectionObserver.observe(this.element);
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.started) {
        this.started = false;
        this.intersectionObserver.unobserve(this.element);
      }
    }
  }]);

  return AppearanceObserver;
}();

var StreamMessage = /*#__PURE__*/function () {
  function StreamMessage(html) {
    _classCallCheck(this, StreamMessage);

    this.templateElement = document.createElement("template");
    this.templateElement.innerHTML = html;
  }

  _createClass(StreamMessage, [{
    key: "fragment",
    get: function get() {
      var fragment = document.createDocumentFragment();

      var _iterator2 = _createForOfIteratorHelper(this.foreignElements),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var element = _step2.value;
          fragment.appendChild(document.importNode(element, true));
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return fragment;
    }
  }, {
    key: "foreignElements",
    get: function get() {
      return this.templateChildren.reduce(function (streamElements, child) {
        if (child.tagName.toLowerCase() == "turbo-stream") {
          return [].concat(_toConsumableArray(streamElements), [child]);
        } else {
          return streamElements;
        }
      }, []);
    }
  }, {
    key: "templateChildren",
    get: function get() {
      return Array.from(this.templateElement.content.children);
    }
  }], [{
    key: "wrap",
    value: function wrap(message) {
      if (typeof message == "string") {
        return new this(message);
      } else {
        return message;
      }
    }
  }]);

  return StreamMessage;
}();

StreamMessage.contentType = "text/vnd.turbo-stream.html";
var FormSubmissionState;

(function (FormSubmissionState) {
  FormSubmissionState[FormSubmissionState["initialized"] = 0] = "initialized";
  FormSubmissionState[FormSubmissionState["requesting"] = 1] = "requesting";
  FormSubmissionState[FormSubmissionState["waiting"] = 2] = "waiting";
  FormSubmissionState[FormSubmissionState["receiving"] = 3] = "receiving";
  FormSubmissionState[FormSubmissionState["stopping"] = 4] = "stopping";
  FormSubmissionState[FormSubmissionState["stopped"] = 5] = "stopped";
})(FormSubmissionState || (FormSubmissionState = {}));

var FormEnctype;

(function (FormEnctype) {
  FormEnctype["urlEncoded"] = "application/x-www-form-urlencoded";
  FormEnctype["multipart"] = "multipart/form-data";
  FormEnctype["plain"] = "text/plain";
})(FormEnctype || (FormEnctype = {}));

function formEnctypeFromString(encoding) {
  switch (encoding.toLowerCase()) {
    case FormEnctype.multipart:
      return FormEnctype.multipart;

    case FormEnctype.plain:
      return FormEnctype.plain;

    default:
      return FormEnctype.urlEncoded;
  }
}

var FormSubmission = /*#__PURE__*/function () {
  function FormSubmission(delegate, formElement, submitter) {
    var mustRedirect = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    _classCallCheck(this, FormSubmission);

    this.state = FormSubmissionState.initialized;
    this.delegate = delegate;
    this.formElement = formElement;
    this.submitter = submitter;
    this.formData = buildFormData(formElement, submitter);
    this.location = expandURL(this.action);

    if (this.method == FetchMethod.get) {
      mergeFormDataEntries(this.location, _toConsumableArray(this.body.entries()));
    }

    this.fetchRequest = new FetchRequest(this, this.method, this.location, this.body, this.formElement);
    this.mustRedirect = mustRedirect;
  }

  _createClass(FormSubmission, [{
    key: "method",
    get: function get() {
      var _a;

      var method = ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formmethod")) || this.formElement.getAttribute("method") || "";
      return fetchMethodFromString(method.toLowerCase()) || FetchMethod.get;
    }
  }, {
    key: "action",
    get: function get() {
      var _a;

      var formElementAction = typeof this.formElement.action === 'string' ? this.formElement.action : null;
      return ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formaction")) || this.formElement.getAttribute("action") || formElementAction || "";
    }
  }, {
    key: "body",
    get: function get() {
      if (this.enctype == FormEnctype.urlEncoded || this.method == FetchMethod.get) {
        return new URLSearchParams(this.stringFormData);
      } else {
        return this.formData;
      }
    }
  }, {
    key: "enctype",
    get: function get() {
      var _a;

      return formEnctypeFromString(((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formenctype")) || this.formElement.enctype);
    }
  }, {
    key: "isIdempotent",
    get: function get() {
      return this.fetchRequest.isIdempotent;
    }
  }, {
    key: "stringFormData",
    get: function get() {
      return _toConsumableArray(this.formData).reduce(function (entries, _ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
            name = _ref3[0],
            value = _ref3[1];

        return entries.concat(typeof value == "string" ? [[name, value]] : []);
      }, []);
    }
  }, {
    key: "confirmationMessage",
    get: function get() {
      return this.formElement.getAttribute("data-turbo-confirm");
    }
  }, {
    key: "needsConfirmation",
    get: function get() {
      return this.confirmationMessage !== null;
    }
  }, {
    key: "start",
    value: function () {
      var _start = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4() {
        var _FormSubmissionState, initialized, requesting, answer;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _FormSubmissionState = FormSubmissionState, initialized = _FormSubmissionState.initialized, requesting = _FormSubmissionState.requesting;

                if (!this.needsConfirmation) {
                  _context4.next = 5;
                  break;
                }

                answer = FormSubmission.confirmMethod(this.confirmationMessage, this.formElement);

                if (answer) {
                  _context4.next = 5;
                  break;
                }

                return _context4.abrupt("return");

              case 5:
                if (!(this.state == initialized)) {
                  _context4.next = 8;
                  break;
                }

                this.state = requesting;
                return _context4.abrupt("return", this.fetchRequest.perform());

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function start() {
        return _start.apply(this, arguments);
      }

      return start;
    }()
  }, {
    key: "stop",
    value: function stop() {
      var _FormSubmissionState2 = FormSubmissionState,
          stopping = _FormSubmissionState2.stopping,
          stopped = _FormSubmissionState2.stopped;

      if (this.state != stopping && this.state != stopped) {
        this.state = stopping;
        this.fetchRequest.cancel();
        return true;
      }
    }
  }, {
    key: "prepareHeadersForRequest",
    value: function prepareHeadersForRequest(headers, request) {
      if (!request.isIdempotent) {
        var token = getCookieValue(getMetaContent("csrf-param")) || getMetaContent("csrf-token");

        if (token) {
          headers["X-CSRF-Token"] = token;
        }

        headers["Accept"] = [StreamMessage.contentType, headers["Accept"]].join(", ");
      }
    }
  }, {
    key: "requestStarted",
    value: function requestStarted(request) {
      var _a;

      this.state = FormSubmissionState.waiting;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.setAttribute("disabled", "");
      dispatch("turbo:submit-start", {
        target: this.formElement,
        detail: {
          formSubmission: this
        }
      });
      this.delegate.formSubmissionStarted(this);
    }
  }, {
    key: "requestPreventedHandlingResponse",
    value: function requestPreventedHandlingResponse(request, response) {
      this.result = {
        success: response.succeeded,
        fetchResponse: response
      };
    }
  }, {
    key: "requestSucceededWithResponse",
    value: function requestSucceededWithResponse(request, response) {
      if (response.clientError || response.serverError) {
        this.delegate.formSubmissionFailedWithResponse(this, response);
      } else if (this.requestMustRedirect(request) && responseSucceededWithoutRedirect(response)) {
        var error = new Error("Form responses must redirect to another location");
        this.delegate.formSubmissionErrored(this, error);
      } else {
        this.state = FormSubmissionState.receiving;
        this.result = {
          success: true,
          fetchResponse: response
        };
        this.delegate.formSubmissionSucceededWithResponse(this, response);
      }
    }
  }, {
    key: "requestFailedWithResponse",
    value: function requestFailedWithResponse(request, response) {
      this.result = {
        success: false,
        fetchResponse: response
      };
      this.delegate.formSubmissionFailedWithResponse(this, response);
    }
  }, {
    key: "requestErrored",
    value: function requestErrored(request, error) {
      this.result = {
        success: false,
        error: error
      };
      this.delegate.formSubmissionErrored(this, error);
    }
  }, {
    key: "requestFinished",
    value: function requestFinished(request) {
      var _a;

      this.state = FormSubmissionState.stopped;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.removeAttribute("disabled");
      dispatch("turbo:submit-end", {
        target: this.formElement,
        detail: Object.assign({
          formSubmission: this
        }, this.result)
      });
      this.delegate.formSubmissionFinished(this);
    }
  }, {
    key: "requestMustRedirect",
    value: function requestMustRedirect(request) {
      return !request.isIdempotent && this.mustRedirect;
    }
  }], [{
    key: "confirmMethod",
    value: function confirmMethod(message, element) {
      return confirm(message);
    }
  }]);

  return FormSubmission;
}();

function buildFormData(formElement, submitter) {
  var formData = new FormData(formElement);
  var name = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("name");
  var value = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("value");

  if (name && value != null && formData.get(name) != value) {
    formData.append(name, value);
  }

  return formData;
}

function getCookieValue(cookieName) {
  if (cookieName != null) {
    var cookies = document.cookie ? document.cookie.split("; ") : [];
    var cookie = cookies.find(function (cookie) {
      return cookie.startsWith(cookieName);
    });

    if (cookie) {
      var value = cookie.split("=").slice(1).join("=");
      return value ? decodeURIComponent(value) : undefined;
    }
  }
}

function getMetaContent(name) {
  var element = document.querySelector("meta[name=\"".concat(name, "\"]"));
  return element && element.content;
}

function responseSucceededWithoutRedirect(response) {
  return response.statusCode == 200 && !response.redirected;
}

function mergeFormDataEntries(url, entries) {
  var searchParams = new URLSearchParams();

  var _iterator3 = _createForOfIteratorHelper(entries),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _ref6 = _step3.value;

      var _ref5 = _slicedToArray(_ref6, 2);

      var name = _ref5[0];
      var value = _ref5[1];
      if (value instanceof File) continue;
      searchParams.append(name, value);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  url.search = searchParams.toString();
  return url;
}

var Snapshot = /*#__PURE__*/function () {
  function Snapshot(element) {
    _classCallCheck(this, Snapshot);

    this.element = element;
  }

  _createClass(Snapshot, [{
    key: "children",
    get: function get() {
      return _toConsumableArray(this.element.children);
    }
  }, {
    key: "hasAnchor",
    value: function hasAnchor(anchor) {
      return this.getElementForAnchor(anchor) != null;
    }
  }, {
    key: "getElementForAnchor",
    value: function getElementForAnchor(anchor) {
      return anchor ? this.element.querySelector("[id='".concat(anchor, "'], a[name='").concat(anchor, "']")) : null;
    }
  }, {
    key: "isConnected",
    get: function get() {
      return this.element.isConnected;
    }
  }, {
    key: "firstAutofocusableElement",
    get: function get() {
      return this.element.querySelector("[autofocus]");
    }
  }, {
    key: "permanentElements",
    get: function get() {
      return _toConsumableArray(this.element.querySelectorAll("[id][data-turbo-permanent]"));
    }
  }, {
    key: "getPermanentElementById",
    value: function getPermanentElementById(id) {
      return this.element.querySelector("#".concat(id, "[data-turbo-permanent]"));
    }
  }, {
    key: "getPermanentElementMapForSnapshot",
    value: function getPermanentElementMapForSnapshot(snapshot) {
      var permanentElementMap = {};

      var _iterator4 = _createForOfIteratorHelper(this.permanentElements),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var currentPermanentElement = _step4.value;
          var id = currentPermanentElement.id;
          var newPermanentElement = snapshot.getPermanentElementById(id);

          if (newPermanentElement) {
            permanentElementMap[id] = [currentPermanentElement, newPermanentElement];
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return permanentElementMap;
    }
  }]);

  return Snapshot;
}();

var FormInterceptor = /*#__PURE__*/function () {
  function FormInterceptor(delegate, element) {
    var _this4 = this;

    _classCallCheck(this, FormInterceptor);

    this.submitBubbled = function (event) {
      var form = event.target;

      if (!event.defaultPrevented && form instanceof HTMLFormElement && form.closest("turbo-frame, html") == _this4.element) {
        var submitter = event.submitter || undefined;
        var method = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formmethod")) || form.method;

        if (method != "dialog" && _this4.delegate.shouldInterceptFormSubmission(form, submitter)) {
          event.preventDefault();
          event.stopImmediatePropagation();

          _this4.delegate.formSubmissionIntercepted(form, submitter);
        }
      }
    };

    this.delegate = delegate;
    this.element = element;
  }

  _createClass(FormInterceptor, [{
    key: "start",
    value: function start() {
      this.element.addEventListener("submit", this.submitBubbled);
    }
  }, {
    key: "stop",
    value: function stop() {
      this.element.removeEventListener("submit", this.submitBubbled);
    }
  }]);

  return FormInterceptor;
}();

var View = /*#__PURE__*/function () {
  function View(delegate, element) {
    _classCallCheck(this, View);

    this.resolveRenderPromise = function (value) {};

    this.resolveInterceptionPromise = function (value) {};

    this.delegate = delegate;
    this.element = element;
  }

  _createClass(View, [{
    key: "scrollToAnchor",
    value: function scrollToAnchor(anchor) {
      var element = this.snapshot.getElementForAnchor(anchor);

      if (element) {
        this.scrollToElement(element);
        this.focusElement(element);
      } else {
        this.scrollToPosition({
          x: 0,
          y: 0
        });
      }
    }
  }, {
    key: "scrollToAnchorFromLocation",
    value: function scrollToAnchorFromLocation(location) {
      this.scrollToAnchor(getAnchor(location));
    }
  }, {
    key: "scrollToElement",
    value: function scrollToElement(element) {
      element.scrollIntoView();
    }
  }, {
    key: "focusElement",
    value: function focusElement(element) {
      if (element instanceof HTMLElement) {
        if (element.hasAttribute("tabindex")) {
          element.focus();
        } else {
          element.setAttribute("tabindex", "-1");
          element.focus();
          element.removeAttribute("tabindex");
        }
      }
    }
  }, {
    key: "scrollToPosition",
    value: function scrollToPosition(_ref7) {
      var x = _ref7.x,
          y = _ref7.y;
      this.scrollRoot.scrollTo(x, y);
    }
  }, {
    key: "scrollToTop",
    value: function scrollToTop() {
      this.scrollToPosition({
        x: 0,
        y: 0
      });
    }
  }, {
    key: "scrollRoot",
    get: function get() {
      return window;
    }
  }, {
    key: "render",
    value: function () {
      var _render = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5(renderer) {
        var _this5 = this;

        var isPreview, shouldRender, snapshot, renderInterception, immediateRender;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                isPreview = renderer.isPreview, shouldRender = renderer.shouldRender, snapshot = renderer.newSnapshot;

                if (!shouldRender) {
                  _context5.next = 22;
                  break;
                }

                _context5.prev = 2;
                this.renderPromise = new Promise(function (resolve) {
                  return _this5.resolveRenderPromise = resolve;
                });
                this.renderer = renderer;
                this.prepareToRenderSnapshot(renderer);
                renderInterception = new Promise(function (resolve) {
                  return _this5.resolveInterceptionPromise = resolve;
                });
                immediateRender = this.delegate.allowsImmediateRender(snapshot, this.resolveInterceptionPromise);

                if (immediateRender) {
                  _context5.next = 11;
                  break;
                }

                _context5.next = 11;
                return renderInterception;

              case 11:
                _context5.next = 13;
                return this.renderSnapshot(renderer);

              case 13:
                this.delegate.viewRenderedSnapshot(snapshot, isPreview);
                this.finishRenderingSnapshot(renderer);

              case 15:
                _context5.prev = 15;
                delete this.renderer;
                this.resolveRenderPromise(undefined);
                delete this.renderPromise;
                return _context5.finish(15);

              case 20:
                _context5.next = 23;
                break;

              case 22:
                this.invalidate();

              case 23:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[2,, 15, 20]]);
      }));

      function render(_x3) {
        return _render.apply(this, arguments);
      }

      return render;
    }()
  }, {
    key: "invalidate",
    value: function invalidate() {
      this.delegate.viewInvalidated();
    }
  }, {
    key: "prepareToRenderSnapshot",
    value: function prepareToRenderSnapshot(renderer) {
      this.markAsPreview(renderer.isPreview);
      renderer.prepareToRender();
    }
  }, {
    key: "markAsPreview",
    value: function markAsPreview(isPreview) {
      if (isPreview) {
        this.element.setAttribute("data-turbo-preview", "");
      } else {
        this.element.removeAttribute("data-turbo-preview");
      }
    }
  }, {
    key: "renderSnapshot",
    value: function () {
      var _renderSnapshot = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee6(renderer) {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return renderer.render();

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function renderSnapshot(_x4) {
        return _renderSnapshot.apply(this, arguments);
      }

      return renderSnapshot;
    }()
  }, {
    key: "finishRenderingSnapshot",
    value: function finishRenderingSnapshot(renderer) {
      renderer.finishRendering();
    }
  }]);

  return View;
}();

var FrameView = /*#__PURE__*/function (_View) {
  _inherits(FrameView, _View);

  var _super2 = _createSuper(FrameView);

  function FrameView() {
    _classCallCheck(this, FrameView);

    return _super2.apply(this, arguments);
  }

  _createClass(FrameView, [{
    key: "invalidate",
    value: function invalidate() {
      this.element.innerHTML = "";
    }
  }, {
    key: "snapshot",
    get: function get() {
      return new Snapshot(this.element);
    }
  }]);

  return FrameView;
}(View);

var LinkInterceptor = /*#__PURE__*/function () {
  function LinkInterceptor(delegate, element) {
    var _this6 = this;

    _classCallCheck(this, LinkInterceptor);

    this.clickBubbled = function (event) {
      if (_this6.respondsToEventTarget(event.target)) {
        _this6.clickEvent = event;
      } else {
        delete _this6.clickEvent;
      }
    };

    this.linkClicked = function (event) {
      if (_this6.clickEvent && _this6.respondsToEventTarget(event.target) && event.target instanceof Element) {
        if (_this6.delegate.shouldInterceptLinkClick(event.target, event.detail.url)) {
          _this6.clickEvent.preventDefault();

          event.preventDefault();

          _this6.delegate.linkClickIntercepted(event.target, event.detail.url);
        }
      }

      delete _this6.clickEvent;
    };

    this.willVisit = function () {
      delete _this6.clickEvent;
    };

    this.delegate = delegate;
    this.element = element;
  }

  _createClass(LinkInterceptor, [{
    key: "start",
    value: function start() {
      this.element.addEventListener("click", this.clickBubbled);
      document.addEventListener("turbo:click", this.linkClicked);
      document.addEventListener("turbo:before-visit", this.willVisit);
    }
  }, {
    key: "stop",
    value: function stop() {
      this.element.removeEventListener("click", this.clickBubbled);
      document.removeEventListener("turbo:click", this.linkClicked);
      document.removeEventListener("turbo:before-visit", this.willVisit);
    }
  }, {
    key: "respondsToEventTarget",
    value: function respondsToEventTarget(target) {
      var element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
      return element && element.closest("turbo-frame, html") == this.element;
    }
  }]);

  return LinkInterceptor;
}();

var Bardo = /*#__PURE__*/function () {
  function Bardo(permanentElementMap) {
    _classCallCheck(this, Bardo);

    this.permanentElementMap = permanentElementMap;
  }

  _createClass(Bardo, [{
    key: "enter",
    value: function enter() {
      for (var id in this.permanentElementMap) {
        var _this$permanentElemen = _slicedToArray(this.permanentElementMap[id], 2),
            newPermanentElement = _this$permanentElemen[1];

        this.replaceNewPermanentElementWithPlaceholder(newPermanentElement);
      }
    }
  }, {
    key: "leave",
    value: function leave() {
      for (var id in this.permanentElementMap) {
        var _this$permanentElemen2 = _slicedToArray(this.permanentElementMap[id], 1),
            currentPermanentElement = _this$permanentElemen2[0];

        this.replaceCurrentPermanentElementWithClone(currentPermanentElement);
        this.replacePlaceholderWithPermanentElement(currentPermanentElement);
      }
    }
  }, {
    key: "replaceNewPermanentElementWithPlaceholder",
    value: function replaceNewPermanentElementWithPlaceholder(permanentElement) {
      var placeholder = createPlaceholderForPermanentElement(permanentElement);
      permanentElement.replaceWith(placeholder);
    }
  }, {
    key: "replaceCurrentPermanentElementWithClone",
    value: function replaceCurrentPermanentElementWithClone(permanentElement) {
      var clone = permanentElement.cloneNode(true);
      permanentElement.replaceWith(clone);
    }
  }, {
    key: "replacePlaceholderWithPermanentElement",
    value: function replacePlaceholderWithPermanentElement(permanentElement) {
      var placeholder = this.getPlaceholderById(permanentElement.id);
      placeholder === null || placeholder === void 0 ? void 0 : placeholder.replaceWith(permanentElement);
    }
  }, {
    key: "getPlaceholderById",
    value: function getPlaceholderById(id) {
      return this.placeholders.find(function (element) {
        return element.content == id;
      });
    }
  }, {
    key: "placeholders",
    get: function get() {
      return _toConsumableArray(document.querySelectorAll("meta[name=turbo-permanent-placeholder][content]"));
    }
  }], [{
    key: "preservingPermanentElements",
    value: function preservingPermanentElements(permanentElementMap, callback) {
      var bardo = new this(permanentElementMap);
      bardo.enter();
      callback();
      bardo.leave();
    }
  }]);

  return Bardo;
}();

function createPlaceholderForPermanentElement(permanentElement) {
  var element = document.createElement("meta");
  element.setAttribute("name", "turbo-permanent-placeholder");
  element.setAttribute("content", permanentElement.id);
  return element;
}

var Renderer = /*#__PURE__*/function () {
  function Renderer(currentSnapshot, newSnapshot, isPreview) {
    var _this7 = this;

    var willRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

    _classCallCheck(this, Renderer);

    this.currentSnapshot = currentSnapshot;
    this.newSnapshot = newSnapshot;
    this.isPreview = isPreview;
    this.willRender = willRender;
    this.promise = new Promise(function (resolve, reject) {
      return _this7.resolvingFunctions = {
        resolve: resolve,
        reject: reject
      };
    });
  }

  _createClass(Renderer, [{
    key: "shouldRender",
    get: function get() {
      return true;
    }
  }, {
    key: "prepareToRender",
    value: function prepareToRender() {
      return;
    }
  }, {
    key: "finishRendering",
    value: function finishRendering() {
      if (this.resolvingFunctions) {
        this.resolvingFunctions.resolve();
        delete this.resolvingFunctions;
      }
    }
  }, {
    key: "createScriptElement",
    value: function createScriptElement(element) {
      if (element.getAttribute("data-turbo-eval") == "false") {
        return element;
      } else {
        var createdScriptElement = document.createElement("script");

        if (this.cspNonce) {
          createdScriptElement.nonce = this.cspNonce;
        }

        createdScriptElement.textContent = element.textContent;
        createdScriptElement.async = false;
        copyElementAttributes(createdScriptElement, element);
        return createdScriptElement;
      }
    }
  }, {
    key: "preservingPermanentElements",
    value: function preservingPermanentElements(callback) {
      Bardo.preservingPermanentElements(this.permanentElementMap, callback);
    }
  }, {
    key: "focusFirstAutofocusableElement",
    value: function focusFirstAutofocusableElement() {
      var element = this.connectedSnapshot.firstAutofocusableElement;

      if (elementIsFocusable(element)) {
        element.focus();
      }
    }
  }, {
    key: "connectedSnapshot",
    get: function get() {
      return this.newSnapshot.isConnected ? this.newSnapshot : this.currentSnapshot;
    }
  }, {
    key: "currentElement",
    get: function get() {
      return this.currentSnapshot.element;
    }
  }, {
    key: "newElement",
    get: function get() {
      return this.newSnapshot.element;
    }
  }, {
    key: "permanentElementMap",
    get: function get() {
      return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot);
    }
  }, {
    key: "cspNonce",
    get: function get() {
      var _a;

      return (_a = document.head.querySelector('meta[name="csp-nonce"]')) === null || _a === void 0 ? void 0 : _a.getAttribute("content");
    }
  }]);

  return Renderer;
}();

function copyElementAttributes(destinationElement, sourceElement) {
  for (var _i3 = 0, _arr2 = _toConsumableArray(sourceElement.attributes); _i3 < _arr2.length; _i3++) {
    var _ref9 = _arr2[_i3];
    var name = _ref9.name;
    var value = _ref9.value;
    destinationElement.setAttribute(name, value);
  }
}

function elementIsFocusable(element) {
  return element && typeof element.focus == "function";
}

var FrameRenderer = /*#__PURE__*/function (_Renderer) {
  _inherits(FrameRenderer, _Renderer);

  var _super3 = _createSuper(FrameRenderer);

  function FrameRenderer() {
    _classCallCheck(this, FrameRenderer);

    return _super3.apply(this, arguments);
  }

  _createClass(FrameRenderer, [{
    key: "shouldRender",
    get: function get() {
      return true;
    }
  }, {
    key: "render",
    value: function () {
      var _render2 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee7() {
        var _this8 = this;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return nextAnimationFrame();

              case 2:
                this.preservingPermanentElements(function () {
                  _this8.loadFrameElement();
                });
                this.scrollFrameIntoView();
                _context7.next = 6;
                return nextAnimationFrame();

              case 6:
                this.focusFirstAutofocusableElement();
                _context7.next = 9;
                return nextAnimationFrame();

              case 9:
                this.activateScriptElements();

              case 10:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function render() {
        return _render2.apply(this, arguments);
      }

      return render;
    }()
  }, {
    key: "loadFrameElement",
    value: function loadFrameElement() {
      var _a;

      var destinationRange = document.createRange();
      destinationRange.selectNodeContents(this.currentElement);
      destinationRange.deleteContents();
      var frameElement = this.newElement;
      var sourceRange = (_a = frameElement.ownerDocument) === null || _a === void 0 ? void 0 : _a.createRange();

      if (sourceRange) {
        sourceRange.selectNodeContents(frameElement);
        this.currentElement.appendChild(sourceRange.extractContents());
      }
    }
  }, {
    key: "scrollFrameIntoView",
    value: function scrollFrameIntoView() {
      if (this.currentElement.autoscroll || this.newElement.autoscroll) {
        var element = this.currentElement.firstElementChild;
        var block = readScrollLogicalPosition(this.currentElement.getAttribute("data-autoscroll-block"), "end");

        if (element) {
          element.scrollIntoView({
            block: block
          });
          return true;
        }
      }

      return false;
    }
  }, {
    key: "activateScriptElements",
    value: function activateScriptElements() {
      var _iterator5 = _createForOfIteratorHelper(this.newScriptElements),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var inertScriptElement = _step5.value;
          var activatedScriptElement = this.createScriptElement(inertScriptElement);
          inertScriptElement.replaceWith(activatedScriptElement);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "newScriptElements",
    get: function get() {
      return this.currentElement.querySelectorAll("script");
    }
  }]);

  return FrameRenderer;
}(Renderer);

function readScrollLogicalPosition(value, defaultValue) {
  if (value == "end" || value == "start" || value == "center" || value == "nearest") {
    return value;
  } else {
    return defaultValue;
  }
}

var ProgressBar = /*#__PURE__*/function () {
  function ProgressBar() {
    var _this9 = this;

    _classCallCheck(this, ProgressBar);

    this.hiding = false;
    this.value = 0;
    this.visible = false;

    this.trickle = function () {
      _this9.setValue(_this9.value + Math.random() / 100);
    };

    this.stylesheetElement = this.createStylesheetElement();
    this.progressElement = this.createProgressElement();
    this.installStylesheetElement();
    this.setValue(0);
  }

  _createClass(ProgressBar, [{
    key: "show",
    value: function show() {
      if (!this.visible) {
        this.visible = true;
        this.installProgressElement();
        this.startTrickling();
      }
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this10 = this;

      if (this.visible && !this.hiding) {
        this.hiding = true;
        this.fadeProgressElement(function () {
          _this10.uninstallProgressElement();

          _this10.stopTrickling();

          _this10.visible = false;
          _this10.hiding = false;
        });
      }
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.value = value;
      this.refresh();
    }
  }, {
    key: "installStylesheetElement",
    value: function installStylesheetElement() {
      document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
    }
  }, {
    key: "installProgressElement",
    value: function installProgressElement() {
      this.progressElement.style.width = "0";
      this.progressElement.style.opacity = "1";
      document.documentElement.insertBefore(this.progressElement, document.body);
      this.refresh();
    }
  }, {
    key: "fadeProgressElement",
    value: function fadeProgressElement(callback) {
      this.progressElement.style.opacity = "0";
      setTimeout(callback, ProgressBar.animationDuration * 1.5);
    }
  }, {
    key: "uninstallProgressElement",
    value: function uninstallProgressElement() {
      if (this.progressElement.parentNode) {
        document.documentElement.removeChild(this.progressElement);
      }
    }
  }, {
    key: "startTrickling",
    value: function startTrickling() {
      if (!this.trickleInterval) {
        this.trickleInterval = window.setInterval(this.trickle, ProgressBar.animationDuration);
      }
    }
  }, {
    key: "stopTrickling",
    value: function stopTrickling() {
      window.clearInterval(this.trickleInterval);
      delete this.trickleInterval;
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var _this11 = this;

      requestAnimationFrame(function () {
        _this11.progressElement.style.width = "".concat(10 + _this11.value * 90, "%");
      });
    }
  }, {
    key: "createStylesheetElement",
    value: function createStylesheetElement() {
      var element = document.createElement("style");
      element.type = "text/css";
      element.textContent = ProgressBar.defaultCSS;
      return element;
    }
  }, {
    key: "createProgressElement",
    value: function createProgressElement() {
      var element = document.createElement("div");
      element.className = "turbo-progress-bar";
      return element;
    }
  }], [{
    key: "defaultCSS",
    get: function get() {
      return unindent(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      .turbo-progress-bar {\n        position: fixed;\n        display: block;\n        top: 0;\n        left: 0;\n        height: 3px;\n        background: #0076ff;\n        z-index: 9999;\n        transition:\n          width ", "ms ease-out,\n          opacity ", "ms ", "ms ease-in;\n        transform: translate3d(0, 0, 0);\n      }\n    "])), ProgressBar.animationDuration, ProgressBar.animationDuration / 2, ProgressBar.animationDuration / 2);
    }
  }]);

  return ProgressBar;
}();

ProgressBar.animationDuration = 300;

var HeadSnapshot = /*#__PURE__*/function (_Snapshot) {
  _inherits(HeadSnapshot, _Snapshot);

  var _super4 = _createSuper(HeadSnapshot);

  function HeadSnapshot() {
    var _this12;

    _classCallCheck(this, HeadSnapshot);

    _this12 = _super4.apply(this, arguments);
    _this12.detailsByOuterHTML = _this12.children.filter(function (element) {
      return !elementIsNoscript(element);
    }).map(function (element) {
      return elementWithoutNonce(element);
    }).reduce(function (result, element) {
      var outerHTML = element.outerHTML;
      var details = outerHTML in result ? result[outerHTML] : {
        type: elementType(element),
        tracked: elementIsTracked(element),
        elements: []
      };
      return Object.assign(Object.assign({}, result), _defineProperty({}, outerHTML, Object.assign(Object.assign({}, details), {
        elements: [].concat(_toConsumableArray(details.elements), [element])
      })));
    }, {});
    return _this12;
  }

  _createClass(HeadSnapshot, [{
    key: "trackedElementSignature",
    get: function get() {
      var _this13 = this;

      return Object.keys(this.detailsByOuterHTML).filter(function (outerHTML) {
        return _this13.detailsByOuterHTML[outerHTML].tracked;
      }).join("");
    }
  }, {
    key: "getScriptElementsNotInSnapshot",
    value: function getScriptElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("script", snapshot);
    }
  }, {
    key: "getStylesheetElementsNotInSnapshot",
    value: function getStylesheetElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("stylesheet", snapshot);
    }
  }, {
    key: "getElementsMatchingTypeNotInSnapshot",
    value: function getElementsMatchingTypeNotInSnapshot(matchedType, snapshot) {
      var _this14 = this;

      return Object.keys(this.detailsByOuterHTML).filter(function (outerHTML) {
        return !(outerHTML in snapshot.detailsByOuterHTML);
      }).map(function (outerHTML) {
        return _this14.detailsByOuterHTML[outerHTML];
      }).filter(function (_ref10) {
        var type = _ref10.type;
        return type == matchedType;
      }).map(function (_ref11) {
        var _ref11$elements = _slicedToArray(_ref11.elements, 1),
            element = _ref11$elements[0];

        return element;
      });
    }
  }, {
    key: "provisionalElements",
    get: function get() {
      var _this15 = this;

      return Object.keys(this.detailsByOuterHTML).reduce(function (result, outerHTML) {
        var _this15$detailsByOute = _this15.detailsByOuterHTML[outerHTML],
            type = _this15$detailsByOute.type,
            tracked = _this15$detailsByOute.tracked,
            elements = _this15$detailsByOute.elements;

        if (type == null && !tracked) {
          return [].concat(_toConsumableArray(result), _toConsumableArray(elements));
        } else if (elements.length > 1) {
          return [].concat(_toConsumableArray(result), _toConsumableArray(elements.slice(1)));
        } else {
          return result;
        }
      }, []);
    }
  }, {
    key: "getMetaValue",
    value: function getMetaValue(name) {
      var element = this.findMetaElementByName(name);
      return element ? element.getAttribute("content") : null;
    }
  }, {
    key: "findMetaElementByName",
    value: function findMetaElementByName(name) {
      var _this16 = this;

      return Object.keys(this.detailsByOuterHTML).reduce(function (result, outerHTML) {
        var _this16$detailsByOute = _slicedToArray(_this16.detailsByOuterHTML[outerHTML].elements, 1),
            element = _this16$detailsByOute[0];

        return elementIsMetaElementWithName(element, name) ? element : result;
      }, undefined);
    }
  }]);

  return HeadSnapshot;
}(Snapshot);

function elementType(element) {
  if (elementIsScript(element)) {
    return "script";
  } else if (elementIsStylesheet(element)) {
    return "stylesheet";
  }
}

function elementIsTracked(element) {
  return element.getAttribute("data-turbo-track") == "reload";
}

function elementIsScript(element) {
  var tagName = element.tagName.toLowerCase();
  return tagName == "script";
}

function elementIsNoscript(element) {
  var tagName = element.tagName.toLowerCase();
  return tagName == "noscript";
}

function elementIsStylesheet(element) {
  var tagName = element.tagName.toLowerCase();
  return tagName == "style" || tagName == "link" && element.getAttribute("rel") == "stylesheet";
}

function elementIsMetaElementWithName(element, name) {
  var tagName = element.tagName.toLowerCase();
  return tagName == "meta" && element.getAttribute("name") == name;
}

function elementWithoutNonce(element) {
  if (element.hasAttribute("nonce")) {
    element.setAttribute("nonce", "");
  }

  return element;
}

var PageSnapshot = /*#__PURE__*/function (_Snapshot2) {
  _inherits(PageSnapshot, _Snapshot2);

  var _super5 = _createSuper(PageSnapshot);

  function PageSnapshot(element, headSnapshot) {
    var _this17;

    _classCallCheck(this, PageSnapshot);

    _this17 = _super5.call(this, element);
    _this17.headSnapshot = headSnapshot;
    return _this17;
  }

  _createClass(PageSnapshot, [{
    key: "clone",
    value: function clone() {
      return new PageSnapshot(this.element.cloneNode(true), this.headSnapshot);
    }
  }, {
    key: "headElement",
    get: function get() {
      return this.headSnapshot.element;
    }
  }, {
    key: "rootLocation",
    get: function get() {
      var _a;

      var root = (_a = this.getSetting("root")) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
  }, {
    key: "cacheControlValue",
    get: function get() {
      return this.getSetting("cache-control");
    }
  }, {
    key: "isPreviewable",
    get: function get() {
      return this.cacheControlValue != "no-preview";
    }
  }, {
    key: "isCacheable",
    get: function get() {
      return this.cacheControlValue != "no-cache";
    }
  }, {
    key: "isVisitable",
    get: function get() {
      return this.getSetting("visit-control") != "reload";
    }
  }, {
    key: "getSetting",
    value: function getSetting(name) {
      return this.headSnapshot.getMetaValue("turbo-".concat(name));
    }
  }], [{
    key: "fromHTMLString",
    value: function fromHTMLString() {
      var html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      return this.fromDocument(parseHTMLDocument(html));
    }
  }, {
    key: "fromElement",
    value: function fromElement(element) {
      return this.fromDocument(element.ownerDocument);
    }
  }, {
    key: "fromDocument",
    value: function fromDocument(_ref12) {
      var head = _ref12.head,
          body = _ref12.body;
      return new this(body, new HeadSnapshot(head));
    }
  }]);

  return PageSnapshot;
}(Snapshot);

var TimingMetric;

(function (TimingMetric) {
  TimingMetric["visitStart"] = "visitStart";
  TimingMetric["requestStart"] = "requestStart";
  TimingMetric["requestEnd"] = "requestEnd";
  TimingMetric["visitEnd"] = "visitEnd";
})(TimingMetric || (TimingMetric = {}));

var VisitState;

(function (VisitState) {
  VisitState["initialized"] = "initialized";
  VisitState["started"] = "started";
  VisitState["canceled"] = "canceled";
  VisitState["failed"] = "failed";
  VisitState["completed"] = "completed";
})(VisitState || (VisitState = {}));

var defaultOptions = {
  action: "advance",
  historyChanged: false,
  visitCachedSnapshot: function visitCachedSnapshot() {},
  willRender: true
};
var SystemStatusCode;

(function (SystemStatusCode) {
  SystemStatusCode[SystemStatusCode["networkFailure"] = 0] = "networkFailure";
  SystemStatusCode[SystemStatusCode["timeoutFailure"] = -1] = "timeoutFailure";
  SystemStatusCode[SystemStatusCode["contentTypeMismatch"] = -2] = "contentTypeMismatch";
})(SystemStatusCode || (SystemStatusCode = {}));

var Visit = /*#__PURE__*/function () {
  function Visit(delegate, location, restorationIdentifier) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck(this, Visit);

    this.identifier = uuid();
    this.timingMetrics = {};
    this.followedRedirect = false;
    this.historyChanged = false;
    this.scrolled = false;
    this.snapshotCached = false;
    this.state = VisitState.initialized;
    this.delegate = delegate;
    this.location = location;
    this.restorationIdentifier = restorationIdentifier || uuid();

    var _Object$assign2 = Object.assign(Object.assign({}, defaultOptions), options),
        action = _Object$assign2.action,
        historyChanged = _Object$assign2.historyChanged,
        referrer = _Object$assign2.referrer,
        snapshotHTML = _Object$assign2.snapshotHTML,
        response = _Object$assign2.response,
        visitCachedSnapshot = _Object$assign2.visitCachedSnapshot,
        willRender = _Object$assign2.willRender;

    this.action = action;
    this.historyChanged = historyChanged;
    this.referrer = referrer;
    this.snapshotHTML = snapshotHTML;
    this.response = response;
    this.isSamePage = this.delegate.locationWithActionIsSamePage(this.location, this.action);
    this.visitCachedSnapshot = visitCachedSnapshot;
    this.willRender = willRender;
    this.scrolled = !willRender;
  }

  _createClass(Visit, [{
    key: "adapter",
    get: function get() {
      return this.delegate.adapter;
    }
  }, {
    key: "view",
    get: function get() {
      return this.delegate.view;
    }
  }, {
    key: "history",
    get: function get() {
      return this.delegate.history;
    }
  }, {
    key: "restorationData",
    get: function get() {
      return this.history.getRestorationDataForIdentifier(this.restorationIdentifier);
    }
  }, {
    key: "silent",
    get: function get() {
      return this.isSamePage;
    }
  }, {
    key: "start",
    value: function start() {
      if (this.state == VisitState.initialized) {
        this.recordTimingMetric(TimingMetric.visitStart);
        this.state = VisitState.started;
        this.adapter.visitStarted(this);
        this.delegate.visitStarted(this);
      }
    }
  }, {
    key: "cancel",
    value: function cancel() {
      if (this.state == VisitState.started) {
        if (this.request) {
          this.request.cancel();
        }

        this.cancelRender();
        this.state = VisitState.canceled;
      }
    }
  }, {
    key: "complete",
    value: function complete() {
      if (this.state == VisitState.started) {
        this.recordTimingMetric(TimingMetric.visitEnd);
        this.state = VisitState.completed;
        this.adapter.visitCompleted(this);
        this.delegate.visitCompleted(this);
        this.followRedirect();
      }
    }
  }, {
    key: "fail",
    value: function fail() {
      if (this.state == VisitState.started) {
        this.state = VisitState.failed;
        this.adapter.visitFailed(this);
      }
    }
  }, {
    key: "changeHistory",
    value: function changeHistory() {
      var _a;

      if (!this.historyChanged) {
        var actionForHistory = this.location.href === ((_a = this.referrer) === null || _a === void 0 ? void 0 : _a.href) ? "replace" : this.action;
        var method = this.getHistoryMethodForAction(actionForHistory);
        this.history.update(method, this.location, this.restorationIdentifier);
        this.historyChanged = true;
      }
    }
  }, {
    key: "issueRequest",
    value: function issueRequest() {
      if (this.hasPreloadedResponse()) {
        this.simulateRequest();
      } else if (this.shouldIssueRequest() && !this.request) {
        this.request = new FetchRequest(this, FetchMethod.get, this.location);
        this.request.perform();
      }
    }
  }, {
    key: "simulateRequest",
    value: function simulateRequest() {
      if (this.response) {
        this.startRequest();
        this.recordResponse();
        this.finishRequest();
      }
    }
  }, {
    key: "startRequest",
    value: function startRequest() {
      this.recordTimingMetric(TimingMetric.requestStart);
      this.adapter.visitRequestStarted(this);
    }
  }, {
    key: "recordResponse",
    value: function recordResponse() {
      var response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.response;
      this.response = response;

      if (response) {
        var statusCode = response.statusCode;

        if (isSuccessful(statusCode)) {
          this.adapter.visitRequestCompleted(this);
        } else {
          this.adapter.visitRequestFailedWithStatusCode(this, statusCode);
        }
      }
    }
  }, {
    key: "finishRequest",
    value: function finishRequest() {
      this.recordTimingMetric(TimingMetric.requestEnd);
      this.adapter.visitRequestFinished(this);
    }
  }, {
    key: "loadResponse",
    value: function loadResponse() {
      var _this18 = this;

      if (this.response) {
        var _this$response = this.response,
            statusCode = _this$response.statusCode,
            responseHTML = _this$response.responseHTML;
        this.render( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee8() {
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _this18.cacheSnapshot();

                  if (!_this18.view.renderPromise) {
                    _context8.next = 4;
                    break;
                  }

                  _context8.next = 4;
                  return _this18.view.renderPromise;

                case 4:
                  if (!(isSuccessful(statusCode) && responseHTML != null)) {
                    _context8.next = 11;
                    break;
                  }

                  _context8.next = 7;
                  return _this18.view.renderPage(PageSnapshot.fromHTMLString(responseHTML), false, _this18.willRender);

                case 7:
                  _this18.adapter.visitRendered(_this18);

                  _this18.complete();

                  _context8.next = 15;
                  break;

                case 11:
                  _context8.next = 13;
                  return _this18.view.renderError(PageSnapshot.fromHTMLString(responseHTML));

                case 13:
                  _this18.adapter.visitRendered(_this18);

                  _this18.fail();

                case 15:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8);
        })));
      }
    }
  }, {
    key: "getCachedSnapshot",
    value: function getCachedSnapshot() {
      var snapshot = this.view.getCachedSnapshotForLocation(this.location) || this.getPreloadedSnapshot();

      if (snapshot && (!getAnchor(this.location) || snapshot.hasAnchor(getAnchor(this.location)))) {
        if (this.action == "restore" || snapshot.isPreviewable) {
          return snapshot;
        }
      }
    }
  }, {
    key: "getPreloadedSnapshot",
    value: function getPreloadedSnapshot() {
      if (this.snapshotHTML) {
        return PageSnapshot.fromHTMLString(this.snapshotHTML);
      }
    }
  }, {
    key: "hasCachedSnapshot",
    value: function hasCachedSnapshot() {
      return this.getCachedSnapshot() != null;
    }
  }, {
    key: "loadCachedSnapshot",
    value: function loadCachedSnapshot() {
      var _this19 = this;

      var snapshot = this.getCachedSnapshot();

      if (snapshot) {
        var isPreview = this.shouldIssueRequest();
        this.render( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee9() {
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _this19.cacheSnapshot();

                  if (!_this19.isSamePage) {
                    _context9.next = 5;
                    break;
                  }

                  _this19.adapter.visitRendered(_this19);

                  _context9.next = 12;
                  break;

                case 5:
                  if (!_this19.view.renderPromise) {
                    _context9.next = 8;
                    break;
                  }

                  _context9.next = 8;
                  return _this19.view.renderPromise;

                case 8:
                  _context9.next = 10;
                  return _this19.view.renderPage(snapshot, isPreview, _this19.willRender);

                case 10:
                  _this19.adapter.visitRendered(_this19);

                  if (!isPreview) {
                    _this19.complete();
                  }

                case 12:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9);
        })));
      }
    }
  }, {
    key: "followRedirect",
    value: function followRedirect() {
      var _a;

      if (this.redirectedToLocation && !this.followedRedirect && ((_a = this.response) === null || _a === void 0 ? void 0 : _a.redirected)) {
        this.adapter.visitProposedToLocation(this.redirectedToLocation, {
          action: 'replace',
          response: this.response
        });
        this.followedRedirect = true;
      }
    }
  }, {
    key: "goToSamePageAnchor",
    value: function goToSamePageAnchor() {
      var _this20 = this;

      if (this.isSamePage) {
        this.render( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee10() {
          return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _this20.cacheSnapshot();

                  _this20.adapter.visitRendered(_this20);

                case 2:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10);
        })));
      }
    }
  }, {
    key: "requestStarted",
    value: function requestStarted() {
      this.startRequest();
    }
  }, {
    key: "requestPreventedHandlingResponse",
    value: function requestPreventedHandlingResponse(request, response) {}
  }, {
    key: "requestSucceededWithResponse",
    value: function () {
      var _requestSucceededWithResponse = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee11(request, response) {
        var responseHTML, redirected, statusCode;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return response.responseHTML;

              case 2:
                responseHTML = _context11.sent;
                redirected = response.redirected, statusCode = response.statusCode;

                if (responseHTML == undefined) {
                  this.recordResponse({
                    statusCode: SystemStatusCode.contentTypeMismatch,
                    redirected: redirected
                  });
                } else {
                  this.redirectedToLocation = response.redirected ? response.location : undefined;
                  this.recordResponse({
                    statusCode: statusCode,
                    responseHTML: responseHTML,
                    redirected: redirected
                  });
                }

              case 5:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function requestSucceededWithResponse(_x5, _x6) {
        return _requestSucceededWithResponse.apply(this, arguments);
      }

      return requestSucceededWithResponse;
    }()
  }, {
    key: "requestFailedWithResponse",
    value: function () {
      var _requestFailedWithResponse = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee12(request, response) {
        var responseHTML, redirected, statusCode;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return response.responseHTML;

              case 2:
                responseHTML = _context12.sent;
                redirected = response.redirected, statusCode = response.statusCode;

                if (responseHTML == undefined) {
                  this.recordResponse({
                    statusCode: SystemStatusCode.contentTypeMismatch,
                    redirected: redirected
                  });
                } else {
                  this.recordResponse({
                    statusCode: statusCode,
                    responseHTML: responseHTML,
                    redirected: redirected
                  });
                }

              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function requestFailedWithResponse(_x7, _x8) {
        return _requestFailedWithResponse.apply(this, arguments);
      }

      return requestFailedWithResponse;
    }()
  }, {
    key: "requestErrored",
    value: function requestErrored(request, error) {
      this.recordResponse({
        statusCode: SystemStatusCode.networkFailure,
        redirected: false
      });
    }
  }, {
    key: "requestFinished",
    value: function requestFinished() {
      this.finishRequest();
    }
  }, {
    key: "performScroll",
    value: function performScroll() {
      if (!this.scrolled) {
        if (this.action == "restore") {
          this.scrollToRestoredPosition() || this.scrollToAnchor() || this.view.scrollToTop();
        } else {
          this.scrollToAnchor() || this.view.scrollToTop();
        }

        if (this.isSamePage) {
          this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation, this.location);
        }

        this.scrolled = true;
      }
    }
  }, {
    key: "scrollToRestoredPosition",
    value: function scrollToRestoredPosition() {
      var scrollPosition = this.restorationData.scrollPosition;

      if (scrollPosition) {
        this.view.scrollToPosition(scrollPosition);
        return true;
      }
    }
  }, {
    key: "scrollToAnchor",
    value: function scrollToAnchor() {
      var anchor = getAnchor(this.location);

      if (anchor != null) {
        this.view.scrollToAnchor(anchor);
        return true;
      }
    }
  }, {
    key: "recordTimingMetric",
    value: function recordTimingMetric(metric) {
      this.timingMetrics[metric] = new Date().getTime();
    }
  }, {
    key: "getTimingMetrics",
    value: function getTimingMetrics() {
      return Object.assign({}, this.timingMetrics);
    }
  }, {
    key: "getHistoryMethodForAction",
    value: function getHistoryMethodForAction(action) {
      switch (action) {
        case "replace":
          return history.replaceState;

        case "advance":
        case "restore":
          return history.pushState;
      }
    }
  }, {
    key: "hasPreloadedResponse",
    value: function hasPreloadedResponse() {
      return _typeof(this.response) == "object";
    }
  }, {
    key: "shouldIssueRequest",
    value: function shouldIssueRequest() {
      if (this.isSamePage) {
        return false;
      } else if (this.action == "restore") {
        return !this.hasCachedSnapshot();
      } else {
        return this.willRender;
      }
    }
  }, {
    key: "cacheSnapshot",
    value: function cacheSnapshot() {
      var _this21 = this;

      if (!this.snapshotCached) {
        this.view.cacheSnapshot().then(function (snapshot) {
          return snapshot && _this21.visitCachedSnapshot(snapshot);
        });
        this.snapshotCached = true;
      }
    }
  }, {
    key: "render",
    value: function () {
      var _render3 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee13(callback) {
        var _this22 = this;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                this.cancelRender();
                _context13.next = 3;
                return new Promise(function (resolve) {
                  _this22.frame = requestAnimationFrame(function () {
                    return resolve();
                  });
                });

              case 3:
                _context13.next = 5;
                return callback();

              case 5:
                delete this.frame;
                this.performScroll();

              case 7:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function render(_x9) {
        return _render3.apply(this, arguments);
      }

      return render;
    }()
  }, {
    key: "cancelRender",
    value: function cancelRender() {
      if (this.frame) {
        cancelAnimationFrame(this.frame);
        delete this.frame;
      }
    }
  }]);

  return Visit;
}();

function isSuccessful(statusCode) {
  return statusCode >= 200 && statusCode < 300;
}

var BrowserAdapter = /*#__PURE__*/function () {
  function BrowserAdapter(session) {
    var _this23 = this;

    _classCallCheck(this, BrowserAdapter);

    this.progressBar = new ProgressBar();

    this.showProgressBar = function () {
      _this23.progressBar.show();
    };

    this.session = session;
  }

  _createClass(BrowserAdapter, [{
    key: "visitProposedToLocation",
    value: function visitProposedToLocation(location, options) {
      this.navigator.startVisit(location, uuid(), options);
    }
  }, {
    key: "visitStarted",
    value: function visitStarted(visit) {
      visit.loadCachedSnapshot();
      visit.issueRequest();
      visit.changeHistory();
      visit.goToSamePageAnchor();
    }
  }, {
    key: "visitRequestStarted",
    value: function visitRequestStarted(visit) {
      this.progressBar.setValue(0);

      if (visit.hasCachedSnapshot() || visit.action != "restore") {
        this.showVisitProgressBarAfterDelay();
      } else {
        this.showProgressBar();
      }
    }
  }, {
    key: "visitRequestCompleted",
    value: function visitRequestCompleted(visit) {
      visit.loadResponse();
    }
  }, {
    key: "visitRequestFailedWithStatusCode",
    value: function visitRequestFailedWithStatusCode(visit, statusCode) {
      switch (statusCode) {
        case SystemStatusCode.networkFailure:
        case SystemStatusCode.timeoutFailure:
        case SystemStatusCode.contentTypeMismatch:
          return this.reload();

        default:
          return visit.loadResponse();
      }
    }
  }, {
    key: "visitRequestFinished",
    value: function visitRequestFinished(visit) {
      this.progressBar.setValue(1);
      this.hideVisitProgressBar();
    }
  }, {
    key: "visitCompleted",
    value: function visitCompleted(visit) {}
  }, {
    key: "pageInvalidated",
    value: function pageInvalidated() {
      this.reload();
    }
  }, {
    key: "visitFailed",
    value: function visitFailed(visit) {}
  }, {
    key: "visitRendered",
    value: function visitRendered(visit) {}
  }, {
    key: "formSubmissionStarted",
    value: function formSubmissionStarted(formSubmission) {
      this.progressBar.setValue(0);
      this.showFormProgressBarAfterDelay();
    }
  }, {
    key: "formSubmissionFinished",
    value: function formSubmissionFinished(formSubmission) {
      this.progressBar.setValue(1);
      this.hideFormProgressBar();
    }
  }, {
    key: "showVisitProgressBarAfterDelay",
    value: function showVisitProgressBarAfterDelay() {
      this.visitProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
    }
  }, {
    key: "hideVisitProgressBar",
    value: function hideVisitProgressBar() {
      this.progressBar.hide();

      if (this.visitProgressBarTimeout != null) {
        window.clearTimeout(this.visitProgressBarTimeout);
        delete this.visitProgressBarTimeout;
      }
    }
  }, {
    key: "showFormProgressBarAfterDelay",
    value: function showFormProgressBarAfterDelay() {
      if (this.formProgressBarTimeout == null) {
        this.formProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
      }
    }
  }, {
    key: "hideFormProgressBar",
    value: function hideFormProgressBar() {
      this.progressBar.hide();

      if (this.formProgressBarTimeout != null) {
        window.clearTimeout(this.formProgressBarTimeout);
        delete this.formProgressBarTimeout;
      }
    }
  }, {
    key: "reload",
    value: function reload() {
      window.location.reload();
    }
  }, {
    key: "navigator",
    get: function get() {
      return this.session.navigator;
    }
  }]);

  return BrowserAdapter;
}();

var CacheObserver = /*#__PURE__*/function () {
  function CacheObserver() {
    _classCallCheck(this, CacheObserver);

    this.started = false;
  }

  _createClass(CacheObserver, [{
    key: "start",
    value: function start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-cache", this.removeStaleElements, false);
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-cache", this.removeStaleElements, false);
      }
    }
  }, {
    key: "removeStaleElements",
    value: function removeStaleElements() {
      var staleElements = _toConsumableArray(document.querySelectorAll('[data-turbo-cache="false"]'));

      var _iterator6 = _createForOfIteratorHelper(staleElements),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var element = _step6.value;
          element.remove();
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }
  }]);

  return CacheObserver;
}();

var FormSubmitObserver = /*#__PURE__*/function () {
  function FormSubmitObserver(delegate) {
    var _this24 = this;

    _classCallCheck(this, FormSubmitObserver);

    this.started = false;

    this.submitCaptured = function () {
      removeEventListener("submit", _this24.submitBubbled, false);
      addEventListener("submit", _this24.submitBubbled, false);
    };

    this.submitBubbled = function (event) {
      if (!event.defaultPrevented) {
        var form = event.target instanceof HTMLFormElement ? event.target : undefined;
        var submitter = event.submitter || undefined;

        if (form) {
          var method = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formmethod")) || form.getAttribute("method");

          if (method != "dialog" && _this24.delegate.willSubmitForm(form, submitter)) {
            event.preventDefault();

            _this24.delegate.formSubmitted(form, submitter);
          }
        }
      }
    };

    this.delegate = delegate;
  }

  _createClass(FormSubmitObserver, [{
    key: "start",
    value: function start() {
      if (!this.started) {
        addEventListener("submit", this.submitCaptured, true);
        this.started = true;
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.started) {
        removeEventListener("submit", this.submitCaptured, true);
        this.started = false;
      }
    }
  }]);

  return FormSubmitObserver;
}();

var FrameRedirector = /*#__PURE__*/function () {
  function FrameRedirector(element) {
    _classCallCheck(this, FrameRedirector);

    this.element = element;
    this.linkInterceptor = new LinkInterceptor(this, element);
    this.formInterceptor = new FormInterceptor(this, element);
  }

  _createClass(FrameRedirector, [{
    key: "start",
    value: function start() {
      this.linkInterceptor.start();
      this.formInterceptor.start();
    }
  }, {
    key: "stop",
    value: function stop() {
      this.linkInterceptor.stop();
      this.formInterceptor.stop();
    }
  }, {
    key: "shouldInterceptLinkClick",
    value: function shouldInterceptLinkClick(element, url) {
      return this.shouldRedirect(element);
    }
  }, {
    key: "linkClickIntercepted",
    value: function linkClickIntercepted(element, url) {
      var frame = this.findFrameElement(element);

      if (frame) {
        frame.delegate.linkClickIntercepted(element, url);
      }
    }
  }, {
    key: "shouldInterceptFormSubmission",
    value: function shouldInterceptFormSubmission(element, submitter) {
      return this.shouldSubmit(element, submitter);
    }
  }, {
    key: "formSubmissionIntercepted",
    value: function formSubmissionIntercepted(element, submitter) {
      var frame = this.findFrameElement(element, submitter);

      if (frame) {
        frame.removeAttribute("reloadable");
        frame.delegate.formSubmissionIntercepted(element, submitter);
      }
    }
  }, {
    key: "shouldSubmit",
    value: function shouldSubmit(form, submitter) {
      var _a;

      var action = getAction(form, submitter);
      var meta = this.element.ownerDocument.querySelector("meta[name=\"turbo-root\"]");
      var rootLocation = expandURL((_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/");
      return this.shouldRedirect(form, submitter) && locationIsVisitable(action, rootLocation);
    }
  }, {
    key: "shouldRedirect",
    value: function shouldRedirect(element, submitter) {
      var frame = this.findFrameElement(element, submitter);
      return frame ? frame != element.closest("turbo-frame") : false;
    }
  }, {
    key: "findFrameElement",
    value: function findFrameElement(element, submitter) {
      var id = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("data-turbo-frame")) || element.getAttribute("data-turbo-frame");

      if (id && id != "_top") {
        var frame = this.element.querySelector("#".concat(id, ":not([disabled])"));

        if (frame instanceof FrameElement) {
          return frame;
        }
      }
    }
  }]);

  return FrameRedirector;
}();

var History = /*#__PURE__*/function () {
  function History(delegate) {
    var _this25 = this;

    _classCallCheck(this, History);

    this.restorationIdentifier = uuid();
    this.restorationData = {};
    this.started = false;
    this.pageLoaded = false;

    this.onPopState = function (event) {
      if (_this25.shouldHandlePopState()) {
        var _ref16 = event.state || {},
            turbo = _ref16.turbo;

        if (turbo) {
          _this25.location = new URL(window.location.href);
          var restorationIdentifier = turbo.restorationIdentifier;
          _this25.restorationIdentifier = restorationIdentifier;

          _this25.delegate.historyPoppedToLocationWithRestorationIdentifier(_this25.location, restorationIdentifier);
        }
      }
    };

    this.onPageLoad = /*#__PURE__*/function () {
      var _ref17 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee14(event) {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return nextMicrotask();

              case 2:
                _this25.pageLoaded = true;

              case 3:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14);
      }));

      return function (_x10) {
        return _ref17.apply(this, arguments);
      };
    }();

    this.delegate = delegate;
  }

  _createClass(History, [{
    key: "start",
    value: function start() {
      if (!this.started) {
        addEventListener("popstate", this.onPopState, false);
        addEventListener("load", this.onPageLoad, false);
        this.started = true;
        this.replace(new URL(window.location.href));
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.started) {
        removeEventListener("popstate", this.onPopState, false);
        removeEventListener("load", this.onPageLoad, false);
        this.started = false;
      }
    }
  }, {
    key: "push",
    value: function push(location, restorationIdentifier) {
      this.update(history.pushState, location, restorationIdentifier);
    }
  }, {
    key: "replace",
    value: function replace(location, restorationIdentifier) {
      this.update(history.replaceState, location, restorationIdentifier);
    }
  }, {
    key: "update",
    value: function update(method, location) {
      var restorationIdentifier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : uuid();
      var state = {
        turbo: {
          restorationIdentifier: restorationIdentifier
        }
      };
      method.call(history, state, "", location.href);
      this.location = location;
      this.restorationIdentifier = restorationIdentifier;
    }
  }, {
    key: "getRestorationDataForIdentifier",
    value: function getRestorationDataForIdentifier(restorationIdentifier) {
      return this.restorationData[restorationIdentifier] || {};
    }
  }, {
    key: "updateRestorationData",
    value: function updateRestorationData(additionalData) {
      var restorationIdentifier = this.restorationIdentifier;
      var restorationData = this.restorationData[restorationIdentifier];
      this.restorationData[restorationIdentifier] = Object.assign(Object.assign({}, restorationData), additionalData);
    }
  }, {
    key: "assumeControlOfScrollRestoration",
    value: function assumeControlOfScrollRestoration() {
      var _a;

      if (!this.previousScrollRestoration) {
        this.previousScrollRestoration = (_a = history.scrollRestoration) !== null && _a !== void 0 ? _a : "auto";
        history.scrollRestoration = "manual";
      }
    }
  }, {
    key: "relinquishControlOfScrollRestoration",
    value: function relinquishControlOfScrollRestoration() {
      if (this.previousScrollRestoration) {
        history.scrollRestoration = this.previousScrollRestoration;
        delete this.previousScrollRestoration;
      }
    }
  }, {
    key: "shouldHandlePopState",
    value: function shouldHandlePopState() {
      return this.pageIsLoaded();
    }
  }, {
    key: "pageIsLoaded",
    value: function pageIsLoaded() {
      return this.pageLoaded || document.readyState == "complete";
    }
  }]);

  return History;
}();

var LinkClickObserver = /*#__PURE__*/function () {
  function LinkClickObserver(delegate) {
    var _this26 = this;

    _classCallCheck(this, LinkClickObserver);

    this.started = false;

    this.clickCaptured = function () {
      removeEventListener("click", _this26.clickBubbled, false);
      addEventListener("click", _this26.clickBubbled, false);
    };

    this.clickBubbled = function (event) {
      if (_this26.clickEventIsSignificant(event)) {
        var target = event.composedPath && event.composedPath()[0] || event.target;

        var link = _this26.findLinkFromClickTarget(target);

        if (link) {
          var _location = _this26.getLocationForLink(link);

          if (_this26.delegate.willFollowLinkToLocation(link, _location)) {
            event.preventDefault();

            _this26.delegate.followedLinkToLocation(link, _location);
          }
        }
      }
    };

    this.delegate = delegate;
  }

  _createClass(LinkClickObserver, [{
    key: "start",
    value: function start() {
      if (!this.started) {
        addEventListener("click", this.clickCaptured, true);
        this.started = true;
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.started) {
        removeEventListener("click", this.clickCaptured, true);
        this.started = false;
      }
    }
  }, {
    key: "clickEventIsSignificant",
    value: function clickEventIsSignificant(event) {
      return !(event.target && event.target.isContentEditable || event.defaultPrevented || event.which > 1 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey);
    }
  }, {
    key: "findLinkFromClickTarget",
    value: function findLinkFromClickTarget(target) {
      if (target instanceof Element) {
        return target.closest("a[href]:not([target^=_]):not([download])");
      }
    }
  }, {
    key: "getLocationForLink",
    value: function getLocationForLink(link) {
      return expandURL(link.getAttribute("href") || "");
    }
  }]);

  return LinkClickObserver;
}();

function isAction(action) {
  return action == "advance" || action == "replace" || action == "restore";
}

var Navigator = /*#__PURE__*/function () {
  function Navigator(delegate) {
    _classCallCheck(this, Navigator);

    this.delegate = delegate;
  }

  _createClass(Navigator, [{
    key: "proposeVisit",
    value: function proposeVisit(location) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (this.delegate.allowsVisitingLocationWithAction(location, options.action)) {
        if (locationIsVisitable(location, this.view.snapshot.rootLocation)) {
          this.delegate.visitProposedToLocation(location, options);
        } else {
          window.location.href = location.toString();
        }
      }
    }
  }, {
    key: "startVisit",
    value: function startVisit(locatable, restorationIdentifier) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      this.stop();
      this.currentVisit = new Visit(this, expandURL(locatable), restorationIdentifier, Object.assign({
        referrer: this.location
      }, options));
      this.currentVisit.start();
    }
  }, {
    key: "submitForm",
    value: function submitForm(form, submitter) {
      this.stop();
      this.formSubmission = new FormSubmission(this, form, submitter, true);
      this.formSubmission.start();
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.formSubmission) {
        this.formSubmission.stop();
        delete this.formSubmission;
      }

      if (this.currentVisit) {
        this.currentVisit.cancel();
        delete this.currentVisit;
      }
    }
  }, {
    key: "adapter",
    get: function get() {
      return this.delegate.adapter;
    }
  }, {
    key: "view",
    get: function get() {
      return this.delegate.view;
    }
  }, {
    key: "history",
    get: function get() {
      return this.delegate.history;
    }
  }, {
    key: "formSubmissionStarted",
    value: function formSubmissionStarted(formSubmission) {
      if (typeof this.adapter.formSubmissionStarted === 'function') {
        this.adapter.formSubmissionStarted(formSubmission);
      }
    }
  }, {
    key: "formSubmissionSucceededWithResponse",
    value: function () {
      var _formSubmissionSucceededWithResponse = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee15(formSubmission, fetchResponse) {
        var responseHTML, statusCode, redirected, action, visitOptions;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                if (!(formSubmission == this.formSubmission)) {
                  _context15.next = 5;
                  break;
                }

                _context15.next = 3;
                return fetchResponse.responseHTML;

              case 3:
                responseHTML = _context15.sent;

                if (responseHTML) {
                  if (formSubmission.method != FetchMethod.get) {
                    this.view.clearSnapshotCache();
                  }

                  statusCode = fetchResponse.statusCode, redirected = fetchResponse.redirected;
                  action = this.getActionForFormSubmission(formSubmission);
                  visitOptions = {
                    action: action,
                    response: {
                      statusCode: statusCode,
                      responseHTML: responseHTML,
                      redirected: redirected
                    }
                  };
                  this.proposeVisit(fetchResponse.location, visitOptions);
                }

              case 5:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function formSubmissionSucceededWithResponse(_x11, _x12) {
        return _formSubmissionSucceededWithResponse.apply(this, arguments);
      }

      return formSubmissionSucceededWithResponse;
    }()
  }, {
    key: "formSubmissionFailedWithResponse",
    value: function () {
      var _formSubmissionFailedWithResponse = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee16(formSubmission, fetchResponse) {
        var responseHTML, snapshot;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return fetchResponse.responseHTML;

              case 2:
                responseHTML = _context16.sent;

                if (!responseHTML) {
                  _context16.next = 14;
                  break;
                }

                snapshot = PageSnapshot.fromHTMLString(responseHTML);

                if (!fetchResponse.serverError) {
                  _context16.next = 10;
                  break;
                }

                _context16.next = 8;
                return this.view.renderError(snapshot);

              case 8:
                _context16.next = 12;
                break;

              case 10:
                _context16.next = 12;
                return this.view.renderPage(snapshot);

              case 12:
                this.view.scrollToTop();
                this.view.clearSnapshotCache();

              case 14:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function formSubmissionFailedWithResponse(_x13, _x14) {
        return _formSubmissionFailedWithResponse.apply(this, arguments);
      }

      return formSubmissionFailedWithResponse;
    }()
  }, {
    key: "formSubmissionErrored",
    value: function formSubmissionErrored(formSubmission, error) {
      console.error(error);
    }
  }, {
    key: "formSubmissionFinished",
    value: function formSubmissionFinished(formSubmission) {
      if (typeof this.adapter.formSubmissionFinished === 'function') {
        this.adapter.formSubmissionFinished(formSubmission);
      }
    }
  }, {
    key: "visitStarted",
    value: function visitStarted(visit) {
      this.delegate.visitStarted(visit);
    }
  }, {
    key: "visitCompleted",
    value: function visitCompleted(visit) {
      this.delegate.visitCompleted(visit);
    }
  }, {
    key: "locationWithActionIsSamePage",
    value: function locationWithActionIsSamePage(location, action) {
      var anchor = getAnchor(location);
      var currentAnchor = getAnchor(this.view.lastRenderedLocation);
      var isRestorationToTop = action === 'restore' && typeof anchor === 'undefined';
      return action !== "replace" && getRequestURL(location) === getRequestURL(this.view.lastRenderedLocation) && (isRestorationToTop || anchor != null && anchor !== currentAnchor);
    }
  }, {
    key: "visitScrolledToSamePageLocation",
    value: function visitScrolledToSamePageLocation(oldURL, newURL) {
      this.delegate.visitScrolledToSamePageLocation(oldURL, newURL);
    }
  }, {
    key: "location",
    get: function get() {
      return this.history.location;
    }
  }, {
    key: "restorationIdentifier",
    get: function get() {
      return this.history.restorationIdentifier;
    }
  }, {
    key: "getActionForFormSubmission",
    value: function getActionForFormSubmission(formSubmission) {
      var formElement = formSubmission.formElement,
          submitter = formSubmission.submitter;
      var action = getAttribute("data-turbo-action", submitter, formElement);
      return isAction(action) ? action : "advance";
    }
  }]);

  return Navigator;
}();

var PageStage;

(function (PageStage) {
  PageStage[PageStage["initial"] = 0] = "initial";
  PageStage[PageStage["loading"] = 1] = "loading";
  PageStage[PageStage["interactive"] = 2] = "interactive";
  PageStage[PageStage["complete"] = 3] = "complete";
})(PageStage || (PageStage = {}));

var PageObserver = /*#__PURE__*/function () {
  function PageObserver(delegate) {
    var _this27 = this;

    _classCallCheck(this, PageObserver);

    this.stage = PageStage.initial;
    this.started = false;

    this.interpretReadyState = function () {
      var readyState = _this27.readyState;

      if (readyState == "interactive") {
        _this27.pageIsInteractive();
      } else if (readyState == "complete") {
        _this27.pageIsComplete();
      }
    };

    this.pageWillUnload = function () {
      _this27.delegate.pageWillUnload();
    };

    this.delegate = delegate;
  }

  _createClass(PageObserver, [{
    key: "start",
    value: function start() {
      if (!this.started) {
        if (this.stage == PageStage.initial) {
          this.stage = PageStage.loading;
        }

        document.addEventListener("readystatechange", this.interpretReadyState, false);
        addEventListener("pagehide", this.pageWillUnload, false);
        this.started = true;
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.started) {
        document.removeEventListener("readystatechange", this.interpretReadyState, false);
        removeEventListener("pagehide", this.pageWillUnload, false);
        this.started = false;
      }
    }
  }, {
    key: "pageIsInteractive",
    value: function pageIsInteractive() {
      if (this.stage == PageStage.loading) {
        this.stage = PageStage.interactive;
        this.delegate.pageBecameInteractive();
      }
    }
  }, {
    key: "pageIsComplete",
    value: function pageIsComplete() {
      this.pageIsInteractive();

      if (this.stage == PageStage.interactive) {
        this.stage = PageStage.complete;
        this.delegate.pageLoaded();
      }
    }
  }, {
    key: "readyState",
    get: function get() {
      return document.readyState;
    }
  }]);

  return PageObserver;
}();

var ScrollObserver = /*#__PURE__*/function () {
  function ScrollObserver(delegate) {
    var _this28 = this;

    _classCallCheck(this, ScrollObserver);

    this.started = false;

    this.onScroll = function () {
      _this28.updatePosition({
        x: window.pageXOffset,
        y: window.pageYOffset
      });
    };

    this.delegate = delegate;
  }

  _createClass(ScrollObserver, [{
    key: "start",
    value: function start() {
      if (!this.started) {
        addEventListener("scroll", this.onScroll, false);
        this.onScroll();
        this.started = true;
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.started) {
        removeEventListener("scroll", this.onScroll, false);
        this.started = false;
      }
    }
  }, {
    key: "updatePosition",
    value: function updatePosition(position) {
      this.delegate.scrollPositionChanged(position);
    }
  }]);

  return ScrollObserver;
}();

var StreamObserver = /*#__PURE__*/function () {
  function StreamObserver(delegate) {
    var _this29 = this;

    _classCallCheck(this, StreamObserver);

    this.sources = new Set();
    this.started = false;

    this.inspectFetchResponse = function (event) {
      var response = fetchResponseFromEvent(event);

      if (response && fetchResponseIsStream(response)) {
        event.preventDefault();

        _this29.receiveMessageResponse(response);
      }
    };

    this.receiveMessageEvent = function (event) {
      if (_this29.started && typeof event.data == "string") {
        _this29.receiveMessageHTML(event.data);
      }
    };

    this.delegate = delegate;
  }

  _createClass(StreamObserver, [{
    key: "start",
    value: function start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
  }, {
    key: "connectStreamSource",
    value: function connectStreamSource(source) {
      if (!this.streamSourceIsConnected(source)) {
        this.sources.add(source);
        source.addEventListener("message", this.receiveMessageEvent, false);
      }
    }
  }, {
    key: "disconnectStreamSource",
    value: function disconnectStreamSource(source) {
      if (this.streamSourceIsConnected(source)) {
        this.sources.delete(source);
        source.removeEventListener("message", this.receiveMessageEvent, false);
      }
    }
  }, {
    key: "streamSourceIsConnected",
    value: function streamSourceIsConnected(source) {
      return this.sources.has(source);
    }
  }, {
    key: "receiveMessageResponse",
    value: function () {
      var _receiveMessageResponse = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee17(response) {
        var html;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return response.responseHTML;

              case 2:
                html = _context17.sent;

                if (html) {
                  this.receiveMessageHTML(html);
                }

              case 4:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function receiveMessageResponse(_x15) {
        return _receiveMessageResponse.apply(this, arguments);
      }

      return receiveMessageResponse;
    }()
  }, {
    key: "receiveMessageHTML",
    value: function receiveMessageHTML(html) {
      this.delegate.receivedMessageFromStream(new StreamMessage(html));
    }
  }]);

  return StreamObserver;
}();

function fetchResponseFromEvent(event) {
  var _a;

  var fetchResponse = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.fetchResponse;

  if (fetchResponse instanceof FetchResponse) {
    return fetchResponse;
  }
}

function fetchResponseIsStream(response) {
  var _a;

  var contentType = (_a = response.contentType) !== null && _a !== void 0 ? _a : "";
  return contentType.startsWith(StreamMessage.contentType);
}

var ErrorRenderer = /*#__PURE__*/function (_Renderer2) {
  _inherits(ErrorRenderer, _Renderer2);

  var _super6 = _createSuper(ErrorRenderer);

  function ErrorRenderer() {
    _classCallCheck(this, ErrorRenderer);

    return _super6.apply(this, arguments);
  }

  _createClass(ErrorRenderer, [{
    key: "render",
    value: function () {
      var _render4 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee18() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                this.replaceHeadAndBody();
                this.activateScriptElements();

              case 2:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function render() {
        return _render4.apply(this, arguments);
      }

      return render;
    }()
  }, {
    key: "replaceHeadAndBody",
    value: function replaceHeadAndBody() {
      var _document = document,
          documentElement = _document.documentElement,
          head = _document.head,
          body = _document.body;
      documentElement.replaceChild(this.newHead, head);
      documentElement.replaceChild(this.newElement, body);
    }
  }, {
    key: "activateScriptElements",
    value: function activateScriptElements() {
      var _iterator7 = _createForOfIteratorHelper(this.scriptElements),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var replaceableElement = _step7.value;
          var parentNode = replaceableElement.parentNode;

          if (parentNode) {
            var element = this.createScriptElement(replaceableElement);
            parentNode.replaceChild(element, replaceableElement);
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "newHead",
    get: function get() {
      return this.newSnapshot.headSnapshot.element;
    }
  }, {
    key: "scriptElements",
    get: function get() {
      return _toConsumableArray(document.documentElement.querySelectorAll("script"));
    }
  }]);

  return ErrorRenderer;
}(Renderer);

var PageRenderer = /*#__PURE__*/function (_Renderer3) {
  _inherits(PageRenderer, _Renderer3);

  var _super7 = _createSuper(PageRenderer);

  function PageRenderer() {
    _classCallCheck(this, PageRenderer);

    return _super7.apply(this, arguments);
  }

  _createClass(PageRenderer, [{
    key: "shouldRender",
    get: function get() {
      return this.newSnapshot.isVisitable && this.trackedElementsAreIdentical;
    }
  }, {
    key: "prepareToRender",
    value: function prepareToRender() {
      this.mergeHead();
    }
  }, {
    key: "render",
    value: function () {
      var _render5 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee19() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                if (this.willRender) {
                  this.replaceBody();
                }

              case 1:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function render() {
        return _render5.apply(this, arguments);
      }

      return render;
    }()
  }, {
    key: "finishRendering",
    value: function finishRendering() {
      _get(_getPrototypeOf(PageRenderer.prototype), "finishRendering", this).call(this);

      if (!this.isPreview) {
        this.focusFirstAutofocusableElement();
      }
    }
  }, {
    key: "currentHeadSnapshot",
    get: function get() {
      return this.currentSnapshot.headSnapshot;
    }
  }, {
    key: "newHeadSnapshot",
    get: function get() {
      return this.newSnapshot.headSnapshot;
    }
  }, {
    key: "newElement",
    get: function get() {
      return this.newSnapshot.element;
    }
  }, {
    key: "mergeHead",
    value: function mergeHead() {
      this.copyNewHeadStylesheetElements();
      this.copyNewHeadScriptElements();
      this.removeCurrentHeadProvisionalElements();
      this.copyNewHeadProvisionalElements();
    }
  }, {
    key: "replaceBody",
    value: function replaceBody() {
      var _this30 = this;

      this.preservingPermanentElements(function () {
        _this30.activateNewBody();

        _this30.assignNewBody();
      });
    }
  }, {
    key: "trackedElementsAreIdentical",
    get: function get() {
      return this.currentHeadSnapshot.trackedElementSignature == this.newHeadSnapshot.trackedElementSignature;
    }
  }, {
    key: "copyNewHeadStylesheetElements",
    value: function copyNewHeadStylesheetElements() {
      var _iterator8 = _createForOfIteratorHelper(this.newHeadStylesheetElements),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var element = _step8.value;
          document.head.appendChild(element);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
  }, {
    key: "copyNewHeadScriptElements",
    value: function copyNewHeadScriptElements() {
      var _iterator9 = _createForOfIteratorHelper(this.newHeadScriptElements),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var element = _step9.value;
          document.head.appendChild(this.createScriptElement(element));
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
    }
  }, {
    key: "removeCurrentHeadProvisionalElements",
    value: function removeCurrentHeadProvisionalElements() {
      var _iterator10 = _createForOfIteratorHelper(this.currentHeadProvisionalElements),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var element = _step10.value;
          document.head.removeChild(element);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
    }
  }, {
    key: "copyNewHeadProvisionalElements",
    value: function copyNewHeadProvisionalElements() {
      var _iterator11 = _createForOfIteratorHelper(this.newHeadProvisionalElements),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var element = _step11.value;
          document.head.appendChild(element);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
    }
  }, {
    key: "activateNewBody",
    value: function activateNewBody() {
      document.adoptNode(this.newElement);
      this.activateNewBodyScriptElements();
    }
  }, {
    key: "activateNewBodyScriptElements",
    value: function activateNewBodyScriptElements() {
      var _iterator12 = _createForOfIteratorHelper(this.newBodyScriptElements),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var inertScriptElement = _step12.value;
          var activatedScriptElement = this.createScriptElement(inertScriptElement);
          inertScriptElement.replaceWith(activatedScriptElement);
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
    }
  }, {
    key: "assignNewBody",
    value: function assignNewBody() {
      if (document.body && this.newElement instanceof HTMLBodyElement) {
        document.body.replaceWith(this.newElement);
      } else {
        document.documentElement.appendChild(this.newElement);
      }
    }
  }, {
    key: "newHeadStylesheetElements",
    get: function get() {
      return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot);
    }
  }, {
    key: "newHeadScriptElements",
    get: function get() {
      return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot);
    }
  }, {
    key: "currentHeadProvisionalElements",
    get: function get() {
      return this.currentHeadSnapshot.provisionalElements;
    }
  }, {
    key: "newHeadProvisionalElements",
    get: function get() {
      return this.newHeadSnapshot.provisionalElements;
    }
  }, {
    key: "newBodyScriptElements",
    get: function get() {
      return this.newElement.querySelectorAll("script");
    }
  }]);

  return PageRenderer;
}(Renderer);

var SnapshotCache = /*#__PURE__*/function () {
  function SnapshotCache(size) {
    _classCallCheck(this, SnapshotCache);

    this.keys = [];
    this.snapshots = {};
    this.size = size;
  }

  _createClass(SnapshotCache, [{
    key: "has",
    value: function has(location) {
      return toCacheKey(location) in this.snapshots;
    }
  }, {
    key: "get",
    value: function get(location) {
      if (this.has(location)) {
        var snapshot = this.read(location);
        this.touch(location);
        return snapshot;
      }
    }
  }, {
    key: "put",
    value: function put(location, snapshot) {
      this.write(location, snapshot);
      this.touch(location);
      return snapshot;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.snapshots = {};
    }
  }, {
    key: "read",
    value: function read(location) {
      return this.snapshots[toCacheKey(location)];
    }
  }, {
    key: "write",
    value: function write(location, snapshot) {
      this.snapshots[toCacheKey(location)] = snapshot;
    }
  }, {
    key: "touch",
    value: function touch(location) {
      var key = toCacheKey(location);
      var index = this.keys.indexOf(key);
      if (index > -1) this.keys.splice(index, 1);
      this.keys.unshift(key);
      this.trim();
    }
  }, {
    key: "trim",
    value: function trim() {
      var _iterator13 = _createForOfIteratorHelper(this.keys.splice(this.size)),
          _step13;

      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var key = _step13.value;
          delete this.snapshots[key];
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
    }
  }]);

  return SnapshotCache;
}();

var PageView = /*#__PURE__*/function (_View2) {
  _inherits(PageView, _View2);

  var _super8 = _createSuper(PageView);

  function PageView() {
    var _this31;

    _classCallCheck(this, PageView);

    _this31 = _super8.apply(this, arguments);
    _this31.snapshotCache = new SnapshotCache(10);
    _this31.lastRenderedLocation = new URL(location.href);
    return _this31;
  }

  _createClass(PageView, [{
    key: "renderPage",
    value: function renderPage(snapshot) {
      var isPreview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var willRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var renderer = new PageRenderer(this.snapshot, snapshot, isPreview, willRender);
      return this.render(renderer);
    }
  }, {
    key: "renderError",
    value: function renderError(snapshot) {
      var renderer = new ErrorRenderer(this.snapshot, snapshot, false);
      return this.render(renderer);
    }
  }, {
    key: "clearSnapshotCache",
    value: function clearSnapshotCache() {
      this.snapshotCache.clear();
    }
  }, {
    key: "cacheSnapshot",
    value: function () {
      var _cacheSnapshot = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee20() {
        var snapshot, _location2, cachedSnapshot;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                if (!this.shouldCacheSnapshot) {
                  _context20.next = 8;
                  break;
                }

                this.delegate.viewWillCacheSnapshot();
                snapshot = this.snapshot, _location2 = this.lastRenderedLocation;
                _context20.next = 5;
                return nextEventLoopTick();

              case 5:
                cachedSnapshot = snapshot.clone();
                this.snapshotCache.put(_location2, cachedSnapshot);
                return _context20.abrupt("return", cachedSnapshot);

              case 8:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function cacheSnapshot() {
        return _cacheSnapshot.apply(this, arguments);
      }

      return cacheSnapshot;
    }()
  }, {
    key: "getCachedSnapshotForLocation",
    value: function getCachedSnapshotForLocation(location) {
      return this.snapshotCache.get(location);
    }
  }, {
    key: "snapshot",
    get: function get() {
      return PageSnapshot.fromElement(this.element);
    }
  }, {
    key: "shouldCacheSnapshot",
    get: function get() {
      return this.snapshot.isCacheable;
    }
  }]);

  return PageView;
}(View);

var Session = /*#__PURE__*/function () {
  function Session() {
    _classCallCheck(this, Session);

    this.navigator = new Navigator(this);
    this.history = new History(this);
    this.view = new PageView(this, document.documentElement);
    this.adapter = new BrowserAdapter(this);
    this.pageObserver = new PageObserver(this);
    this.cacheObserver = new CacheObserver();
    this.linkClickObserver = new LinkClickObserver(this);
    this.formSubmitObserver = new FormSubmitObserver(this);
    this.scrollObserver = new ScrollObserver(this);
    this.streamObserver = new StreamObserver(this);
    this.frameRedirector = new FrameRedirector(document.documentElement);
    this.drive = true;
    this.enabled = true;
    this.progressBarDelay = 500;
    this.started = false;
  }

  _createClass(Session, [{
    key: "start",
    value: function start() {
      if (!this.started) {
        this.pageObserver.start();
        this.cacheObserver.start();
        this.linkClickObserver.start();
        this.formSubmitObserver.start();
        this.scrollObserver.start();
        this.streamObserver.start();
        this.frameRedirector.start();
        this.history.start();
        this.started = true;
        this.enabled = true;
      }
    }
  }, {
    key: "disable",
    value: function disable() {
      this.enabled = false;
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this.started) {
        this.pageObserver.stop();
        this.cacheObserver.stop();
        this.linkClickObserver.stop();
        this.formSubmitObserver.stop();
        this.scrollObserver.stop();
        this.streamObserver.stop();
        this.frameRedirector.stop();
        this.history.stop();
        this.started = false;
      }
    }
  }, {
    key: "registerAdapter",
    value: function registerAdapter(adapter) {
      this.adapter = adapter;
    }
  }, {
    key: "visit",
    value: function visit(location) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.navigator.proposeVisit(expandURL(location), options);
    }
  }, {
    key: "connectStreamSource",
    value: function connectStreamSource(source) {
      this.streamObserver.connectStreamSource(source);
    }
  }, {
    key: "disconnectStreamSource",
    value: function disconnectStreamSource(source) {
      this.streamObserver.disconnectStreamSource(source);
    }
  }, {
    key: "renderStreamMessage",
    value: function renderStreamMessage(message) {
      document.documentElement.appendChild(StreamMessage.wrap(message).fragment);
    }
  }, {
    key: "clearCache",
    value: function clearCache() {
      this.view.clearSnapshotCache();
    }
  }, {
    key: "setProgressBarDelay",
    value: function setProgressBarDelay(delay) {
      this.progressBarDelay = delay;
    }
  }, {
    key: "location",
    get: function get() {
      return this.history.location;
    }
  }, {
    key: "restorationIdentifier",
    get: function get() {
      return this.history.restorationIdentifier;
    }
  }, {
    key: "historyPoppedToLocationWithRestorationIdentifier",
    value: function historyPoppedToLocationWithRestorationIdentifier(location, restorationIdentifier) {
      if (this.enabled) {
        this.navigator.startVisit(location, restorationIdentifier, {
          action: "restore",
          historyChanged: true
        });
      } else {
        this.adapter.pageInvalidated();
      }
    }
  }, {
    key: "scrollPositionChanged",
    value: function scrollPositionChanged(position) {
      this.history.updateRestorationData({
        scrollPosition: position
      });
    }
  }, {
    key: "willFollowLinkToLocation",
    value: function willFollowLinkToLocation(link, location) {
      return this.elementDriveEnabled(link) && locationIsVisitable(location, this.snapshot.rootLocation) && this.applicationAllowsFollowingLinkToLocation(link, location);
    }
  }, {
    key: "followedLinkToLocation",
    value: function followedLinkToLocation(link, location) {
      var action = this.getActionForLink(link);
      this.convertLinkWithMethodClickToFormSubmission(link) || this.visit(location.href, {
        action: action
      });
    }
  }, {
    key: "convertLinkWithMethodClickToFormSubmission",
    value: function convertLinkWithMethodClickToFormSubmission(link) {
      var linkMethod = link.getAttribute("data-turbo-method");

      if (linkMethod) {
        var form = document.createElement("form");
        form.method = linkMethod;
        form.action = link.getAttribute("href") || "undefined";
        form.hidden = true;

        if (link.hasAttribute("data-turbo-confirm")) {
          form.setAttribute("data-turbo-confirm", link.getAttribute("data-turbo-confirm"));
        }

        var frame = this.getTargetFrameForLink(link);

        if (frame) {
          form.setAttribute("data-turbo-frame", frame);
          form.addEventListener("turbo:submit-start", function () {
            return form.remove();
          });
        } else {
          form.addEventListener("submit", function () {
            return form.remove();
          });
        }

        document.body.appendChild(form);
        return dispatch("submit", {
          cancelable: true,
          target: form
        });
      } else {
        return false;
      }
    }
  }, {
    key: "allowsVisitingLocationWithAction",
    value: function allowsVisitingLocationWithAction(location, action) {
      return this.locationWithActionIsSamePage(location, action) || this.applicationAllowsVisitingLocation(location);
    }
  }, {
    key: "visitProposedToLocation",
    value: function visitProposedToLocation(location, options) {
      extendURLWithDeprecatedProperties(location);
      this.adapter.visitProposedToLocation(location, options);
    }
  }, {
    key: "visitStarted",
    value: function visitStarted(visit) {
      extendURLWithDeprecatedProperties(visit.location);

      if (!visit.silent) {
        this.notifyApplicationAfterVisitingLocation(visit.location, visit.action);
      }
    }
  }, {
    key: "visitCompleted",
    value: function visitCompleted(visit) {
      this.notifyApplicationAfterPageLoad(visit.getTimingMetrics());
    }
  }, {
    key: "locationWithActionIsSamePage",
    value: function locationWithActionIsSamePage(location, action) {
      return this.navigator.locationWithActionIsSamePage(location, action);
    }
  }, {
    key: "visitScrolledToSamePageLocation",
    value: function visitScrolledToSamePageLocation(oldURL, newURL) {
      this.notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL);
    }
  }, {
    key: "willSubmitForm",
    value: function willSubmitForm(form, submitter) {
      var action = getAction(form, submitter);
      return this.elementDriveEnabled(form) && (!submitter || this.elementDriveEnabled(submitter)) && locationIsVisitable(expandURL(action), this.snapshot.rootLocation);
    }
  }, {
    key: "formSubmitted",
    value: function formSubmitted(form, submitter) {
      this.navigator.submitForm(form, submitter);
    }
  }, {
    key: "pageBecameInteractive",
    value: function pageBecameInteractive() {
      this.view.lastRenderedLocation = this.location;
      this.notifyApplicationAfterPageLoad();
    }
  }, {
    key: "pageLoaded",
    value: function pageLoaded() {
      this.history.assumeControlOfScrollRestoration();
    }
  }, {
    key: "pageWillUnload",
    value: function pageWillUnload() {
      this.history.relinquishControlOfScrollRestoration();
    }
  }, {
    key: "receivedMessageFromStream",
    value: function receivedMessageFromStream(message) {
      this.renderStreamMessage(message);
    }
  }, {
    key: "viewWillCacheSnapshot",
    value: function viewWillCacheSnapshot() {
      var _a;

      if (!((_a = this.navigator.currentVisit) === null || _a === void 0 ? void 0 : _a.silent)) {
        this.notifyApplicationBeforeCachingSnapshot();
      }
    }
  }, {
    key: "allowsImmediateRender",
    value: function allowsImmediateRender(_ref18, resume) {
      var element = _ref18.element;
      var event = this.notifyApplicationBeforeRender(element, resume);
      return !event.defaultPrevented;
    }
  }, {
    key: "viewRenderedSnapshot",
    value: function viewRenderedSnapshot(snapshot, isPreview) {
      this.view.lastRenderedLocation = this.history.location;
      this.notifyApplicationAfterRender();
    }
  }, {
    key: "viewInvalidated",
    value: function viewInvalidated() {
      this.adapter.pageInvalidated();
    }
  }, {
    key: "frameLoaded",
    value: function frameLoaded(frame) {
      this.notifyApplicationAfterFrameLoad(frame);
    }
  }, {
    key: "frameRendered",
    value: function frameRendered(fetchResponse, frame) {
      this.notifyApplicationAfterFrameRender(fetchResponse, frame);
    }
  }, {
    key: "applicationAllowsFollowingLinkToLocation",
    value: function applicationAllowsFollowingLinkToLocation(link, location) {
      var event = this.notifyApplicationAfterClickingLinkToLocation(link, location);
      return !event.defaultPrevented;
    }
  }, {
    key: "applicationAllowsVisitingLocation",
    value: function applicationAllowsVisitingLocation(location) {
      var event = this.notifyApplicationBeforeVisitingLocation(location);
      return !event.defaultPrevented;
    }
  }, {
    key: "notifyApplicationAfterClickingLinkToLocation",
    value: function notifyApplicationAfterClickingLinkToLocation(link, location) {
      return dispatch("turbo:click", {
        target: link,
        detail: {
          url: location.href
        },
        cancelable: true
      });
    }
  }, {
    key: "notifyApplicationBeforeVisitingLocation",
    value: function notifyApplicationBeforeVisitingLocation(location) {
      return dispatch("turbo:before-visit", {
        detail: {
          url: location.href
        },
        cancelable: true
      });
    }
  }, {
    key: "notifyApplicationAfterVisitingLocation",
    value: function notifyApplicationAfterVisitingLocation(location, action) {
      markAsBusy(document.documentElement);
      return dispatch("turbo:visit", {
        detail: {
          url: location.href,
          action: action
        }
      });
    }
  }, {
    key: "notifyApplicationBeforeCachingSnapshot",
    value: function notifyApplicationBeforeCachingSnapshot() {
      return dispatch("turbo:before-cache");
    }
  }, {
    key: "notifyApplicationBeforeRender",
    value: function notifyApplicationBeforeRender(newBody, resume) {
      return dispatch("turbo:before-render", {
        detail: {
          newBody: newBody,
          resume: resume
        },
        cancelable: true
      });
    }
  }, {
    key: "notifyApplicationAfterRender",
    value: function notifyApplicationAfterRender() {
      return dispatch("turbo:render");
    }
  }, {
    key: "notifyApplicationAfterPageLoad",
    value: function notifyApplicationAfterPageLoad() {
      var timing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      clearBusyState(document.documentElement);
      return dispatch("turbo:load", {
        detail: {
          url: this.location.href,
          timing: timing
        }
      });
    }
  }, {
    key: "notifyApplicationAfterVisitingSamePageLocation",
    value: function notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL) {
      dispatchEvent(new HashChangeEvent("hashchange", {
        oldURL: oldURL.toString(),
        newURL: newURL.toString()
      }));
    }
  }, {
    key: "notifyApplicationAfterFrameLoad",
    value: function notifyApplicationAfterFrameLoad(frame) {
      return dispatch("turbo:frame-load", {
        target: frame
      });
    }
  }, {
    key: "notifyApplicationAfterFrameRender",
    value: function notifyApplicationAfterFrameRender(fetchResponse, frame) {
      return dispatch("turbo:frame-render", {
        detail: {
          fetchResponse: fetchResponse
        },
        target: frame,
        cancelable: true
      });
    }
  }, {
    key: "elementDriveEnabled",
    value: function elementDriveEnabled(element) {
      var container = element === null || element === void 0 ? void 0 : element.closest("[data-turbo]");

      if (this.drive) {
        if (container) {
          return container.getAttribute("data-turbo") != "false";
        } else {
          return true;
        }
      } else {
        if (container) {
          return container.getAttribute("data-turbo") == "true";
        } else {
          return false;
        }
      }
    }
  }, {
    key: "getActionForLink",
    value: function getActionForLink(link) {
      var action = link.getAttribute("data-turbo-action");
      return isAction(action) ? action : "advance";
    }
  }, {
    key: "getTargetFrameForLink",
    value: function getTargetFrameForLink(link) {
      var frame = link.getAttribute("data-turbo-frame");

      if (frame) {
        return frame;
      } else {
        var container = link.closest("turbo-frame");

        if (container) {
          return container.id;
        }
      }
    }
  }, {
    key: "snapshot",
    get: function get() {
      return this.view.snapshot;
    }
  }]);

  return Session;
}();

function extendURLWithDeprecatedProperties(url) {
  Object.defineProperties(url, deprecatedLocationPropertyDescriptors);
}

var deprecatedLocationPropertyDescriptors = {
  absoluteURL: {
    get: function get() {
      return this.toString();
    }
  }
};
var session = new Session();
var navigator$1 = session.navigator;

function start() {
  session.start();
}

function registerAdapter(adapter) {
  session.registerAdapter(adapter);
}

function visit(location, options) {
  session.visit(location, options);
}

function connectStreamSource(source) {
  session.connectStreamSource(source);
}

function disconnectStreamSource(source) {
  session.disconnectStreamSource(source);
}

function renderStreamMessage(message) {
  session.renderStreamMessage(message);
}

function clearCache() {
  session.clearCache();
}

function setProgressBarDelay(delay) {
  session.setProgressBarDelay(delay);
}

function setConfirmMethod(confirmMethod) {
  FormSubmission.confirmMethod = confirmMethod;
}

var Turbo = /*#__PURE__*/Object.freeze({
  __proto__: null,
  navigator: navigator$1,
  session: session,
  PageRenderer: PageRenderer,
  PageSnapshot: PageSnapshot,
  start: start,
  registerAdapter: registerAdapter,
  visit: visit,
  connectStreamSource: connectStreamSource,
  disconnectStreamSource: disconnectStreamSource,
  renderStreamMessage: renderStreamMessage,
  clearCache: clearCache,
  setProgressBarDelay: setProgressBarDelay,
  setConfirmMethod: setConfirmMethod
});

var FrameController = /*#__PURE__*/function () {
  function FrameController(element) {
    _classCallCheck(this, FrameController);

    this.fetchResponseLoaded = function (fetchResponse) {};

    this.currentFetchRequest = null;

    this.resolveVisitPromise = function () {};

    this.connected = false;
    this.hasBeenLoaded = false;
    this.settingSourceURL = false;
    this.element = element;
    this.view = new FrameView(this, this.element);
    this.appearanceObserver = new AppearanceObserver(this, this.element);
    this.linkInterceptor = new LinkInterceptor(this, this.element);
    this.formInterceptor = new FormInterceptor(this, this.element);
  }

  _createClass(FrameController, [{
    key: "connect",
    value: function connect() {
      if (!this.connected) {
        this.connected = true;
        this.reloadable = false;

        if (this.loadingStyle == FrameLoadingStyle.lazy) {
          this.appearanceObserver.start();
        }

        this.linkInterceptor.start();
        this.formInterceptor.start();
        this.sourceURLChanged();
      }
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      if (this.connected) {
        this.connected = false;
        this.appearanceObserver.stop();
        this.linkInterceptor.stop();
        this.formInterceptor.stop();
      }
    }
  }, {
    key: "disabledChanged",
    value: function disabledChanged() {
      if (this.loadingStyle == FrameLoadingStyle.eager) {
        this.loadSourceURL();
      }
    }
  }, {
    key: "sourceURLChanged",
    value: function sourceURLChanged() {
      if (this.loadingStyle == FrameLoadingStyle.eager || this.hasBeenLoaded) {
        this.loadSourceURL();
      }
    }
  }, {
    key: "loadingStyleChanged",
    value: function loadingStyleChanged() {
      if (this.loadingStyle == FrameLoadingStyle.lazy) {
        this.appearanceObserver.start();
      } else {
        this.appearanceObserver.stop();
        this.loadSourceURL();
      }
    }
  }, {
    key: "loadSourceURL",
    value: function () {
      var _loadSourceURL = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee21() {
        var previousURL;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                if (!(!this.settingSourceURL && this.enabled && this.isActive && (this.reloadable || this.sourceURL != this.currentURL))) {
                  _context21.next = 16;
                  break;
                }

                previousURL = this.currentURL;
                this.currentURL = this.sourceURL;

                if (!this.sourceURL) {
                  _context21.next = 16;
                  break;
                }

                _context21.prev = 4;
                this.element.loaded = this.visit(expandURL(this.sourceURL));
                this.appearanceObserver.stop();
                _context21.next = 9;
                return this.element.loaded;

              case 9:
                this.hasBeenLoaded = true;
                _context21.next = 16;
                break;

              case 12:
                _context21.prev = 12;
                _context21.t0 = _context21["catch"](4);
                this.currentURL = previousURL;
                throw _context21.t0;

              case 16:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this, [[4, 12]]);
      }));

      function loadSourceURL() {
        return _loadSourceURL.apply(this, arguments);
      }

      return loadSourceURL;
    }()
  }, {
    key: "loadResponse",
    value: function () {
      var _loadResponse = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee22(fetchResponse) {
        var html, _parseHTMLDocument, body, snapshot, renderer;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                if (fetchResponse.redirected || fetchResponse.succeeded && fetchResponse.isHTML) {
                  this.sourceURL = fetchResponse.response.url;
                }

                _context22.prev = 1;
                _context22.next = 4;
                return fetchResponse.responseHTML;

              case 4:
                html = _context22.sent;

                if (!html) {
                  _context22.next = 21;
                  break;
                }

                _parseHTMLDocument = parseHTMLDocument(html), body = _parseHTMLDocument.body;
                _context22.t0 = Snapshot;
                _context22.next = 10;
                return this.extractForeignFrameElement(body);

              case 10:
                _context22.t1 = _context22.sent;
                snapshot = new _context22.t0(_context22.t1);
                renderer = new FrameRenderer(this.view.snapshot, snapshot, false, false);

                if (!this.view.renderPromise) {
                  _context22.next = 16;
                  break;
                }

                _context22.next = 16;
                return this.view.renderPromise;

              case 16:
                _context22.next = 18;
                return this.view.render(renderer);

              case 18:
                session.frameRendered(fetchResponse, this.element);
                session.frameLoaded(this.element);
                this.fetchResponseLoaded(fetchResponse);

              case 21:
                _context22.next = 27;
                break;

              case 23:
                _context22.prev = 23;
                _context22.t2 = _context22["catch"](1);
                console.error(_context22.t2);
                this.view.invalidate();

              case 27:
                _context22.prev = 27;

                this.fetchResponseLoaded = function () {};

                return _context22.finish(27);

              case 30:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this, [[1, 23, 27, 30]]);
      }));

      function loadResponse(_x16) {
        return _loadResponse.apply(this, arguments);
      }

      return loadResponse;
    }()
  }, {
    key: "elementAppearedInViewport",
    value: function elementAppearedInViewport(element) {
      this.loadSourceURL();
    }
  }, {
    key: "shouldInterceptLinkClick",
    value: function shouldInterceptLinkClick(element, url) {
      if (element.hasAttribute("data-turbo-method")) {
        return false;
      } else {
        return this.shouldInterceptNavigation(element);
      }
    }
  }, {
    key: "linkClickIntercepted",
    value: function linkClickIntercepted(element, url) {
      this.reloadable = true;
      this.navigateFrame(element, url);
    }
  }, {
    key: "shouldInterceptFormSubmission",
    value: function shouldInterceptFormSubmission(element, submitter) {
      return this.shouldInterceptNavigation(element, submitter);
    }
  }, {
    key: "formSubmissionIntercepted",
    value: function formSubmissionIntercepted(element, submitter) {
      if (this.formSubmission) {
        this.formSubmission.stop();
      }

      this.reloadable = false;
      this.formSubmission = new FormSubmission(this, element, submitter);
      var fetchRequest = this.formSubmission.fetchRequest;
      this.prepareHeadersForRequest(fetchRequest.headers, fetchRequest);
      this.formSubmission.start();
    }
  }, {
    key: "prepareHeadersForRequest",
    value: function prepareHeadersForRequest(headers, request) {
      headers["Turbo-Frame"] = this.id;
    }
  }, {
    key: "requestStarted",
    value: function requestStarted(request) {
      markAsBusy(this.element);
    }
  }, {
    key: "requestPreventedHandlingResponse",
    value: function requestPreventedHandlingResponse(request, response) {
      this.resolveVisitPromise();
    }
  }, {
    key: "requestSucceededWithResponse",
    value: function () {
      var _requestSucceededWithResponse2 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee23(request, response) {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this.loadResponse(response);

              case 2:
                this.resolveVisitPromise();

              case 3:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function requestSucceededWithResponse(_x17, _x18) {
        return _requestSucceededWithResponse2.apply(this, arguments);
      }

      return requestSucceededWithResponse;
    }()
  }, {
    key: "requestFailedWithResponse",
    value: function requestFailedWithResponse(request, response) {
      console.error(response);
      this.resolveVisitPromise();
    }
  }, {
    key: "requestErrored",
    value: function requestErrored(request, error) {
      console.error(error);
      this.resolveVisitPromise();
    }
  }, {
    key: "requestFinished",
    value: function requestFinished(request) {
      clearBusyState(this.element);
    }
  }, {
    key: "formSubmissionStarted",
    value: function formSubmissionStarted(_ref19) {
      var formElement = _ref19.formElement;
      markAsBusy(formElement, this.findFrameElement(formElement));
    }
  }, {
    key: "formSubmissionSucceededWithResponse",
    value: function formSubmissionSucceededWithResponse(formSubmission, response) {
      var frame = this.findFrameElement(formSubmission.formElement, formSubmission.submitter);
      this.proposeVisitIfNavigatedWithAction(frame, formSubmission.formElement, formSubmission.submitter);
      frame.delegate.loadResponse(response);
    }
  }, {
    key: "formSubmissionFailedWithResponse",
    value: function formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      this.element.delegate.loadResponse(fetchResponse);
    }
  }, {
    key: "formSubmissionErrored",
    value: function formSubmissionErrored(formSubmission, error) {
      console.error(error);
    }
  }, {
    key: "formSubmissionFinished",
    value: function formSubmissionFinished(_ref20) {
      var formElement = _ref20.formElement;
      clearBusyState(formElement, this.findFrameElement(formElement));
    }
  }, {
    key: "allowsImmediateRender",
    value: function allowsImmediateRender(snapshot, resume) {
      return true;
    }
  }, {
    key: "viewRenderedSnapshot",
    value: function viewRenderedSnapshot(snapshot, isPreview) {}
  }, {
    key: "viewInvalidated",
    value: function viewInvalidated() {}
  }, {
    key: "visit",
    value: function () {
      var _visit = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee24(url) {
        var _this32 = this;

        var _a, request;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                request = new FetchRequest(this, FetchMethod.get, url, new URLSearchParams(), this.element);
                (_a = this.currentFetchRequest) === null || _a === void 0 ? void 0 : _a.cancel();
                this.currentFetchRequest = request;
                return _context24.abrupt("return", new Promise(function (resolve) {
                  _this32.resolveVisitPromise = function () {
                    _this32.resolveVisitPromise = function () {};

                    _this32.currentFetchRequest = null;
                    resolve();
                  };

                  request.perform();
                }));

              case 4:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function visit(_x19) {
        return _visit.apply(this, arguments);
      }

      return visit;
    }()
  }, {
    key: "navigateFrame",
    value: function navigateFrame(element, url, submitter) {
      var frame = this.findFrameElement(element, submitter);
      this.proposeVisitIfNavigatedWithAction(frame, element, submitter);
      frame.setAttribute("reloadable", "");
      frame.src = url;
    }
  }, {
    key: "proposeVisitIfNavigatedWithAction",
    value: function proposeVisitIfNavigatedWithAction(frame, element, submitter) {
      var action = getAttribute("data-turbo-action", submitter, element, frame);

      if (isAction(action)) {
        var _SnapshotSubstitution = new SnapshotSubstitution(frame),
            visitCachedSnapshot = _SnapshotSubstitution.visitCachedSnapshot;

        frame.delegate.fetchResponseLoaded = function (fetchResponse) {
          if (frame.src) {
            var statusCode = fetchResponse.statusCode,
                redirected = fetchResponse.redirected;
            var responseHTML = frame.ownerDocument.documentElement.outerHTML;
            var response = {
              statusCode: statusCode,
              redirected: redirected,
              responseHTML: responseHTML
            };
            session.visit(frame.src, {
              action: action,
              response: response,
              visitCachedSnapshot: visitCachedSnapshot,
              willRender: false
            });
          }
        };
      }
    }
  }, {
    key: "findFrameElement",
    value: function findFrameElement(element, submitter) {
      var _a;

      var id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      return (_a = getFrameElementById(id)) !== null && _a !== void 0 ? _a : this.element;
    }
  }, {
    key: "extractForeignFrameElement",
    value: function () {
      var _extractForeignFrameElement = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee25(container) {
        var element, id;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                id = CSS.escape(this.id);
                _context25.prev = 1;

                if (!(element = activateElement(container.querySelector("turbo-frame#".concat(id)), this.currentURL))) {
                  _context25.next = 4;
                  break;
                }

                return _context25.abrupt("return", element);

              case 4:
                if (!(element = activateElement(container.querySelector("turbo-frame[src][recurse~=".concat(id, "]")), this.currentURL))) {
                  _context25.next = 10;
                  break;
                }

                _context25.next = 7;
                return element.loaded;

              case 7:
                _context25.next = 9;
                return this.extractForeignFrameElement(element);

              case 9:
                return _context25.abrupt("return", _context25.sent);

              case 10:
                console.error("Response has no matching <turbo-frame id=\"".concat(id, "\"> element"));
                _context25.next = 16;
                break;

              case 13:
                _context25.prev = 13;
                _context25.t0 = _context25["catch"](1);
                console.error(_context25.t0);

              case 16:
                return _context25.abrupt("return", new FrameElement());

              case 17:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this, [[1, 13]]);
      }));

      function extractForeignFrameElement(_x20) {
        return _extractForeignFrameElement.apply(this, arguments);
      }

      return extractForeignFrameElement;
    }()
  }, {
    key: "formActionIsVisitable",
    value: function formActionIsVisitable(form, submitter) {
      var action = getAction(form, submitter);
      return locationIsVisitable(expandURL(action), this.rootLocation);
    }
  }, {
    key: "shouldInterceptNavigation",
    value: function shouldInterceptNavigation(element, submitter) {
      var id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");

      if (element instanceof HTMLFormElement && !this.formActionIsVisitable(element, submitter)) {
        return false;
      }

      if (!this.enabled || id == "_top") {
        return false;
      }

      if (id) {
        var frameElement = getFrameElementById(id);

        if (frameElement) {
          return !frameElement.disabled;
        }
      }

      if (!session.elementDriveEnabled(element)) {
        return false;
      }

      if (submitter && !session.elementDriveEnabled(submitter)) {
        return false;
      }

      return true;
    }
  }, {
    key: "id",
    get: function get() {
      return this.element.id;
    }
  }, {
    key: "enabled",
    get: function get() {
      return !this.element.disabled;
    }
  }, {
    key: "sourceURL",
    get: function get() {
      if (this.element.src) {
        return this.element.src;
      }
    },
    set: function set(sourceURL) {
      this.settingSourceURL = true;
      this.element.src = sourceURL !== null && sourceURL !== void 0 ? sourceURL : null;
      this.currentURL = this.element.src;
      this.settingSourceURL = false;
    }
  }, {
    key: "reloadable",
    get: function get() {
      var frame = this.findFrameElement(this.element);
      return frame.hasAttribute("reloadable");
    },
    set: function set(value) {
      var frame = this.findFrameElement(this.element);

      if (value) {
        frame.setAttribute("reloadable", "");
      } else {
        frame.removeAttribute("reloadable");
      }
    }
  }, {
    key: "loadingStyle",
    get: function get() {
      return this.element.loading;
    }
  }, {
    key: "isLoading",
    get: function get() {
      return this.formSubmission !== undefined || this.resolveVisitPromise() !== undefined;
    }
  }, {
    key: "isActive",
    get: function get() {
      return this.element.isActive && this.connected;
    }
  }, {
    key: "rootLocation",
    get: function get() {
      var _a;

      var meta = this.element.ownerDocument.querySelector("meta[name=\"turbo-root\"]");
      var root = (_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
  }]);

  return FrameController;
}();

var SnapshotSubstitution = /*#__PURE__*/_createClass(function SnapshotSubstitution(element) {
  var _this33 = this;

  _classCallCheck(this, SnapshotSubstitution);

  this.visitCachedSnapshot = function (_ref21) {
    var element = _ref21.element;

    var _a;

    var id = _this33.id,
        clone = _this33.clone;
    (_a = element.querySelector("#" + id)) === null || _a === void 0 ? void 0 : _a.replaceWith(clone);
  };

  this.clone = element.cloneNode(true);
  this.id = element.id;
});

function getFrameElementById(id) {
  if (id != null) {
    var element = document.getElementById(id);

    if (element instanceof FrameElement) {
      return element;
    }
  }
}

function activateElement(element, currentURL) {
  if (element) {
    var src = element.getAttribute("src");

    if (src != null && currentURL != null && urlsAreEqual(src, currentURL)) {
      throw new Error("Matching <turbo-frame id=\"".concat(element.id, "\"> element has a source URL which references itself"));
    }

    if (element.ownerDocument !== document) {
      element = document.importNode(element, true);
    }

    if (element instanceof FrameElement) {
      element.connectedCallback();
      element.disconnectedCallback();
      return element;
    }
  }
}

var StreamActions = {
  after: function after() {
    var _this34 = this;

    this.targetElements.forEach(function (e) {
      var _a;

      return (_a = e.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(_this34.templateContent, e.nextSibling);
    });
  },
  append: function append() {
    var _this35 = this;

    this.removeDuplicateTargetChildren();
    this.targetElements.forEach(function (e) {
      return e.append(_this35.templateContent);
    });
  },
  before: function before() {
    var _this36 = this;

    this.targetElements.forEach(function (e) {
      var _a;

      return (_a = e.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(_this36.templateContent, e);
    });
  },
  prepend: function prepend() {
    var _this37 = this;

    this.removeDuplicateTargetChildren();
    this.targetElements.forEach(function (e) {
      return e.prepend(_this37.templateContent);
    });
  },
  remove: function remove() {
    this.targetElements.forEach(function (e) {
      return e.remove();
    });
  },
  replace: function replace() {
    var _this38 = this;

    this.targetElements.forEach(function (e) {
      return e.replaceWith(_this38.templateContent);
    });
  },
  update: function update() {
    var _this39 = this;

    this.targetElements.forEach(function (e) {
      e.innerHTML = "";
      e.append(_this39.templateContent);
    });
  }
};

var StreamElement = /*#__PURE__*/function (_HTMLElement2) {
  _inherits(StreamElement, _HTMLElement2);

  var _super9 = _createSuper(StreamElement);

  function StreamElement() {
    _classCallCheck(this, StreamElement);

    return _super9.apply(this, arguments);
  }

  _createClass(StreamElement, [{
    key: "connectedCallback",
    value: function () {
      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee26() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                _context26.prev = 0;
                _context26.next = 3;
                return this.render();

              case 3:
                _context26.next = 8;
                break;

              case 5:
                _context26.prev = 5;
                _context26.t0 = _context26["catch"](0);
                console.error(_context26.t0);

              case 8:
                _context26.prev = 8;
                this.disconnect();
                return _context26.finish(8);

              case 11:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this, [[0, 5, 8, 11]]);
      }));

      function connectedCallback() {
        return _connectedCallback.apply(this, arguments);
      }

      return connectedCallback;
    }()
  }, {
    key: "render",
    value: function () {
      var _render6 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee28() {
        var _this40 = this;

        var _a;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                return _context28.abrupt("return", (_a = this.renderPromise) !== null && _a !== void 0 ? _a : this.renderPromise = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee27() {
                  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee27$(_context27) {
                    while (1) {
                      switch (_context27.prev = _context27.next) {
                        case 0:
                          if (!_this40.dispatchEvent(_this40.beforeRenderEvent)) {
                            _context27.next = 4;
                            break;
                          }

                          _context27.next = 3;
                          return nextAnimationFrame();

                        case 3:
                          _this40.performAction();

                        case 4:
                        case "end":
                          return _context27.stop();
                      }
                    }
                  }, _callee27);
                }))());

              case 1:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function render() {
        return _render6.apply(this, arguments);
      }

      return render;
    }()
  }, {
    key: "disconnect",
    value: function disconnect() {
      try {
        this.remove();
      } catch (_a) {}
    }
  }, {
    key: "removeDuplicateTargetChildren",
    value: function removeDuplicateTargetChildren() {
      this.duplicateChildren.forEach(function (c) {
        return c.remove();
      });
    }
  }, {
    key: "duplicateChildren",
    get: function get() {
      var _a;

      var existingChildren = this.targetElements.flatMap(function (e) {
        return _toConsumableArray(e.children);
      }).filter(function (c) {
        return !!c.id;
      });

      var newChildrenIds = _toConsumableArray((_a = this.templateContent) === null || _a === void 0 ? void 0 : _a.children).filter(function (c) {
        return !!c.id;
      }).map(function (c) {
        return c.id;
      });

      return existingChildren.filter(function (c) {
        return newChildrenIds.includes(c.id);
      });
    }
  }, {
    key: "performAction",
    get: function get() {
      if (this.action) {
        var actionFunction = StreamActions[this.action];

        if (actionFunction) {
          return actionFunction;
        }

        this.raise("unknown action");
      }

      this.raise("action attribute is missing");
    }
  }, {
    key: "targetElements",
    get: function get() {
      if (this.target) {
        return this.targetElementsById;
      } else if (this.targets) {
        return this.targetElementsByQuery;
      } else {
        this.raise("target or targets attribute is missing");
      }
    }
  }, {
    key: "templateContent",
    get: function get() {
      return this.templateElement.content.cloneNode(true);
    }
  }, {
    key: "templateElement",
    get: function get() {
      if (this.firstElementChild instanceof HTMLTemplateElement) {
        return this.firstElementChild;
      }

      this.raise("first child element must be a <template> element");
    }
  }, {
    key: "action",
    get: function get() {
      return this.getAttribute("action");
    }
  }, {
    key: "target",
    get: function get() {
      return this.getAttribute("target");
    }
  }, {
    key: "targets",
    get: function get() {
      return this.getAttribute("targets");
    }
  }, {
    key: "raise",
    value: function raise(message) {
      throw new Error("".concat(this.description, ": ").concat(message));
    }
  }, {
    key: "description",
    get: function get() {
      var _a, _b;

      return (_b = ((_a = this.outerHTML.match(/<[^>]+>/)) !== null && _a !== void 0 ? _a : [])[0]) !== null && _b !== void 0 ? _b : "<turbo-stream>";
    }
  }, {
    key: "beforeRenderEvent",
    get: function get() {
      return new CustomEvent("turbo:before-stream-render", {
        bubbles: true,
        cancelable: true
      });
    }
  }, {
    key: "targetElementsById",
    get: function get() {
      var _a;

      var element = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.getElementById(this.target);

      if (element !== null) {
        return [element];
      } else {
        return [];
      }
    }
  }, {
    key: "targetElementsByQuery",
    get: function get() {
      var _a;

      var elements = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.targets);

      if (elements.length !== 0) {
        return Array.prototype.slice.call(elements);
      } else {
        return [];
      }
    }
  }]);

  return StreamElement;
}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));

FrameElement.delegateConstructor = FrameController;
customElements.define("turbo-frame", FrameElement);
customElements.define("turbo-stream", StreamElement);

(function () {
  var element = document.currentScript;
  if (!element) return;
  if (element.hasAttribute("data-turbo-suppress-warning")) return;

  while (element = element.parentElement) {
    if (element == document.body) {
      return console.warn(unindent(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n        You are loading Turbo from a <script> element inside the <body> element. This is probably not what you meant to do!\n\n        Load your application\u2019s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.\n\n        For more information, see: https://turbo.hotwired.dev/handbook/building#working-with-script-elements\n\n        \u2014\u2014\n        Suppress this warning by adding a \"data-turbo-suppress-warning\" attribute to: %s\n      "]))), element.outerHTML);
    }
  }
})();

window.Turbo = Turbo;
start();


/***/ }),

/***/ "./node_modules/@popperjs/core/lib/createPopper.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/createPopper.js ***!
  \*********************************************************/
/*! exports provided: popperGenerator, createPopper, detectOverflow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "popperGenerator", function() { return popperGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPopper", function() { return createPopper; });
/* harmony import */ var _dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-utils/getCompositeRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom-utils/listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/orderModifiers.js */ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js");
/* harmony import */ var _utils_debounce_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/debounce.js */ "./node_modules/@popperjs/core/lib/utils/debounce.js");
/* harmony import */ var _utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/validateModifiers.js */ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js");
/* harmony import */ var _utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/uniqueBy.js */ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/mergeByName.js */ "./node_modules/@popperjs/core/lib/utils/mergeByName.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectOverflow", function() { return _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./enums.js */ "./node_modules/@popperjs/core/lib/enums.js");














var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(options) {
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_12__["isElement"])(reference) ? Object(_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__["default"])(reference) : reference.contextElement ? Object(_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__["default"])(reference.contextElement) : [],
          popper: Object(_dom_utils_listScrollParents_js__WEBPACK_IMPORTED_MODULE_2__["default"])(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = Object(_utils_orderModifiers_js__WEBPACK_IMPORTED_MODULE_5__["default"])(Object(_utils_mergeByName_js__WEBPACK_IMPORTED_MODULE_10__["default"])([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned
        // if one of the modifiers is invalid for any reason

        if (true) {
          var modifiers = Object(_utils_uniqueBy_js__WEBPACK_IMPORTED_MODULE_8__["default"])([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
            var name = _ref.name;
            return name;
          });
          Object(_utils_validateModifiers_js__WEBPACK_IMPORTED_MODULE_7__["default"])(modifiers);

          if (Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_9__["default"])(state.options.placement) === _enums_js__WEBPACK_IMPORTED_MODULE_13__["auto"]) {
            var flipModifier = state.orderedModifiers.find(function (_ref2) {
              var name = _ref2.name;
              return name === 'flip';
            });

            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
            }
          }

          var _getComputedStyle = Object(_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
          // cause bugs with positioning, so we'll warn the consumer


          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
          }
        }

        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: Object(_dom_utils_getCompositeRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(reference, Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__["default"])(popper), state.options.strategy === 'fixed'),
          popper: Object(_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;

            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: Object(_utils_debounce_js__WEBPACK_IMPORTED_MODULE_6__["default"])(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}
var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/contains.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/contains.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return contains; });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__["isShadowRoot"])(rootNode)) {
    var next = child;

    do {
      if (next && parent.isSameNode(next)) {
        return true;
      } // $FlowFixMe[prop-missing]: need a better way to handle this...


      next = next.parentNode || next.host;
    } while (next);
  } // Give up, the result is false


  return false;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getBoundingClientRect; });
function getBoundingClientRect(element) {
  var rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getClippingRect; });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _getViewportRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getViewportRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js");
/* harmony import */ var _getDocumentRect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getDocumentRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js");
/* harmony import */ var _listScrollParents_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./listScrollParents.js */ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js");
/* harmony import */ var _getOffsetParent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _contains_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");















function getInnerBoundingClientRect(element) {
  var rect = Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_8__["default"])(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === _enums_js__WEBPACK_IMPORTED_MODULE_0__["viewport"] ? Object(_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_12__["default"])(Object(_getViewportRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)) : Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__["isHTMLElement"])(clippingParent) ? getInnerBoundingClientRect(clippingParent) : Object(_utils_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_12__["default"])(Object(_getDocumentRect_js__WEBPACK_IMPORTED_MODULE_2__["default"])(Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = Object(_listScrollParents_js__WEBPACK_IMPORTED_MODULE_3__["default"])(Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_9__["default"])(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_6__["default"])(element).position) >= 0;
  var clipperElement = canEscapeClipping && Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__["isHTMLElement"])(element) ? Object(_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_4__["default"])(element) : element;

  if (!Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__["isElement"])(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_7__["isElement"])(clippingParent) && Object(_contains_js__WEBPACK_IMPORTED_MODULE_10__["default"])(clippingParent, clipperElement) && Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_11__["default"])(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_13__["max"])(rect.top, accRect.top);
    accRect.right = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_13__["min"])(rect.right, accRect.right);
    accRect.bottom = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_13__["min"])(rect.bottom, accRect.bottom);
    accRect.left = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_13__["max"])(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getCompositeRect; });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getNodeScroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getNodeScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");






 // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.

function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var documentElement = Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(offsetParent);
  var rect = Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(elementOrVirtualElement);
  var isOffsetParentAnElement = Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    Object(_isScrollParent_js__WEBPACK_IMPORTED_MODULE_6__["default"])(documentElement)) {
      scroll = Object(_getNodeScroll_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent);
    }

    if (Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(offsetParent)) {
      offsets = Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = Object(_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_4__["default"])(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getComputedStyle; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getComputedStyle(element) {
  return Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element).getComputedStyle(element);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getDocumentElement; });
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_0__["isElement"])(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getDocumentRect; });
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");




 // Gets the entire size of the scrollable document area, even extending outside
// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var winScroll = Object(_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_3__["default"])(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_4__["max"])(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_4__["max"])(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + Object(_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element);
  var y = -winScroll.scrollTop;

  if (Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(body || html).direction === 'rtl') {
    x += Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_4__["max"])(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getHTMLElementScroll; });
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getLayoutRect; });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
 // Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getNodeName; });
function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getNodeScroll; });
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getHTMLElementScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");




function getNodeScroll(node) {
  if (node === Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(node) || !Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_2__["isHTMLElement"])(node)) {
    return Object(_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node);
  } else {
    return Object(_getHTMLElementScroll_js__WEBPACK_IMPORTED_MODULE_3__["default"])(node);
  }
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getOffsetParent; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _isTableElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isTableElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");







function getTrueOffsetParent(element) {
  if (!Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(element) || // https://github.com/popperjs/popper-core/issues/837
  Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

  if (isIE && Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_5__["default"])(element);

  while (Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(currentNode) && ['html', 'body'].indexOf(Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(currentNode)) < 0) {
    var css = Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"])(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && Object(_isTableElement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent) && Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent) === 'html' || Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_1__["default"])(offsetParent) === 'body' && Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"])(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getParentNode; });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");



function getParentNode(element) {
  if (Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_2__["isShadowRoot"])(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element) // fallback

  );
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getScrollParent; });
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _instanceOf_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");




function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_2__["default"])(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (Object(_instanceOf_js__WEBPACK_IMPORTED_MODULE_3__["isHTMLElement"])(node) && Object(_isScrollParent_js__WEBPACK_IMPORTED_MODULE_1__["default"])(node)) {
    return node;
  }

  return getScrollParent(Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node));
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getViewportRect; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScrollBarX.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");



function getViewportRect(element) {
  var win = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var html = Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + Object(_getWindowScrollBarX_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element),
    y: y
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":
/*!****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getWindow; });
function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getWindowScroll; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");

function getWindowScroll(node) {
  var win = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getWindowScrollBarX; });
/* harmony import */ var _getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindowScroll.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");



function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return Object(_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object(_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(element)).left + Object(_getWindowScroll_js__WEBPACK_IMPORTED_MODULE_2__["default"])(element).scrollLeft;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js ***!
  \*****************************************************************/
/*! exports provided: isElement, isHTMLElement, isShadowRoot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isElement", function() { return isElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHTMLElement", function() { return isHTMLElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isShadowRoot", function() { return isShadowRoot; });
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");


function isElement(node) {
  var OwnElement = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return isScrollParent; });
/* harmony import */ var _getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = Object(_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return isTableElement; });
/* harmony import */ var _getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(Object(_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) >= 0;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":
/*!************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return listScrollParents; });
/* harmony import */ var _getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js");
/* harmony import */ var _getParentNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getParentNode.js */ "./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");
/* harmony import */ var _getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _isScrollParent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isScrollParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");




/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = Object(_getScrollParent_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = Object(_getWindow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], Object(_isScrollParent_js__WEBPACK_IMPORTED_MODULE_3__["default"])(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(Object(_getParentNode_js__WEBPACK_IMPORTED_MODULE_1__["default"])(target)));
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/enums.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/enums.js ***!
  \**************************************************/
/*! exports provided: top, bottom, right, left, auto, basePlacements, start, end, clippingParents, viewport, popper, reference, variationPlacements, placements, beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite, modifierPhases */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "top", function() { return top; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bottom", function() { return bottom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "right", function() { return right; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "left", function() { return left; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "auto", function() { return auto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "basePlacements", function() { return basePlacements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "start", function() { return start; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "end", function() { return end; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clippingParents", function() { return clippingParents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewport", function() { return viewport; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "popper", function() { return popper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reference", function() { return reference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "variationPlacements", function() { return variationPlacements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "placements", function() { return placements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "beforeRead", function() { return beforeRead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "read", function() { return read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "afterRead", function() { return afterRead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "beforeMain", function() { return beforeMain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "main", function() { return main; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "afterMain", function() { return afterMain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "beforeWrite", function() { return beforeWrite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "write", function() { return write; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "afterWrite", function() { return afterWrite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifierPhases", function() { return modifierPhases; });
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/index.js ***!
  \**************************************************/
/*! exports provided: top, bottom, right, left, auto, basePlacements, start, end, clippingParents, viewport, popper, reference, variationPlacements, placements, beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite, modifierPhases, applyStyles, arrow, computeStyles, eventListeners, flip, hide, offset, popperOffsets, preventOverflow, popperGenerator, detectOverflow, createPopperBase, createPopper, createPopperLite */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "top", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["top"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bottom", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["bottom"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "right", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["right"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "left", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "auto", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["auto"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "basePlacements", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["basePlacements"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "start", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["start"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "end", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["end"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "clippingParents", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["clippingParents"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "viewport", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["viewport"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popper", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["popper"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reference", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["reference"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "variationPlacements", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["variationPlacements"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "placements", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["placements"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeRead", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["beforeRead"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "read", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["read"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "afterRead", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["afterRead"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeMain", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["beforeMain"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "main", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["main"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "afterMain", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["afterMain"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "beforeWrite", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["beforeWrite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "write", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["write"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "afterWrite", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["afterWrite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "modifierPhases", function() { return _enums_js__WEBPACK_IMPORTED_MODULE_0__["modifierPhases"]; });

/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/index.js */ "./node_modules/@popperjs/core/lib/modifiers/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyStyles", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["applyStyles"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrow", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["arrow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeStyles", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["computeStyles"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventListeners", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["eventListeners"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["flip"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hide", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["hide"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "offset", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["offset"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperOffsets", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["popperOffsets"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "preventOverflow", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_1__["preventOverflow"]; });

/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperGenerator", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_2__["popperGenerator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectOverflow", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_2__["detectOverflow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopperBase", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_2__["createPopper"]; });

/* harmony import */ var _popper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./popper.js */ "./node_modules/@popperjs/core/lib/popper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopper", function() { return _popper_js__WEBPACK_IMPORTED_MODULE_3__["createPopper"]; });

/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./popper-lite.js */ "./node_modules/@popperjs/core/lib/popper-lite.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopperLite", function() { return _popper_lite_js__WEBPACK_IMPORTED_MODULE_4__["createPopper"]; });


 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getNodeName.js */ "./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");

 // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__["isHTMLElement"])(element) || !Object(_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_1__["isHTMLElement"])(element) || !Object(_dom_utils_getNodeName_js__WEBPACK_IMPORTED_MODULE_0__["default"])(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect,
  requires: ['computeStyles']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/arrow.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/arrow.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/contains.js */ "./node_modules/@popperjs/core/lib/dom-utils/contains.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");









 // eslint-disable-next-line import/no-unused-modules

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return Object(_utils_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_6__["default"])(typeof padding !== 'number' ? padding : Object(_utils_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_7__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_8__["basePlacements"]));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state.placement);
  var axis = Object(_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(basePlacement);
  var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_8__["left"], _enums_js__WEBPACK_IMPORTED_MODULE_8__["right"]].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = Object(_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])(arrowElement);
  var minProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_8__["top"] : _enums_js__WEBPACK_IMPORTED_MODULE_8__["left"];
  var maxProp = axis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_8__["bottom"] : _enums_js__WEBPACK_IMPORTED_MODULE_8__["right"];
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_3__["default"])(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_5__["default"])(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (true) {
    if (!Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_9__["isHTMLElement"])(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
    }
  }

  if (!Object(_dom_utils_contains_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
    }

    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js ***!
  \********************************************************************/
/*! exports provided: mapToStyles, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapToStyles", function() { return mapToStyles; });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dom-utils/getComputedStyle.js */ "./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");






 // eslint-disable-next-line import/no-unused-modules

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_6__["round"])(Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_6__["round"])(x * dpr) / dpr) || 0,
    y: Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_6__["round"])(Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_6__["round"])(y * dpr) / dpr) || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets;

  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
      _ref3$x = _ref3.x,
      x = _ref3$x === void 0 ? 0 : _ref3$x,
      _ref3$y = _ref3.y,
      y = _ref3$y === void 0 ? 0 : _ref3$y;

  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"];
  var sideY = _enums_js__WEBPACK_IMPORTED_MODULE_0__["top"];
  var win = window;

  if (adaptive) {
    var offsetParent = Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_1__["default"])(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === Object(_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(popper)) {
      offsetParent = Object(_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(popper);

      if (Object(_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(offsetParent).position !== 'static') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_0__["top"]) {
      sideY = _enums_js__WEBPACK_IMPORTED_MODULE_0__["bottom"]; // $FlowFixMe[prop-missing]

      y -= offsetParent[heightProp] - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"]) {
      sideX = _enums_js__WEBPACK_IMPORTED_MODULE_0__["right"]; // $FlowFixMe[prop-missing]

      x -= offsetParent[widthProp] - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref4) {
  var state = _ref4.state,
      options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  if (true) {
    var transitionProperty = Object(_dom_utils_getComputedStyle_js__WEBPACK_IMPORTED_MODULE_4__["default"])(state.elements.popper).transitionProperty || '';

    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
    }
  }

  var commonStyles = {
    placement: Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getWindow.js */ "./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");
 // eslint-disable-next-line import/no-unused-modules

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = Object(_dom_utils_getWindow_js__WEBPACK_IMPORTED_MODULE_0__["default"])(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/flip.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/flip.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getOppositePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getOppositeVariationPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/computeAutoPlacement.js */ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");






 // eslint-disable-next-line import/no-unused-modules

function getExpandedFallbackPlacements(placement) {
  if (Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_5__["auto"]) {
    return [];
  }

  var oppositePlacement = Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
  return [Object(_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(placement), oppositePlacement, Object(_utils_getOppositeVariationPlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_5__["auto"] ? Object(_utils_computeAutoPlacement_js__WEBPACK_IMPORTED_MODULE_4__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement);

    var isStartVariation = Object(_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_6__["default"])(placement) === _enums_js__WEBPACK_IMPORTED_MODULE_5__["start"];
    var isVertical = [_enums_js__WEBPACK_IMPORTED_MODULE_5__["top"], _enums_js__WEBPACK_IMPORTED_MODULE_5__["bottom"]].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_3__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["right"] : _enums_js__WEBPACK_IMPORTED_MODULE_5__["left"] : isStartVariation ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["bottom"] : _enums_js__WEBPACK_IMPORTED_MODULE_5__["top"];

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(mainVariationSide);
    }

    var altVariationSide = Object(_utils_getOppositePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/hide.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/hide.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");



function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [_enums_js__WEBPACK_IMPORTED_MODULE_0__["top"], _enums_js__WEBPACK_IMPORTED_MODULE_0__["right"], _enums_js__WEBPACK_IMPORTED_MODULE_0__["bottom"], _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"]].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/index.js ***!
  \************************************************************/
/*! exports provided: applyStyles, arrow, computeStyles, eventListeners, flip, hide, offset, popperOffsets, preventOverflow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyStyles", function() { return _applyStyles_js__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _arrow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrow", function() { return _arrow_js__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeStyles", function() { return _computeStyles_js__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventListeners", function() { return _eventListeners_js__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _flip_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return _flip_js__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _hide_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hide", function() { return _hide_js__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _offset_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "offset", function() { return _offset_js__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperOffsets", function() { return _popperOffsets_js__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "preventOverflow", function() { return _preventOverflow_js__WEBPACK_IMPORTED_MODULE_8__["default"]; });











/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/offset.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/offset.js ***!
  \*************************************************************/
/*! exports provided: distanceAndSkiddingToXY, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distanceAndSkiddingToXY", function() { return distanceAndSkiddingToXY; });
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");


function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
  var invertDistance = [_enums_js__WEBPACK_IMPORTED_MODULE_1__["left"], _enums_js__WEBPACK_IMPORTED_MODULE_1__["top"]].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [_enums_js__WEBPACK_IMPORTED_MODULE_1__["left"], _enums_js__WEBPACK_IMPORTED_MODULE_1__["right"]].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = _enums_js__WEBPACK_IMPORTED_MODULE_1__["placements"].reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");


function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name; // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step

  state.modifiersData[name] = Object(_utils_computeOffsets_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/getAltAxis.js */ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js");
/* harmony import */ var _utils_within_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/within.js */ "./node_modules/@popperjs/core/lib/utils/within.js");
/* harmony import */ var _dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dom-utils/getLayoutRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js");
/* harmony import */ var _dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/getOffsetParent.js */ "./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js");
/* harmony import */ var _utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _utils_getVariation_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");
/* harmony import */ var _utils_math_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");












function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = Object(_utils_detectOverflow_js__WEBPACK_IMPORTED_MODULE_7__["default"])(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = Object(_utils_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state.placement);
  var variation = Object(_utils_getVariation_js__WEBPACK_IMPORTED_MODULE_8__["default"])(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = Object(_utils_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(basePlacement);
  var altAxis = Object(_utils_getAltAxis_js__WEBPACK_IMPORTED_MODULE_3__["default"])(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis || checkAltAxis) {
    var mainSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__["top"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"];
    var altSide = mainAxis === 'y' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__["bottom"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__["right"];
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min = popperOffsets[mainAxis] + overflow[mainSide];
    var max = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_0__["start"] ? referenceRect[len] : popperRect[len];
    var maxLen = variation === _enums_js__WEBPACK_IMPORTED_MODULE_0__["start"] ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? Object(_dom_utils_getLayoutRect_js__WEBPACK_IMPORTED_MODULE_5__["default"])(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : Object(_utils_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_9__["default"])();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_4__["default"])(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && Object(_dom_utils_getOffsetParent_js__WEBPACK_IMPORTED_MODULE_6__["default"])(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

    if (checkMainAxis) {
      var preventedOffset = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_4__["default"])(tether ? Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_10__["min"])(min, tetherMin) : min, offset, tether ? Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_10__["max"])(max, tetherMax) : max);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _mainSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__["top"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__["left"];

      var _altSide = mainAxis === 'x' ? _enums_js__WEBPACK_IMPORTED_MODULE_0__["bottom"] : _enums_js__WEBPACK_IMPORTED_MODULE_0__["right"];

      var _offset = popperOffsets[altAxis];

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var _preventedOffset = Object(_utils_within_js__WEBPACK_IMPORTED_MODULE_4__["default"])(tether ? Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_10__["min"])(_min, tetherMin) : _min, _offset, tether ? Object(_utils_math_js__WEBPACK_IMPORTED_MODULE_10__["max"])(_max, tetherMax) : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
});

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper-lite.js":
/*!********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper-lite.js ***!
  \********************************************************/
/*! exports provided: createPopper, popperGenerator, defaultModifiers, detectOverflow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPopper", function() { return createPopper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultModifiers", function() { return defaultModifiers; });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperGenerator", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_0__["popperGenerator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectOverflow", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_0__["detectOverflow"]; });

/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");





var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__["default"]];
var createPopper = /*#__PURE__*/Object(_createPopper_js__WEBPACK_IMPORTED_MODULE_0__["popperGenerator"])({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/popper.js ***!
  \***************************************************/
/*! exports provided: createPopper, popperGenerator, defaultModifiers, detectOverflow, createPopperLite, applyStyles, arrow, computeStyles, eventListeners, flip, hide, offset, popperOffsets, preventOverflow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPopper", function() { return createPopper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultModifiers", function() { return defaultModifiers; });
/* harmony import */ var _createPopper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createPopper.js */ "./node_modules/@popperjs/core/lib/createPopper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperGenerator", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_0__["popperGenerator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "detectOverflow", function() { return _createPopper_js__WEBPACK_IMPORTED_MODULE_0__["detectOverflow"]; });

/* harmony import */ var _modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifiers/eventListeners.js */ "./node_modules/@popperjs/core/lib/modifiers/eventListeners.js");
/* harmony import */ var _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifiers/popperOffsets.js */ "./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js");
/* harmony import */ var _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/computeStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/computeStyles.js");
/* harmony import */ var _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifiers/applyStyles.js */ "./node_modules/@popperjs/core/lib/modifiers/applyStyles.js");
/* harmony import */ var _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modifiers/offset.js */ "./node_modules/@popperjs/core/lib/modifiers/offset.js");
/* harmony import */ var _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modifiers/flip.js */ "./node_modules/@popperjs/core/lib/modifiers/flip.js");
/* harmony import */ var _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modifiers/preventOverflow.js */ "./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js");
/* harmony import */ var _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifiers/arrow.js */ "./node_modules/@popperjs/core/lib/modifiers/arrow.js");
/* harmony import */ var _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./modifiers/hide.js */ "./node_modules/@popperjs/core/lib/modifiers/hide.js");
/* harmony import */ var _popper_lite_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./popper-lite.js */ "./node_modules/@popperjs/core/lib/popper-lite.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPopperLite", function() { return _popper_lite_js__WEBPACK_IMPORTED_MODULE_10__["createPopper"]; });

/* harmony import */ var _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modifiers/index.js */ "./node_modules/@popperjs/core/lib/modifiers/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyStyles", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["applyStyles"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrow", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["arrow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "computeStyles", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["computeStyles"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "eventListeners", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["eventListeners"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["flip"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hide", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["hide"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "offset", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["offset"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "popperOffsets", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["popperOffsets"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "preventOverflow", function() { return _modifiers_index_js__WEBPACK_IMPORTED_MODULE_11__["preventOverflow"]; });











var defaultModifiers = [_modifiers_eventListeners_js__WEBPACK_IMPORTED_MODULE_1__["default"], _modifiers_popperOffsets_js__WEBPACK_IMPORTED_MODULE_2__["default"], _modifiers_computeStyles_js__WEBPACK_IMPORTED_MODULE_3__["default"], _modifiers_applyStyles_js__WEBPACK_IMPORTED_MODULE_4__["default"], _modifiers_offset_js__WEBPACK_IMPORTED_MODULE_5__["default"], _modifiers_flip_js__WEBPACK_IMPORTED_MODULE_6__["default"], _modifiers_preventOverflow_js__WEBPACK_IMPORTED_MODULE_7__["default"], _modifiers_arrow_js__WEBPACK_IMPORTED_MODULE_8__["default"], _modifiers_hide_js__WEBPACK_IMPORTED_MODULE_9__["default"]];
var createPopper = /*#__PURE__*/Object(_createPopper_js__WEBPACK_IMPORTED_MODULE_0__["popperGenerator"])({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules

 // eslint-disable-next-line import/no-unused-modules



/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return computeAutoPlacement; });
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectOverflow.js */ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js");
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");




function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_1__["placements"] : _options$allowedAutoP;
  var variation = Object(_getVariation_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement);
  var placements = variation ? flipVariations ? _enums_js__WEBPACK_IMPORTED_MODULE_1__["variationPlacements"] : _enums_js__WEBPACK_IMPORTED_MODULE_1__["variationPlacements"].filter(function (placement) {
    return Object(_getVariation_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) === variation;
  }) : _enums_js__WEBPACK_IMPORTED_MODULE_1__["basePlacements"];
  var allowedPlacements = placements.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements;

    if (true) {
      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
    }
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = Object(_detectOverflow_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[Object(_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_3__["default"])(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/computeOffsets.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return computeOffsets; });
/* harmony import */ var _getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getBasePlacement.js */ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");
/* harmony import */ var _getVariation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getVariation.js */ "./node_modules/@popperjs/core/lib/utils/getVariation.js");
/* harmony import */ var _getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getMainAxisFromPlacement.js */ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");




function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? Object(_getBasePlacement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(placement) : null;
  var variation = placement ? Object(_getVariation_js__WEBPACK_IMPORTED_MODULE_1__["default"])(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case _enums_js__WEBPACK_IMPORTED_MODULE_3__["top"]:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_3__["bottom"]:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_3__["right"]:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case _enums_js__WEBPACK_IMPORTED_MODULE_3__["left"]:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? Object(_getMainAxisFromPlacement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case _enums_js__WEBPACK_IMPORTED_MODULE_3__["start"]:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case _enums_js__WEBPACK_IMPORTED_MODULE_3__["end"]:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;

      default:
    }
  }

  return offsets;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/debounce.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/debounce.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return debounce; });
function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/detectOverflow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/detectOverflow.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return detectOverflow; });
/* harmony import */ var _dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dom-utils/getBoundingClientRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");
/* harmony import */ var _dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom-utils/getClippingRect.js */ "./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js");
/* harmony import */ var _dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../dom-utils/getDocumentElement.js */ "./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js");
/* harmony import */ var _computeOffsets_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./computeOffsets.js */ "./node_modules/@popperjs/core/lib/utils/computeOffsets.js");
/* harmony import */ var _rectToClientRect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rectToClientRect.js */ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
/* harmony import */ var _dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dom-utils/instanceOf.js */ "./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");
/* harmony import */ var _mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mergePaddingObject.js */ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js");
/* harmony import */ var _expandToHashMap_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./expandToHashMap.js */ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");








 // eslint-disable-next-line import/no-unused-modules

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["clippingParents"] : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["viewport"] : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["popper"] : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = Object(_mergePaddingObject_js__WEBPACK_IMPORTED_MODULE_7__["default"])(typeof padding !== 'number' ? padding : Object(_expandToHashMap_js__WEBPACK_IMPORTED_MODULE_8__["default"])(padding, _enums_js__WEBPACK_IMPORTED_MODULE_5__["basePlacements"]));
  var altContext = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_5__["popper"] ? _enums_js__WEBPACK_IMPORTED_MODULE_5__["reference"] : _enums_js__WEBPACK_IMPORTED_MODULE_5__["popper"];
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = Object(_dom_utils_getClippingRect_js__WEBPACK_IMPORTED_MODULE_1__["default"])(Object(_dom_utils_instanceOf_js__WEBPACK_IMPORTED_MODULE_6__["isElement"])(element) ? element : element.contextElement || Object(_dom_utils_getDocumentElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = Object(_dom_utils_getBoundingClientRect_js__WEBPACK_IMPORTED_MODULE_0__["default"])(referenceElement);
  var popperOffsets = Object(_computeOffsets_js__WEBPACK_IMPORTED_MODULE_3__["default"])({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = Object(_rectToClientRect_js__WEBPACK_IMPORTED_MODULE_4__["default"])(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_5__["popper"] ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === _enums_js__WEBPACK_IMPORTED_MODULE_5__["popper"] && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [_enums_js__WEBPACK_IMPORTED_MODULE_5__["right"], _enums_js__WEBPACK_IMPORTED_MODULE_5__["bottom"]].indexOf(key) >= 0 ? 1 : -1;
      var axis = [_enums_js__WEBPACK_IMPORTED_MODULE_5__["top"], _enums_js__WEBPACK_IMPORTED_MODULE_5__["bottom"]].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return expandToHashMap; });
function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/format.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/format.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return format; });
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return [].concat(args).reduce(function (p, c) {
    return p.replace(/%s/, c);
  }, str);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getAltAxis.js":
/*!*************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getAltAxis.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getAltAxis; });
function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getBasePlacement; });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getFreshSideObject; });
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getMainAxisFromPlacement; });
function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getOppositePlacement; });
var hash = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getOppositeVariationPlacement; });
var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/getVariation.js":
/*!***************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/getVariation.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getVariation; });
function getVariation(placement) {
  return placement.split('-')[1];
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/math.js":
/*!*******************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/math.js ***!
  \*******************************************************/
/*! exports provided: max, min, round */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
var max = Math.max;
var min = Math.min;
var round = Math.round;

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergeByName.js":
/*!**************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergeByName.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return mergeByName; });
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return mergePaddingObject; });
/* harmony import */ var _getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getFreshSideObject.js */ "./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");

function mergePaddingObject(paddingObject) {
  return Object.assign({}, Object(_getFreshSideObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(), paddingObject);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/orderModifiers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/orderModifiers.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return orderModifiers; });
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");
 // source: https://stackoverflow.com/questions/49875255

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return _enums_js__WEBPACK_IMPORTED_MODULE_0__["modifierPhases"].reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return rectToClientRect; });
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/uniqueBy.js":
/*!***********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/uniqueBy.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return uniqueBy; });
function uniqueBy(arr, fn) {
  var identifiers = new Set();
  return arr.filter(function (item) {
    var identifier = fn(item);

    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/validateModifiers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/validateModifiers.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return validateModifiers; });
/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format.js */ "./node_modules/@popperjs/core/lib/utils/format.js");
/* harmony import */ var _enums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../enums.js */ "./node_modules/@popperjs/core/lib/enums.js");


var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
  modifiers.forEach(function (modifier) {
    Object.keys(modifier).forEach(function (key) {
      switch (key) {
        case 'name':
          if (typeof modifier.name !== 'string') {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
          }

          break;

        case 'enabled':
          if (typeof modifier.enabled !== 'boolean') {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
          }

        case 'phase':
          if (_enums_js__WEBPACK_IMPORTED_MODULE_1__["modifierPhases"].indexOf(modifier.phase) < 0) {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + _enums_js__WEBPACK_IMPORTED_MODULE_1__["modifierPhases"].join(', '), "\"" + String(modifier.phase) + "\""));
          }

          break;

        case 'fn':
          if (typeof modifier.fn !== 'function') {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'effect':
          if (typeof modifier.effect !== 'function') {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
          }

          break;

        case 'requires':
          if (!Array.isArray(modifier.requires)) {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
          }

          break;

        case 'requiresIfExists':
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
          }

          break;

        case 'options':
        case 'data':
          break;

        default:
          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
            return "\"" + s + "\"";
          }).join(', ') + "; but \"" + key + "\" was provided.");
      }

      modifier.requires && modifier.requires.forEach(function (requirement) {
        if (modifiers.find(function (mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(Object(_format_js__WEBPACK_IMPORTED_MODULE_0__["default"])(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

/***/ }),

/***/ "./node_modules/@popperjs/core/lib/utils/within.js":
/*!*********************************************************!*\
  !*** ./node_modules/@popperjs/core/lib/utils/within.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return within; });
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ "./node_modules/@popperjs/core/lib/utils/math.js");

function within(min, value, max) {
  return Object(_math_js__WEBPACK_IMPORTED_MODULE_0__["max"])(min, Object(_math_js__WEBPACK_IMPORTED_MODULE_0__["min"])(value, max));
}

/***/ }),

/***/ "./node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@rails/activestorage/app/assets/javascripts/activestorage.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === "object" && typeof module !== "undefined" ? factory(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, function (exports) {
  "use strict";

  function createCommonjsModule(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }

  var sparkMd5 = createCommonjsModule(function (module, exports) {
    (function (factory) {
      {
        module.exports = factory();
      }
    })(function (undefined) {
      var hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];

      function md5cycle(x, k) {
        var a = x[0],
            b = x[1],
            c = x[2],
            d = x[3];
        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
      }

      function md5blk(s) {
        var md5blks = [],
            i;

        for (i = 0; i < 64; i += 4) {
          md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
        }

        return md5blks;
      }

      function md5blk_array(a) {
        var md5blks = [],
            i;

        for (i = 0; i < 64; i += 4) {
          md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
        }

        return md5blks;
      }

      function md51(s) {
        var n = s.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
          md5cycle(state, md5blk(s.substring(i - 64, i)));
        }

        s = s.substring(i - 64);
        length = s.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);
        }

        tail[i >> 2] |= 128 << (i % 4 << 3);

        if (i > 55) {
          md5cycle(state, tail);

          for (i = 0; i < 16; i += 1) {
            tail[i] = 0;
          }
        }

        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(state, tail);
        return state;
      }

      function md51_array(a) {
        var n = a.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
          md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
        }

        a = i - 64 < n ? a.subarray(i - 64) : new Uint8Array(0);
        length = a.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= a[i] << (i % 4 << 3);
        }

        tail[i >> 2] |= 128 << (i % 4 << 3);

        if (i > 55) {
          md5cycle(state, tail);

          for (i = 0; i < 16; i += 1) {
            tail[i] = 0;
          }
        }

        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(state, tail);
        return state;
      }

      function rhex(n) {
        var s = "",
            j;

        for (j = 0; j < 4; j += 1) {
          s += hex_chr[n >> j * 8 + 4 & 15] + hex_chr[n >> j * 8 & 15];
        }

        return s;
      }

      function hex(x) {
        var i;

        for (i = 0; i < x.length; i += 1) {
          x[i] = rhex(x[i]);
        }

        return x.join("");
      }

      if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592") ;

      if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
        (function () {
          function clamp(val, length) {
            val = val | 0 || 0;

            if (val < 0) {
              return Math.max(val + length, 0);
            }

            return Math.min(val, length);
          }

          ArrayBuffer.prototype.slice = function (from, to) {
            var length = this.byteLength,
                begin = clamp(from, length),
                end = length,
                num,
                target,
                targetArray,
                sourceArray;

            if (to !== undefined) {
              end = clamp(to, length);
            }

            if (begin > end) {
              return new ArrayBuffer(0);
            }

            num = end - begin;
            target = new ArrayBuffer(num);
            targetArray = new Uint8Array(target);
            sourceArray = new Uint8Array(this, begin, num);
            targetArray.set(sourceArray);
            return target;
          };
        })();
      }

      function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
          str = unescape(encodeURIComponent(str));
        }

        return str;
      }

      function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length,
            buff = new ArrayBuffer(length),
            arr = new Uint8Array(buff),
            i;

        for (i = 0; i < length; i += 1) {
          arr[i] = str.charCodeAt(i);
        }

        return returnUInt8Array ? arr : buff;
      }

      function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
      }

      function concatenateArrayBuffers(first, second, returnUInt8Array) {
        var result = new Uint8Array(first.byteLength + second.byteLength);
        result.set(new Uint8Array(first));
        result.set(new Uint8Array(second), first.byteLength);
        return returnUInt8Array ? result : result.buffer;
      }

      function hexToBinaryString(hex) {
        var bytes = [],
            length = hex.length,
            x;

        for (x = 0; x < length - 1; x += 2) {
          bytes.push(parseInt(hex.substr(x, 2), 16));
        }

        return String.fromCharCode.apply(String, bytes);
      }

      function SparkMD5() {
        this.reset();
      }

      SparkMD5.prototype.append = function (str) {
        this.appendBinary(toUtf8(str));
        return this;
      };

      SparkMD5.prototype.appendBinary = function (contents) {
        this._buff += contents;
        this._length += contents.length;
        var length = this._buff.length,
            i;

        for (i = 64; i <= length; i += 64) {
          md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
        }

        this._buff = this._buff.substring(i - 64);
        return this;
      };

      SparkMD5.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            i,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ret;

        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= buff.charCodeAt(i) << (i % 4 << 3);
        }

        this._finish(tail, length);

        ret = hex(this._hash);

        if (raw) {
          ret = hexToBinaryString(ret);
        }

        this.reset();
        return ret;
      };

      SparkMD5.prototype.reset = function () {
        this._buff = "";
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];
        return this;
      };

      SparkMD5.prototype.getState = function () {
        return {
          buff: this._buff,
          length: this._length,
          hash: this._hash
        };
      };

      SparkMD5.prototype.setState = function (state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;
        return this;
      };

      SparkMD5.prototype.destroy = function () {
        delete this._hash;
        delete this._buff;
        delete this._length;
      };

      SparkMD5.prototype._finish = function (tail, length) {
        var i = length,
            tmp,
            lo,
            hi;
        tail[i >> 2] |= 128 << (i % 4 << 3);

        if (i > 55) {
          md5cycle(this._hash, tail);

          for (i = 0; i < 16; i += 1) {
            tail[i] = 0;
          }
        }

        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._hash, tail);
      };

      SparkMD5.hash = function (str, raw) {
        return SparkMD5.hashBinary(toUtf8(str), raw);
      };

      SparkMD5.hashBinary = function (content, raw) {
        var hash = md51(content),
            ret = hex(hash);
        return raw ? hexToBinaryString(ret) : ret;
      };

      SparkMD5.ArrayBuffer = function () {
        this.reset();
      };

      SparkMD5.ArrayBuffer.prototype.append = function (arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),
            length = buff.length,
            i;
        this._length += arr.byteLength;

        for (i = 64; i <= length; i += 64) {
          md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
        }

        this._buff = i - 64 < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);
        return this;
      };

      SparkMD5.ArrayBuffer.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            i,
            ret;

        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= buff[i] << (i % 4 << 3);
        }

        this._finish(tail, length);

        ret = hex(this._hash);

        if (raw) {
          ret = hexToBinaryString(ret);
        }

        this.reset();
        return ret;
      };

      SparkMD5.ArrayBuffer.prototype.reset = function () {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];
        return this;
      };

      SparkMD5.ArrayBuffer.prototype.getState = function () {
        var state = SparkMD5.prototype.getState.call(this);
        state.buff = arrayBuffer2Utf8Str(state.buff);
        return state;
      };

      SparkMD5.ArrayBuffer.prototype.setState = function (state) {
        state.buff = utf8Str2ArrayBuffer(state.buff, true);
        return SparkMD5.prototype.setState.call(this, state);
      };

      SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;
      SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;

      SparkMD5.ArrayBuffer.hash = function (arr, raw) {
        var hash = md51_array(new Uint8Array(arr)),
            ret = hex(hash);
        return raw ? hexToBinaryString(ret) : ret;
      };

      return SparkMD5;
    });
  });

  var classCallCheck = function classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var fileSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;

  var FileChecksum = function () {
    createClass(FileChecksum, null, [{
      key: "create",
      value: function create(file, callback) {
        var instance = new FileChecksum(file);
        instance.create(callback);
      }
    }]);

    function FileChecksum(file) {
      classCallCheck(this, FileChecksum);
      this.file = file;
      this.chunkSize = 2097152;
      this.chunkCount = Math.ceil(this.file.size / this.chunkSize);
      this.chunkIndex = 0;
    }

    createClass(FileChecksum, [{
      key: "create",
      value: function create(callback) {
        var _this = this;

        this.callback = callback;
        this.md5Buffer = new sparkMd5.ArrayBuffer();
        this.fileReader = new FileReader();
        this.fileReader.addEventListener("load", function (event) {
          return _this.fileReaderDidLoad(event);
        });
        this.fileReader.addEventListener("error", function (event) {
          return _this.fileReaderDidError(event);
        });
        this.readNextChunk();
      }
    }, {
      key: "fileReaderDidLoad",
      value: function fileReaderDidLoad(event) {
        this.md5Buffer.append(event.target.result);

        if (!this.readNextChunk()) {
          var binaryDigest = this.md5Buffer.end(true);
          var base64digest = btoa(binaryDigest);
          this.callback(null, base64digest);
        }
      }
    }, {
      key: "fileReaderDidError",
      value: function fileReaderDidError(event) {
        this.callback("Error reading " + this.file.name);
      }
    }, {
      key: "readNextChunk",
      value: function readNextChunk() {
        if (this.chunkIndex < this.chunkCount || this.chunkIndex == 0 && this.chunkCount == 0) {
          var start = this.chunkIndex * this.chunkSize;
          var end = Math.min(start + this.chunkSize, this.file.size);
          var bytes = fileSlice.call(this.file, start, end);
          this.fileReader.readAsArrayBuffer(bytes);
          this.chunkIndex++;
          return true;
        } else {
          return false;
        }
      }
    }]);
    return FileChecksum;
  }();

  function getMetaValue(name) {
    var element = findElement(document.head, 'meta[name="' + name + '"]');

    if (element) {
      return element.getAttribute("content");
    }
  }

  function findElements(root, selector) {
    if (typeof root == "string") {
      selector = root;
      root = document;
    }

    var elements = root.querySelectorAll(selector);
    return toArray$1(elements);
  }

  function findElement(root, selector) {
    if (typeof root == "string") {
      selector = root;
      root = document;
    }

    return root.querySelector(selector);
  }

  function dispatchEvent(element, type) {
    var eventInit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var disabled = element.disabled;
    var bubbles = eventInit.bubbles,
        cancelable = eventInit.cancelable,
        detail = eventInit.detail;
    var event = document.createEvent("Event");
    event.initEvent(type, bubbles || true, cancelable || true);
    event.detail = detail || {};

    try {
      element.disabled = false;
      element.dispatchEvent(event);
    } finally {
      element.disabled = disabled;
    }

    return event;
  }

  function toArray$1(value) {
    if (Array.isArray(value)) {
      return value;
    } else if (Array.from) {
      return Array.from(value);
    } else {
      return [].slice.call(value);
    }
  }

  var BlobRecord = function () {
    function BlobRecord(file, checksum, url) {
      var _this = this;

      classCallCheck(this, BlobRecord);
      this.file = file;
      this.attributes = {
        filename: file.name,
        content_type: file.type || "application/octet-stream",
        byte_size: file.size,
        checksum: checksum
      };
      this.xhr = new XMLHttpRequest();
      this.xhr.open("POST", url, true);
      this.xhr.responseType = "json";
      this.xhr.setRequestHeader("Content-Type", "application/json");
      this.xhr.setRequestHeader("Accept", "application/json");
      this.xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      var csrfToken = getMetaValue("csrf-token");

      if (csrfToken != undefined) {
        this.xhr.setRequestHeader("X-CSRF-Token", csrfToken);
      }

      this.xhr.addEventListener("load", function (event) {
        return _this.requestDidLoad(event);
      });
      this.xhr.addEventListener("error", function (event) {
        return _this.requestDidError(event);
      });
    }

    createClass(BlobRecord, [{
      key: "create",
      value: function create(callback) {
        this.callback = callback;
        this.xhr.send(JSON.stringify({
          blob: this.attributes
        }));
      }
    }, {
      key: "requestDidLoad",
      value: function requestDidLoad(event) {
        if (this.status >= 200 && this.status < 300) {
          var response = this.response;
          var direct_upload = response.direct_upload;
          delete response.direct_upload;
          this.attributes = response;
          this.directUploadData = direct_upload;
          this.callback(null, this.toJSON());
        } else {
          this.requestDidError(event);
        }
      }
    }, {
      key: "requestDidError",
      value: function requestDidError(event) {
        this.callback('Error creating Blob for "' + this.file.name + '". Status: ' + this.status);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var result = {};

        for (var key in this.attributes) {
          result[key] = this.attributes[key];
        }

        return result;
      }
    }, {
      key: "status",
      get: function get$$1() {
        return this.xhr.status;
      }
    }, {
      key: "response",
      get: function get$$1() {
        var _xhr = this.xhr,
            responseType = _xhr.responseType,
            response = _xhr.response;

        if (responseType == "json") {
          return response;
        } else {
          return JSON.parse(response);
        }
      }
    }]);
    return BlobRecord;
  }();

  var BlobUpload = function () {
    function BlobUpload(blob) {
      var _this = this;

      classCallCheck(this, BlobUpload);
      this.blob = blob;
      this.file = blob.file;
      var _blob$directUploadDat = blob.directUploadData,
          url = _blob$directUploadDat.url,
          headers = _blob$directUploadDat.headers;
      this.xhr = new XMLHttpRequest();
      this.xhr.open("PUT", url, true);
      this.xhr.responseType = "text";

      for (var key in headers) {
        this.xhr.setRequestHeader(key, headers[key]);
      }

      this.xhr.addEventListener("load", function (event) {
        return _this.requestDidLoad(event);
      });
      this.xhr.addEventListener("error", function (event) {
        return _this.requestDidError(event);
      });
    }

    createClass(BlobUpload, [{
      key: "create",
      value: function create(callback) {
        this.callback = callback;
        this.xhr.send(this.file.slice());
      }
    }, {
      key: "requestDidLoad",
      value: function requestDidLoad(event) {
        var _xhr = this.xhr,
            status = _xhr.status,
            response = _xhr.response;

        if (status >= 200 && status < 300) {
          this.callback(null, response);
        } else {
          this.requestDidError(event);
        }
      }
    }, {
      key: "requestDidError",
      value: function requestDidError(event) {
        this.callback('Error storing "' + this.file.name + '". Status: ' + this.xhr.status);
      }
    }]);
    return BlobUpload;
  }();

  var id = 0;

  var DirectUpload = function () {
    function DirectUpload(file, url, delegate) {
      classCallCheck(this, DirectUpload);
      this.id = ++id;
      this.file = file;
      this.url = url;
      this.delegate = delegate;
    }

    createClass(DirectUpload, [{
      key: "create",
      value: function create(callback) {
        var _this = this;

        FileChecksum.create(this.file, function (error, checksum) {
          if (error) {
            callback(error);
            return;
          }

          var blob = new BlobRecord(_this.file, checksum, _this.url);
          notify(_this.delegate, "directUploadWillCreateBlobWithXHR", blob.xhr);
          blob.create(function (error) {
            if (error) {
              callback(error);
            } else {
              var upload = new BlobUpload(blob);
              notify(_this.delegate, "directUploadWillStoreFileWithXHR", upload.xhr);
              upload.create(function (error) {
                if (error) {
                  callback(error);
                } else {
                  callback(null, blob.toJSON());
                }
              });
            }
          });
        });
      }
    }]);
    return DirectUpload;
  }();

  function notify(object, methodName) {
    if (object && typeof object[methodName] == "function") {
      for (var _len = arguments.length, messages = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        messages[_key - 2] = arguments[_key];
      }

      return object[methodName].apply(object, messages);
    }
  }

  var DirectUploadController = function () {
    function DirectUploadController(input, file) {
      classCallCheck(this, DirectUploadController);
      this.input = input;
      this.file = file;
      this.directUpload = new DirectUpload(this.file, this.url, this);
      this.dispatch("initialize");
    }

    createClass(DirectUploadController, [{
      key: "start",
      value: function start(callback) {
        var _this = this;

        var hiddenInput = document.createElement("input");
        hiddenInput.type = "hidden";
        hiddenInput.name = this.input.name;
        this.input.insertAdjacentElement("beforebegin", hiddenInput);
        this.dispatch("start");
        this.directUpload.create(function (error, attributes) {
          if (error) {
            hiddenInput.parentNode.removeChild(hiddenInput);

            _this.dispatchError(error);
          } else {
            hiddenInput.value = attributes.signed_id;
          }

          _this.dispatch("end");

          callback(error);
        });
      }
    }, {
      key: "uploadRequestDidProgress",
      value: function uploadRequestDidProgress(event) {
        var progress = event.loaded / event.total * 100;

        if (progress) {
          this.dispatch("progress", {
            progress: progress
          });
        }
      }
    }, {
      key: "dispatch",
      value: function dispatch(name) {
        var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        detail.file = this.file;
        detail.id = this.directUpload.id;
        return dispatchEvent(this.input, "direct-upload:" + name, {
          detail: detail
        });
      }
    }, {
      key: "dispatchError",
      value: function dispatchError(error) {
        var event = this.dispatch("error", {
          error: error
        });

        if (!event.defaultPrevented) {
          alert(error);
        }
      }
    }, {
      key: "directUploadWillCreateBlobWithXHR",
      value: function directUploadWillCreateBlobWithXHR(xhr) {
        this.dispatch("before-blob-request", {
          xhr: xhr
        });
      }
    }, {
      key: "directUploadWillStoreFileWithXHR",
      value: function directUploadWillStoreFileWithXHR(xhr) {
        var _this2 = this;

        this.dispatch("before-storage-request", {
          xhr: xhr
        });
        xhr.upload.addEventListener("progress", function (event) {
          return _this2.uploadRequestDidProgress(event);
        });
      }
    }, {
      key: "url",
      get: function get$$1() {
        return this.input.getAttribute("data-direct-upload-url");
      }
    }]);
    return DirectUploadController;
  }();

  var inputSelector = "input[type=file][data-direct-upload-url]:not([disabled])";

  var DirectUploadsController = function () {
    function DirectUploadsController(form) {
      classCallCheck(this, DirectUploadsController);
      this.form = form;
      this.inputs = findElements(form, inputSelector).filter(function (input) {
        return input.files.length;
      });
    }

    createClass(DirectUploadsController, [{
      key: "start",
      value: function start(callback) {
        var _this = this;

        var controllers = this.createDirectUploadControllers();

        var startNextController = function startNextController() {
          var controller = controllers.shift();

          if (controller) {
            controller.start(function (error) {
              if (error) {
                callback(error);

                _this.dispatch("end");
              } else {
                startNextController();
              }
            });
          } else {
            callback();

            _this.dispatch("end");
          }
        };

        this.dispatch("start");
        startNextController();
      }
    }, {
      key: "createDirectUploadControllers",
      value: function createDirectUploadControllers() {
        var controllers = [];
        this.inputs.forEach(function (input) {
          toArray$1(input.files).forEach(function (file) {
            var controller = new DirectUploadController(input, file);
            controllers.push(controller);
          });
        });
        return controllers;
      }
    }, {
      key: "dispatch",
      value: function dispatch(name) {
        var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return dispatchEvent(this.form, "direct-uploads:" + name, {
          detail: detail
        });
      }
    }]);
    return DirectUploadsController;
  }();

  var processingAttribute = "data-direct-uploads-processing";
  var submitButtonsByForm = new WeakMap();
  var started = false;

  function start() {
    if (!started) {
      started = true;
      document.addEventListener("click", didClick, true);
      document.addEventListener("submit", didSubmitForm);
      document.addEventListener("ajax:before", didSubmitRemoteElement);
    }
  }

  function didClick(event) {
    var target = event.target;

    if ((target.tagName == "INPUT" || target.tagName == "BUTTON") && target.type == "submit" && target.form) {
      submitButtonsByForm.set(target.form, target);
    }
  }

  function didSubmitForm(event) {
    handleFormSubmissionEvent(event);
  }

  function didSubmitRemoteElement(event) {
    if (event.target.tagName == "FORM") {
      handleFormSubmissionEvent(event);
    }
  }

  function handleFormSubmissionEvent(event) {
    var form = event.target;

    if (form.hasAttribute(processingAttribute)) {
      event.preventDefault();
      return;
    }

    var controller = new DirectUploadsController(form);
    var inputs = controller.inputs;

    if (inputs.length) {
      event.preventDefault();
      form.setAttribute(processingAttribute, "");
      inputs.forEach(disable);
      controller.start(function (error) {
        form.removeAttribute(processingAttribute);

        if (error) {
          inputs.forEach(enable);
        } else {
          submitForm(form);
        }
      });
    }
  }

  function submitForm(form) {
    var button = submitButtonsByForm.get(form) || findElement(form, "input[type=submit], button[type=submit]");

    if (button) {
      var _button = button,
          disabled = _button.disabled;
      button.disabled = false;
      button.focus();
      button.click();
      button.disabled = disabled;
    } else {
      button = document.createElement("input");
      button.type = "submit";
      button.style.display = "none";
      form.appendChild(button);
      button.click();
      form.removeChild(button);
    }

    submitButtonsByForm.delete(form);
  }

  function disable(input) {
    input.disabled = true;
  }

  function enable(input) {
    input.disabled = false;
  }

  function autostart() {
    if (window.ActiveStorage) {
      start();
    }
  }

  setTimeout(autostart, 1);
  exports.start = start;
  exports.DirectUpload = DirectUpload;
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
});

/***/ }),

/***/ "./node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js":
/*!******************************************************************!*\
  !*** ./node_modules/@rails/ujs/lib/assets/compiled/rails-ujs.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery, module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*
Unobtrusive JavaScript
https://github.com/rails/rails/blob/main/actionview/app/assets/javascripts
Released under the MIT license
 */
;
(function () {
  var context = this;
  (function () {
    (function () {
      this.Rails = {
        linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]',
        buttonClickSelector: {
          selector: 'button[data-remote]:not([form]), button[data-confirm]:not([form])',
          exclude: 'form button'
        },
        inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',
        formSubmitSelector: 'form:not([data-turbo=true])',
        formInputClickSelector: 'form:not([data-turbo=true]) input[type=submit], form:not([data-turbo=true]) input[type=image], form:not([data-turbo=true]) button[type=submit], form:not([data-turbo=true]) button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])',
        formDisableSelector: 'input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled',
        formEnableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled',
        fileInputSelector: 'input[name][type=file]:not([disabled])',
        linkDisableSelector: 'a[data-disable-with], a[data-disable]',
        buttonDisableSelector: 'button[data-remote][data-disable-with], button[data-remote][data-disable]'
      };
    }).call(this);
  }).call(context);
  var Rails = context.Rails;
  (function () {
    (function () {
      var nonce;
      nonce = null;

      Rails.loadCSPNonce = function () {
        var ref;
        return nonce = (ref = document.querySelector("meta[name=csp-nonce]")) != null ? ref.content : void 0;
      };

      Rails.cspNonce = function () {
        return nonce != null ? nonce : Rails.loadCSPNonce();
      };
    }).call(this);
    (function () {
      var expando, m;
      m = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;

      Rails.matches = function (element, selector) {
        if (selector.exclude != null) {
          return m.call(element, selector.selector) && !m.call(element, selector.exclude);
        } else {
          return m.call(element, selector);
        }
      };

      expando = '_ujsData';

      Rails.getData = function (element, key) {
        var ref;
        return (ref = element[expando]) != null ? ref[key] : void 0;
      };

      Rails.setData = function (element, key, value) {
        if (element[expando] == null) {
          element[expando] = {};
        }

        return element[expando][key] = value;
      };

      Rails.$ = function (selector) {
        return Array.prototype.slice.call(document.querySelectorAll(selector));
      };
    }).call(this);
    (function () {
      var $, csrfParam, csrfToken;
      $ = Rails.$;

      csrfToken = Rails.csrfToken = function () {
        var meta;
        meta = document.querySelector('meta[name=csrf-token]');
        return meta && meta.content;
      };

      csrfParam = Rails.csrfParam = function () {
        var meta;
        meta = document.querySelector('meta[name=csrf-param]');
        return meta && meta.content;
      };

      Rails.CSRFProtection = function (xhr) {
        var token;
        token = csrfToken();

        if (token != null) {
          return xhr.setRequestHeader('X-CSRF-Token', token);
        }
      };

      Rails.refreshCSRFTokens = function () {
        var param, token;
        token = csrfToken();
        param = csrfParam();

        if (token != null && param != null) {
          return $('form input[name="' + param + '"]').forEach(function (input) {
            return input.value = token;
          });
        }
      };
    }).call(this);
    (function () {
      var CustomEvent, fire, matches, preventDefault;
      matches = Rails.matches;
      CustomEvent = window.CustomEvent;

      if (typeof CustomEvent !== 'function') {
        CustomEvent = function CustomEvent(event, params) {
          var evt;
          evt = document.createEvent('CustomEvent');
          evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
          return evt;
        };

        CustomEvent.prototype = window.Event.prototype;
        preventDefault = CustomEvent.prototype.preventDefault;

        CustomEvent.prototype.preventDefault = function () {
          var result;
          result = preventDefault.call(this);

          if (this.cancelable && !this.defaultPrevented) {
            Object.defineProperty(this, 'defaultPrevented', {
              get: function get() {
                return true;
              }
            });
          }

          return result;
        };
      }

      fire = Rails.fire = function (obj, name, data) {
        var event;
        event = new CustomEvent(name, {
          bubbles: true,
          cancelable: true,
          detail: data
        });
        obj.dispatchEvent(event);
        return !event.defaultPrevented;
      };

      Rails.stopEverything = function (e) {
        fire(e.target, 'ujs:everythingStopped');
        e.preventDefault();
        e.stopPropagation();
        return e.stopImmediatePropagation();
      };

      Rails.delegate = function (element, selector, eventType, handler) {
        return element.addEventListener(eventType, function (e) {
          var target;
          target = e.target;

          while (!(!(target instanceof Element) || matches(target, selector))) {
            target = target.parentNode;
          }

          if (target instanceof Element && handler.call(target, e) === false) {
            e.preventDefault();
            return e.stopPropagation();
          }
        });
      };
    }).call(this);
    (function () {
      var AcceptHeaders, CSRFProtection, createXHR, cspNonce, fire, prepareOptions, processResponse;
      cspNonce = Rails.cspNonce, CSRFProtection = Rails.CSRFProtection, fire = Rails.fire;
      AcceptHeaders = {
        '*': '*/*',
        text: 'text/plain',
        html: 'text/html',
        xml: 'application/xml, text/xml',
        json: 'application/json, text/javascript',
        script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript'
      };

      Rails.ajax = function (options) {
        var xhr;
        options = prepareOptions(options);
        xhr = createXHR(options, function () {
          var ref, response;
          response = processResponse((ref = xhr.response) != null ? ref : xhr.responseText, xhr.getResponseHeader('Content-Type'));

          if (Math.floor(xhr.status / 100) === 2) {
            if (typeof options.success === "function") {
              options.success(response, xhr.statusText, xhr);
            }
          } else {
            if (typeof options.error === "function") {
              options.error(response, xhr.statusText, xhr);
            }
          }

          return typeof options.complete === "function" ? options.complete(xhr, xhr.statusText) : void 0;
        });

        if (options.beforeSend != null && !options.beforeSend(xhr, options)) {
          return false;
        }

        if (xhr.readyState === XMLHttpRequest.OPENED) {
          return xhr.send(options.data);
        }
      };

      prepareOptions = function prepareOptions(options) {
        options.url = options.url || location.href;
        options.type = options.type.toUpperCase();

        if (options.type === 'GET' && options.data) {
          if (options.url.indexOf('?') < 0) {
            options.url += '?' + options.data;
          } else {
            options.url += '&' + options.data;
          }
        }

        if (AcceptHeaders[options.dataType] == null) {
          options.dataType = '*';
        }

        options.accept = AcceptHeaders[options.dataType];

        if (options.dataType !== '*') {
          options.accept += ', */*; q=0.01';
        }

        return options;
      };

      createXHR = function createXHR(options, done) {
        var xhr;
        xhr = new XMLHttpRequest();
        xhr.open(options.type, options.url, true);
        xhr.setRequestHeader('Accept', options.accept);

        if (typeof options.data === 'string') {
          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
        }

        if (!options.crossDomain) {
          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
          CSRFProtection(xhr);
        }

        xhr.withCredentials = !!options.withCredentials;

        xhr.onreadystatechange = function () {
          if (xhr.readyState === XMLHttpRequest.DONE) {
            return done(xhr);
          }
        };

        return xhr;
      };

      processResponse = function processResponse(response, type) {
        var parser, script;

        if (typeof response === 'string' && typeof type === 'string') {
          if (type.match(/\bjson\b/)) {
            try {
              response = JSON.parse(response);
            } catch (error) {}
          } else if (type.match(/\b(?:java|ecma)script\b/)) {
            script = document.createElement('script');
            script.setAttribute('nonce', cspNonce());
            script.text = response;
            document.head.appendChild(script).parentNode.removeChild(script);
          } else if (type.match(/\b(xml|html|svg)\b/)) {
            parser = new DOMParser();
            type = type.replace(/;.+/, '');

            try {
              response = parser.parseFromString(response, type);
            } catch (error) {}
          }
        }

        return response;
      };

      Rails.href = function (element) {
        return element.href;
      };

      Rails.isCrossDomain = function (url) {
        var e, originAnchor, urlAnchor;
        originAnchor = document.createElement('a');
        originAnchor.href = location.href;
        urlAnchor = document.createElement('a');

        try {
          urlAnchor.href = url;
          return !((!urlAnchor.protocol || urlAnchor.protocol === ':') && !urlAnchor.host || originAnchor.protocol + '//' + originAnchor.host === urlAnchor.protocol + '//' + urlAnchor.host);
        } catch (error) {
          e = error;
          return true;
        }
      };
    }).call(this);
    (function () {
      var matches, toArray;
      matches = Rails.matches;

      toArray = function toArray(e) {
        return Array.prototype.slice.call(e);
      };

      Rails.serializeElement = function (element, additionalParam) {
        var inputs, params;
        inputs = [element];

        if (matches(element, 'form')) {
          inputs = toArray(element.elements);
        }

        params = [];
        inputs.forEach(function (input) {
          if (!input.name || input.disabled) {
            return;
          }

          if (matches(input, 'fieldset[disabled] *')) {
            return;
          }

          if (matches(input, 'select')) {
            return toArray(input.options).forEach(function (option) {
              if (option.selected) {
                return params.push({
                  name: input.name,
                  value: option.value
                });
              }
            });
          } else if (input.checked || ['radio', 'checkbox', 'submit'].indexOf(input.type) === -1) {
            return params.push({
              name: input.name,
              value: input.value
            });
          }
        });

        if (additionalParam) {
          params.push(additionalParam);
        }

        return params.map(function (param) {
          if (param.name != null) {
            return encodeURIComponent(param.name) + "=" + encodeURIComponent(param.value);
          } else {
            return param;
          }
        }).join('&');
      };

      Rails.formElements = function (form, selector) {
        if (matches(form, 'form')) {
          return toArray(form.elements).filter(function (el) {
            return matches(el, selector);
          });
        } else {
          return toArray(form.querySelectorAll(selector));
        }
      };
    }).call(this);
    (function () {
      var allowAction, fire, stopEverything;
      fire = Rails.fire, stopEverything = Rails.stopEverything;

      Rails.handleConfirm = function (e) {
        if (!allowAction(this)) {
          return stopEverything(e);
        }
      };

      Rails.confirm = function (message, element) {
        return confirm(message);
      };

      allowAction = function allowAction(element) {
        var answer, callback, message;
        message = element.getAttribute('data-confirm');

        if (!message) {
          return true;
        }

        answer = false;

        if (fire(element, 'confirm')) {
          try {
            answer = Rails.confirm(message, element);
          } catch (error) {}

          callback = fire(element, 'confirm:complete', [answer]);
        }

        return answer && callback;
      };
    }).call(this);
    (function () {
      var disableFormElement, disableFormElements, disableLinkElement, enableFormElement, enableFormElements, enableLinkElement, formElements, getData, isXhrRedirect, matches, setData, stopEverything;
      matches = Rails.matches, getData = Rails.getData, setData = Rails.setData, stopEverything = Rails.stopEverything, formElements = Rails.formElements;

      Rails.handleDisabledElement = function (e) {
        var element;
        element = this;

        if (element.disabled) {
          return stopEverything(e);
        }
      };

      Rails.enableElement = function (e) {
        var element;

        if (e instanceof Event) {
          if (isXhrRedirect(e)) {
            return;
          }

          element = e.target;
        } else {
          element = e;
        }

        if (matches(element, Rails.linkDisableSelector)) {
          return enableLinkElement(element);
        } else if (matches(element, Rails.buttonDisableSelector) || matches(element, Rails.formEnableSelector)) {
          return enableFormElement(element);
        } else if (matches(element, Rails.formSubmitSelector)) {
          return enableFormElements(element);
        }
      };

      Rails.disableElement = function (e) {
        var element;
        element = e instanceof Event ? e.target : e;

        if (matches(element, Rails.linkDisableSelector)) {
          return disableLinkElement(element);
        } else if (matches(element, Rails.buttonDisableSelector) || matches(element, Rails.formDisableSelector)) {
          return disableFormElement(element);
        } else if (matches(element, Rails.formSubmitSelector)) {
          return disableFormElements(element);
        }
      };

      disableLinkElement = function disableLinkElement(element) {
        var replacement;

        if (getData(element, 'ujs:disabled')) {
          return;
        }

        replacement = element.getAttribute('data-disable-with');

        if (replacement != null) {
          setData(element, 'ujs:enable-with', element.innerHTML);
          element.innerHTML = replacement;
        }

        element.addEventListener('click', stopEverything);
        return setData(element, 'ujs:disabled', true);
      };

      enableLinkElement = function enableLinkElement(element) {
        var originalText;
        originalText = getData(element, 'ujs:enable-with');

        if (originalText != null) {
          element.innerHTML = originalText;
          setData(element, 'ujs:enable-with', null);
        }

        element.removeEventListener('click', stopEverything);
        return setData(element, 'ujs:disabled', null);
      };

      disableFormElements = function disableFormElements(form) {
        return formElements(form, Rails.formDisableSelector).forEach(disableFormElement);
      };

      disableFormElement = function disableFormElement(element) {
        var replacement;

        if (getData(element, 'ujs:disabled')) {
          return;
        }

        replacement = element.getAttribute('data-disable-with');

        if (replacement != null) {
          if (matches(element, 'button')) {
            setData(element, 'ujs:enable-with', element.innerHTML);
            element.innerHTML = replacement;
          } else {
            setData(element, 'ujs:enable-with', element.value);
            element.value = replacement;
          }
        }

        element.disabled = true;
        return setData(element, 'ujs:disabled', true);
      };

      enableFormElements = function enableFormElements(form) {
        return formElements(form, Rails.formEnableSelector).forEach(enableFormElement);
      };

      enableFormElement = function enableFormElement(element) {
        var originalText;
        originalText = getData(element, 'ujs:enable-with');

        if (originalText != null) {
          if (matches(element, 'button')) {
            element.innerHTML = originalText;
          } else {
            element.value = originalText;
          }

          setData(element, 'ujs:enable-with', null);
        }

        element.disabled = false;
        return setData(element, 'ujs:disabled', null);
      };

      isXhrRedirect = function isXhrRedirect(event) {
        var ref, xhr;
        xhr = (ref = event.detail) != null ? ref[0] : void 0;
        return (xhr != null ? xhr.getResponseHeader("X-Xhr-Redirect") : void 0) != null;
      };
    }).call(this);
    (function () {
      var stopEverything;
      stopEverything = Rails.stopEverything;

      Rails.handleMethod = function (e) {
        var csrfParam, csrfToken, form, formContent, href, link, method;
        link = this;
        method = link.getAttribute('data-method');

        if (!method) {
          return;
        }

        href = Rails.href(link);
        csrfToken = Rails.csrfToken();
        csrfParam = Rails.csrfParam();
        form = document.createElement('form');
        formContent = "<input name='_method' value='" + method + "' type='hidden' />";

        if (csrfParam != null && csrfToken != null && !Rails.isCrossDomain(href)) {
          formContent += "<input name='" + csrfParam + "' value='" + csrfToken + "' type='hidden' />";
        }

        formContent += '<input type="submit" />';
        form.method = 'post';
        form.action = href;
        form.target = link.target;
        form.innerHTML = formContent;
        form.style.display = 'none';
        document.body.appendChild(form);
        form.querySelector('[type="submit"]').click();
        return stopEverything(e);
      };
    }).call(this);
    (function () {
      var ajax,
          fire,
          getData,
          isCrossDomain,
          isRemote,
          matches,
          serializeElement,
          setData,
          stopEverything,
          slice = [].slice;
      matches = Rails.matches, getData = Rails.getData, setData = Rails.setData, fire = Rails.fire, stopEverything = Rails.stopEverything, ajax = Rails.ajax, isCrossDomain = Rails.isCrossDomain, serializeElement = Rails.serializeElement;

      isRemote = function isRemote(element) {
        var value;
        value = element.getAttribute('data-remote');
        return value != null && value !== 'false';
      };

      Rails.handleRemote = function (e) {
        var button, data, dataType, element, method, url, withCredentials;
        element = this;

        if (!isRemote(element)) {
          return true;
        }

        if (!fire(element, 'ajax:before')) {
          fire(element, 'ajax:stopped');
          return false;
        }

        withCredentials = element.getAttribute('data-with-credentials');
        dataType = element.getAttribute('data-type') || 'script';

        if (matches(element, Rails.formSubmitSelector)) {
          button = getData(element, 'ujs:submit-button');
          method = getData(element, 'ujs:submit-button-formmethod') || element.method;
          url = getData(element, 'ujs:submit-button-formaction') || element.getAttribute('action') || location.href;

          if (method.toUpperCase() === 'GET') {
            url = url.replace(/\?.*$/, '');
          }

          if (element.enctype === 'multipart/form-data') {
            data = new FormData(element);

            if (button != null) {
              data.append(button.name, button.value);
            }
          } else {
            data = serializeElement(element, button);
          }

          setData(element, 'ujs:submit-button', null);
          setData(element, 'ujs:submit-button-formmethod', null);
          setData(element, 'ujs:submit-button-formaction', null);
        } else if (matches(element, Rails.buttonClickSelector) || matches(element, Rails.inputChangeSelector)) {
          method = element.getAttribute('data-method');
          url = element.getAttribute('data-url');
          data = serializeElement(element, element.getAttribute('data-params'));
        } else {
          method = element.getAttribute('data-method');
          url = Rails.href(element);
          data = element.getAttribute('data-params');
        }

        ajax({
          type: method || 'GET',
          url: url,
          data: data,
          dataType: dataType,
          beforeSend: function beforeSend(xhr, options) {
            if (fire(element, 'ajax:beforeSend', [xhr, options])) {
              return fire(element, 'ajax:send', [xhr]);
            } else {
              fire(element, 'ajax:stopped');
              return false;
            }
          },
          success: function success() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return fire(element, 'ajax:success', args);
          },
          error: function error() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return fire(element, 'ajax:error', args);
          },
          complete: function complete() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return fire(element, 'ajax:complete', args);
          },
          crossDomain: isCrossDomain(url),
          withCredentials: withCredentials != null && withCredentials !== 'false'
        });
        return stopEverything(e);
      };

      Rails.formSubmitButtonClick = function (e) {
        var button, form;
        button = this;
        form = button.form;

        if (!form) {
          return;
        }

        if (button.name) {
          setData(form, 'ujs:submit-button', {
            name: button.name,
            value: button.value
          });
        }

        setData(form, 'ujs:formnovalidate-button', button.formNoValidate);
        setData(form, 'ujs:submit-button-formaction', button.getAttribute('formaction'));
        return setData(form, 'ujs:submit-button-formmethod', button.getAttribute('formmethod'));
      };

      Rails.preventInsignificantClick = function (e) {
        var data, insignificantMetaClick, link, metaClick, method, nonPrimaryMouseClick;
        link = this;
        method = (link.getAttribute('data-method') || 'GET').toUpperCase();
        data = link.getAttribute('data-params');
        metaClick = e.metaKey || e.ctrlKey;
        insignificantMetaClick = metaClick && method === 'GET' && !data;
        nonPrimaryMouseClick = e.button != null && e.button !== 0;

        if (nonPrimaryMouseClick || insignificantMetaClick) {
          return e.stopImmediatePropagation();
        }
      };
    }).call(this);
    (function () {
      var $, CSRFProtection, delegate, disableElement, enableElement, fire, formSubmitButtonClick, getData, handleConfirm, handleDisabledElement, handleMethod, handleRemote, loadCSPNonce, preventInsignificantClick, refreshCSRFTokens;
      fire = Rails.fire, delegate = Rails.delegate, getData = Rails.getData, $ = Rails.$, refreshCSRFTokens = Rails.refreshCSRFTokens, CSRFProtection = Rails.CSRFProtection, loadCSPNonce = Rails.loadCSPNonce, enableElement = Rails.enableElement, disableElement = Rails.disableElement, handleDisabledElement = Rails.handleDisabledElement, handleConfirm = Rails.handleConfirm, preventInsignificantClick = Rails.preventInsignificantClick, handleRemote = Rails.handleRemote, formSubmitButtonClick = Rails.formSubmitButtonClick, handleMethod = Rails.handleMethod;

      if (typeof jQuery !== "undefined" && jQuery !== null && jQuery.ajax != null) {
        if (jQuery.rails) {
          throw new Error('If you load both jquery_ujs and rails-ujs, use rails-ujs only.');
        }

        jQuery.rails = Rails;
        jQuery.ajaxPrefilter(function (options, originalOptions, xhr) {
          if (!options.crossDomain) {
            return CSRFProtection(xhr);
          }
        });
      }

      Rails.start = function () {
        if (window._rails_loaded) {
          throw new Error('rails-ujs has already been loaded!');
        }

        window.addEventListener('pageshow', function () {
          $(Rails.formEnableSelector).forEach(function (el) {
            if (getData(el, 'ujs:disabled')) {
              return enableElement(el);
            }
          });
          return $(Rails.linkDisableSelector).forEach(function (el) {
            if (getData(el, 'ujs:disabled')) {
              return enableElement(el);
            }
          });
        });
        delegate(document, Rails.linkDisableSelector, 'ajax:complete', enableElement);
        delegate(document, Rails.linkDisableSelector, 'ajax:stopped', enableElement);
        delegate(document, Rails.buttonDisableSelector, 'ajax:complete', enableElement);
        delegate(document, Rails.buttonDisableSelector, 'ajax:stopped', enableElement);
        delegate(document, Rails.linkClickSelector, 'click', preventInsignificantClick);
        delegate(document, Rails.linkClickSelector, 'click', handleDisabledElement);
        delegate(document, Rails.linkClickSelector, 'click', handleConfirm);
        delegate(document, Rails.linkClickSelector, 'click', disableElement);
        delegate(document, Rails.linkClickSelector, 'click', handleRemote);
        delegate(document, Rails.linkClickSelector, 'click', handleMethod);
        delegate(document, Rails.buttonClickSelector, 'click', preventInsignificantClick);
        delegate(document, Rails.buttonClickSelector, 'click', handleDisabledElement);
        delegate(document, Rails.buttonClickSelector, 'click', handleConfirm);
        delegate(document, Rails.buttonClickSelector, 'click', disableElement);
        delegate(document, Rails.buttonClickSelector, 'click', handleRemote);
        delegate(document, Rails.inputChangeSelector, 'change', handleDisabledElement);
        delegate(document, Rails.inputChangeSelector, 'change', handleConfirm);
        delegate(document, Rails.inputChangeSelector, 'change', handleRemote);
        delegate(document, Rails.formSubmitSelector, 'submit', handleDisabledElement);
        delegate(document, Rails.formSubmitSelector, 'submit', handleConfirm);
        delegate(document, Rails.formSubmitSelector, 'submit', handleRemote);
        delegate(document, Rails.formSubmitSelector, 'submit', function (e) {
          return setTimeout(function () {
            return disableElement(e);
          }, 13);
        });
        delegate(document, Rails.formSubmitSelector, 'ajax:send', disableElement);
        delegate(document, Rails.formSubmitSelector, 'ajax:complete', enableElement);
        delegate(document, Rails.formInputClickSelector, 'click', preventInsignificantClick);
        delegate(document, Rails.formInputClickSelector, 'click', handleDisabledElement);
        delegate(document, Rails.formInputClickSelector, 'click', handleConfirm);
        delegate(document, Rails.formInputClickSelector, 'click', formSubmitButtonClick);
        document.addEventListener('DOMContentLoaded', refreshCSRFTokens);
        document.addEventListener('DOMContentLoaded', loadCSPNonce);
        return window._rails_loaded = true;
      };

      if (window.Rails === Rails && fire(document, 'rails:attachBindings')) {
        Rails.start();
      }
    }).call(this);
  }).call(this);

  if (( false ? undefined : _typeof(module)) === "object" && module.exports) {
    module.exports = Rails;
  } else if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (Rails),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}).call(this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/src/jquery.js"), __webpack_require__(/*! ./../../../../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/bootstrap/dist/js/bootstrap.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/bootstrap/dist/js/bootstrap.esm.js ***!
  \*********************************************************/
/*! exports provided: Alert, Button, Carousel, Collapse, Dropdown, Modal, Offcanvas, Popover, ScrollSpy, Tab, Toast, Tooltip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alert", function() { return Alert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Button", function() { return Button; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Carousel", function() { return Carousel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Collapse", function() { return Collapse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dropdown", function() { return Dropdown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modal", function() { return Modal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Offcanvas", function() { return Offcanvas; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Popover", function() { return Popover; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollSpy", function() { return ScrollSpy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tab", function() { return Tab; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Toast", function() { return Toast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tooltip", function() { return Tooltip; });
/* harmony import */ var _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @popperjs/core */ "./node_modules/@popperjs/core/lib/index.js");
var _KEY_TO_DIRECTION;

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } Object.defineProperty(subClass, "prototype", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*!
  * Bootstrap v5.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */

/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/index.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

var MAX_UID = 1000000;
var MILLISECONDS_MULTIPLIER = 1000;
var TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

var toType = function toType(obj) {
  if (obj === null || obj === undefined) {
    return "".concat(obj);
  }

  return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
};
/**
 * --------------------------------------------------------------------------
 * Public Util Api
 * --------------------------------------------------------------------------
 */


var getUID = function getUID(prefix) {
  do {
    prefix += Math.floor(Math.random() * MAX_UID);
  } while (document.getElementById(prefix));

  return prefix;
};

var getSelector = function getSelector(element) {
  var selector = element.getAttribute('data-bs-target');

  if (!selector || selector === '#') {
    var hrefAttr = element.getAttribute('href'); // The only valid content that could double as a selector are IDs or classes,
    // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
    // `document.querySelector` will rightfully complain it is invalid.
    // See https://github.com/twbs/bootstrap/issues/32273

    if (!hrefAttr || !hrefAttr.includes('#') && !hrefAttr.startsWith('.')) {
      return null;
    } // Just in case some CMS puts out a full URL with the anchor appended


    if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {
      hrefAttr = "#".concat(hrefAttr.split('#')[1]);
    }

    selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null;
  }

  return selector;
};

var getSelectorFromElement = function getSelectorFromElement(element) {
  var selector = getSelector(element);

  if (selector) {
    return document.querySelector(selector) ? selector : null;
  }

  return null;
};

var getElementFromSelector = function getElementFromSelector(element) {
  var selector = getSelector(element);
  return selector ? document.querySelector(selector) : null;
};

var getTransitionDurationFromElement = function getTransitionDurationFromElement(element) {
  if (!element) {
    return 0;
  } // Get transition-duration of the element


  var _window$getComputedSt = window.getComputedStyle(element),
      transitionDuration = _window$getComputedSt.transitionDuration,
      transitionDelay = _window$getComputedSt.transitionDelay;

  var floatTransitionDuration = Number.parseFloat(transitionDuration);
  var floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

  if (!floatTransitionDuration && !floatTransitionDelay) {
    return 0;
  } // If multiple durations are defined, take the first


  transitionDuration = transitionDuration.split(',')[0];
  transitionDelay = transitionDelay.split(',')[0];
  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
};

var triggerTransitionEnd = function triggerTransitionEnd(element) {
  element.dispatchEvent(new Event(TRANSITION_END));
};

var isElement = function isElement(obj) {
  if (!obj || _typeof(obj) !== 'object') {
    return false;
  }

  if (typeof obj.jquery !== 'undefined') {
    obj = obj[0];
  }

  return typeof obj.nodeType !== 'undefined';
};

var getElement = function getElement(obj) {
  if (isElement(obj)) {
    // it's a jQuery object or a node element
    return obj.jquery ? obj[0] : obj;
  }

  if (typeof obj === 'string' && obj.length > 0) {
    return document.querySelector(obj);
  }

  return null;
};

var typeCheckConfig = function typeCheckConfig(componentName, config, configTypes) {
  Object.keys(configTypes).forEach(function (property) {
    var expectedTypes = configTypes[property];
    var value = config[property];
    var valueType = value && isElement(value) ? 'element' : toType(value);

    if (!new RegExp(expectedTypes).test(valueType)) {
      throw new TypeError("".concat(componentName.toUpperCase(), ": Option \"").concat(property, "\" provided type \"").concat(valueType, "\" but expected type \"").concat(expectedTypes, "\"."));
    }
  });
};

var isVisible = function isVisible(element) {
  if (!isElement(element) || element.getClientRects().length === 0) {
    return false;
  }

  return getComputedStyle(element).getPropertyValue('visibility') === 'visible';
};

var isDisabled = function isDisabled(element) {
  if (!element || element.nodeType !== Node.ELEMENT_NODE) {
    return true;
  }

  if (element.classList.contains('disabled')) {
    return true;
  }

  if (typeof element.disabled !== 'undefined') {
    return element.disabled;
  }

  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';
};

var findShadowRoot = function findShadowRoot(element) {
  if (!document.documentElement.attachShadow) {
    return null;
  } // Can find the shadow root otherwise it'll return the document


  if (typeof element.getRootNode === 'function') {
    var root = element.getRootNode();
    return root instanceof ShadowRoot ? root : null;
  }

  if (element instanceof ShadowRoot) {
    return element;
  } // when we don't find a shadow root


  if (!element.parentNode) {
    return null;
  }

  return findShadowRoot(element.parentNode);
};

var noop = function noop() {};
/**
 * Trick to restart an element's animation
 *
 * @param {HTMLElement} element
 * @return void
 *
 * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
 */


var reflow = function reflow(element) {
  // eslint-disable-next-line no-unused-expressions
  element.offsetHeight;
};

var getjQuery = function getjQuery() {
  var _window = window,
      jQuery = _window.jQuery;

  if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
    return jQuery;
  }

  return null;
};

var DOMContentLoadedCallbacks = [];

var onDOMContentLoaded = function onDOMContentLoaded(callback) {
  if (document.readyState === 'loading') {
    // add listener on the first call when the document is in loading state
    if (!DOMContentLoadedCallbacks.length) {
      document.addEventListener('DOMContentLoaded', function () {
        DOMContentLoadedCallbacks.forEach(function (callback) {
          return callback();
        });
      });
    }

    DOMContentLoadedCallbacks.push(callback);
  } else {
    callback();
  }
};

var isRTL = function isRTL() {
  return document.documentElement.dir === 'rtl';
};

var defineJQueryPlugin = function defineJQueryPlugin(plugin) {
  onDOMContentLoaded(function () {
    var $ = getjQuery();
    /* istanbul ignore if */

    if ($) {
      var name = plugin.NAME;
      var JQUERY_NO_CONFLICT = $.fn[name];
      $.fn[name] = plugin.jQueryInterface;
      $.fn[name].Constructor = plugin;

      $.fn[name].noConflict = function () {
        $.fn[name] = JQUERY_NO_CONFLICT;
        return plugin.jQueryInterface;
      };
    }
  });
};

var execute = function execute(callback) {
  if (typeof callback === 'function') {
    callback();
  }
};

var executeAfterTransition = function executeAfterTransition(callback, transitionElement) {
  var waitForTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (!waitForTransition) {
    execute(callback);
    return;
  }

  var durationPadding = 5;
  var emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
  var called = false;

  var handler = function handler(_ref) {
    var target = _ref.target;

    if (target !== transitionElement) {
      return;
    }

    called = true;
    transitionElement.removeEventListener(TRANSITION_END, handler);
    execute(callback);
  };

  transitionElement.addEventListener(TRANSITION_END, handler);
  setTimeout(function () {
    if (!called) {
      triggerTransitionEnd(transitionElement);
    }
  }, emulatedDuration);
};
/**
 * Return the previous/next element of a list.
 *
 * @param {array} list    The list of elements
 * @param activeElement   The active element
 * @param shouldGetNext   Choose to get next or previous element
 * @param isCycleAllowed
 * @return {Element|elem} The proper element
 */


var getNextActiveElement = function getNextActiveElement(list, activeElement, shouldGetNext, isCycleAllowed) {
  var index = list.indexOf(activeElement); // if the element does not exist in the list return an element depending on the direction and if cycle is allowed

  if (index === -1) {
    return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0];
  }

  var listLength = list.length;
  index += shouldGetNext ? 1 : -1;

  if (isCycleAllowed) {
    index = (index + listLength) % listLength;
  }

  return list[Math.max(0, Math.min(index, listLength - 1))];
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): dom/event-handler.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */


var namespaceRegex = /[^.]*(?=\..*)\.|.*/;
var stripNameRegex = /\..*/;
var stripUidRegex = /::\d+$/;
var eventRegistry = {}; // Events storage

var uidEvent = 1;
var customEvents = {
  mouseenter: 'mouseover',
  mouseleave: 'mouseout'
};
var customEventsRegex = /^(mouseenter|mouseleave)/i;
var nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);
/**
 * ------------------------------------------------------------------------
 * Private methods
 * ------------------------------------------------------------------------
 */

function getUidEvent(element, uid) {
  return uid && "".concat(uid, "::").concat(uidEvent++) || element.uidEvent || uidEvent++;
}

function getEvent(element) {
  var uid = getUidEvent(element);
  element.uidEvent = uid;
  eventRegistry[uid] = eventRegistry[uid] || {};
  return eventRegistry[uid];
}

function bootstrapHandler(element, fn) {
  return function handler(event) {
    event.delegateTarget = element;

    if (handler.oneOff) {
      EventHandler.off(element, event.type, fn);
    }

    return fn.apply(element, [event]);
  };
}

function bootstrapDelegationHandler(element, selector, fn) {
  return function handler(event) {
    var domElements = element.querySelectorAll(selector);

    for (var target = event.target; target && target !== this; target = target.parentNode) {
      for (var i = domElements.length; i--;) {
        if (domElements[i] === target) {
          event.delegateTarget = target;

          if (handler.oneOff) {
            EventHandler.off(element, event.type, selector, fn);
          }

          return fn.apply(target, [event]);
        }
      }
    } // To please ESLint


    return null;
  };
}

function findHandler(events, handler) {
  var delegationSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var uidEventList = Object.keys(events);

  for (var i = 0, len = uidEventList.length; i < len; i++) {
    var event = events[uidEventList[i]];

    if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {
      return event;
    }
  }

  return null;
}

function normalizeParams(originalTypeEvent, handler, delegationFn) {
  var delegation = typeof handler === 'string';
  var originalHandler = delegation ? delegationFn : handler;
  var typeEvent = getTypeEvent(originalTypeEvent);
  var isNative = nativeEvents.has(typeEvent);

  if (!isNative) {
    typeEvent = originalTypeEvent;
  }

  return [delegation, originalHandler, typeEvent];
}

function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {
  if (typeof originalTypeEvent !== 'string' || !element) {
    return;
  }

  if (!handler) {
    handler = delegationFn;
    delegationFn = null;
  } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
  // this prevents the handler from being dispatched the same way as mouseover or mouseout does


  if (customEventsRegex.test(originalTypeEvent)) {
    var wrapFn = function wrapFn(fn) {
      return function (event) {
        if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
          return fn.call(this, event);
        }
      };
    };

    if (delegationFn) {
      delegationFn = wrapFn(delegationFn);
    } else {
      handler = wrapFn(handler);
    }
  }

  var _normalizeParams = normalizeParams(originalTypeEvent, handler, delegationFn),
      _normalizeParams2 = _slicedToArray(_normalizeParams, 3),
      delegation = _normalizeParams2[0],
      originalHandler = _normalizeParams2[1],
      typeEvent = _normalizeParams2[2];

  var events = getEvent(element);
  var handlers = events[typeEvent] || (events[typeEvent] = {});
  var previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);

  if (previousFn) {
    previousFn.oneOff = previousFn.oneOff && oneOff;
    return;
  }

  var uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));
  var fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);
  fn.delegationSelector = delegation ? handler : null;
  fn.originalHandler = originalHandler;
  fn.oneOff = oneOff;
  fn.uidEvent = uid;
  handlers[uid] = fn;
  element.addEventListener(typeEvent, fn, delegation);
}

function removeHandler(element, events, typeEvent, handler, delegationSelector) {
  var fn = findHandler(events[typeEvent], handler, delegationSelector);

  if (!fn) {
    return;
  }

  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
  delete events[typeEvent][fn.uidEvent];
}

function removeNamespacedHandlers(element, events, typeEvent, namespace) {
  var storeElementEvent = events[typeEvent] || {};
  Object.keys(storeElementEvent).forEach(function (handlerKey) {
    if (handlerKey.includes(namespace)) {
      var event = storeElementEvent[handlerKey];
      removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
    }
  });
}

function getTypeEvent(event) {
  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
  event = event.replace(stripNameRegex, '');
  return customEvents[event] || event;
}

var EventHandler = {
  on: function on(element, event, handler, delegationFn) {
    addHandler(element, event, handler, delegationFn, false);
  },
  one: function one(element, event, handler, delegationFn) {
    addHandler(element, event, handler, delegationFn, true);
  },
  off: function off(element, originalTypeEvent, handler, delegationFn) {
    if (typeof originalTypeEvent !== 'string' || !element) {
      return;
    }

    var _normalizeParams3 = normalizeParams(originalTypeEvent, handler, delegationFn),
        _normalizeParams4 = _slicedToArray(_normalizeParams3, 3),
        delegation = _normalizeParams4[0],
        originalHandler = _normalizeParams4[1],
        typeEvent = _normalizeParams4[2];

    var inNamespace = typeEvent !== originalTypeEvent;
    var events = getEvent(element);
    var isNamespace = originalTypeEvent.startsWith('.');

    if (typeof originalHandler !== 'undefined') {
      // Simplest case: handler is passed, remove that listener ONLY.
      if (!events || !events[typeEvent]) {
        return;
      }

      removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);
      return;
    }

    if (isNamespace) {
      Object.keys(events).forEach(function (elementEvent) {
        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
      });
    }

    var storeElementEvent = events[typeEvent] || {};
    Object.keys(storeElementEvent).forEach(function (keyHandlers) {
      var handlerKey = keyHandlers.replace(stripUidRegex, '');

      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
        var event = storeElementEvent[keyHandlers];
        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);
      }
    });
  },
  trigger: function trigger(element, event, args) {
    if (typeof event !== 'string' || !element) {
      return null;
    }

    var $ = getjQuery();
    var typeEvent = getTypeEvent(event);
    var inNamespace = event !== typeEvent;
    var isNative = nativeEvents.has(typeEvent);
    var jQueryEvent;
    var bubbles = true;
    var nativeDispatch = true;
    var defaultPrevented = false;
    var evt = null;

    if (inNamespace && $) {
      jQueryEvent = $.Event(event, args);
      $(element).trigger(jQueryEvent);
      bubbles = !jQueryEvent.isPropagationStopped();
      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
      defaultPrevented = jQueryEvent.isDefaultPrevented();
    }

    if (isNative) {
      evt = document.createEvent('HTMLEvents');
      evt.initEvent(typeEvent, bubbles, true);
    } else {
      evt = new CustomEvent(event, {
        bubbles: bubbles,
        cancelable: true
      });
    } // merge custom information in our event


    if (typeof args !== 'undefined') {
      Object.keys(args).forEach(function (key) {
        Object.defineProperty(evt, key, {
          get: function get() {
            return args[key];
          }
        });
      });
    }

    if (defaultPrevented) {
      evt.preventDefault();
    }

    if (nativeDispatch) {
      element.dispatchEvent(evt);
    }

    if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {
      jQueryEvent.preventDefault();
    }

    return evt;
  }
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): dom/data.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var elementMap = new Map();
var Data = {
  set: function set(element, key, instance) {
    if (!elementMap.has(element)) {
      elementMap.set(element, new Map());
    }

    var instanceMap = elementMap.get(element); // make it clear we only want one instance per element
    // can be removed later when multiple key/instances are fine to be used

    if (!instanceMap.has(key) && instanceMap.size !== 0) {
      // eslint-disable-next-line no-console
      console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(instanceMap.keys())[0], "."));
      return;
    }

    instanceMap.set(key, instance);
  },
  get: function get(element, key) {
    if (elementMap.has(element)) {
      return elementMap.get(element).get(key) || null;
    }

    return null;
  },
  remove: function remove(element, key) {
    if (!elementMap.has(element)) {
      return;
    }

    var instanceMap = elementMap.get(element);
    instanceMap.delete(key); // free up element references if there are no instances left for an element

    if (instanceMap.size === 0) {
      elementMap.delete(element);
    }
  }
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): base-component.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var VERSION = '5.1.3';

var BaseComponent = /*#__PURE__*/function () {
  function BaseComponent(element) {
    _classCallCheck(this, BaseComponent);

    element = getElement(element);

    if (!element) {
      return;
    }

    this._element = element;
    Data.set(this._element, this.constructor.DATA_KEY, this);
  }

  _createClass(BaseComponent, [{
    key: "dispose",
    value: function dispose() {
      var _this = this;

      Data.remove(this._element, this.constructor.DATA_KEY);
      EventHandler.off(this._element, this.constructor.EVENT_KEY);
      Object.getOwnPropertyNames(this).forEach(function (propertyName) {
        _this[propertyName] = null;
      });
    }
  }, {
    key: "_queueCallback",
    value: function _queueCallback(callback, element) {
      var isAnimated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      executeAfterTransition(callback, element, isAnimated);
    }
    /** Static */

  }], [{
    key: "getInstance",
    value: function getInstance(element) {
      return Data.get(getElement(element), this.DATA_KEY);
    }
  }, {
    key: "getOrCreateInstance",
    value: function getOrCreateInstance(element) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.getInstance(element) || new this(element, _typeof(config) === 'object' ? config : null);
    }
  }, {
    key: "VERSION",
    get: function get() {
      return VERSION;
    }
  }, {
    key: "NAME",
    get: function get() {
      throw new Error('You have to implement the static method "NAME", for each component!');
    }
  }, {
    key: "DATA_KEY",
    get: function get() {
      return "bs.".concat(this.NAME);
    }
  }, {
    key: "EVENT_KEY",
    get: function get() {
      return ".".concat(this.DATA_KEY);
    }
  }]);

  return BaseComponent;
}();
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/component-functions.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */


var enableDismissTrigger = function enableDismissTrigger(component) {
  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hide';
  var clickEvent = "click.dismiss".concat(component.EVENT_KEY);
  var name = component.NAME;
  EventHandler.on(document, clickEvent, "[data-bs-dismiss=\"".concat(name, "\"]"), function (event) {
    if (['A', 'AREA'].includes(this.tagName)) {
      event.preventDefault();
    }

    if (isDisabled(this)) {
      return;
    }

    var target = getElementFromSelector(this) || this.closest(".".concat(name));
    var instance = component.getOrCreateInstance(target); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method

    instance[method]();
  });
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): alert.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */


var NAME$d = 'alert';
var DATA_KEY$c = 'bs.alert';
var EVENT_KEY$c = ".".concat(DATA_KEY$c);
var EVENT_CLOSE = "close".concat(EVENT_KEY$c);
var EVENT_CLOSED = "closed".concat(EVENT_KEY$c);
var CLASS_NAME_FADE$5 = 'fade';
var CLASS_NAME_SHOW$8 = 'show';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Alert = /*#__PURE__*/function (_BaseComponent) {
  _inherits(Alert, _BaseComponent);

  var _super = _createSuper(Alert);

  function Alert() {
    _classCallCheck(this, Alert);

    return _super.apply(this, arguments);
  }

  _createClass(Alert, [{
    key: "close",
    value: // Public
    function close() {
      var _this2 = this;

      var closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);

      if (closeEvent.defaultPrevented) {
        return;
      }

      this._element.classList.remove(CLASS_NAME_SHOW$8);

      var isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);

      this._queueCallback(function () {
        return _this2._destroyElement();
      }, this._element, isAnimated);
    } // Private

  }, {
    key: "_destroyElement",
    value: function _destroyElement() {
      this._element.remove();

      EventHandler.trigger(this._element, EVENT_CLOSED);
      this.dispose();
    } // Static

  }], [{
    key: "NAME",
    get: // Getters
    function get() {
      return NAME$d;
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config) {
      return this.each(function () {
        var data = Alert.getOrCreateInstance(this);

        if (typeof config !== 'string') {
          return;
        }

        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
          throw new TypeError("No method named \"".concat(config, "\""));
        }

        data[config](this);
      });
    }
  }]);

  return Alert;
}(BaseComponent);
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


enableDismissTrigger(Alert, 'close');
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Alert to jQuery only if jQuery is present
 */

defineJQueryPlugin(Alert);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): button.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME$c = 'button';
var DATA_KEY$b = 'bs.button';
var EVENT_KEY$b = ".".concat(DATA_KEY$b);
var DATA_API_KEY$7 = '.data-api';
var CLASS_NAME_ACTIVE$3 = 'active';
var SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
var EVENT_CLICK_DATA_API$6 = "click".concat(EVENT_KEY$b).concat(DATA_API_KEY$7);
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Button = /*#__PURE__*/function (_BaseComponent2) {
  _inherits(Button, _BaseComponent2);

  var _super2 = _createSuper(Button);

  function Button() {
    _classCallCheck(this, Button);

    return _super2.apply(this, arguments);
  }

  _createClass(Button, [{
    key: "toggle",
    value: // Public
    function toggle() {
      // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
      this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
    } // Static

  }], [{
    key: "NAME",
    get: // Getters
    function get() {
      return NAME$c;
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config) {
      return this.each(function () {
        var data = Button.getOrCreateInstance(this);

        if (config === 'toggle') {
          data[config]();
        }
      });
    }
  }]);

  return Button;
}(BaseComponent);
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, function (event) {
  event.preventDefault();
  var button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
  var data = Button.getOrCreateInstance(button);
  data.toggle();
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Button to jQuery only if jQuery is present
 */

defineJQueryPlugin(Button);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): dom/manipulator.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

function normalizeData(val) {
  if (val === 'true') {
    return true;
  }

  if (val === 'false') {
    return false;
  }

  if (val === Number(val).toString()) {
    return Number(val);
  }

  if (val === '' || val === 'null') {
    return null;
  }

  return val;
}

function normalizeDataKey(key) {
  return key.replace(/[A-Z]/g, function (chr) {
    return "-".concat(chr.toLowerCase());
  });
}

var Manipulator = {
  setDataAttribute: function setDataAttribute(element, key, value) {
    element.setAttribute("data-bs-".concat(normalizeDataKey(key)), value);
  },
  removeDataAttribute: function removeDataAttribute(element, key) {
    element.removeAttribute("data-bs-".concat(normalizeDataKey(key)));
  },
  getDataAttributes: function getDataAttributes(element) {
    if (!element) {
      return {};
    }

    var attributes = {};
    Object.keys(element.dataset).filter(function (key) {
      return key.startsWith('bs');
    }).forEach(function (key) {
      var pureKey = key.replace(/^bs/, '');
      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
      attributes[pureKey] = normalizeData(element.dataset[key]);
    });
    return attributes;
  },
  getDataAttribute: function getDataAttribute(element, key) {
    return normalizeData(element.getAttribute("data-bs-".concat(normalizeDataKey(key))));
  },
  offset: function offset(element) {
    var rect = element.getBoundingClientRect();
    return {
      top: rect.top + window.pageYOffset,
      left: rect.left + window.pageXOffset
    };
  },
  position: function position(element) {
    return {
      top: element.offsetTop,
      left: element.offsetLeft
    };
  }
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): dom/selector-engine.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

var NODE_TEXT = 3;
var SelectorEngine = {
  find: function find(selector) {
    var _ref2;

    var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
    return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(Element.prototype.querySelectorAll.call(element, selector)));
  },
  findOne: function findOne(selector) {
    var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
    return Element.prototype.querySelector.call(element, selector);
  },
  children: function children(element, selector) {
    var _ref3;

    return (_ref3 = []).concat.apply(_ref3, _toConsumableArray(element.children)).filter(function (child) {
      return child.matches(selector);
    });
  },
  parents: function parents(element, selector) {
    var parents = [];
    var ancestor = element.parentNode;

    while (ancestor && ancestor.nodeType === Node.ELEMENT_NODE && ancestor.nodeType !== NODE_TEXT) {
      if (ancestor.matches(selector)) {
        parents.push(ancestor);
      }

      ancestor = ancestor.parentNode;
    }

    return parents;
  },
  prev: function prev(element, selector) {
    var previous = element.previousElementSibling;

    while (previous) {
      if (previous.matches(selector)) {
        return [previous];
      }

      previous = previous.previousElementSibling;
    }

    return [];
  },
  next: function next(element, selector) {
    var next = element.nextElementSibling;

    while (next) {
      if (next.matches(selector)) {
        return [next];
      }

      next = next.nextElementSibling;
    }

    return [];
  },
  focusableChildren: function focusableChildren(element) {
    var focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable="true"]'].map(function (selector) {
      return "".concat(selector, ":not([tabindex^=\"-\"])");
    }).join(', ');
    return this.find(focusables, element).filter(function (el) {
      return !isDisabled(el) && isVisible(el);
    });
  }
};
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): carousel.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME$b = 'carousel';
var DATA_KEY$a = 'bs.carousel';
var EVENT_KEY$a = ".".concat(DATA_KEY$a);
var DATA_API_KEY$6 = '.data-api';
var ARROW_LEFT_KEY = 'ArrowLeft';
var ARROW_RIGHT_KEY = 'ArrowRight';
var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

var SWIPE_THRESHOLD = 40;
var Default$a = {
  interval: 5000,
  keyboard: true,
  slide: false,
  pause: 'hover',
  wrap: true,
  touch: true
};
var DefaultType$a = {
  interval: '(number|boolean)',
  keyboard: 'boolean',
  slide: '(boolean|string)',
  pause: '(string|boolean)',
  wrap: 'boolean',
  touch: 'boolean'
};
var ORDER_NEXT = 'next';
var ORDER_PREV = 'prev';
var DIRECTION_LEFT = 'left';
var DIRECTION_RIGHT = 'right';
var KEY_TO_DIRECTION = (_KEY_TO_DIRECTION = {}, _defineProperty(_KEY_TO_DIRECTION, ARROW_LEFT_KEY, DIRECTION_RIGHT), _defineProperty(_KEY_TO_DIRECTION, ARROW_RIGHT_KEY, DIRECTION_LEFT), _KEY_TO_DIRECTION);
var EVENT_SLIDE = "slide".concat(EVENT_KEY$a);
var EVENT_SLID = "slid".concat(EVENT_KEY$a);
var EVENT_KEYDOWN = "keydown".concat(EVENT_KEY$a);
var EVENT_MOUSEENTER = "mouseenter".concat(EVENT_KEY$a);
var EVENT_MOUSELEAVE = "mouseleave".concat(EVENT_KEY$a);
var EVENT_TOUCHSTART = "touchstart".concat(EVENT_KEY$a);
var EVENT_TOUCHMOVE = "touchmove".concat(EVENT_KEY$a);
var EVENT_TOUCHEND = "touchend".concat(EVENT_KEY$a);
var EVENT_POINTERDOWN = "pointerdown".concat(EVENT_KEY$a);
var EVENT_POINTERUP = "pointerup".concat(EVENT_KEY$a);
var EVENT_DRAG_START = "dragstart".concat(EVENT_KEY$a);
var EVENT_LOAD_DATA_API$2 = "load".concat(EVENT_KEY$a).concat(DATA_API_KEY$6);
var EVENT_CLICK_DATA_API$5 = "click".concat(EVENT_KEY$a).concat(DATA_API_KEY$6);
var CLASS_NAME_CAROUSEL = 'carousel';
var CLASS_NAME_ACTIVE$2 = 'active';
var CLASS_NAME_SLIDE = 'slide';
var CLASS_NAME_END = 'carousel-item-end';
var CLASS_NAME_START = 'carousel-item-start';
var CLASS_NAME_NEXT = 'carousel-item-next';
var CLASS_NAME_PREV = 'carousel-item-prev';
var CLASS_NAME_POINTER_EVENT = 'pointer-event';
var SELECTOR_ACTIVE$1 = '.active';
var SELECTOR_ACTIVE_ITEM = '.active.carousel-item';
var SELECTOR_ITEM = '.carousel-item';
var SELECTOR_ITEM_IMG = '.carousel-item img';
var SELECTOR_NEXT_PREV = '.carousel-item-next, .carousel-item-prev';
var SELECTOR_INDICATORS = '.carousel-indicators';
var SELECTOR_INDICATOR = '[data-bs-target]';
var SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';
var SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
var POINTER_TYPE_TOUCH = 'touch';
var POINTER_TYPE_PEN = 'pen';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Carousel = /*#__PURE__*/function (_BaseComponent3) {
  _inherits(Carousel, _BaseComponent3);

  var _super3 = _createSuper(Carousel);

  function Carousel(element, config) {
    var _this3;

    _classCallCheck(this, Carousel);

    _this3 = _super3.call(this, element);
    _this3._items = null;
    _this3._interval = null;
    _this3._activeElement = null;
    _this3._isPaused = false;
    _this3._isSliding = false;
    _this3.touchTimeout = null;
    _this3.touchStartX = 0;
    _this3.touchDeltaX = 0;
    _this3._config = _this3._getConfig(config);
    _this3._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, _this3._element);
    _this3._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
    _this3._pointerEvent = Boolean(window.PointerEvent);

    _this3._addEventListeners();

    return _this3;
  } // Getters


  _createClass(Carousel, [{
    key: "next",
    value: // Public
    function next() {
      this._slide(ORDER_NEXT);
    }
  }, {
    key: "nextWhenVisible",
    value: function nextWhenVisible() {
      // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible
      if (!document.hidden && isVisible(this._element)) {
        this.next();
      }
    }
  }, {
    key: "prev",
    value: function prev() {
      this._slide(ORDER_PREV);
    }
  }, {
    key: "pause",
    value: function pause(event) {
      if (!event) {
        this._isPaused = true;
      }

      if (SelectorEngine.findOne(SELECTOR_NEXT_PREV, this._element)) {
        triggerTransitionEnd(this._element);
        this.cycle(true);
      }

      clearInterval(this._interval);
      this._interval = null;
    }
  }, {
    key: "cycle",
    value: function cycle(event) {
      if (!event) {
        this._isPaused = false;
      }

      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }

      if (this._config && this._config.interval && !this._isPaused) {
        this._updateInterval();

        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    }
  }, {
    key: "to",
    value: function to(index) {
      var _this4 = this;

      this._activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

      var activeIndex = this._getItemIndex(this._activeElement);

      if (index > this._items.length - 1 || index < 0) {
        return;
      }

      if (this._isSliding) {
        EventHandler.one(this._element, EVENT_SLID, function () {
          return _this4.to(index);
        });
        return;
      }

      if (activeIndex === index) {
        this.pause();
        this.cycle();
        return;
      }

      var order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;

      this._slide(order, this._items[index]);
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread(_objectSpread({}, Default$a), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' ? config : {});
      typeCheckConfig(NAME$b, config, DefaultType$a);
      return config;
    }
  }, {
    key: "_handleSwipe",
    value: function _handleSwipe() {
      var absDeltax = Math.abs(this.touchDeltaX);

      if (absDeltax <= SWIPE_THRESHOLD) {
        return;
      }

      var direction = absDeltax / this.touchDeltaX;
      this.touchDeltaX = 0;

      if (!direction) {
        return;
      }

      this._slide(direction > 0 ? DIRECTION_RIGHT : DIRECTION_LEFT);
    }
  }, {
    key: "_addEventListeners",
    value: function _addEventListeners() {
      var _this5 = this;

      if (this._config.keyboard) {
        EventHandler.on(this._element, EVENT_KEYDOWN, function (event) {
          return _this5._keydown(event);
        });
      }

      if (this._config.pause === 'hover') {
        EventHandler.on(this._element, EVENT_MOUSEENTER, function (event) {
          return _this5.pause(event);
        });
        EventHandler.on(this._element, EVENT_MOUSELEAVE, function (event) {
          return _this5.cycle(event);
        });
      }

      if (this._config.touch && this._touchSupported) {
        this._addTouchEventListeners();
      }
    }
  }, {
    key: "_addTouchEventListeners",
    value: function _addTouchEventListeners() {
      var _this6 = this;

      var hasPointerPenTouch = function hasPointerPenTouch(event) {
        return _this6._pointerEvent && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
      };

      var start = function start(event) {
        if (hasPointerPenTouch(event)) {
          _this6.touchStartX = event.clientX;
        } else if (!_this6._pointerEvent) {
          _this6.touchStartX = event.touches[0].clientX;
        }
      };

      var move = function move(event) {
        // ensure swiping with one touch and not pinching
        _this6.touchDeltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - _this6.touchStartX;
      };

      var end = function end(event) {
        if (hasPointerPenTouch(event)) {
          _this6.touchDeltaX = event.clientX - _this6.touchStartX;
        }

        _this6._handleSwipe();

        if (_this6._config.pause === 'hover') {
          // If it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling
          _this6.pause();

          if (_this6.touchTimeout) {
            clearTimeout(_this6.touchTimeout);
          }

          _this6.touchTimeout = setTimeout(function (event) {
            return _this6.cycle(event);
          }, TOUCHEVENT_COMPAT_WAIT + _this6._config.interval);
        }
      };

      SelectorEngine.find(SELECTOR_ITEM_IMG, this._element).forEach(function (itemImg) {
        EventHandler.on(itemImg, EVENT_DRAG_START, function (event) {
          return event.preventDefault();
        });
      });

      if (this._pointerEvent) {
        EventHandler.on(this._element, EVENT_POINTERDOWN, function (event) {
          return start(event);
        });
        EventHandler.on(this._element, EVENT_POINTERUP, function (event) {
          return end(event);
        });

        this._element.classList.add(CLASS_NAME_POINTER_EVENT);
      } else {
        EventHandler.on(this._element, EVENT_TOUCHSTART, function (event) {
          return start(event);
        });
        EventHandler.on(this._element, EVENT_TOUCHMOVE, function (event) {
          return move(event);
        });
        EventHandler.on(this._element, EVENT_TOUCHEND, function (event) {
          return end(event);
        });
      }
    }
  }, {
    key: "_keydown",
    value: function _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }

      var direction = KEY_TO_DIRECTION[event.key];

      if (direction) {
        event.preventDefault();

        this._slide(direction);
      }
    }
  }, {
    key: "_getItemIndex",
    value: function _getItemIndex(element) {
      this._items = element && element.parentNode ? SelectorEngine.find(SELECTOR_ITEM, element.parentNode) : [];
      return this._items.indexOf(element);
    }
  }, {
    key: "_getItemByOrder",
    value: function _getItemByOrder(order, activeElement) {
      var isNext = order === ORDER_NEXT;
      return getNextActiveElement(this._items, activeElement, isNext, this._config.wrap);
    }
  }, {
    key: "_triggerSlideEvent",
    value: function _triggerSlideEvent(relatedTarget, eventDirectionName) {
      var targetIndex = this._getItemIndex(relatedTarget);

      var fromIndex = this._getItemIndex(SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element));

      return EventHandler.trigger(this._element, EVENT_SLIDE, {
        relatedTarget: relatedTarget,
        direction: eventDirectionName,
        from: fromIndex,
        to: targetIndex
      });
    }
  }, {
    key: "_setActiveIndicatorElement",
    value: function _setActiveIndicatorElement(element) {
      if (this._indicatorsElement) {
        var activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE$1, this._indicatorsElement);
        activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
        activeIndicator.removeAttribute('aria-current');
        var indicators = SelectorEngine.find(SELECTOR_INDICATOR, this._indicatorsElement);

        for (var i = 0; i < indicators.length; i++) {
          if (Number.parseInt(indicators[i].getAttribute('data-bs-slide-to'), 10) === this._getItemIndex(element)) {
            indicators[i].classList.add(CLASS_NAME_ACTIVE$2);
            indicators[i].setAttribute('aria-current', 'true');
            break;
          }
        }
      }
    }
  }, {
    key: "_updateInterval",
    value: function _updateInterval() {
      var element = this._activeElement || SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

      if (!element) {
        return;
      }

      var elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);

      if (elementInterval) {
        this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
        this._config.interval = elementInterval;
      } else {
        this._config.interval = this._config.defaultInterval || this._config.interval;
      }
    }
  }, {
    key: "_slide",
    value: function _slide(directionOrOrder, element) {
      var _this7 = this;

      var order = this._directionToOrder(directionOrOrder);

      var activeElement = SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);

      var activeElementIndex = this._getItemIndex(activeElement);

      var nextElement = element || this._getItemByOrder(order, activeElement);

      var nextElementIndex = this._getItemIndex(nextElement);

      var isCycling = Boolean(this._interval);
      var isNext = order === ORDER_NEXT;
      var directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
      var orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;

      var eventDirectionName = this._orderToDirection(order);

      if (nextElement && nextElement.classList.contains(CLASS_NAME_ACTIVE$2)) {
        this._isSliding = false;
        return;
      }

      if (this._isSliding) {
        return;
      }

      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

      if (slideEvent.defaultPrevented) {
        return;
      }

      if (!activeElement || !nextElement) {
        // Some weirdness is happening, so we bail
        return;
      }

      this._isSliding = true;

      if (isCycling) {
        this.pause();
      }

      this._setActiveIndicatorElement(nextElement);

      this._activeElement = nextElement;

      var triggerSlidEvent = function triggerSlidEvent() {
        EventHandler.trigger(_this7._element, EVENT_SLID, {
          relatedTarget: nextElement,
          direction: eventDirectionName,
          from: activeElementIndex,
          to: nextElementIndex
        });
      };

      if (this._element.classList.contains(CLASS_NAME_SLIDE)) {
        nextElement.classList.add(orderClassName);
        reflow(nextElement);
        activeElement.classList.add(directionalClassName);
        nextElement.classList.add(directionalClassName);

        var completeCallBack = function completeCallBack() {
          nextElement.classList.remove(directionalClassName, orderClassName);
          nextElement.classList.add(CLASS_NAME_ACTIVE$2);
          activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
          _this7._isSliding = false;
          setTimeout(triggerSlidEvent, 0);
        };

        this._queueCallback(completeCallBack, activeElement, true);
      } else {
        activeElement.classList.remove(CLASS_NAME_ACTIVE$2);
        nextElement.classList.add(CLASS_NAME_ACTIVE$2);
        this._isSliding = false;
        triggerSlidEvent();
      }

      if (isCycling) {
        this.cycle();
      }
    }
  }, {
    key: "_directionToOrder",
    value: function _directionToOrder(direction) {
      if (![DIRECTION_RIGHT, DIRECTION_LEFT].includes(direction)) {
        return direction;
      }

      if (isRTL()) {
        return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
      }

      return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
    }
  }, {
    key: "_orderToDirection",
    value: function _orderToDirection(order) {
      if (![ORDER_NEXT, ORDER_PREV].includes(order)) {
        return order;
      }

      if (isRTL()) {
        return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
      }

      return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
    } // Static

  }], [{
    key: "Default",
    get: function get() {
      return Default$a;
    }
  }, {
    key: "NAME",
    get: function get() {
      return NAME$b;
    }
  }, {
    key: "carouselInterface",
    value: function carouselInterface(element, config) {
      var data = Carousel.getOrCreateInstance(element, config);
      var _config = data._config;

      if (_typeof(config) === 'object') {
        _config = _objectSpread(_objectSpread({}, _config), config);
      }

      var action = typeof config === 'string' ? config : _config.slide;

      if (typeof config === 'number') {
        data.to(config);
      } else if (typeof action === 'string') {
        if (typeof data[action] === 'undefined') {
          throw new TypeError("No method named \"".concat(action, "\""));
        }

        data[action]();
      } else if (_config.interval && _config.ride) {
        data.pause();
        data.cycle();
      }
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config) {
      return this.each(function () {
        Carousel.carouselInterface(this, config);
      });
    }
  }, {
    key: "dataApiClickHandler",
    value: function dataApiClickHandler(event) {
      var target = getElementFromSelector(this);

      if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
        return;
      }

      var config = _objectSpread(_objectSpread({}, Manipulator.getDataAttributes(target)), Manipulator.getDataAttributes(this));

      var slideIndex = this.getAttribute('data-bs-slide-to');

      if (slideIndex) {
        config.interval = false;
      }

      Carousel.carouselInterface(target, config);

      if (slideIndex) {
        Carousel.getInstance(target).to(slideIndex);
      }

      event.preventDefault();
    }
  }]);

  return Carousel;
}(BaseComponent);
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, Carousel.dataApiClickHandler);
EventHandler.on(window, EVENT_LOAD_DATA_API$2, function () {
  var carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);

  for (var i = 0, len = carousels.length; i < len; i++) {
    Carousel.carouselInterface(carousels[i], Carousel.getInstance(carousels[i]));
  }
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Carousel to jQuery only if jQuery is present
 */

defineJQueryPlugin(Carousel);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): collapse.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME$a = 'collapse';
var DATA_KEY$9 = 'bs.collapse';
var EVENT_KEY$9 = ".".concat(DATA_KEY$9);
var DATA_API_KEY$5 = '.data-api';
var Default$9 = {
  toggle: true,
  parent: null
};
var DefaultType$9 = {
  toggle: 'boolean',
  parent: '(null|element)'
};
var EVENT_SHOW$5 = "show".concat(EVENT_KEY$9);
var EVENT_SHOWN$5 = "shown".concat(EVENT_KEY$9);
var EVENT_HIDE$5 = "hide".concat(EVENT_KEY$9);
var EVENT_HIDDEN$5 = "hidden".concat(EVENT_KEY$9);
var EVENT_CLICK_DATA_API$4 = "click".concat(EVENT_KEY$9).concat(DATA_API_KEY$5);
var CLASS_NAME_SHOW$7 = 'show';
var CLASS_NAME_COLLAPSE = 'collapse';
var CLASS_NAME_COLLAPSING = 'collapsing';
var CLASS_NAME_COLLAPSED = 'collapsed';
var CLASS_NAME_DEEPER_CHILDREN = ":scope .".concat(CLASS_NAME_COLLAPSE, " .").concat(CLASS_NAME_COLLAPSE);
var CLASS_NAME_HORIZONTAL = 'collapse-horizontal';
var WIDTH = 'width';
var HEIGHT = 'height';
var SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';
var SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Collapse = /*#__PURE__*/function (_BaseComponent4) {
  _inherits(Collapse, _BaseComponent4);

  var _super4 = _createSuper(Collapse);

  function Collapse(element, config) {
    var _this8;

    _classCallCheck(this, Collapse);

    _this8 = _super4.call(this, element);
    _this8._isTransitioning = false;
    _this8._config = _this8._getConfig(config);
    _this8._triggerArray = [];
    var toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);

    for (var i = 0, len = toggleList.length; i < len; i++) {
      var elem = toggleList[i];
      var selector = getSelectorFromElement(elem);
      var filterElement = SelectorEngine.find(selector).filter(function (foundElem) {
        return foundElem === _this8._element;
      });

      if (selector !== null && filterElement.length) {
        _this8._selector = selector;

        _this8._triggerArray.push(elem);
      }
    }

    _this8._initializeChildren();

    if (!_this8._config.parent) {
      _this8._addAriaAndCollapsedClass(_this8._triggerArray, _this8._isShown());
    }

    if (_this8._config.toggle) {
      _this8.toggle();
    }

    return _this8;
  } // Getters


  _createClass(Collapse, [{
    key: "toggle",
    value: // Public
    function toggle() {
      if (this._isShown()) {
        this.hide();
      } else {
        this.show();
      }
    }
  }, {
    key: "show",
    value: function show() {
      var _this9 = this;

      if (this._isTransitioning || this._isShown()) {
        return;
      }

      var actives = [];
      var activesData;

      if (this._config.parent) {
        var children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
        actives = SelectorEngine.find(SELECTOR_ACTIVES, this._config.parent).filter(function (elem) {
          return !children.includes(elem);
        }); // remove children if greater depth
      }

      var container = SelectorEngine.findOne(this._selector);

      if (actives.length) {
        var tempActiveData = actives.find(function (elem) {
          return container !== elem;
        });
        activesData = tempActiveData ? Collapse.getInstance(tempActiveData) : null;

        if (activesData && activesData._isTransitioning) {
          return;
        }
      }

      var startEvent = EventHandler.trigger(this._element, EVENT_SHOW$5);

      if (startEvent.defaultPrevented) {
        return;
      }

      actives.forEach(function (elemActive) {
        if (container !== elemActive) {
          Collapse.getOrCreateInstance(elemActive, {
            toggle: false
          }).hide();
        }

        if (!activesData) {
          Data.set(elemActive, DATA_KEY$9, null);
        }
      });

      var dimension = this._getDimension();

      this._element.classList.remove(CLASS_NAME_COLLAPSE);

      this._element.classList.add(CLASS_NAME_COLLAPSING);

      this._element.style[dimension] = 0;

      this._addAriaAndCollapsedClass(this._triggerArray, true);

      this._isTransitioning = true;

      var complete = function complete() {
        _this9._isTransitioning = false;

        _this9._element.classList.remove(CLASS_NAME_COLLAPSING);

        _this9._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

        _this9._element.style[dimension] = '';
        EventHandler.trigger(_this9._element, EVENT_SHOWN$5);
      };

      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      var scrollSize = "scroll".concat(capitalizedDimension);

      this._queueCallback(complete, this._element, true);

      this._element.style[dimension] = "".concat(this._element[scrollSize], "px");
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this10 = this;

      if (this._isTransitioning || !this._isShown()) {
        return;
      }

      var startEvent = EventHandler.trigger(this._element, EVENT_HIDE$5);

      if (startEvent.defaultPrevented) {
        return;
      }

      var dimension = this._getDimension();

      this._element.style[dimension] = "".concat(this._element.getBoundingClientRect()[dimension], "px");
      reflow(this._element);

      this._element.classList.add(CLASS_NAME_COLLAPSING);

      this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);

      var triggerArrayLength = this._triggerArray.length;

      for (var i = 0; i < triggerArrayLength; i++) {
        var trigger = this._triggerArray[i];
        var elem = getElementFromSelector(trigger);

        if (elem && !this._isShown(elem)) {
          this._addAriaAndCollapsedClass([trigger], false);
        }
      }

      this._isTransitioning = true;

      var complete = function complete() {
        _this10._isTransitioning = false;

        _this10._element.classList.remove(CLASS_NAME_COLLAPSING);

        _this10._element.classList.add(CLASS_NAME_COLLAPSE);

        EventHandler.trigger(_this10._element, EVENT_HIDDEN$5);
      };

      this._element.style[dimension] = '';

      this._queueCallback(complete, this._element, true);
    }
  }, {
    key: "_isShown",
    value: function _isShown() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._element;
      return element.classList.contains(CLASS_NAME_SHOW$7);
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread(_objectSpread({}, Default$9), Manipulator.getDataAttributes(this._element)), config);
      config.toggle = Boolean(config.toggle); // Coerce string values

      config.parent = getElement(config.parent);
      typeCheckConfig(NAME$a, config, DefaultType$9);
      return config;
    }
  }, {
    key: "_getDimension",
    value: function _getDimension() {
      return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
    }
  }, {
    key: "_initializeChildren",
    value: function _initializeChildren() {
      var _this11 = this;

      if (!this._config.parent) {
        return;
      }

      var children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
      SelectorEngine.find(SELECTOR_DATA_TOGGLE$4, this._config.parent).filter(function (elem) {
        return !children.includes(elem);
      }).forEach(function (element) {
        var selected = getElementFromSelector(element);

        if (selected) {
          _this11._addAriaAndCollapsedClass([element], _this11._isShown(selected));
        }
      });
    }
  }, {
    key: "_addAriaAndCollapsedClass",
    value: function _addAriaAndCollapsedClass(triggerArray, isOpen) {
      if (!triggerArray.length) {
        return;
      }

      triggerArray.forEach(function (elem) {
        if (isOpen) {
          elem.classList.remove(CLASS_NAME_COLLAPSED);
        } else {
          elem.classList.add(CLASS_NAME_COLLAPSED);
        }

        elem.setAttribute('aria-expanded', isOpen);
      });
    } // Static

  }], [{
    key: "Default",
    get: function get() {
      return Default$9;
    }
  }, {
    key: "NAME",
    get: function get() {
      return NAME$a;
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config) {
      return this.each(function () {
        var _config = {};

        if (typeof config === 'string' && /show|hide/.test(config)) {
          _config.toggle = false;
        }

        var data = Collapse.getOrCreateInstance(this, _config);

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        }
      });
    }
  }]);

  return Collapse;
}(BaseComponent);
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {
  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
  if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {
    event.preventDefault();
  }

  var selector = getSelectorFromElement(this);
  var selectorElements = SelectorEngine.find(selector);
  selectorElements.forEach(function (element) {
    Collapse.getOrCreateInstance(element, {
      toggle: false
    }).toggle();
  });
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Collapse to jQuery only if jQuery is present
 */

defineJQueryPlugin(Collapse);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): dropdown.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME$9 = 'dropdown';
var DATA_KEY$8 = 'bs.dropdown';
var EVENT_KEY$8 = ".".concat(DATA_KEY$8);
var DATA_API_KEY$4 = '.data-api';
var ESCAPE_KEY$2 = 'Escape';
var SPACE_KEY = 'Space';
var TAB_KEY$1 = 'Tab';
var ARROW_UP_KEY = 'ArrowUp';
var ARROW_DOWN_KEY = 'ArrowDown';
var RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button

var REGEXP_KEYDOWN = new RegExp("".concat(ARROW_UP_KEY, "|").concat(ARROW_DOWN_KEY, "|").concat(ESCAPE_KEY$2));
var EVENT_HIDE$4 = "hide".concat(EVENT_KEY$8);
var EVENT_HIDDEN$4 = "hidden".concat(EVENT_KEY$8);
var EVENT_SHOW$4 = "show".concat(EVENT_KEY$8);
var EVENT_SHOWN$4 = "shown".concat(EVENT_KEY$8);
var EVENT_CLICK_DATA_API$3 = "click".concat(EVENT_KEY$8).concat(DATA_API_KEY$4);
var EVENT_KEYDOWN_DATA_API = "keydown".concat(EVENT_KEY$8).concat(DATA_API_KEY$4);
var EVENT_KEYUP_DATA_API = "keyup".concat(EVENT_KEY$8).concat(DATA_API_KEY$4);
var CLASS_NAME_SHOW$6 = 'show';
var CLASS_NAME_DROPUP = 'dropup';
var CLASS_NAME_DROPEND = 'dropend';
var CLASS_NAME_DROPSTART = 'dropstart';
var CLASS_NAME_NAVBAR = 'navbar';
var SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]';
var SELECTOR_MENU = '.dropdown-menu';
var SELECTOR_NAVBAR_NAV = '.navbar-nav';
var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';
var PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
var PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
var PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
var PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
var PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
var PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
var Default$8 = {
  offset: [0, 2],
  boundary: 'clippingParents',
  reference: 'toggle',
  display: 'dynamic',
  popperConfig: null,
  autoClose: true
};
var DefaultType$8 = {
  offset: '(array|string|function)',
  boundary: '(string|element)',
  reference: '(string|element|object)',
  display: 'string',
  popperConfig: '(null|object|function)',
  autoClose: '(boolean|string)'
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Dropdown = /*#__PURE__*/function (_BaseComponent5) {
  _inherits(Dropdown, _BaseComponent5);

  var _super5 = _createSuper(Dropdown);

  function Dropdown(element, config) {
    var _this12;

    _classCallCheck(this, Dropdown);

    _this12 = _super5.call(this, element);
    _this12._popper = null;
    _this12._config = _this12._getConfig(config);
    _this12._menu = _this12._getMenuElement();
    _this12._inNavbar = _this12._detectNavbar();
    return _this12;
  } // Getters


  _createClass(Dropdown, [{
    key: "toggle",
    value: // Public
    function toggle() {
      return this._isShown() ? this.hide() : this.show();
    }
  }, {
    key: "show",
    value: function show() {
      if (isDisabled(this._element) || this._isShown(this._menu)) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, relatedTarget);

      if (showEvent.defaultPrevented) {
        return;
      }

      var parent = Dropdown.getParentFromElement(this._element); // Totally disable Popper for Dropdowns in Navbar

      if (this._inNavbar) {
        Manipulator.setDataAttribute(this._menu, 'popper', 'none');
      } else {
        this._createPopper(parent);
      } // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement && !parent.closest(SELECTOR_NAVBAR_NAV)) {
        var _ref4;

        (_ref4 = []).concat.apply(_ref4, _toConsumableArray(document.body.children)).forEach(function (elem) {
          return EventHandler.on(elem, 'mouseover', noop);
        });
      }

      this._element.focus();

      this._element.setAttribute('aria-expanded', true);

      this._menu.classList.add(CLASS_NAME_SHOW$6);

      this._element.classList.add(CLASS_NAME_SHOW$6);

      EventHandler.trigger(this._element, EVENT_SHOWN$4, relatedTarget);
    }
  }, {
    key: "hide",
    value: function hide() {
      if (isDisabled(this._element) || !this._isShown(this._menu)) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };

      this._completeHide(relatedTarget);
    }
  }, {
    key: "dispose",
    value: function dispose() {
      if (this._popper) {
        this._popper.destroy();
      }

      _get(_getPrototypeOf(Dropdown.prototype), "dispose", this).call(this);
    }
  }, {
    key: "update",
    value: function update() {
      this._inNavbar = this._detectNavbar();

      if (this._popper) {
        this._popper.update();
      }
    } // Private

  }, {
    key: "_completeHide",
    value: function _completeHide(relatedTarget) {
      var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4, relatedTarget);

      if (hideEvent.defaultPrevented) {
        return;
      } // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support


      if ('ontouchstart' in document.documentElement) {
        var _ref5;

        (_ref5 = []).concat.apply(_ref5, _toConsumableArray(document.body.children)).forEach(function (elem) {
          return EventHandler.off(elem, 'mouseover', noop);
        });
      }

      if (this._popper) {
        this._popper.destroy();
      }

      this._menu.classList.remove(CLASS_NAME_SHOW$6);

      this._element.classList.remove(CLASS_NAME_SHOW$6);

      this._element.setAttribute('aria-expanded', 'false');

      Manipulator.removeDataAttribute(this._menu, 'popper');
      EventHandler.trigger(this._element, EVENT_HIDDEN$4, relatedTarget);
    }
  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), Manipulator.getDataAttributes(this._element)), config);
      typeCheckConfig(NAME$9, config, this.constructor.DefaultType);

      if (_typeof(config.reference) === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {
        // Popper virtual elements require a getBoundingClientRect method
        throw new TypeError("".concat(NAME$9.toUpperCase(), ": Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method."));
      }

      return config;
    }
  }, {
    key: "_createPopper",
    value: function _createPopper(parent) {
      if (typeof _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ === 'undefined') {
        throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)');
      }

      var referenceElement = this._element;

      if (this._config.reference === 'parent') {
        referenceElement = parent;
      } else if (isElement(this._config.reference)) {
        referenceElement = getElement(this._config.reference);
      } else if (_typeof(this._config.reference) === 'object') {
        referenceElement = this._config.reference;
      }

      var popperConfig = this._getPopperConfig();

      var isDisplayStatic = popperConfig.modifiers.find(function (modifier) {
        return modifier.name === 'applyStyles' && modifier.enabled === false;
      });
      this._popper = _popperjs_core__WEBPACK_IMPORTED_MODULE_0__["createPopper"](referenceElement, this._menu, popperConfig);

      if (isDisplayStatic) {
        Manipulator.setDataAttribute(this._menu, 'popper', 'static');
      }
    }
  }, {
    key: "_isShown",
    value: function _isShown() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._element;
      return element.classList.contains(CLASS_NAME_SHOW$6);
    }
  }, {
    key: "_getMenuElement",
    value: function _getMenuElement() {
      return SelectorEngine.next(this._element, SELECTOR_MENU)[0];
    }
  }, {
    key: "_getPlacement",
    value: function _getPlacement() {
      var parentDropdown = this._element.parentNode;

      if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
        return PLACEMENT_RIGHT;
      }

      if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
        return PLACEMENT_LEFT;
      } // We need to trim the value because custom properties can also include spaces


      var isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';

      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
        return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
      }

      return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
    }
  }, {
    key: "_detectNavbar",
    value: function _detectNavbar() {
      return this._element.closest(".".concat(CLASS_NAME_NAVBAR)) !== null;
    }
  }, {
    key: "_getOffset",
    value: function _getOffset() {
      var _this13 = this;

      var offset = this._config.offset;

      if (typeof offset === 'string') {
        return offset.split(',').map(function (val) {
          return Number.parseInt(val, 10);
        });
      }

      if (typeof offset === 'function') {
        return function (popperData) {
          return offset(popperData, _this13._element);
        };
      }

      return offset;
    }
  }, {
    key: "_getPopperConfig",
    value: function _getPopperConfig() {
      var defaultBsPopperConfig = {
        placement: this._getPlacement(),
        modifiers: [{
          name: 'preventOverflow',
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: 'offset',
          options: {
            offset: this._getOffset()
          }
        }]
      }; // Disable Popper if we have a static display

      if (this._config.display === 'static') {
        defaultBsPopperConfig.modifiers = [{
          name: 'applyStyles',
          enabled: false
        }];
      }

      return _objectSpread(_objectSpread({}, defaultBsPopperConfig), typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig);
    }
  }, {
    key: "_selectMenuItem",
    value: function _selectMenuItem(_ref6) {
      var key = _ref6.key,
          target = _ref6.target;
      var items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(isVisible);

      if (!items.length) {
        return;
      } // if target isn't included in items (e.g. when expanding the dropdown)
      // allow cycling to get the last item in case key equals ARROW_UP_KEY


      getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();
    } // Static

  }], [{
    key: "Default",
    get: function get() {
      return Default$8;
    }
  }, {
    key: "DefaultType",
    get: function get() {
      return DefaultType$8;
    }
  }, {
    key: "NAME",
    get: function get() {
      return NAME$9;
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config) {
      return this.each(function () {
        var data = Dropdown.getOrCreateInstance(this, config);

        if (typeof config !== 'string') {
          return;
        }

        if (typeof data[config] === 'undefined') {
          throw new TypeError("No method named \"".concat(config, "\""));
        }

        data[config]();
      });
    }
  }, {
    key: "clearMenus",
    value: function clearMenus(event) {
      if (event && (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1)) {
        return;
      }

      var toggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE$3);

      for (var i = 0, len = toggles.length; i < len; i++) {
        var context = Dropdown.getInstance(toggles[i]);

        if (!context || context._config.autoClose === false) {
          continue;
        }

        if (!context._isShown()) {
          continue;
        }

        var relatedTarget = {
          relatedTarget: context._element
        };

        if (event) {
          var composedPath = event.composedPath();
          var isMenuTarget = composedPath.includes(context._menu);

          if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {
            continue;
          } // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu


          if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
            continue;
          }

          if (event.type === 'click') {
            relatedTarget.clickEvent = event;
          }
        }

        context._completeHide(relatedTarget);
      }
    }
  }, {
    key: "getParentFromElement",
    value: function getParentFromElement(element) {
      return getElementFromSelector(element) || element.parentNode;
    }
  }, {
    key: "dataApiKeydownHandler",
    value: function dataApiKeydownHandler(event) {
      // If not input/textarea:
      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
      // If input/textarea:
      //  - If space key => not a dropdown command
      //  - If key is other than escape
      //    - If key is not up or down => not a dropdown command
      //    - If trigger inside the menu => not a dropdown command
      if (/input|textarea/i.test(event.target.tagName) ? event.key === SPACE_KEY || event.key !== ESCAPE_KEY$2 && (event.key !== ARROW_DOWN_KEY && event.key !== ARROW_UP_KEY || event.target.closest(SELECTOR_MENU)) : !REGEXP_KEYDOWN.test(event.key)) {
        return;
      }

      var isActive = this.classList.contains(CLASS_NAME_SHOW$6);

      if (!isActive && event.key === ESCAPE_KEY$2) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();

      if (isDisabled(this)) {
        return;
      }

      var getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0];
      var instance = Dropdown.getOrCreateInstance(getToggleButton);

      if (event.key === ESCAPE_KEY$2) {
        instance.hide();
        return;
      }

      if (event.key === ARROW_UP_KEY || event.key === ARROW_DOWN_KEY) {
        if (!isActive) {
          instance.show();
        }

        instance._selectMenuItem(event);

        return;
      }

      if (!isActive || event.key === SPACE_KEY) {
        Dropdown.clearMenus();
      }
    }
  }]);

  return Dropdown;
}(BaseComponent);
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {
  event.preventDefault();
  Dropdown.getOrCreateInstance(this).toggle();
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Dropdown to jQuery only if jQuery is present
 */

defineJQueryPlugin(Dropdown);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/scrollBar.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';
var SELECTOR_STICKY_CONTENT = '.sticky-top';

var ScrollBarHelper = /*#__PURE__*/function () {
  function ScrollBarHelper() {
    _classCallCheck(this, ScrollBarHelper);

    this._element = document.body;
  }

  _createClass(ScrollBarHelper, [{
    key: "getWidth",
    value: function getWidth() {
      // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
      var documentWidth = document.documentElement.clientWidth;
      return Math.abs(window.innerWidth - documentWidth);
    }
  }, {
    key: "hide",
    value: function hide() {
      var width = this.getWidth();

      this._disableOverFlow(); // give padding to element to balance the hidden scrollbar width


      this._setElementAttributes(this._element, 'paddingRight', function (calculatedValue) {
        return calculatedValue + width;
      }); // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth


      this._setElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight', function (calculatedValue) {
        return calculatedValue + width;
      });

      this._setElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight', function (calculatedValue) {
        return calculatedValue - width;
      });
    }
  }, {
    key: "_disableOverFlow",
    value: function _disableOverFlow() {
      this._saveInitialAttribute(this._element, 'overflow');

      this._element.style.overflow = 'hidden';
    }
  }, {
    key: "_setElementAttributes",
    value: function _setElementAttributes(selector, styleProp, callback) {
      var _this14 = this;

      var scrollbarWidth = this.getWidth();

      var manipulationCallBack = function manipulationCallBack(element) {
        if (element !== _this14._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
          return;
        }

        _this14._saveInitialAttribute(element, styleProp);

        var calculatedValue = window.getComputedStyle(element)[styleProp];
        element.style[styleProp] = "".concat(callback(Number.parseFloat(calculatedValue)), "px");
      };

      this._applyManipulationCallback(selector, manipulationCallBack);
    }
  }, {
    key: "reset",
    value: function reset() {
      this._resetElementAttributes(this._element, 'overflow');

      this._resetElementAttributes(this._element, 'paddingRight');

      this._resetElementAttributes(SELECTOR_FIXED_CONTENT, 'paddingRight');

      this._resetElementAttributes(SELECTOR_STICKY_CONTENT, 'marginRight');
    }
  }, {
    key: "_saveInitialAttribute",
    value: function _saveInitialAttribute(element, styleProp) {
      var actualValue = element.style[styleProp];

      if (actualValue) {
        Manipulator.setDataAttribute(element, styleProp, actualValue);
      }
    }
  }, {
    key: "_resetElementAttributes",
    value: function _resetElementAttributes(selector, styleProp) {
      var manipulationCallBack = function manipulationCallBack(element) {
        var value = Manipulator.getDataAttribute(element, styleProp);

        if (typeof value === 'undefined') {
          element.style.removeProperty(styleProp);
        } else {
          Manipulator.removeDataAttribute(element, styleProp);
          element.style[styleProp] = value;
        }
      };

      this._applyManipulationCallback(selector, manipulationCallBack);
    }
  }, {
    key: "_applyManipulationCallback",
    value: function _applyManipulationCallback(selector, callBack) {
      if (isElement(selector)) {
        callBack(selector);
      } else {
        SelectorEngine.find(selector, this._element).forEach(callBack);
      }
    }
  }, {
    key: "isOverflowing",
    value: function isOverflowing() {
      return this.getWidth() > 0;
    }
  }]);

  return ScrollBarHelper;
}();
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/backdrop.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */


var Default$7 = {
  className: 'modal-backdrop',
  isVisible: true,
  // if false, we use the backdrop helper without adding any element to the dom
  isAnimated: false,
  rootElement: 'body',
  // give the choice to place backdrop under different elements
  clickCallback: null
};
var DefaultType$7 = {
  className: 'string',
  isVisible: 'boolean',
  isAnimated: 'boolean',
  rootElement: '(element|string)',
  clickCallback: '(function|null)'
};
var NAME$8 = 'backdrop';
var CLASS_NAME_FADE$4 = 'fade';
var CLASS_NAME_SHOW$5 = 'show';
var EVENT_MOUSEDOWN = "mousedown.bs.".concat(NAME$8);

var Backdrop = /*#__PURE__*/function () {
  function Backdrop(config) {
    _classCallCheck(this, Backdrop);

    this._config = this._getConfig(config);
    this._isAppended = false;
    this._element = null;
  }

  _createClass(Backdrop, [{
    key: "show",
    value: function show(callback) {
      if (!this._config.isVisible) {
        execute(callback);
        return;
      }

      this._append();

      if (this._config.isAnimated) {
        reflow(this._getElement());
      }

      this._getElement().classList.add(CLASS_NAME_SHOW$5);

      this._emulateAnimation(function () {
        execute(callback);
      });
    }
  }, {
    key: "hide",
    value: function hide(callback) {
      var _this15 = this;

      if (!this._config.isVisible) {
        execute(callback);
        return;
      }

      this._getElement().classList.remove(CLASS_NAME_SHOW$5);

      this._emulateAnimation(function () {
        _this15.dispose();

        execute(callback);
      });
    } // Private

  }, {
    key: "_getElement",
    value: function _getElement() {
      if (!this._element) {
        var backdrop = document.createElement('div');
        backdrop.className = this._config.className;

        if (this._config.isAnimated) {
          backdrop.classList.add(CLASS_NAME_FADE$4);
        }

        this._element = backdrop;
      }

      return this._element;
    }
  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread({}, Default$7), _typeof(config) === 'object' ? config : {}); // use getElement() with the default "body" to get a fresh Element on each instantiation

      config.rootElement = getElement(config.rootElement);
      typeCheckConfig(NAME$8, config, DefaultType$7);
      return config;
    }
  }, {
    key: "_append",
    value: function _append() {
      var _this16 = this;

      if (this._isAppended) {
        return;
      }

      this._config.rootElement.append(this._getElement());

      EventHandler.on(this._getElement(), EVENT_MOUSEDOWN, function () {
        execute(_this16._config.clickCallback);
      });
      this._isAppended = true;
    }
  }, {
    key: "dispose",
    value: function dispose() {
      if (!this._isAppended) {
        return;
      }

      EventHandler.off(this._element, EVENT_MOUSEDOWN);

      this._element.remove();

      this._isAppended = false;
    }
  }, {
    key: "_emulateAnimation",
    value: function _emulateAnimation(callback) {
      executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
    }
  }]);

  return Backdrop;
}();
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/focustrap.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */


var Default$6 = {
  trapElement: null,
  // The element to trap focus inside of
  autofocus: true
};
var DefaultType$6 = {
  trapElement: 'element',
  autofocus: 'boolean'
};
var NAME$7 = 'focustrap';
var DATA_KEY$7 = 'bs.focustrap';
var EVENT_KEY$7 = ".".concat(DATA_KEY$7);
var EVENT_FOCUSIN$1 = "focusin".concat(EVENT_KEY$7);
var EVENT_KEYDOWN_TAB = "keydown.tab".concat(EVENT_KEY$7);
var TAB_KEY = 'Tab';
var TAB_NAV_FORWARD = 'forward';
var TAB_NAV_BACKWARD = 'backward';

var FocusTrap = /*#__PURE__*/function () {
  function FocusTrap(config) {
    _classCallCheck(this, FocusTrap);

    this._config = this._getConfig(config);
    this._isActive = false;
    this._lastTabNavDirection = null;
  }

  _createClass(FocusTrap, [{
    key: "activate",
    value: function activate() {
      var _this17 = this;

      var _this$_config = this._config,
          trapElement = _this$_config.trapElement,
          autofocus = _this$_config.autofocus;

      if (this._isActive) {
        return;
      }

      if (autofocus) {
        trapElement.focus();
      }

      EventHandler.off(document, EVENT_KEY$7); // guard against infinite focus loop

      EventHandler.on(document, EVENT_FOCUSIN$1, function (event) {
        return _this17._handleFocusin(event);
      });
      EventHandler.on(document, EVENT_KEYDOWN_TAB, function (event) {
        return _this17._handleKeydown(event);
      });
      this._isActive = true;
    }
  }, {
    key: "deactivate",
    value: function deactivate() {
      if (!this._isActive) {
        return;
      }

      this._isActive = false;
      EventHandler.off(document, EVENT_KEY$7);
    } // Private

  }, {
    key: "_handleFocusin",
    value: function _handleFocusin(event) {
      var target = event.target;
      var trapElement = this._config.trapElement;

      if (target === document || target === trapElement || trapElement.contains(target)) {
        return;
      }

      var elements = SelectorEngine.focusableChildren(trapElement);

      if (elements.length === 0) {
        trapElement.focus();
      } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
        elements[elements.length - 1].focus();
      } else {
        elements[0].focus();
      }
    }
  }, {
    key: "_handleKeydown",
    value: function _handleKeydown(event) {
      if (event.key !== TAB_KEY) {
        return;
      }

      this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
    }
  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread({}, Default$6), _typeof(config) === 'object' ? config : {});
      typeCheckConfig(NAME$7, config, DefaultType$6);
      return config;
    }
  }]);

  return FocusTrap;
}();
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): modal.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */


var NAME$6 = 'modal';
var DATA_KEY$6 = 'bs.modal';
var EVENT_KEY$6 = ".".concat(DATA_KEY$6);
var DATA_API_KEY$3 = '.data-api';
var ESCAPE_KEY$1 = 'Escape';
var Default$5 = {
  backdrop: true,
  keyboard: true,
  focus: true
};
var DefaultType$5 = {
  backdrop: '(boolean|string)',
  keyboard: 'boolean',
  focus: 'boolean'
};
var EVENT_HIDE$3 = "hide".concat(EVENT_KEY$6);
var EVENT_HIDE_PREVENTED = "hidePrevented".concat(EVENT_KEY$6);
var EVENT_HIDDEN$3 = "hidden".concat(EVENT_KEY$6);
var EVENT_SHOW$3 = "show".concat(EVENT_KEY$6);
var EVENT_SHOWN$3 = "shown".concat(EVENT_KEY$6);
var EVENT_RESIZE = "resize".concat(EVENT_KEY$6);
var EVENT_CLICK_DISMISS = "click.dismiss".concat(EVENT_KEY$6);
var EVENT_KEYDOWN_DISMISS$1 = "keydown.dismiss".concat(EVENT_KEY$6);
var EVENT_MOUSEUP_DISMISS = "mouseup.dismiss".concat(EVENT_KEY$6);
var EVENT_MOUSEDOWN_DISMISS = "mousedown.dismiss".concat(EVENT_KEY$6);
var EVENT_CLICK_DATA_API$2 = "click".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);
var CLASS_NAME_OPEN = 'modal-open';
var CLASS_NAME_FADE$3 = 'fade';
var CLASS_NAME_SHOW$4 = 'show';
var CLASS_NAME_STATIC = 'modal-static';
var OPEN_SELECTOR$1 = '.modal.show';
var SELECTOR_DIALOG = '.modal-dialog';
var SELECTOR_MODAL_BODY = '.modal-body';
var SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Modal = /*#__PURE__*/function (_BaseComponent6) {
  _inherits(Modal, _BaseComponent6);

  var _super6 = _createSuper(Modal);

  function Modal(element, config) {
    var _this18;

    _classCallCheck(this, Modal);

    _this18 = _super6.call(this, element);
    _this18._config = _this18._getConfig(config);
    _this18._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, _this18._element);
    _this18._backdrop = _this18._initializeBackDrop();
    _this18._focustrap = _this18._initializeFocusTrap();
    _this18._isShown = false;
    _this18._ignoreBackdropClick = false;
    _this18._isTransitioning = false;
    _this18._scrollBar = new ScrollBarHelper();
    return _this18;
  } // Getters


  _createClass(Modal, [{
    key: "toggle",
    value: // Public
    function toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
  }, {
    key: "show",
    value: function show(relatedTarget) {
      var _this19 = this;

      if (this._isShown || this._isTransitioning) {
        return;
      }

      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
        relatedTarget: relatedTarget
      });

      if (showEvent.defaultPrevented) {
        return;
      }

      this._isShown = true;

      if (this._isAnimated()) {
        this._isTransitioning = true;
      }

      this._scrollBar.hide();

      document.body.classList.add(CLASS_NAME_OPEN);

      this._adjustDialog();

      this._setEscapeEvent();

      this._setResizeEvent();

      EventHandler.on(this._dialog, EVENT_MOUSEDOWN_DISMISS, function () {
        EventHandler.one(_this19._element, EVENT_MOUSEUP_DISMISS, function (event) {
          if (event.target === _this19._element) {
            _this19._ignoreBackdropClick = true;
          }
        });
      });

      this._showBackdrop(function () {
        return _this19._showElement(relatedTarget);
      });
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this20 = this;

      if (!this._isShown || this._isTransitioning) {
        return;
      }

      var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);

      if (hideEvent.defaultPrevented) {
        return;
      }

      this._isShown = false;

      var isAnimated = this._isAnimated();

      if (isAnimated) {
        this._isTransitioning = true;
      }

      this._setEscapeEvent();

      this._setResizeEvent();

      this._focustrap.deactivate();

      this._element.classList.remove(CLASS_NAME_SHOW$4);

      EventHandler.off(this._element, EVENT_CLICK_DISMISS);
      EventHandler.off(this._dialog, EVENT_MOUSEDOWN_DISMISS);

      this._queueCallback(function () {
        return _this20._hideModal();
      }, this._element, isAnimated);
    }
  }, {
    key: "dispose",
    value: function dispose() {
      [window, this._dialog].forEach(function (htmlElement) {
        return EventHandler.off(htmlElement, EVENT_KEY$6);
      });

      this._backdrop.dispose();

      this._focustrap.deactivate();

      _get(_getPrototypeOf(Modal.prototype), "dispose", this).call(this);
    }
  }, {
    key: "handleUpdate",
    value: function handleUpdate() {
      this._adjustDialog();
    } // Private

  }, {
    key: "_initializeBackDrop",
    value: function _initializeBackDrop() {
      return new Backdrop({
        isVisible: Boolean(this._config.backdrop),
        // 'static' option will be translated to true, and booleans will keep their value
        isAnimated: this._isAnimated()
      });
    }
  }, {
    key: "_initializeFocusTrap",
    value: function _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }
  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread(_objectSpread({}, Default$5), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' ? config : {});
      typeCheckConfig(NAME$6, config, DefaultType$5);
      return config;
    }
  }, {
    key: "_showElement",
    value: function _showElement(relatedTarget) {
      var _this21 = this;

      var isAnimated = this._isAnimated();

      var modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);

      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
        // Don't move modal's DOM position
        document.body.append(this._element);
      }

      this._element.style.display = 'block';

      this._element.removeAttribute('aria-hidden');

      this._element.setAttribute('aria-modal', true);

      this._element.setAttribute('role', 'dialog');

      this._element.scrollTop = 0;

      if (modalBody) {
        modalBody.scrollTop = 0;
      }

      if (isAnimated) {
        reflow(this._element);
      }

      this._element.classList.add(CLASS_NAME_SHOW$4);

      var transitionComplete = function transitionComplete() {
        if (_this21._config.focus) {
          _this21._focustrap.activate();
        }

        _this21._isTransitioning = false;
        EventHandler.trigger(_this21._element, EVENT_SHOWN$3, {
          relatedTarget: relatedTarget
        });
      };

      this._queueCallback(transitionComplete, this._dialog, isAnimated);
    }
  }, {
    key: "_setEscapeEvent",
    value: function _setEscapeEvent() {
      var _this22 = this;

      if (this._isShown) {
        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, function (event) {
          if (_this22._config.keyboard && event.key === ESCAPE_KEY$1) {
            event.preventDefault();

            _this22.hide();
          } else if (!_this22._config.keyboard && event.key === ESCAPE_KEY$1) {
            _this22._triggerBackdropTransition();
          }
        });
      } else {
        EventHandler.off(this._element, EVENT_KEYDOWN_DISMISS$1);
      }
    }
  }, {
    key: "_setResizeEvent",
    value: function _setResizeEvent() {
      var _this23 = this;

      if (this._isShown) {
        EventHandler.on(window, EVENT_RESIZE, function () {
          return _this23._adjustDialog();
        });
      } else {
        EventHandler.off(window, EVENT_RESIZE);
      }
    }
  }, {
    key: "_hideModal",
    value: function _hideModal() {
      var _this24 = this;

      this._element.style.display = 'none';

      this._element.setAttribute('aria-hidden', true);

      this._element.removeAttribute('aria-modal');

      this._element.removeAttribute('role');

      this._isTransitioning = false;

      this._backdrop.hide(function () {
        document.body.classList.remove(CLASS_NAME_OPEN);

        _this24._resetAdjustments();

        _this24._scrollBar.reset();

        EventHandler.trigger(_this24._element, EVENT_HIDDEN$3);
      });
    }
  }, {
    key: "_showBackdrop",
    value: function _showBackdrop(callback) {
      var _this25 = this;

      EventHandler.on(this._element, EVENT_CLICK_DISMISS, function (event) {
        if (_this25._ignoreBackdropClick) {
          _this25._ignoreBackdropClick = false;
          return;
        }

        if (event.target !== event.currentTarget) {
          return;
        }

        if (_this25._config.backdrop === true) {
          _this25.hide();
        } else if (_this25._config.backdrop === 'static') {
          _this25._triggerBackdropTransition();
        }
      });

      this._backdrop.show(callback);
    }
  }, {
    key: "_isAnimated",
    value: function _isAnimated() {
      return this._element.classList.contains(CLASS_NAME_FADE$3);
    }
  }, {
    key: "_triggerBackdropTransition",
    value: function _triggerBackdropTransition() {
      var _this26 = this;

      var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);

      if (hideEvent.defaultPrevented) {
        return;
      }

      var _this$_element = this._element,
          classList = _this$_element.classList,
          scrollHeight = _this$_element.scrollHeight,
          style = _this$_element.style;
      var isModalOverflowing = scrollHeight > document.documentElement.clientHeight; // return if the following background transition hasn't yet completed

      if (!isModalOverflowing && style.overflowY === 'hidden' || classList.contains(CLASS_NAME_STATIC)) {
        return;
      }

      if (!isModalOverflowing) {
        style.overflowY = 'hidden';
      }

      classList.add(CLASS_NAME_STATIC);

      this._queueCallback(function () {
        classList.remove(CLASS_NAME_STATIC);

        if (!isModalOverflowing) {
          _this26._queueCallback(function () {
            style.overflowY = '';
          }, _this26._dialog);
        }
      }, this._dialog);

      this._element.focus();
    } // ----------------------------------------------------------------------
    // the following methods are used to handle overflowing modals
    // ----------------------------------------------------------------------

  }, {
    key: "_adjustDialog",
    value: function _adjustDialog() {
      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      var scrollbarWidth = this._scrollBar.getWidth();

      var isBodyOverflowing = scrollbarWidth > 0;

      if (!isBodyOverflowing && isModalOverflowing && !isRTL() || isBodyOverflowing && !isModalOverflowing && isRTL()) {
        this._element.style.paddingLeft = "".concat(scrollbarWidth, "px");
      }

      if (isBodyOverflowing && !isModalOverflowing && !isRTL() || !isBodyOverflowing && isModalOverflowing && isRTL()) {
        this._element.style.paddingRight = "".concat(scrollbarWidth, "px");
      }
    }
  }, {
    key: "_resetAdjustments",
    value: function _resetAdjustments() {
      this._element.style.paddingLeft = '';
      this._element.style.paddingRight = '';
    } // Static

  }], [{
    key: "Default",
    get: function get() {
      return Default$5;
    }
  }, {
    key: "NAME",
    get: function get() {
      return NAME$6;
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config, relatedTarget) {
      return this.each(function () {
        var data = Modal.getOrCreateInstance(this, config);

        if (typeof config !== 'string') {
          return;
        }

        if (typeof data[config] === 'undefined') {
          throw new TypeError("No method named \"".concat(config, "\""));
        }

        data[config](relatedTarget);
      });
    }
  }]);

  return Modal;
}(BaseComponent);
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {
  var _this27 = this;

  var target = getElementFromSelector(this);

  if (['A', 'AREA'].includes(this.tagName)) {
    event.preventDefault();
  }

  EventHandler.one(target, EVENT_SHOW$3, function (showEvent) {
    if (showEvent.defaultPrevented) {
      // only register focus restorer if modal will actually get shown
      return;
    }

    EventHandler.one(target, EVENT_HIDDEN$3, function () {
      if (isVisible(_this27)) {
        _this27.focus();
      }
    });
  }); // avoid conflict when clicking moddal toggler while another one is open

  var allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);

  if (allReadyOpen) {
    Modal.getInstance(allReadyOpen).hide();
  }

  var data = Modal.getOrCreateInstance(target);
  data.toggle(this);
});
enableDismissTrigger(Modal);
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Modal to jQuery only if jQuery is present
 */

defineJQueryPlugin(Modal);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): offcanvas.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME$5 = 'offcanvas';
var DATA_KEY$5 = 'bs.offcanvas';
var EVENT_KEY$5 = ".".concat(DATA_KEY$5);
var DATA_API_KEY$2 = '.data-api';
var EVENT_LOAD_DATA_API$1 = "load".concat(EVENT_KEY$5).concat(DATA_API_KEY$2);
var ESCAPE_KEY = 'Escape';
var Default$4 = {
  backdrop: true,
  keyboard: true,
  scroll: false
};
var DefaultType$4 = {
  backdrop: 'boolean',
  keyboard: 'boolean',
  scroll: 'boolean'
};
var CLASS_NAME_SHOW$3 = 'show';
var CLASS_NAME_BACKDROP = 'offcanvas-backdrop';
var OPEN_SELECTOR = '.offcanvas.show';
var EVENT_SHOW$2 = "show".concat(EVENT_KEY$5);
var EVENT_SHOWN$2 = "shown".concat(EVENT_KEY$5);
var EVENT_HIDE$2 = "hide".concat(EVENT_KEY$5);
var EVENT_HIDDEN$2 = "hidden".concat(EVENT_KEY$5);
var EVENT_CLICK_DATA_API$1 = "click".concat(EVENT_KEY$5).concat(DATA_API_KEY$2);
var EVENT_KEYDOWN_DISMISS = "keydown.dismiss".concat(EVENT_KEY$5);
var SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Offcanvas = /*#__PURE__*/function (_BaseComponent7) {
  _inherits(Offcanvas, _BaseComponent7);

  var _super7 = _createSuper(Offcanvas);

  function Offcanvas(element, config) {
    var _this28;

    _classCallCheck(this, Offcanvas);

    _this28 = _super7.call(this, element);
    _this28._config = _this28._getConfig(config);
    _this28._isShown = false;
    _this28._backdrop = _this28._initializeBackDrop();
    _this28._focustrap = _this28._initializeFocusTrap();

    _this28._addEventListeners();

    return _this28;
  } // Getters


  _createClass(Offcanvas, [{
    key: "toggle",
    value: // Public
    function toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    }
  }, {
    key: "show",
    value: function show(relatedTarget) {
      var _this29 = this;

      if (this._isShown) {
        return;
      }

      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$2, {
        relatedTarget: relatedTarget
      });

      if (showEvent.defaultPrevented) {
        return;
      }

      this._isShown = true;
      this._element.style.visibility = 'visible';

      this._backdrop.show();

      if (!this._config.scroll) {
        new ScrollBarHelper().hide();
      }

      this._element.removeAttribute('aria-hidden');

      this._element.setAttribute('aria-modal', true);

      this._element.setAttribute('role', 'dialog');

      this._element.classList.add(CLASS_NAME_SHOW$3);

      var completeCallBack = function completeCallBack() {
        if (!_this29._config.scroll) {
          _this29._focustrap.activate();
        }

        EventHandler.trigger(_this29._element, EVENT_SHOWN$2, {
          relatedTarget: relatedTarget
        });
      };

      this._queueCallback(completeCallBack, this._element, true);
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this30 = this;

      if (!this._isShown) {
        return;
      }

      var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$2);

      if (hideEvent.defaultPrevented) {
        return;
      }

      this._focustrap.deactivate();

      this._element.blur();

      this._isShown = false;

      this._element.classList.remove(CLASS_NAME_SHOW$3);

      this._backdrop.hide();

      var completeCallback = function completeCallback() {
        _this30._element.setAttribute('aria-hidden', true);

        _this30._element.removeAttribute('aria-modal');

        _this30._element.removeAttribute('role');

        _this30._element.style.visibility = 'hidden';

        if (!_this30._config.scroll) {
          new ScrollBarHelper().reset();
        }

        EventHandler.trigger(_this30._element, EVENT_HIDDEN$2);
      };

      this._queueCallback(completeCallback, this._element, true);
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this._backdrop.dispose();

      this._focustrap.deactivate();

      _get(_getPrototypeOf(Offcanvas.prototype), "dispose", this).call(this);
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread(_objectSpread({}, Default$4), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' ? config : {});
      typeCheckConfig(NAME$5, config, DefaultType$4);
      return config;
    }
  }, {
    key: "_initializeBackDrop",
    value: function _initializeBackDrop() {
      var _this31 = this;

      return new Backdrop({
        className: CLASS_NAME_BACKDROP,
        isVisible: this._config.backdrop,
        isAnimated: true,
        rootElement: this._element.parentNode,
        clickCallback: function clickCallback() {
          return _this31.hide();
        }
      });
    }
  }, {
    key: "_initializeFocusTrap",
    value: function _initializeFocusTrap() {
      return new FocusTrap({
        trapElement: this._element
      });
    }
  }, {
    key: "_addEventListeners",
    value: function _addEventListeners() {
      var _this32 = this;

      EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, function (event) {
        if (_this32._config.keyboard && event.key === ESCAPE_KEY) {
          _this32.hide();
        }
      });
    } // Static

  }], [{
    key: "NAME",
    get: function get() {
      return NAME$5;
    }
  }, {
    key: "Default",
    get: function get() {
      return Default$4;
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config) {
      return this.each(function () {
        var data = Offcanvas.getOrCreateInstance(this, config);

        if (typeof config !== 'string') {
          return;
        }

        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {
          throw new TypeError("No method named \"".concat(config, "\""));
        }

        data[config](this);
      });
    }
  }]);

  return Offcanvas;
}(BaseComponent);
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {
  var _this33 = this;

  var target = getElementFromSelector(this);

  if (['A', 'AREA'].includes(this.tagName)) {
    event.preventDefault();
  }

  if (isDisabled(this)) {
    return;
  }

  EventHandler.one(target, EVENT_HIDDEN$2, function () {
    // focus on trigger when it is closed
    if (isVisible(_this33)) {
      _this33.focus();
    }
  }); // avoid conflict when clicking a toggler of an offcanvas, while another is open

  var allReadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);

  if (allReadyOpen && allReadyOpen !== target) {
    Offcanvas.getInstance(allReadyOpen).hide();
  }

  var data = Offcanvas.getOrCreateInstance(target);
  data.toggle(this);
});
EventHandler.on(window, EVENT_LOAD_DATA_API$1, function () {
  return SelectorEngine.find(OPEN_SELECTOR).forEach(function (el) {
    return Offcanvas.getOrCreateInstance(el).show();
  });
});
enableDismissTrigger(Offcanvas);
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 */

defineJQueryPlugin(Offcanvas);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): util/sanitizer.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

var uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);
var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
 */

var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
/**
 * A pattern that matches safe data URLs. Only matches image, video and audio types.
 *
 * Shoutout to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts
 */

var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;

var allowedAttribute = function allowedAttribute(attribute, allowedAttributeList) {
  var attributeName = attribute.nodeName.toLowerCase();

  if (allowedAttributeList.includes(attributeName)) {
    if (uriAttributes.has(attributeName)) {
      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));
    }

    return true;
  }

  var regExp = allowedAttributeList.filter(function (attributeRegex) {
    return attributeRegex instanceof RegExp;
  }); // Check if a regular expression validates the attribute.

  for (var i = 0, len = regExp.length; i < len; i++) {
    if (regExp[i].test(attributeName)) {
      return true;
    }
  }

  return false;
};

var DefaultAllowlist = {
  // Global attributes allowed on any supplied element below.
  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
  a: ['target', 'href', 'title', 'rel'],
  area: [],
  b: [],
  br: [],
  col: [],
  code: [],
  div: [],
  em: [],
  hr: [],
  h1: [],
  h2: [],
  h3: [],
  h4: [],
  h5: [],
  h6: [],
  i: [],
  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
  li: [],
  ol: [],
  p: [],
  pre: [],
  s: [],
  small: [],
  span: [],
  sub: [],
  sup: [],
  strong: [],
  u: [],
  ul: []
};

function sanitizeHtml(unsafeHtml, allowList, sanitizeFn) {
  var _ref7;

  if (!unsafeHtml.length) {
    return unsafeHtml;
  }

  if (sanitizeFn && typeof sanitizeFn === 'function') {
    return sanitizeFn(unsafeHtml);
  }

  var domParser = new window.DOMParser();
  var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');

  var elements = (_ref7 = []).concat.apply(_ref7, _toConsumableArray(createdDocument.body.querySelectorAll('*')));

  var _loop = function _loop(i, len) {
    var _ref8;

    var element = elements[i];
    var elementName = element.nodeName.toLowerCase();

    if (!Object.keys(allowList).includes(elementName)) {
      element.remove();
      return "continue";
    }

    var attributeList = (_ref8 = []).concat.apply(_ref8, _toConsumableArray(element.attributes));

    var allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);
    attributeList.forEach(function (attribute) {
      if (!allowedAttribute(attribute, allowedAttributes)) {
        element.removeAttribute(attribute.nodeName);
      }
    });
  };

  for (var i = 0, len = elements.length; i < len; i++) {
    var _ret = _loop(i, len);

    if (_ret === "continue") continue;
  }

  return createdDocument.body.innerHTML;
}
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): tooltip.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */


var NAME$4 = 'tooltip';
var DATA_KEY$4 = 'bs.tooltip';
var EVENT_KEY$4 = ".".concat(DATA_KEY$4);
var CLASS_PREFIX$1 = 'bs-tooltip';
var DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);
var DefaultType$3 = {
  animation: 'boolean',
  template: 'string',
  title: '(string|element|function)',
  trigger: 'string',
  delay: '(number|object)',
  html: 'boolean',
  selector: '(string|boolean)',
  placement: '(string|function)',
  offset: '(array|string|function)',
  container: '(string|element|boolean)',
  fallbackPlacements: 'array',
  boundary: '(string|element)',
  customClass: '(string|function)',
  sanitize: 'boolean',
  sanitizeFn: '(null|function)',
  allowList: 'object',
  popperConfig: '(null|object|function)'
};
var AttachmentMap = {
  AUTO: 'auto',
  TOP: 'top',
  RIGHT: isRTL() ? 'left' : 'right',
  BOTTOM: 'bottom',
  LEFT: isRTL() ? 'right' : 'left'
};
var Default$3 = {
  animation: true,
  template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-arrow"></div>' + '<div class="tooltip-inner"></div>' + '</div>',
  trigger: 'hover focus',
  title: '',
  delay: 0,
  html: false,
  selector: false,
  placement: 'top',
  offset: [0, 0],
  container: false,
  fallbackPlacements: ['top', 'right', 'bottom', 'left'],
  boundary: 'clippingParents',
  customClass: '',
  sanitize: true,
  sanitizeFn: null,
  allowList: DefaultAllowlist,
  popperConfig: null
};
var Event$2 = {
  HIDE: "hide".concat(EVENT_KEY$4),
  HIDDEN: "hidden".concat(EVENT_KEY$4),
  SHOW: "show".concat(EVENT_KEY$4),
  SHOWN: "shown".concat(EVENT_KEY$4),
  INSERTED: "inserted".concat(EVENT_KEY$4),
  CLICK: "click".concat(EVENT_KEY$4),
  FOCUSIN: "focusin".concat(EVENT_KEY$4),
  FOCUSOUT: "focusout".concat(EVENT_KEY$4),
  MOUSEENTER: "mouseenter".concat(EVENT_KEY$4),
  MOUSELEAVE: "mouseleave".concat(EVENT_KEY$4)
};
var CLASS_NAME_FADE$2 = 'fade';
var CLASS_NAME_MODAL = 'modal';
var CLASS_NAME_SHOW$2 = 'show';
var HOVER_STATE_SHOW = 'show';
var HOVER_STATE_OUT = 'out';
var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
var SELECTOR_MODAL = ".".concat(CLASS_NAME_MODAL);
var EVENT_MODAL_HIDE = 'hide.bs.modal';
var TRIGGER_HOVER = 'hover';
var TRIGGER_FOCUS = 'focus';
var TRIGGER_CLICK = 'click';
var TRIGGER_MANUAL = 'manual';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Tooltip = /*#__PURE__*/function (_BaseComponent8) {
  _inherits(Tooltip, _BaseComponent8);

  var _super8 = _createSuper(Tooltip);

  function Tooltip(element, config) {
    var _this34;

    _classCallCheck(this, Tooltip);

    if (typeof _popperjs_core__WEBPACK_IMPORTED_MODULE_0__ === 'undefined') {
      throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)');
    }

    _this34 = _super8.call(this, element); // private

    _this34._isEnabled = true;
    _this34._timeout = 0;
    _this34._hoverState = '';
    _this34._activeTrigger = {};
    _this34._popper = null; // Protected

    _this34._config = _this34._getConfig(config);
    _this34.tip = null;

    _this34._setListeners();

    return _this34;
  } // Getters


  _createClass(Tooltip, [{
    key: "enable",
    value: // Public
    function enable() {
      this._isEnabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      this._isEnabled = false;
    }
  }, {
    key: "toggleEnabled",
    value: function toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    }
  }, {
    key: "toggle",
    value: function toggle(event) {
      if (!this._isEnabled) {
        return;
      }

      if (event) {
        var context = this._initializeOnDelegatedTarget(event);

        context._activeTrigger.click = !context._activeTrigger.click;

        if (context._isWithActiveTrigger()) {
          context._enter(null, context);
        } else {
          context._leave(null, context);
        }
      } else {
        if (this.getTipElement().classList.contains(CLASS_NAME_SHOW$2)) {
          this._leave(null, this);

          return;
        }

        this._enter(null, this);
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      clearTimeout(this._timeout);
      EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

      if (this.tip) {
        this.tip.remove();
      }

      this._disposePopper();

      _get(_getPrototypeOf(Tooltip.prototype), "dispose", this).call(this);
    }
  }, {
    key: "show",
    value: function show() {
      var _this35 = this;

      if (this._element.style.display === 'none') {
        throw new Error('Please use show on visible elements');
      }

      if (!(this.isWithContent() && this._isEnabled)) {
        return;
      }

      var showEvent = EventHandler.trigger(this._element, this.constructor.Event.SHOW);
      var shadowRoot = findShadowRoot(this._element);
      var isInTheDom = shadowRoot === null ? this._element.ownerDocument.documentElement.contains(this._element) : shadowRoot.contains(this._element);

      if (showEvent.defaultPrevented || !isInTheDom) {
        return;
      } // A trick to recreate a tooltip in case a new title is given by using the NOT documented `data-bs-original-title`
      // This will be removed later in favor of a `setContent` method


      if (this.constructor.NAME === 'tooltip' && this.tip && this.getTitle() !== this.tip.querySelector(SELECTOR_TOOLTIP_INNER).innerHTML) {
        this._disposePopper();

        this.tip.remove();
        this.tip = null;
      }

      var tip = this.getTipElement();
      var tipId = getUID(this.constructor.NAME);
      tip.setAttribute('id', tipId);

      this._element.setAttribute('aria-describedby', tipId);

      if (this._config.animation) {
        tip.classList.add(CLASS_NAME_FADE$2);
      }

      var placement = typeof this._config.placement === 'function' ? this._config.placement.call(this, tip, this._element) : this._config.placement;

      var attachment = this._getAttachment(placement);

      this._addAttachmentClass(attachment);

      var container = this._config.container;
      Data.set(tip, this.constructor.DATA_KEY, this);

      if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
        container.append(tip);
        EventHandler.trigger(this._element, this.constructor.Event.INSERTED);
      }

      if (this._popper) {
        this._popper.update();
      } else {
        this._popper = _popperjs_core__WEBPACK_IMPORTED_MODULE_0__["createPopper"](this._element, tip, this._getPopperConfig(attachment));
      }

      tip.classList.add(CLASS_NAME_SHOW$2);

      var customClass = this._resolvePossibleFunction(this._config.customClass);

      if (customClass) {
        var _tip$classList;

        (_tip$classList = tip.classList).add.apply(_tip$classList, _toConsumableArray(customClass.split(' ')));
      } // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement) {
        var _ref9;

        (_ref9 = []).concat.apply(_ref9, _toConsumableArray(document.body.children)).forEach(function (element) {
          EventHandler.on(element, 'mouseover', noop);
        });
      }

      var complete = function complete() {
        var prevHoverState = _this35._hoverState;
        _this35._hoverState = null;
        EventHandler.trigger(_this35._element, _this35.constructor.Event.SHOWN);

        if (prevHoverState === HOVER_STATE_OUT) {
          _this35._leave(null, _this35);
        }
      };

      var isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);

      this._queueCallback(complete, this.tip, isAnimated);
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this36 = this;

      if (!this._popper) {
        return;
      }

      var tip = this.getTipElement();

      var complete = function complete() {
        if (_this36._isWithActiveTrigger()) {
          return;
        }

        if (_this36._hoverState !== HOVER_STATE_SHOW) {
          tip.remove();
        }

        _this36._cleanTipClass();

        _this36._element.removeAttribute('aria-describedby');

        EventHandler.trigger(_this36._element, _this36.constructor.Event.HIDDEN);

        _this36._disposePopper();
      };

      var hideEvent = EventHandler.trigger(this._element, this.constructor.Event.HIDE);

      if (hideEvent.defaultPrevented) {
        return;
      }

      tip.classList.remove(CLASS_NAME_SHOW$2); // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support

      if ('ontouchstart' in document.documentElement) {
        var _ref10;

        (_ref10 = []).concat.apply(_ref10, _toConsumableArray(document.body.children)).forEach(function (element) {
          return EventHandler.off(element, 'mouseover', noop);
        });
      }

      this._activeTrigger[TRIGGER_CLICK] = false;
      this._activeTrigger[TRIGGER_FOCUS] = false;
      this._activeTrigger[TRIGGER_HOVER] = false;
      var isAnimated = this.tip.classList.contains(CLASS_NAME_FADE$2);

      this._queueCallback(complete, this.tip, isAnimated);

      this._hoverState = '';
    }
  }, {
    key: "update",
    value: function update() {
      if (this._popper !== null) {
        this._popper.update();
      }
    } // Protected

  }, {
    key: "isWithContent",
    value: function isWithContent() {
      return Boolean(this.getTitle());
    }
  }, {
    key: "getTipElement",
    value: function getTipElement() {
      if (this.tip) {
        return this.tip;
      }

      var element = document.createElement('div');
      element.innerHTML = this._config.template;
      var tip = element.children[0];
      this.setContent(tip);
      tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
      this.tip = tip;
      return this.tip;
    }
  }, {
    key: "setContent",
    value: function setContent(tip) {
      this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TOOLTIP_INNER);
    }
  }, {
    key: "_sanitizeAndSetContent",
    value: function _sanitizeAndSetContent(template, content, selector) {
      var templateElement = SelectorEngine.findOne(selector, template);

      if (!content && templateElement) {
        templateElement.remove();
        return;
      } // we use append for html objects to maintain js events


      this.setElementContent(templateElement, content);
    }
  }, {
    key: "setElementContent",
    value: function setElementContent(element, content) {
      if (element === null) {
        return;
      }

      if (isElement(content)) {
        content = getElement(content); // content is a DOM node or a jQuery

        if (this._config.html) {
          if (content.parentNode !== element) {
            element.innerHTML = '';
            element.append(content);
          }
        } else {
          element.textContent = content.textContent;
        }

        return;
      }

      if (this._config.html) {
        if (this._config.sanitize) {
          content = sanitizeHtml(content, this._config.allowList, this._config.sanitizeFn);
        }

        element.innerHTML = content;
      } else {
        element.textContent = content;
      }
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      var title = this._element.getAttribute('data-bs-original-title') || this._config.title;

      return this._resolvePossibleFunction(title);
    }
  }, {
    key: "updateAttachment",
    value: function updateAttachment(attachment) {
      if (attachment === 'right') {
        return 'end';
      }

      if (attachment === 'left') {
        return 'start';
      }

      return attachment;
    } // Private

  }, {
    key: "_initializeOnDelegatedTarget",
    value: function _initializeOnDelegatedTarget(event, context) {
      return context || this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
    }
  }, {
    key: "_getOffset",
    value: function _getOffset() {
      var _this37 = this;

      var offset = this._config.offset;

      if (typeof offset === 'string') {
        return offset.split(',').map(function (val) {
          return Number.parseInt(val, 10);
        });
      }

      if (typeof offset === 'function') {
        return function (popperData) {
          return offset(popperData, _this37._element);
        };
      }

      return offset;
    }
  }, {
    key: "_resolvePossibleFunction",
    value: function _resolvePossibleFunction(content) {
      return typeof content === 'function' ? content.call(this._element) : content;
    }
  }, {
    key: "_getPopperConfig",
    value: function _getPopperConfig(attachment) {
      var _this38 = this;

      var defaultBsPopperConfig = {
        placement: attachment,
        modifiers: [{
          name: 'flip',
          options: {
            fallbackPlacements: this._config.fallbackPlacements
          }
        }, {
          name: 'offset',
          options: {
            offset: this._getOffset()
          }
        }, {
          name: 'preventOverflow',
          options: {
            boundary: this._config.boundary
          }
        }, {
          name: 'arrow',
          options: {
            element: ".".concat(this.constructor.NAME, "-arrow")
          }
        }, {
          name: 'onChange',
          enabled: true,
          phase: 'afterWrite',
          fn: function fn(data) {
            return _this38._handlePopperPlacementChange(data);
          }
        }],
        onFirstUpdate: function onFirstUpdate(data) {
          if (data.options.placement !== data.placement) {
            _this38._handlePopperPlacementChange(data);
          }
        }
      };
      return _objectSpread(_objectSpread({}, defaultBsPopperConfig), typeof this._config.popperConfig === 'function' ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig);
    }
  }, {
    key: "_addAttachmentClass",
    value: function _addAttachmentClass(attachment) {
      this.getTipElement().classList.add("".concat(this._getBasicClassPrefix(), "-").concat(this.updateAttachment(attachment)));
    }
  }, {
    key: "_getAttachment",
    value: function _getAttachment(placement) {
      return AttachmentMap[placement.toUpperCase()];
    }
  }, {
    key: "_setListeners",
    value: function _setListeners() {
      var _this39 = this;

      var triggers = this._config.trigger.split(' ');

      triggers.forEach(function (trigger) {
        if (trigger === 'click') {
          EventHandler.on(_this39._element, _this39.constructor.Event.CLICK, _this39._config.selector, function (event) {
            return _this39.toggle(event);
          });
        } else if (trigger !== TRIGGER_MANUAL) {
          var eventIn = trigger === TRIGGER_HOVER ? _this39.constructor.Event.MOUSEENTER : _this39.constructor.Event.FOCUSIN;
          var eventOut = trigger === TRIGGER_HOVER ? _this39.constructor.Event.MOUSELEAVE : _this39.constructor.Event.FOCUSOUT;
          EventHandler.on(_this39._element, eventIn, _this39._config.selector, function (event) {
            return _this39._enter(event);
          });
          EventHandler.on(_this39._element, eventOut, _this39._config.selector, function (event) {
            return _this39._leave(event);
          });
        }
      });

      this._hideModalHandler = function () {
        if (_this39._element) {
          _this39.hide();
        }
      };

      EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

      if (this._config.selector) {
        this._config = _objectSpread(_objectSpread({}, this._config), {}, {
          trigger: 'manual',
          selector: ''
        });
      } else {
        this._fixTitle();
      }
    }
  }, {
    key: "_fixTitle",
    value: function _fixTitle() {
      var title = this._element.getAttribute('title');

      var originalTitleType = _typeof(this._element.getAttribute('data-bs-original-title'));

      if (title || originalTitleType !== 'string') {
        this._element.setAttribute('data-bs-original-title', title || '');

        if (title && !this._element.getAttribute('aria-label') && !this._element.textContent) {
          this._element.setAttribute('aria-label', title);
        }

        this._element.setAttribute('title', '');
      }
    }
  }, {
    key: "_enter",
    value: function _enter(event, context) {
      context = this._initializeOnDelegatedTarget(event, context);

      if (event) {
        context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
      }

      if (context.getTipElement().classList.contains(CLASS_NAME_SHOW$2) || context._hoverState === HOVER_STATE_SHOW) {
        context._hoverState = HOVER_STATE_SHOW;
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HOVER_STATE_SHOW;

      if (!context._config.delay || !context._config.delay.show) {
        context.show();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HOVER_STATE_SHOW) {
          context.show();
        }
      }, context._config.delay.show);
    }
  }, {
    key: "_leave",
    value: function _leave(event, context) {
      context = this._initializeOnDelegatedTarget(event, context);

      if (event) {
        context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
      }

      if (context._isWithActiveTrigger()) {
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HOVER_STATE_OUT;

      if (!context._config.delay || !context._config.delay.hide) {
        context.hide();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HOVER_STATE_OUT) {
          context.hide();
        }
      }, context._config.delay.hide);
    }
  }, {
    key: "_isWithActiveTrigger",
    value: function _isWithActiveTrigger() {
      for (var trigger in this._activeTrigger) {
        if (this._activeTrigger[trigger]) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      var dataAttributes = Manipulator.getDataAttributes(this._element);
      Object.keys(dataAttributes).forEach(function (dataAttr) {
        if (DISALLOWED_ATTRIBUTES.has(dataAttr)) {
          delete dataAttributes[dataAttr];
        }
      });
      config = _objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), dataAttributes), _typeof(config) === 'object' && config ? config : {});
      config.container = config.container === false ? document.body : getElement(config.container);

      if (typeof config.delay === 'number') {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }

      if (typeof config.title === 'number') {
        config.title = config.title.toString();
      }

      if (typeof config.content === 'number') {
        config.content = config.content.toString();
      }

      typeCheckConfig(NAME$4, config, this.constructor.DefaultType);

      if (config.sanitize) {
        config.template = sanitizeHtml(config.template, config.allowList, config.sanitizeFn);
      }

      return config;
    }
  }, {
    key: "_getDelegateConfig",
    value: function _getDelegateConfig() {
      var config = {};

      for (var key in this._config) {
        if (this.constructor.Default[key] !== this._config[key]) {
          config[key] = this._config[key];
        }
      } // In the future can be replaced with:
      // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
      // `Object.fromEntries(keysWithDifferentValues)`


      return config;
    }
  }, {
    key: "_cleanTipClass",
    value: function _cleanTipClass() {
      var tip = this.getTipElement();
      var basicClassPrefixRegex = new RegExp("(^|\\s)".concat(this._getBasicClassPrefix(), "\\S+"), 'g');
      var tabClass = tip.getAttribute('class').match(basicClassPrefixRegex);

      if (tabClass !== null && tabClass.length > 0) {
        tabClass.map(function (token) {
          return token.trim();
        }).forEach(function (tClass) {
          return tip.classList.remove(tClass);
        });
      }
    }
  }, {
    key: "_getBasicClassPrefix",
    value: function _getBasicClassPrefix() {
      return CLASS_PREFIX$1;
    }
  }, {
    key: "_handlePopperPlacementChange",
    value: function _handlePopperPlacementChange(popperData) {
      var state = popperData.state;

      if (!state) {
        return;
      }

      this.tip = state.elements.popper;

      this._cleanTipClass();

      this._addAttachmentClass(this._getAttachment(state.placement));
    }
  }, {
    key: "_disposePopper",
    value: function _disposePopper() {
      if (this._popper) {
        this._popper.destroy();

        this._popper = null;
      }
    } // Static

  }], [{
    key: "Default",
    get: function get() {
      return Default$3;
    }
  }, {
    key: "NAME",
    get: function get() {
      return NAME$4;
    }
  }, {
    key: "Event",
    get: function get() {
      return Event$2;
    }
  }, {
    key: "DefaultType",
    get: function get() {
      return DefaultType$3;
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config) {
      return this.each(function () {
        var data = Tooltip.getOrCreateInstance(this, config);

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        }
      });
    }
  }]);

  return Tooltip;
}(BaseComponent);
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Tooltip to jQuery only if jQuery is present
 */


defineJQueryPlugin(Tooltip);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): popover.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME$3 = 'popover';
var DATA_KEY$3 = 'bs.popover';
var EVENT_KEY$3 = ".".concat(DATA_KEY$3);
var CLASS_PREFIX = 'bs-popover';

var Default$2 = _objectSpread(_objectSpread({}, Tooltip.Default), {}, {
  placement: 'right',
  offset: [0, 8],
  trigger: 'click',
  content: '',
  template: '<div class="popover" role="tooltip">' + '<div class="popover-arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div>' + '</div>'
});

var DefaultType$2 = _objectSpread(_objectSpread({}, Tooltip.DefaultType), {}, {
  content: '(string|element|function)'
});

var Event$1 = {
  HIDE: "hide".concat(EVENT_KEY$3),
  HIDDEN: "hidden".concat(EVENT_KEY$3),
  SHOW: "show".concat(EVENT_KEY$3),
  SHOWN: "shown".concat(EVENT_KEY$3),
  INSERTED: "inserted".concat(EVENT_KEY$3),
  CLICK: "click".concat(EVENT_KEY$3),
  FOCUSIN: "focusin".concat(EVENT_KEY$3),
  FOCUSOUT: "focusout".concat(EVENT_KEY$3),
  MOUSEENTER: "mouseenter".concat(EVENT_KEY$3),
  MOUSELEAVE: "mouseleave".concat(EVENT_KEY$3)
};
var SELECTOR_TITLE = '.popover-header';
var SELECTOR_CONTENT = '.popover-body';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Popover = /*#__PURE__*/function (_Tooltip) {
  _inherits(Popover, _Tooltip);

  var _super9 = _createSuper(Popover);

  function Popover() {
    _classCallCheck(this, Popover);

    return _super9.apply(this, arguments);
  }

  _createClass(Popover, [{
    key: "isWithContent",
    value: // Overrides
    function isWithContent() {
      return this.getTitle() || this._getContent();
    }
  }, {
    key: "setContent",
    value: function setContent(tip) {
      this._sanitizeAndSetContent(tip, this.getTitle(), SELECTOR_TITLE);

      this._sanitizeAndSetContent(tip, this._getContent(), SELECTOR_CONTENT);
    } // Private

  }, {
    key: "_getContent",
    value: function _getContent() {
      return this._resolvePossibleFunction(this._config.content);
    }
  }, {
    key: "_getBasicClassPrefix",
    value: function _getBasicClassPrefix() {
      return CLASS_PREFIX;
    } // Static

  }], [{
    key: "Default",
    get: // Getters
    function get() {
      return Default$2;
    }
  }, {
    key: "NAME",
    get: function get() {
      return NAME$3;
    }
  }, {
    key: "Event",
    get: function get() {
      return Event$1;
    }
  }, {
    key: "DefaultType",
    get: function get() {
      return DefaultType$2;
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config) {
      return this.each(function () {
        var data = Popover.getOrCreateInstance(this, config);

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        }
      });
    }
  }]);

  return Popover;
}(Tooltip);
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Popover to jQuery only if jQuery is present
 */


defineJQueryPlugin(Popover);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): scrollspy.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME$2 = 'scrollspy';
var DATA_KEY$2 = 'bs.scrollspy';
var EVENT_KEY$2 = ".".concat(DATA_KEY$2);
var DATA_API_KEY$1 = '.data-api';
var Default$1 = {
  offset: 10,
  method: 'auto',
  target: ''
};
var DefaultType$1 = {
  offset: 'number',
  method: 'string',
  target: '(string|element)'
};
var EVENT_ACTIVATE = "activate".concat(EVENT_KEY$2);
var EVENT_SCROLL = "scroll".concat(EVENT_KEY$2);
var EVENT_LOAD_DATA_API = "load".concat(EVENT_KEY$2).concat(DATA_API_KEY$1);
var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';
var CLASS_NAME_ACTIVE$1 = 'active';
var SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
var SELECTOR_NAV_LIST_GROUP$1 = '.nav, .list-group';
var SELECTOR_NAV_LINKS = '.nav-link';
var SELECTOR_NAV_ITEMS = '.nav-item';
var SELECTOR_LIST_ITEMS = '.list-group-item';
var SELECTOR_LINK_ITEMS = "".concat(SELECTOR_NAV_LINKS, ", ").concat(SELECTOR_LIST_ITEMS, ", .").concat(CLASS_NAME_DROPDOWN_ITEM);
var SELECTOR_DROPDOWN$1 = '.dropdown';
var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';
var METHOD_OFFSET = 'offset';
var METHOD_POSITION = 'position';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var ScrollSpy = /*#__PURE__*/function (_BaseComponent9) {
  _inherits(ScrollSpy, _BaseComponent9);

  var _super10 = _createSuper(ScrollSpy);

  function ScrollSpy(element, config) {
    var _this40;

    _classCallCheck(this, ScrollSpy);

    _this40 = _super10.call(this, element);
    _this40._scrollElement = _this40._element.tagName === 'BODY' ? window : _this40._element;
    _this40._config = _this40._getConfig(config);
    _this40._offsets = [];
    _this40._targets = [];
    _this40._activeTarget = null;
    _this40._scrollHeight = 0;
    EventHandler.on(_this40._scrollElement, EVENT_SCROLL, function () {
      return _this40._process();
    });

    _this40.refresh();

    _this40._process();

    return _this40;
  } // Getters


  _createClass(ScrollSpy, [{
    key: "refresh",
    value: // Public
    function refresh() {
      var _this41 = this;

      var autoMethod = this._scrollElement === this._scrollElement.window ? METHOD_OFFSET : METHOD_POSITION;
      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
      var offsetBase = offsetMethod === METHOD_POSITION ? this._getScrollTop() : 0;
      this._offsets = [];
      this._targets = [];
      this._scrollHeight = this._getScrollHeight();
      var targets = SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target);
      targets.map(function (element) {
        var targetSelector = getSelectorFromElement(element);
        var target = targetSelector ? SelectorEngine.findOne(targetSelector) : null;

        if (target) {
          var targetBCR = target.getBoundingClientRect();

          if (targetBCR.width || targetBCR.height) {
            return [Manipulator[offsetMethod](target).top + offsetBase, targetSelector];
          }
        }

        return null;
      }).filter(function (item) {
        return item;
      }).sort(function (a, b) {
        return a[0] - b[0];
      }).forEach(function (item) {
        _this41._offsets.push(item[0]);

        _this41._targets.push(item[1]);
      });
    }
  }, {
    key: "dispose",
    value: function dispose() {
      EventHandler.off(this._scrollElement, EVENT_KEY$2);

      _get(_getPrototypeOf(ScrollSpy.prototype), "dispose", this).call(this);
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread(_objectSpread({}, Default$1), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' && config ? config : {});
      config.target = getElement(config.target) || document.documentElement;
      typeCheckConfig(NAME$2, config, DefaultType$1);
      return config;
    }
  }, {
    key: "_getScrollTop",
    value: function _getScrollTop() {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    }
  }, {
    key: "_getScrollHeight",
    value: function _getScrollHeight() {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    }
  }, {
    key: "_getOffsetHeight",
    value: function _getOffsetHeight() {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    }
  }, {
    key: "_process",
    value: function _process() {
      var scrollTop = this._getScrollTop() + this._config.offset;

      var scrollHeight = this._getScrollHeight();

      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

      if (this._scrollHeight !== scrollHeight) {
        this.refresh();
      }

      if (scrollTop >= maxScroll) {
        var target = this._targets[this._targets.length - 1];

        if (this._activeTarget !== target) {
          this._activate(target);
        }

        return;
      }

      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
        this._activeTarget = null;

        this._clear();

        return;
      }

      for (var i = this._offsets.length; i--;) {
        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

        if (isActiveTarget) {
          this._activate(this._targets[i]);
        }
      }
    }
  }, {
    key: "_activate",
    value: function _activate(target) {
      this._activeTarget = target;

      this._clear();

      var queries = SELECTOR_LINK_ITEMS.split(',').map(function (selector) {
        return "".concat(selector, "[data-bs-target=\"").concat(target, "\"],").concat(selector, "[href=\"").concat(target, "\"]");
      });
      var link = SelectorEngine.findOne(queries.join(','), this._config.target);
      link.classList.add(CLASS_NAME_ACTIVE$1);

      if (link.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
        SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, link.closest(SELECTOR_DROPDOWN$1)).classList.add(CLASS_NAME_ACTIVE$1);
      } else {
        SelectorEngine.parents(link, SELECTOR_NAV_LIST_GROUP$1).forEach(function (listGroup) {
          // Set triggered links parents as active
          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
          SelectorEngine.prev(listGroup, "".concat(SELECTOR_NAV_LINKS, ", ").concat(SELECTOR_LIST_ITEMS)).forEach(function (item) {
            return item.classList.add(CLASS_NAME_ACTIVE$1);
          }); // Handle special case when .nav-link is inside .nav-item

          SelectorEngine.prev(listGroup, SELECTOR_NAV_ITEMS).forEach(function (navItem) {
            SelectorEngine.children(navItem, SELECTOR_NAV_LINKS).forEach(function (item) {
              return item.classList.add(CLASS_NAME_ACTIVE$1);
            });
          });
        });
      }

      EventHandler.trigger(this._scrollElement, EVENT_ACTIVATE, {
        relatedTarget: target
      });
    }
  }, {
    key: "_clear",
    value: function _clear() {
      SelectorEngine.find(SELECTOR_LINK_ITEMS, this._config.target).filter(function (node) {
        return node.classList.contains(CLASS_NAME_ACTIVE$1);
      }).forEach(function (node) {
        return node.classList.remove(CLASS_NAME_ACTIVE$1);
      });
    } // Static

  }], [{
    key: "Default",
    get: function get() {
      return Default$1;
    }
  }, {
    key: "NAME",
    get: function get() {
      return NAME$2;
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config) {
      return this.each(function () {
        var data = ScrollSpy.getOrCreateInstance(this, config);

        if (typeof config !== 'string') {
          return;
        }

        if (typeof data[config] === 'undefined') {
          throw new TypeError("No method named \"".concat(config, "\""));
        }

        data[config]();
      });
    }
  }]);

  return ScrollSpy;
}(BaseComponent);
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(window, EVENT_LOAD_DATA_API, function () {
  SelectorEngine.find(SELECTOR_DATA_SPY).forEach(function (spy) {
    return new ScrollSpy(spy);
  });
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .ScrollSpy to jQuery only if jQuery is present
 */

defineJQueryPlugin(ScrollSpy);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): tab.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME$1 = 'tab';
var DATA_KEY$1 = 'bs.tab';
var EVENT_KEY$1 = ".".concat(DATA_KEY$1);
var DATA_API_KEY = '.data-api';
var EVENT_HIDE$1 = "hide".concat(EVENT_KEY$1);
var EVENT_HIDDEN$1 = "hidden".concat(EVENT_KEY$1);
var EVENT_SHOW$1 = "show".concat(EVENT_KEY$1);
var EVENT_SHOWN$1 = "shown".concat(EVENT_KEY$1);
var EVENT_CLICK_DATA_API = "click".concat(EVENT_KEY$1).concat(DATA_API_KEY);
var CLASS_NAME_DROPDOWN_MENU = 'dropdown-menu';
var CLASS_NAME_ACTIVE = 'active';
var CLASS_NAME_FADE$1 = 'fade';
var CLASS_NAME_SHOW$1 = 'show';
var SELECTOR_DROPDOWN = '.dropdown';
var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';
var SELECTOR_ACTIVE = '.active';
var SELECTOR_ACTIVE_UL = ':scope > li > .active';
var SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';
var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';
var SELECTOR_DROPDOWN_ACTIVE_CHILD = ':scope > .dropdown-menu .active';
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Tab = /*#__PURE__*/function (_BaseComponent10) {
  _inherits(Tab, _BaseComponent10);

  var _super11 = _createSuper(Tab);

  function Tab() {
    _classCallCheck(this, Tab);

    return _super11.apply(this, arguments);
  }

  _createClass(Tab, [{
    key: "show",
    value: // Public
    function show() {
      var _this42 = this;

      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.classList.contains(CLASS_NAME_ACTIVE)) {
        return;
      }

      var previous;
      var target = getElementFromSelector(this._element);

      var listElement = this._element.closest(SELECTOR_NAV_LIST_GROUP);

      if (listElement) {
        var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? SELECTOR_ACTIVE_UL : SELECTOR_ACTIVE;
        previous = SelectorEngine.find(itemSelector, listElement);
        previous = previous[previous.length - 1];
      }

      var hideEvent = previous ? EventHandler.trigger(previous, EVENT_HIDE$1, {
        relatedTarget: this._element
      }) : null;
      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$1, {
        relatedTarget: previous
      });

      if (showEvent.defaultPrevented || hideEvent !== null && hideEvent.defaultPrevented) {
        return;
      }

      this._activate(this._element, listElement);

      var complete = function complete() {
        EventHandler.trigger(previous, EVENT_HIDDEN$1, {
          relatedTarget: _this42._element
        });
        EventHandler.trigger(_this42._element, EVENT_SHOWN$1, {
          relatedTarget: previous
        });
      };

      if (target) {
        this._activate(target, target.parentNode, complete);
      } else {
        complete();
      }
    } // Private

  }, {
    key: "_activate",
    value: function _activate(element, container, callback) {
      var _this43 = this;

      var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? SelectorEngine.find(SELECTOR_ACTIVE_UL, container) : SelectorEngine.children(container, SELECTOR_ACTIVE);
      var active = activeElements[0];
      var isTransitioning = callback && active && active.classList.contains(CLASS_NAME_FADE$1);

      var complete = function complete() {
        return _this43._transitionComplete(element, active, callback);
      };

      if (active && isTransitioning) {
        active.classList.remove(CLASS_NAME_SHOW$1);

        this._queueCallback(complete, element, true);
      } else {
        complete();
      }
    }
  }, {
    key: "_transitionComplete",
    value: function _transitionComplete(element, active, callback) {
      if (active) {
        active.classList.remove(CLASS_NAME_ACTIVE);
        var dropdownChild = SelectorEngine.findOne(SELECTOR_DROPDOWN_ACTIVE_CHILD, active.parentNode);

        if (dropdownChild) {
          dropdownChild.classList.remove(CLASS_NAME_ACTIVE);
        }

        if (active.getAttribute('role') === 'tab') {
          active.setAttribute('aria-selected', false);
        }
      }

      element.classList.add(CLASS_NAME_ACTIVE);

      if (element.getAttribute('role') === 'tab') {
        element.setAttribute('aria-selected', true);
      }

      reflow(element);

      if (element.classList.contains(CLASS_NAME_FADE$1)) {
        element.classList.add(CLASS_NAME_SHOW$1);
      }

      var parent = element.parentNode;

      if (parent && parent.nodeName === 'LI') {
        parent = parent.parentNode;
      }

      if (parent && parent.classList.contains(CLASS_NAME_DROPDOWN_MENU)) {
        var dropdownElement = element.closest(SELECTOR_DROPDOWN);

        if (dropdownElement) {
          SelectorEngine.find(SELECTOR_DROPDOWN_TOGGLE, dropdownElement).forEach(function (dropdown) {
            return dropdown.classList.add(CLASS_NAME_ACTIVE);
          });
        }

        element.setAttribute('aria-expanded', true);
      }

      if (callback) {
        callback();
      }
    } // Static

  }], [{
    key: "NAME",
    get: // Getters
    function get() {
      return NAME$1;
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config) {
      return this.each(function () {
        var data = Tab.getOrCreateInstance(this);

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config]();
        }
      });
    }
  }]);

  return Tab;
}(BaseComponent);
/**
 * ------------------------------------------------------------------------
 * Data Api implementation
 * ------------------------------------------------------------------------
 */


EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
  if (['A', 'AREA'].includes(this.tagName)) {
    event.preventDefault();
  }

  if (isDisabled(this)) {
    return;
  }

  var data = Tab.getOrCreateInstance(this);
  data.show();
});
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Tab to jQuery only if jQuery is present
 */

defineJQueryPlugin(Tab);
/**
 * --------------------------------------------------------------------------
 * Bootstrap (v5.1.3): toast.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 * --------------------------------------------------------------------------
 */

/**
 * ------------------------------------------------------------------------
 * Constants
 * ------------------------------------------------------------------------
 */

var NAME = 'toast';
var DATA_KEY = 'bs.toast';
var EVENT_KEY = ".".concat(DATA_KEY);
var EVENT_MOUSEOVER = "mouseover".concat(EVENT_KEY);
var EVENT_MOUSEOUT = "mouseout".concat(EVENT_KEY);
var EVENT_FOCUSIN = "focusin".concat(EVENT_KEY);
var EVENT_FOCUSOUT = "focusout".concat(EVENT_KEY);
var EVENT_HIDE = "hide".concat(EVENT_KEY);
var EVENT_HIDDEN = "hidden".concat(EVENT_KEY);
var EVENT_SHOW = "show".concat(EVENT_KEY);
var EVENT_SHOWN = "shown".concat(EVENT_KEY);
var CLASS_NAME_FADE = 'fade';
var CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility

var CLASS_NAME_SHOW = 'show';
var CLASS_NAME_SHOWING = 'showing';
var DefaultType = {
  animation: 'boolean',
  autohide: 'boolean',
  delay: 'number'
};
var Default = {
  animation: true,
  autohide: true,
  delay: 5000
};
/**
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

var Toast = /*#__PURE__*/function (_BaseComponent11) {
  _inherits(Toast, _BaseComponent11);

  var _super12 = _createSuper(Toast);

  function Toast(element, config) {
    var _this44;

    _classCallCheck(this, Toast);

    _this44 = _super12.call(this, element);
    _this44._config = _this44._getConfig(config);
    _this44._timeout = null;
    _this44._hasMouseInteraction = false;
    _this44._hasKeyboardInteraction = false;

    _this44._setListeners();

    return _this44;
  } // Getters


  _createClass(Toast, [{
    key: "show",
    value: // Public
    function show() {
      var _this45 = this;

      var showEvent = EventHandler.trigger(this._element, EVENT_SHOW);

      if (showEvent.defaultPrevented) {
        return;
      }

      this._clearTimeout();

      if (this._config.animation) {
        this._element.classList.add(CLASS_NAME_FADE);
      }

      var complete = function complete() {
        _this45._element.classList.remove(CLASS_NAME_SHOWING);

        EventHandler.trigger(_this45._element, EVENT_SHOWN);

        _this45._maybeScheduleHide();
      };

      this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated


      reflow(this._element);

      this._element.classList.add(CLASS_NAME_SHOW);

      this._element.classList.add(CLASS_NAME_SHOWING);

      this._queueCallback(complete, this._element, this._config.animation);
    }
  }, {
    key: "hide",
    value: function hide() {
      var _this46 = this;

      if (!this._element.classList.contains(CLASS_NAME_SHOW)) {
        return;
      }

      var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);

      if (hideEvent.defaultPrevented) {
        return;
      }

      var complete = function complete() {
        _this46._element.classList.add(CLASS_NAME_HIDE); // @deprecated


        _this46._element.classList.remove(CLASS_NAME_SHOWING);

        _this46._element.classList.remove(CLASS_NAME_SHOW);

        EventHandler.trigger(_this46._element, EVENT_HIDDEN);
      };

      this._element.classList.add(CLASS_NAME_SHOWING);

      this._queueCallback(complete, this._element, this._config.animation);
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this._clearTimeout();

      if (this._element.classList.contains(CLASS_NAME_SHOW)) {
        this._element.classList.remove(CLASS_NAME_SHOW);
      }

      _get(_getPrototypeOf(Toast.prototype), "dispose", this).call(this);
    } // Private

  }, {
    key: "_getConfig",
    value: function _getConfig(config) {
      config = _objectSpread(_objectSpread(_objectSpread({}, Default), Manipulator.getDataAttributes(this._element)), _typeof(config) === 'object' && config ? config : {});
      typeCheckConfig(NAME, config, this.constructor.DefaultType);
      return config;
    }
  }, {
    key: "_maybeScheduleHide",
    value: function _maybeScheduleHide() {
      var _this47 = this;

      if (!this._config.autohide) {
        return;
      }

      if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
        return;
      }

      this._timeout = setTimeout(function () {
        _this47.hide();
      }, this._config.delay);
    }
  }, {
    key: "_onInteraction",
    value: function _onInteraction(event, isInteracting) {
      switch (event.type) {
        case 'mouseover':
        case 'mouseout':
          this._hasMouseInteraction = isInteracting;
          break;

        case 'focusin':
        case 'focusout':
          this._hasKeyboardInteraction = isInteracting;
          break;
      }

      if (isInteracting) {
        this._clearTimeout();

        return;
      }

      var nextElement = event.relatedTarget;

      if (this._element === nextElement || this._element.contains(nextElement)) {
        return;
      }

      this._maybeScheduleHide();
    }
  }, {
    key: "_setListeners",
    value: function _setListeners() {
      var _this48 = this;

      EventHandler.on(this._element, EVENT_MOUSEOVER, function (event) {
        return _this48._onInteraction(event, true);
      });
      EventHandler.on(this._element, EVENT_MOUSEOUT, function (event) {
        return _this48._onInteraction(event, false);
      });
      EventHandler.on(this._element, EVENT_FOCUSIN, function (event) {
        return _this48._onInteraction(event, true);
      });
      EventHandler.on(this._element, EVENT_FOCUSOUT, function (event) {
        return _this48._onInteraction(event, false);
      });
    }
  }, {
    key: "_clearTimeout",
    value: function _clearTimeout() {
      clearTimeout(this._timeout);
      this._timeout = null;
    } // Static

  }], [{
    key: "DefaultType",
    get: function get() {
      return DefaultType;
    }
  }, {
    key: "Default",
    get: function get() {
      return Default;
    }
  }, {
    key: "NAME",
    get: function get() {
      return NAME;
    }
  }, {
    key: "jQueryInterface",
    value: function jQueryInterface(config) {
      return this.each(function () {
        var data = Toast.getOrCreateInstance(this, config);

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"".concat(config, "\""));
          }

          data[config](this);
        }
      });
    }
  }]);

  return Toast;
}(BaseComponent);

enableDismissTrigger(Toast);
/**
 * ------------------------------------------------------------------------
 * jQuery
 * ------------------------------------------------------------------------
 * add .Toast to jQuery only if jQuery is present
 */

defineJQueryPlugin(Toast);


/***/ }),

/***/ "./node_modules/braintree-web-drop-in/dist/browser/dropin.js":
/*!*******************************************************************!*\
  !*** ./node_modules/braintree-web-drop-in/dist/browser/dropin.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

(function (f) {
  if (( false ? undefined : _typeof(exports)) === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var g; }
})(function () {
  var define, module, exports;
  return function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;
            if (!f && c) return require(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw a.code = "MODULE_NOT_FOUND", a;
          }

          var p = n[i] = {
            exports: {}
          };
          e[i][0].call(p.exports, function (r) {
            var n = e[i][1][r];
            return o(n || r);
          }, p, p.exports, r, e, n, t);
        }

        return n[i].exports;
      }

      for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
        o(t[i]);
      }

      return o;
    }

    return r;
  }()({
    1: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.loadStylesheet = exports.loadScript = void 0;

      var loadScript = require("./load-script");

      exports.loadScript = loadScript;

      var loadStylesheet = require("./load-stylesheet");

      exports.loadStylesheet = loadStylesheet;
    }, {
      "./load-script": 3,
      "./load-stylesheet": 4
    }],
    2: [function (require, module, exports) {
      "use strict";

      var __importDefault = this && this.__importDefault || function (mod) {
        return mod && mod.__esModule ? mod : {
          "default": mod
        };
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.PromiseGlobal = void 0;

      var promise_polyfill_1 = __importDefault(require("promise-polyfill"));

      var PromiseGlobal = // eslint-disable-next-line no-undef
      typeof Promise !== "undefined" ? Promise : promise_polyfill_1.default;
      exports.PromiseGlobal = PromiseGlobal;
    }, {
      "promise-polyfill": 186
    }],
    3: [function (require, module, exports) {
      "use strict";

      var promise_1 = require("./lib/promise");

      var scriptPromiseCache = {};

      function loadScript(options) {
        var scriptLoadPromise;
        var stringifiedOptions = JSON.stringify(options);

        if (!options.forceScriptReload) {
          scriptLoadPromise = scriptPromiseCache[stringifiedOptions];

          if (scriptLoadPromise) {
            return scriptLoadPromise;
          }
        }

        var script = document.createElement("script");
        var attrs = options.dataAttributes || {};
        var container = options.container || document.head;
        script.src = options.src;
        script.id = options.id || "";
        script.async = true;

        if (options.crossorigin) {
          script.setAttribute("crossorigin", "" + options.crossorigin);
        }

        Object.keys(attrs).forEach(function (key) {
          script.setAttribute("data-" + key, "" + attrs[key]);
        });
        scriptLoadPromise = new promise_1.PromiseGlobal(function (resolve, reject) {
          script.addEventListener("load", function () {
            resolve(script);
          });
          script.addEventListener("error", function () {
            reject(new Error(options.src + " failed to load."));
          });
          script.addEventListener("abort", function () {
            reject(new Error(options.src + " has aborted."));
          });
          container.appendChild(script);
        });
        scriptPromiseCache[stringifiedOptions] = scriptLoadPromise;
        return scriptLoadPromise;
      }

      loadScript.clearCache = function () {
        scriptPromiseCache = {};
      };

      module.exports = loadScript;
    }, {
      "./lib/promise": 2
    }],
    4: [function (require, module, exports) {
      "use strict";

      var promise_1 = require("./lib/promise");

      module.exports = function loadStylesheet(options) {
        var stylesheet = document.querySelector("link[href=\"" + options.href + "\"]");

        if (stylesheet) {
          return promise_1.PromiseGlobal.resolve(stylesheet);
        }

        stylesheet = document.createElement("link");
        var container = options.container || document.head;
        stylesheet.setAttribute("rel", "stylesheet");
        stylesheet.setAttribute("type", "text/css");
        stylesheet.setAttribute("href", options.href);
        stylesheet.setAttribute("id", options.id);

        if (container.firstChild) {
          container.insertBefore(stylesheet, container.firstChild);
        } else {
          container.appendChild(stylesheet);
        }

        return promise_1.PromiseGlobal.resolve(stylesheet);
      };
    }, {
      "./lib/promise": 2
    }],
    5: [function (require, module, exports) {
      module.exports = require("./dist/load-script");
    }, {
      "./dist/load-script": 3
    }],
    6: [function (require, module, exports) {
      "use strict";

      module.exports = function isAndroid(ua) {
        ua = ua || window.navigator.userAgent;
        return /Android/.test(ua);
      };
    }, {}],
    7: [function (require, module, exports) {
      "use strict";

      module.exports = function isChromeOS(ua) {
        ua = ua || window.navigator.userAgent;
        return /CrOS/i.test(ua);
      };
    }, {}],
    8: [function (require, module, exports) {
      "use strict";

      var isEdge = require("./is-edge");

      var isSamsung = require("./is-samsung");

      var isDuckDuckGo = require("./is-duckduckgo");

      var isOpera = require("./is-opera");

      var isSilk = require("./is-silk");

      module.exports = function isChrome(ua) {
        ua = ua || window.navigator.userAgent;
        return (ua.indexOf("Chrome") !== -1 || ua.indexOf("CriOS") !== -1) && !isEdge(ua) && !isSamsung(ua) && !isDuckDuckGo(ua) && !isOpera(ua) && !isSilk(ua);
      };
    }, {
      "./is-duckduckgo": 9,
      "./is-edge": 10,
      "./is-opera": 22,
      "./is-samsung": 23,
      "./is-silk": 24
    }],
    9: [function (require, module, exports) {
      "use strict";

      module.exports = function isDuckDuckGo(ua) {
        ua = ua || window.navigator.userAgent;
        return ua.indexOf("DuckDuckGo/") !== -1;
      };
    }, {}],
    10: [function (require, module, exports) {
      "use strict";

      module.exports = function isEdge(ua) {
        ua = ua || window.navigator.userAgent;
        return ua.indexOf("Edge/") !== -1;
      };
    }, {}],
    11: [function (require, module, exports) {
      "use strict";

      module.exports = function isFirefox(ua) {
        ua = ua || window.navigator.userAgent;
        return /Firefox/i.test(ua);
      };
    }, {}],
    12: [function (require, module, exports) {
      "use strict";

      var isIE11 = require("./is-ie11");

      module.exports = function isIE(ua) {
        ua = ua || window.navigator.userAgent;
        return ua.indexOf("MSIE") !== -1 || isIE11(ua);
      };
    }, {
      "./is-ie11": 14
    }],
    13: [function (require, module, exports) {
      "use strict";

      module.exports = function isIe10(ua) {
        ua = ua || window.navigator.userAgent;
        return ua.indexOf("MSIE 10") !== -1;
      };
    }, {}],
    14: [function (require, module, exports) {
      "use strict";

      module.exports = function isIe11(ua) {
        ua = ua || window.navigator.userAgent;
        return ua.indexOf("Trident/7") !== -1;
      };
    }, {}],
    15: [function (require, module, exports) {
      "use strict";

      module.exports = function isIe9(ua) {
        ua = ua || window.navigator.userAgent;
        return ua.indexOf("MSIE 9") !== -1;
      };
    }, {}],
    16: [function (require, module, exports) {
      "use strict";

      module.exports = function isIosFirefox(ua) {
        ua = ua || window.navigator.userAgent;
        return /FxiOS/i.test(ua);
      };
    }, {}],
    17: [function (require, module, exports) {
      "use strict";

      var isIos = require("./is-ios");

      function isGoogleSearchApp(ua) {
        return /\bGSA\b/.test(ua);
      }

      module.exports = function isIosGoogleSearchApp(ua) {
        ua = ua || window.navigator.userAgent;
        return isIos(ua) && isGoogleSearchApp(ua);
      };
    }, {
      "./is-ios": 21
    }],
    18: [function (require, module, exports) {
      "use strict";

      var isIos = require("./is-ios");

      var isIosFirefox = require("./is-ios-firefox");

      var webkitRegexp = /webkit/i;

      function isWebkit(ua) {
        return webkitRegexp.test(ua);
      }

      function isIosChrome(ua) {
        return ua.indexOf("CriOS") > -1;
      }

      function isFacebook(ua) {
        return ua.indexOf("FBAN") > -1;
      }

      module.exports = function isIosSafari(ua) {
        ua = ua || window.navigator.userAgent;
        return isIos(ua) && isWebkit(ua) && !isIosChrome(ua) && !isIosFirefox(ua) && !isFacebook(ua);
      };
    }, {
      "./is-ios": 21,
      "./is-ios-firefox": 16
    }],
    19: [function (require, module, exports) {
      "use strict";

      var isIos = require("./is-ios");

      var isIosGoogleSearchApp = require("./is-ios-google-search-app");

      module.exports = function isIosWebview(ua) {
        ua = ua || window.navigator.userAgent;

        if (isIos(ua)) {
          // The Google Search iOS app is technically a webview and doesn't support popups.
          if (isIosGoogleSearchApp(ua)) {
            return true;
          }

          return /.+AppleWebKit(?!.*Safari)/.test(ua);
        }

        return false;
      };
    }, {
      "./is-ios": 21,
      "./is-ios-google-search-app": 17
    }],
    20: [function (require, module, exports) {
      "use strict";

      var isIosWebview = require("./is-ios-webview");

      module.exports = function isIosWKWebview(ua, statusBarVisible) {
        statusBarVisible = typeof statusBarVisible !== "undefined" ? statusBarVisible : window.statusbar.visible;
        return isIosWebview(ua) && statusBarVisible;
      };
    }, {
      "./is-ios-webview": 19
    }],
    21: [function (require, module, exports) {
      "use strict";

      module.exports = function isIos(ua) {
        ua = ua || window.navigator.userAgent;
        return /iPhone|iPod|iPad/i.test(ua);
      };
    }, {}],
    22: [function (require, module, exports) {
      "use strict";

      module.exports = function isOpera(ua) {
        ua = ua || window.navigator.userAgent;
        return ua.indexOf("OPR/") !== -1 || ua.indexOf("Opera/") !== -1 || ua.indexOf("OPT/") !== -1;
      };
    }, {}],
    23: [function (require, module, exports) {
      "use strict";

      module.exports = function isSamsungBrowser(ua) {
        ua = ua || window.navigator.userAgent;
        return /SamsungBrowser/i.test(ua);
      };
    }, {}],
    24: [function (require, module, exports) {
      "use strict";

      module.exports = function isSilk(ua) {
        ua = ua || window.navigator.userAgent;
        return ua.indexOf("Silk/") !== -1;
      };
    }, {}],
    25: [function (require, module, exports) {
      "use strict";

      var MINIMUM_SUPPORTED_CHROME_IOS_VERSION = 48;

      var isAndroid = require("./is-android");

      var isIosFirefox = require("./is-ios-firefox");

      var isIosWebview = require("./is-ios-webview");

      var isChrome = require("./is-chrome");

      var isSamsungBrowser = require("./is-samsung");

      var isDuckDuckGo = require("./is-duckduckgo");

      function isUnsupportedIosChrome(ua) {
        ua = ua || window.navigator.userAgent;
        var match = ua.match(/CriOS\/(\d+)\./);

        if (!match) {
          return false;
        }

        var version = parseInt(match[1], 10);
        return version < MINIMUM_SUPPORTED_CHROME_IOS_VERSION;
      }

      function isOperaMini(ua) {
        ua = ua || window.navigator.userAgent;
        return ua.indexOf("Opera Mini") > -1;
      }

      function isAndroidWebview(ua) {
        var androidWebviewRegExp = /Version\/[\d.]+/;
        ua = ua || window.navigator.userAgent;

        if (isAndroid(ua)) {
          return androidWebviewRegExp.test(ua) && !isOperaMini(ua) && !isDuckDuckGo(ua);
        }

        return false;
      }

      function isOldSamsungBrowserOrSamsungWebview(ua) {
        return !isChrome(ua) && !isSamsungBrowser(ua) && /samsung/i.test(ua);
      }

      module.exports = function supportsPopups(ua) {
        ua = ua || window.navigator.userAgent;
        return !(isIosWebview(ua) || isIosFirefox(ua) || isAndroidWebview(ua) || isOperaMini(ua) || isUnsupportedIosChrome(ua) || isOldSamsungBrowserOrSamsungWebview(ua));
      };
    }, {
      "./is-android": 6,
      "./is-chrome": 8,
      "./is-duckduckgo": 9,
      "./is-ios-firefox": 16,
      "./is-ios-webview": 19,
      "./is-samsung": 23
    }],
    26: [function (require, module, exports) {
      module.exports = require("./dist/is-android");
    }, {
      "./dist/is-android": 6
    }],
    27: [function (require, module, exports) {
      module.exports = require("./dist/is-chrome-os");
    }, {
      "./dist/is-chrome-os": 7
    }],
    28: [function (require, module, exports) {
      module.exports = require("./dist/is-chrome");
    }, {
      "./dist/is-chrome": 8
    }],
    29: [function (require, module, exports) {
      module.exports = require("./dist/is-edge");
    }, {
      "./dist/is-edge": 10
    }],
    30: [function (require, module, exports) {
      module.exports = require("./dist/is-firefox");
    }, {
      "./dist/is-firefox": 11
    }],
    31: [function (require, module, exports) {
      module.exports = require("./dist/is-ie");
    }, {
      "./dist/is-ie": 12
    }],
    32: [function (require, module, exports) {
      module.exports = require("./dist/is-ie10");
    }, {
      "./dist/is-ie10": 13
    }],
    33: [function (require, module, exports) {
      module.exports = require("./dist/is-ie9");
    }, {
      "./dist/is-ie9": 15
    }],
    34: [function (require, module, exports) {
      module.exports = require("./dist/is-ios-safari");
    }, {
      "./dist/is-ios-safari": 18
    }],
    35: [function (require, module, exports) {
      module.exports = require("./dist/is-ios-webview");
    }, {
      "./dist/is-ios-webview": 19
    }],
    36: [function (require, module, exports) {
      module.exports = require("./dist/is-ios-wkwebview");
    }, {
      "./dist/is-ios-wkwebview": 20
    }],
    37: [function (require, module, exports) {
      module.exports = require("./dist/is-ios");
    }, {
      "./dist/is-ios": 21
    }],
    38: [function (require, module, exports) {
      module.exports = require("./dist/supports-popups");
    }, {
      "./dist/supports-popups": 25
    }],
    39: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.toggle = exports.remove = exports.add = void 0;

      function _classesOf(element) {
        return element.className.trim().split(/\s+/);
      }

      function add(element) {
        var toAdd = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          toAdd[_i - 1] = arguments[_i];
        }

        element.className = _classesOf(element).filter(function (classname) {
          return toAdd.indexOf(classname) === -1;
        }).concat(toAdd).join(" ");
      }

      exports.add = add;

      function remove(element) {
        var toRemove = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          toRemove[_i - 1] = arguments[_i];
        }

        element.className = _classesOf(element).filter(function (classname) {
          return toRemove.indexOf(classname) === -1;
        }).join(" ");
      }

      exports.remove = remove;

      function toggle(element, classname, adding) {
        if (adding) {
          add(element, classname);
        } else {
          remove(element, classname);
        }
      }

      exports.toggle = toggle;
    }, {}],
    40: [function (require, module, exports) {
      "use strict";

      var EventEmitter =
      /** @class */
      function () {
        function EventEmitter() {
          this._events = {};
        }

        EventEmitter.prototype.on = function (event, callback) {
          if (this._events[event]) {
            this._events[event].push(callback);
          } else {
            this._events[event] = [callback];
          }
        };

        EventEmitter.prototype.off = function (event, callback) {
          var eventCallbacks = this._events[event];

          if (!eventCallbacks) {
            return;
          }

          var indexOfCallback = eventCallbacks.indexOf(callback);
          eventCallbacks.splice(indexOfCallback, 1);
        };

        EventEmitter.prototype._emit = function (event) {
          var args = [];

          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }

          var eventCallbacks = this._events[event];

          if (!eventCallbacks) {
            return;
          }

          eventCallbacks.forEach(function (callback) {
            callback.apply(void 0, args);
          });
        };

        EventEmitter.prototype.hasListener = function (event) {
          var eventCallbacks = this._events[event];

          if (!eventCallbacks) {
            return false;
          }

          return eventCallbacks.length > 0;
        };

        EventEmitter.createChild = function (ChildObject) {
          ChildObject.prototype = Object.create(EventEmitter.prototype, {
            constructor: ChildObject
          });
        };

        return EventEmitter;
      }();

      module.exports = EventEmitter;
    }, {}],
    41: [function (require, module, exports) {
      "use strict";

      var GlobalPromise = typeof Promise !== "undefined" ? Promise // eslint-disable-line no-undef
      : null;

      var ExtendedPromise =
      /** @class */
      function () {
        function ExtendedPromise(options) {
          var _this = this;

          if (typeof options === "function") {
            this._promise = new ExtendedPromise.Promise(options);
            return;
          }

          this._promise = new ExtendedPromise.Promise(function (resolve, reject) {
            _this._resolveFunction = resolve;
            _this._rejectFunction = reject;
          });
          options = options || {};
          this._onResolve = options.onResolve || ExtendedPromise.defaultOnResolve;
          this._onReject = options.onReject || ExtendedPromise.defaultOnReject;

          if (ExtendedPromise.shouldCatchExceptions(options)) {
            this._promise.catch(function () {// prevents unhandled promise rejection warning
              // in the console for extended promises that
              // that catch the error in an asynchronous manner
            });
          }

          this._resetState();
        }

        ExtendedPromise.defaultOnResolve = function (result) {
          return ExtendedPromise.Promise.resolve(result);
        };

        ExtendedPromise.defaultOnReject = function (err) {
          return ExtendedPromise.Promise.reject(err);
        };

        ExtendedPromise.setPromise = function (PromiseClass) {
          ExtendedPromise.Promise = PromiseClass;
        };

        ExtendedPromise.shouldCatchExceptions = function (options) {
          if (options.hasOwnProperty("suppressUnhandledPromiseMessage")) {
            return Boolean(options.suppressUnhandledPromiseMessage);
          }

          return Boolean(ExtendedPromise.suppressUnhandledPromiseMessage);
        }; // start Promise methods documented in:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#Methods


        ExtendedPromise.all = function (args) {
          return ExtendedPromise.Promise.all(args);
        };

        ExtendedPromise.allSettled = function (args) {
          return ExtendedPromise.Promise.allSettled(args);
        };

        ExtendedPromise.race = function (args) {
          return ExtendedPromise.Promise.race(args);
        };

        ExtendedPromise.reject = function (arg) {
          return ExtendedPromise.Promise.reject(arg);
        };

        ExtendedPromise.resolve = function (arg) {
          return ExtendedPromise.Promise.resolve(arg);
        };

        ExtendedPromise.prototype.then = function () {
          var _a;

          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          return (_a = this._promise).then.apply(_a, args);
        };

        ExtendedPromise.prototype.catch = function () {
          var _a;

          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          return (_a = this._promise).catch.apply(_a, args);
        };

        ExtendedPromise.prototype.resolve = function (arg) {
          var _this = this;

          if (this.isFulfilled) {
            return this;
          }

          this._setResolved();

          ExtendedPromise.Promise.resolve().then(function () {
            return _this._onResolve(arg);
          }).then(function (argForResolveFunction) {
            _this._resolveFunction(argForResolveFunction);
          }).catch(function (err) {
            _this._resetState();

            _this.reject(err);
          });
          return this;
        };

        ExtendedPromise.prototype.reject = function (arg) {
          var _this = this;

          if (this.isFulfilled) {
            return this;
          }

          this._setRejected();

          ExtendedPromise.Promise.resolve().then(function () {
            return _this._onReject(arg);
          }).then(function (result) {
            _this._setResolved();

            _this._resolveFunction(result);
          }).catch(function (err) {
            return _this._rejectFunction(err);
          });
          return this;
        };

        ExtendedPromise.prototype._resetState = function () {
          this.isFulfilled = false;
          this.isResolved = false;
          this.isRejected = false;
        };

        ExtendedPromise.prototype._setResolved = function () {
          this.isFulfilled = true;
          this.isResolved = true;
          this.isRejected = false;
        };

        ExtendedPromise.prototype._setRejected = function () {
          this.isFulfilled = true;
          this.isResolved = false;
          this.isRejected = true;
        };

        ExtendedPromise.Promise = GlobalPromise;
        return ExtendedPromise;
      }();

      module.exports = ExtendedPromise;
    }, {}],
    42: [function (require, module, exports) {
      "use strict";

      var set_attributes_1 = require("./lib/set-attributes");

      var default_attributes_1 = require("./lib/default-attributes");

      var assign_1 = require("./lib/assign");

      module.exports = function createFrame(options) {
        if (options === void 0) {
          options = {};
        }

        var iframe = document.createElement("iframe");
        var config = assign_1.assign({}, default_attributes_1.defaultAttributes, options);

        if (config.style && typeof config.style !== "string") {
          assign_1.assign(iframe.style, config.style);
          delete config.style;
        }

        set_attributes_1.setAttributes(iframe, config);

        if (!iframe.getAttribute("id")) {
          iframe.id = iframe.name;
        }

        return iframe;
      };
    }, {
      "./lib/assign": 43,
      "./lib/default-attributes": 44,
      "./lib/set-attributes": 45
    }],
    43: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.assign = void 0;

      function assign( // eslint-disable-next-line @typescript-eslint/no-explicit-any
      target) {
        var objs = [];

        for (var _i = 1; _i < arguments.length; _i++) {
          objs[_i - 1] = arguments[_i];
        }

        objs.forEach(function (obj) {
          if (_typeof(obj) !== "object") {
            return;
          }

          Object.keys(obj).forEach(function (key) {
            target[key] = obj[key];
          });
        });
        return target;
      }

      exports.assign = assign;
    }, {}],
    44: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.defaultAttributes = void 0;
      exports.defaultAttributes = {
        src: "about:blank",
        frameBorder: 0,
        allowtransparency: true,
        scrolling: "no"
      };
    }, {}],
    45: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.setAttributes = void 0;

      function setAttributes(element, // eslint-disable-next-line @typescript-eslint/no-explicit-any
      attributes) {
        for (var key in attributes) {
          if (attributes.hasOwnProperty(key)) {
            var value = attributes[key];

            if (value == null) {
              element.removeAttribute(key);
            } else {
              element.setAttribute(key, value);
            }
          }
        }
      }

      exports.setAttributes = setAttributes;
    }, {}],
    46: [function (require, module, exports) {
      'use strict';

      function uuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
          var r = Math.random() * 16 | 0;
          var v = c === 'x' ? r : r & 0x3 | 0x8;
          return v.toString(16);
        });
      }

      module.exports = uuid;
    }, {}],
    47: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      function deferred(fn) {
        return function () {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          setTimeout(function () {
            try {
              fn.apply(void 0, args);
            } catch (err) {
              /* eslint-disable no-console */
              console.log("Error in callback function");
              console.log(err);
              /* eslint-enable no-console */
            }
          }, 1);
        };
      }

      exports.deferred = deferred;
    }, {}],
    48: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      function once(fn) {
        var called = false;
        return function () {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          if (!called) {
            called = true;
            fn.apply(void 0, args);
          }
        };
      }

      exports.once = once;
    }, {}],
    49: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /* eslint-disable consistent-return */

      function promiseOrCallback(promise, callback) {
        if (!callback) {
          return promise;
        }

        promise.then(function (data) {
          return callback(null, data);
        }).catch(function (err) {
          return callback(err);
        });
      }

      exports.promiseOrCallback = promiseOrCallback;
    }, {}],
    50: [function (require, module, exports) {
      "use strict";

      var deferred_1 = require("./lib/deferred");

      var once_1 = require("./lib/once");

      var promise_or_callback_1 = require("./lib/promise-or-callback");

      function wrapPromise(fn) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return function () {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          var callback;
          var lastArg = args[args.length - 1];

          if (typeof lastArg === "function") {
            callback = args.pop();
            callback = once_1.once(deferred_1.deferred(callback));
          } // I know, I know, this looks bad. But it's a quirk of the library that
          // we need to allow passing the this context to the original function
          // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
          // @ts-ignore: this has an implicit any


          return promise_or_callback_1.promiseOrCallback(fn.apply(this, args), callback); // eslint-disable-line no-invalid-this
        };
      }

      wrapPromise.wrapPrototype = function (target, options) {
        if (options === void 0) {
          options = {};
        }

        var ignoreMethods = options.ignoreMethods || [];
        var includePrivateMethods = options.transformPrivateMethods === true;
        var methods = Object.getOwnPropertyNames(target.prototype).filter(function (method) {
          var isNotPrivateMethod;
          var isNonConstructorFunction = method !== "constructor" && typeof target.prototype[method] === "function";
          var isNotAnIgnoredMethod = ignoreMethods.indexOf(method) === -1;

          if (includePrivateMethods) {
            isNotPrivateMethod = true;
          } else {
            isNotPrivateMethod = method.charAt(0) !== "_";
          }

          return isNonConstructorFunction && isNotPrivateMethod && isNotAnIgnoredMethod;
        });
        methods.forEach(function (method) {
          var original = target.prototype[method];
          target.prototype[method] = wrapPromise(original);
        });
        return target;
      };

      module.exports = wrapPromise;
    }, {
      "./lib/deferred": 47,
      "./lib/once": 48,
      "./lib/promise-or-callback": 49
    }],
    51: [function (require, module, exports) {
      'use strict';

      var BraintreeError = require('../lib/braintree-error');

      var analytics = require('../lib/analytics');

      var errors = require('./errors');

      var Promise = require('../lib/promise');

      var methods = require('../lib/methods');

      var convertMethodsToError = require('../lib/convert-methods-to-error');

      var wrapPromise = require('@braintree/wrap-promise');
      /**
       * @typedef {object} ApplePay~tokenizePayload
       * @property {string} nonce The payment method nonce.
       * @property {object} details Additional details.
       * @property {string} details.cardType Type of card, ex: Visa, MasterCard.
       * @property {string} details.cardHolderName The name of the card holder.
       * @property {string} details.dpanLastTwo Last two digits of card number.
       * @property {string} description A human-readable description.
       * @property {string} type The payment method type, always `ApplePayCard`.
       * @property {object} binData Information about the card based on the bin.
       * @property {string} binData.commercial Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.countryOfIssuance The country of issuance.
       * @property {string} binData.debit Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.durbinRegulated Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.healthcare Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.issuingBank The issuing bank.
       * @property {string} binData.payroll Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.prepaid Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.productId The product id.
       */

      /**
       * An Apple Pay Payment Authorization Event object.
       * @typedef {object} ApplePayPaymentAuthorizedEvent
       * @external ApplePayPaymentAuthorizedEvent
       * @see {@link https://developer.apple.com/reference/applepayjs/applepaypaymentauthorizedevent ApplePayPaymentAuthorizedEvent}
       */

      /**
       * An Apple Pay Payment Request object.
       * @typedef {object} ApplePayPaymentRequest
       * @external ApplePayPaymentRequest
       * @see {@link https://developer.apple.com/reference/applepayjs/1916082-applepay_js_data_types/paymentrequest PaymentRequest}
       */

      /**
       * @class
       * @param {object} options Options
       * @description <strong>You cannot use this constructor directly. Use {@link module:braintree-web/apple-pay.create|braintree.applePay.create} instead.</strong>
       * @classdesc This class represents an Apple Pay component. Instances of this class have methods for validating the merchant server and tokenizing payments.
       */


      function ApplePay(options) {
        this._instantiatedWithClient = Boolean(!options.useDeferredClient);
        this._client = options.client;
        this._createPromise = options.createPromise;

        if (this._client) {
          this._setMerchantIdentifier();
        }
      }

      ApplePay.prototype._waitForClient = function () {
        if (this._client) {
          return Promise.resolve();
        }

        return this._createPromise.then(function (client) {
          this._client = client;

          this._setMerchantIdentifier();
        }.bind(this));
      };

      ApplePay.prototype._setMerchantIdentifier = function () {
        var applePayConfig = this._client.getConfiguration().gatewayConfiguration.applePayWeb;

        if (!applePayConfig) {
          return;
        }
        /**
         * @name ApplePay#merchantIdentifier
         * @description A special merchant ID which represents the merchant association with Braintree. Required when using `ApplePaySession.canMakePaymentsWithActiveCard`.
         * @example
         * var promise = ApplePaySession.canMakePaymentsWithActiveCard(applePayInstance.merchantIdentifier);
         * promise.then(function (canMakePaymentsWithActiveCard) {
         *   if (canMakePaymentsWithActiveCard) {
         *     // Set up Apple Pay buttons
         *   }
         * });
         */


        Object.defineProperty(this, 'merchantIdentifier', {
          value: applePayConfig.merchantIdentifier,
          configurable: false,
          writable: false
        });
      };
      /**
       * Merges a payment request with Braintree defaults to return an {external:ApplePayPaymentRequest}.
       *
       * The following properties are assigned to `paymentRequest` if not already defined. Their default values come from the Braintree gateway.
       * - `countryCode`
       * - `currencyCode`
       * - `merchantCapabilities`
       * - `supportedNetworks`
       * @public
       * @param {external:ApplePayPaymentRequest} paymentRequest The payment request details to apply on top of those from Braintree.
       * @returns {external:ApplePayPaymentRequest|Promise} The decorated `paymentRequest` object. If `useDeferredClient` is used along with an `authorization`, this method will return a promise that resolves with the `paymentRequest` object.
       * @example
       * var applePay = require('braintree-web/apple-pay');
       *
       * applePay.create({client: clientInstance}, function (applePayErr, applePayInstance) {
       *   if (applePayErr) {
       *     // Handle error here
       *     return;
       *   }
       *
       *   var paymentRequest = applePayInstance.createPaymentRequest({
       *     total: {
       *       label: 'My Company',
       *       amount: '19.99'
       *     }
       *   });
       *
       *   var session = new ApplePaySession(3, paymentRequest);
       *
       *   // ...
       * @example <caption>With deferred client</caption>
       * var applePay = require('braintree-web/apple-pay');
       *
       * applePay.create({
       *   authorization: 'client-token-or-tokenization-key',
       *   useDeferredClient: true
       * }, function (applePayErr, applePayInstance) {
       *   if (applePayErr) {
       *     // Handle error here
       *     return;
       *   }
       *
       *   applePayInstance.createPaymentRequest({
       *     total: {
       *       label: 'My Company',
       *       amount: '19.99'
       *     }
       *   }).then(function (paymentRequest) {
       *     var session = new ApplePaySession(3, paymentRequest);
       *
       *     // ...
       *   });
       */


      ApplePay.prototype.createPaymentRequest = function (paymentRequest) {
        if (this._instantiatedWithClient) {
          return this._createPaymentRequestSynchronously(paymentRequest);
        }

        return this._waitForClient().then(function () {
          return this._createPaymentRequestSynchronously(paymentRequest);
        }.bind(this));
      };

      ApplePay.prototype._createPaymentRequestSynchronously = function (paymentRequest) {
        var applePay = this._client.getConfiguration().gatewayConfiguration.applePayWeb;

        var defaults = {
          countryCode: applePay.countryCode,
          currencyCode: applePay.currencyCode,
          merchantCapabilities: applePay.merchantCapabilities || ['supports3DS'],
          supportedNetworks: applePay.supportedNetworks.map(function (network) {
            return network === 'mastercard' ? 'masterCard' : network;
          })
        };
        return Object.assign({}, defaults, paymentRequest);
      };
      /**
       * Validates your merchant website, as required by `ApplePaySession` before payment can be authorized.
       * @public
       * @param {object} options Options
       * @param {string} options.validationURL The validationURL from an `ApplePayValidateMerchantEvent`.
       * @param {string} options.displayName The canonical name for your store. Use a non-localized name. This parameter should be a UTF-8 string that is a maximum of 128 characters. The system may display this name to the user.
       * @param {callback} [callback] The second argument, <code>data</code>, is the Apple Pay merchant session object. If no callback is provided, `performValidation` returns a promise.
       * Pass the merchant session to your Apple Pay session's `completeMerchantValidation` method.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example
       * var applePay = require('braintree-web/apple-pay');
       *
       * applePay.create({client: clientInstance}, function (applePayErr, applePayInstance) {
       *   if (applePayErr) {
       *     // Handle error here
       *     return;
       *   }
       *
       *   var paymentRequest = applePayInstance.createPaymentRequest({
       *     total: {
       *       label: 'My Company',
       *       amount: '19.99'
       *     }
       *   });
       *   var session = new ApplePaySession(3, paymentRequest);
       *
       *   session.onvalidatemerchant = function (event) {
       *     applePayInstance.performValidation({
       *       validationURL: event.validationURL,
       *       displayName: 'My Great Store'
       *     }, function (validationErr, validationData) {
       *       if (validationErr) {
       *         console.error(validationErr);
       *         session.abort();
       *         return;
       *       }
       *
       *       session.completeMerchantValidation(validationData);
       *     });
       *   };
       * });
       */


      ApplePay.prototype.performValidation = function (options) {
        var self = this;

        if (!options || !options.validationURL) {
          return Promise.reject(new BraintreeError(errors.APPLE_PAY_VALIDATION_URL_REQUIRED));
        }

        return this._waitForClient().then(function () {
          var applePayWebSession = {
            validationUrl: options.validationURL,
            domainName: options.domainName || window.location.hostname,
            merchantIdentifier: options.merchantIdentifier || self.merchantIdentifier
          };

          if (options.displayName != null) {
            applePayWebSession.displayName = options.displayName;
          }

          return self._client.request({
            method: 'post',
            endpoint: 'apple_pay_web/sessions',
            data: {
              _meta: {
                source: 'apple-pay'
              },
              applePayWebSession: applePayWebSession
            }
          });
        }).then(function (response) {
          analytics.sendEvent(self._client, 'applepay.performValidation.succeeded');
          return Promise.resolve(response);
        }).catch(function (err) {
          analytics.sendEvent(self._client, 'applepay.performValidation.failed');

          if (err.code === 'CLIENT_REQUEST_ERROR') {
            return Promise.reject(new BraintreeError({
              type: errors.APPLE_PAY_MERCHANT_VALIDATION_FAILED.type,
              code: errors.APPLE_PAY_MERCHANT_VALIDATION_FAILED.code,
              message: errors.APPLE_PAY_MERCHANT_VALIDATION_FAILED.message,
              details: {
                originalError: err.details.originalError
              }
            }));
          }

          return Promise.reject(new BraintreeError({
            type: errors.APPLE_PAY_MERCHANT_VALIDATION_NETWORK.type,
            code: errors.APPLE_PAY_MERCHANT_VALIDATION_NETWORK.code,
            message: errors.APPLE_PAY_MERCHANT_VALIDATION_NETWORK.message,
            details: {
              originalError: err
            }
          }));
        });
      };
      /**
       * Tokenizes an Apple Pay payment. This will likely be called in your `ApplePaySession`'s `onpaymentauthorized` callback.
       * @public
       * @param {object} options Options
       * @param {object} options.token The `payment.token` property of an {@link external:ApplePayPaymentAuthorizedEvent}.
       * @param {callback} [callback] The second argument, <code>data</code>, is a {@link ApplePay~tokenizePayload|tokenizePayload}. If no callback is provided, `tokenize` returns a promise that resolves with a {@link ApplePay~tokenizePayload|tokenizePayload}.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example
       * var applePay = require('braintree-web/apple-pay');
       *
       * applePay.create({client: clientInstance}, function (applePayErr, applePayInstance) {
       *   if (applePayErr) {
       *     // Handle error here
       *     return;
       *   }
       *
       *   var paymentRequest = applePayInstance.createPaymentRequest({
       *     total: {
       *       label: 'My Company',
       *       amount: '19.99'
       *     }
       *   });
       *   var session = new ApplePaySession(3, paymentRequest);
       *
       *   session.onpaymentauthorized = function (event) {
       *     applePayInstance.tokenize({
       *       token: event.payment.token
       *     }, function (tokenizeErr, tokenizedPayload) {
       *       if (tokenizeErr) {
       *         session.completePayment(ApplePaySession.STATUS_FAILURE);
       *         return;
       *       }
       *       // Send the tokenizedPayload to your server here!
       *
       *       // Once the transaction is complete, call completePayment
       *       // to close the Apple Pay sheet
       *       session.completePayment(ApplePaySession.STATUS_SUCCESS);
       *     });
       *   };
       *
       *   // ...
       * });
       */


      ApplePay.prototype.tokenize = function (options) {
        var self = this;

        if (!options.token) {
          return Promise.reject(new BraintreeError(errors.APPLE_PAY_PAYMENT_TOKEN_REQUIRED));
        }

        return this._waitForClient().then(function () {
          return self._client.request({
            method: 'post',
            endpoint: 'payment_methods/apple_payment_tokens',
            data: {
              _meta: {
                source: 'apple-pay'
              },
              applePaymentToken: Object.assign({}, options.token, {
                // The gateway requires this key to be base64-encoded.
                paymentData: btoa(JSON.stringify(options.token.paymentData))
              })
            }
          });
        }).then(function (response) {
          analytics.sendEvent(self._client, 'applepay.tokenize.succeeded');
          return Promise.resolve(response.applePayCards[0]);
        }).catch(function (err) {
          analytics.sendEvent(self._client, 'applepay.tokenize.failed');
          return Promise.reject(new BraintreeError({
            type: errors.APPLE_PAY_TOKENIZATION.type,
            code: errors.APPLE_PAY_TOKENIZATION.code,
            message: errors.APPLE_PAY_TOKENIZATION.message,
            details: {
              originalError: err
            }
          }));
        });
      };
      /**
       * Cleanly tear down anything set up by {@link module:braintree-web/apple-pay.create|create}.
       * @public
       * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.
       * @example
       * applePayInstance.teardown();
       * @example <caption>With callback</caption>
       * applePayInstance.teardown(function () {
       *   // teardown is complete
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      ApplePay.prototype.teardown = function () {
        convertMethodsToError(this, methods(ApplePay.prototype));
        return Promise.resolve();
      };

      module.exports = wrapPromise.wrapPrototype(ApplePay);
    }, {
      "../lib/analytics": 93,
      "../lib/braintree-error": 98,
      "../lib/convert-methods-to-error": 100,
      "../lib/methods": 128,
      "../lib/promise": 130,
      "./errors": 52,
      "@braintree/wrap-promise": 50
    }],
    52: [function (require, module, exports) {
      'use strict';
      /**
       * @name BraintreeError.Apple Pay - Creation Error Codes
       * @description Errors that occur when [creating the Apple Pay component](./module-braintree-web_apple-pay.html#.create).
       * @property {MERCHANT} APPLE_PAY_NOT_ENABLED Occurs when the authorization used is not authorized to process Apple Pay.
       */

      /**
       * @name BraintreeError.Apple Pay - performValidation Error Codes
       * @description Errors that occur when [validating](./ApplePay.html#performValidation).
       * @property {MERCHANT} APPLE_PAY_VALIDATION_URL_REQUIRED Occurs when the `validationURL` option is not passed in.
       * @property {MERCHANT} APPLE_PAY_MERCHANT_VALIDATION_FAILED Occurs when the website domain has not been registered in the Braintree control panel.
       * @property {NETWORK} APPLE_PAY_MERCHANT_VALIDATION_NETWORK Occurs when an unknown network error occurs.
       */

      /**
       * @name BraintreeError.Apple Pay - tokenize Error Codes
       * @description Errors that occur when [tokenizing](./ApplePay.html#tokenize).
       * @property {MERCHANT} APPLE_PAY_PAYMENT_TOKEN_REQUIRED Occurs when the `token` option is not passed in.
       * @property {NETWORK} APPLE_PAY_TOKENIZATION Occurs when an unknown network error occurs.
       */

      var BraintreeError = require('../lib/braintree-error');

      module.exports = {
        APPLE_PAY_NOT_ENABLED: {
          type: BraintreeError.types.MERCHANT,
          code: 'APPLE_PAY_NOT_ENABLED',
          message: 'Apple Pay is not enabled for this merchant.'
        },
        APPLE_PAY_VALIDATION_URL_REQUIRED: {
          type: BraintreeError.types.MERCHANT,
          code: 'APPLE_PAY_VALIDATION_URL_REQUIRED',
          message: 'performValidation must be called with a validationURL.'
        },
        APPLE_PAY_MERCHANT_VALIDATION_NETWORK: {
          type: BraintreeError.types.NETWORK,
          code: 'APPLE_PAY_MERCHANT_VALIDATION_NETWORK',
          message: 'A network error occurred when validating the Apple Pay merchant.'
        },
        APPLE_PAY_MERCHANT_VALIDATION_FAILED: {
          type: BraintreeError.types.MERCHANT,
          code: 'APPLE_PAY_MERCHANT_VALIDATION_FAILED',
          message: 'Make sure you have registered your domain name in the Braintree Control Panel.'
        },
        APPLE_PAY_PAYMENT_TOKEN_REQUIRED: {
          type: BraintreeError.types.MERCHANT,
          code: 'APPLE_PAY_PAYMENT_TOKEN_REQUIRED',
          message: 'tokenize must be called with a payment token.'
        },
        APPLE_PAY_TOKENIZATION: {
          type: BraintreeError.types.NETWORK,
          code: 'APPLE_PAY_TOKENIZATION',
          message: 'A network error occurred when processing the Apple Pay payment.'
        }
      };
    }, {
      "../lib/braintree-error": 98
    }],
    53: [function (require, module, exports) {
      'use strict';
      /**
       * @module braintree-web/apple-pay
       * @description Accept Apple Pay on the Web. *This component is currently in beta and is subject to change.*
       */

      var ApplePay = require('./apple-pay');

      var analytics = require('../lib/analytics');

      var BraintreeError = require('../lib/braintree-error');

      var basicComponentVerification = require('../lib/basic-component-verification');

      var createAssetsUrl = require('../lib/create-assets-url');

      var createDeferredClient = require('../lib/create-deferred-client');

      var Promise = require('../lib/promise');

      var errors = require('./errors');

      var VERSION = "3.83.0";

      var wrapPromise = require('@braintree/wrap-promise');
      /**
       * @static
       * @function create
       * @param {object} options Creation options:
       * @param {Client} [options.client] A {@link Client} instance.
       * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.
       * @param {boolean} [options.useDeferredClient] Used in conjunction with `authorization`, allows the Apple Pay instance to be available right away by fetching the client configuration in the background. When this option is used, {@link ApplePay#createPaymentRequest} will return a promise that resolves with the configuration instead of returning synchronously.
       * @param {callback} [callback] The second argument, `data`, is the {@link ApplePay} instance. If no callback is provided, `create` returns a promise that resolves with the {@link ApplePay} instance.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      function create(options) {
        var name = 'Apple Pay';
        return basicComponentVerification.verify({
          name: name,
          client: options.client,
          authorization: options.authorization
        }).then(function () {
          var applePayInstance;
          var createPromise = createDeferredClient.create({
            authorization: options.authorization,
            client: options.client,
            debug: options.debug,
            assetsUrl: createAssetsUrl.create(options.authorization),
            name: name
          }).then(function (client) {
            if (!client.getConfiguration().gatewayConfiguration.applePayWeb) {
              return Promise.reject(new BraintreeError(errors.APPLE_PAY_NOT_ENABLED));
            }

            analytics.sendEvent(client, 'applepay.initialized');
            return client;
          });
          options.createPromise = createPromise;
          applePayInstance = new ApplePay(options);

          if (!options.useDeferredClient) {
            return createPromise.then(function (client) {
              applePayInstance._client = client;
              return applePayInstance;
            });
          }

          return applePayInstance;
        });
      }

      module.exports = {
        create: wrapPromise(create),

        /**
         * @description The current version of the SDK, i.e. `1.32.1`.
         * @type {string}
         */
        VERSION: VERSION
      };
    }, {
      "../lib/analytics": 93,
      "../lib/basic-component-verification": 96,
      "../lib/braintree-error": 98,
      "../lib/create-assets-url": 102,
      "../lib/create-deferred-client": 104,
      "../lib/promise": 130,
      "./apple-pay": 51,
      "./errors": 52,
      "@braintree/wrap-promise": 50
    }],
    54: [function (require, module, exports) {
      'use strict';

      var isIe = require('@braintree/browser-detection/is-ie');

      var isIe9 = require('@braintree/browser-detection/is-ie9');

      module.exports = {
        isIe: isIe,
        isIe9: isIe9
      };
    }, {
      "@braintree/browser-detection/is-ie": 31,
      "@braintree/browser-detection/is-ie9": 33
    }],
    55: [function (require, module, exports) {
      'use strict';

      var BRAINTREE_VERSION = require('./constants').BRAINTREE_VERSION;

      var GraphQL = require('./request/graphql');

      var request = require('./request');

      var isVerifiedDomain = require('../lib/is-verified-domain');

      var BraintreeError = require('../lib/braintree-error');

      var convertToBraintreeError = require('../lib/convert-to-braintree-error');

      var getGatewayConfiguration = require('./get-configuration').getConfiguration;

      var createAuthorizationData = require('../lib/create-authorization-data');

      var addMetadata = require('../lib/add-metadata');

      var Promise = require('../lib/promise');

      var wrapPromise = require('@braintree/wrap-promise');

      var once = require('../lib/once');

      var deferred = require('../lib/deferred');

      var assign = require('../lib/assign').assign;

      var analytics = require('../lib/analytics');

      var errors = require('./errors');

      var VERSION = require('../lib/constants').VERSION;

      var GRAPHQL_URLS = require('../lib/constants').GRAPHQL_URLS;

      var methods = require('../lib/methods');

      var convertMethodsToError = require('../lib/convert-methods-to-error');

      var assets = require('../lib/assets');

      var FRAUDNET_FNCLS = require('../lib/constants').FRAUDNET_FNCLS;

      var FRAUDNET_SOURCE = require('../lib/constants').FRAUDNET_SOURCE;

      var FRAUDNET_URL = require('../lib/constants').FRAUDNET_URL;

      var cachedClients = {};
      /**
       * This object is returned by {@link Client#getConfiguration|getConfiguration}. This information is used extensively by other Braintree modules to properly configure themselves.
       * @typedef {object} Client~configuration
       * @property {object} client The braintree-web/client parameters.
       * @property {string} client.authorization A tokenizationKey or clientToken.
       * @property {object} gatewayConfiguration Gateway-supplied configuration.
       * @property {object} analyticsMetadata Analytics-specific data.
       * @property {string} analyticsMetadata.sessionId Uniquely identifies a browsing session.
       * @property {string} analyticsMetadata.sdkVersion The braintree.js version.
       * @property {string} analyticsMetadata.merchantAppId Identifies the merchant's web app.
       */

      /**
       * @class
       * @param {Client~configuration} configuration Options
       * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/client.create|braintree.client.create} instead.</strong>
       * @classdesc This class is required by many other Braintree components. It serves as the base API layer that communicates with our servers. It is also capable of being used to formulate direct calls to our servers, such as direct credit card tokenization. See {@link Client#request}.
       */

      function Client(configuration) {
        var configurationJSON, gatewayConfiguration;
        configuration = configuration || {};
        configurationJSON = JSON.stringify(configuration);
        gatewayConfiguration = configuration.gatewayConfiguration;

        if (!gatewayConfiguration) {
          throw new BraintreeError(errors.CLIENT_MISSING_GATEWAY_CONFIGURATION);
        }

        ['assetsUrl', 'clientApiUrl', 'configUrl'].forEach(function (property) {
          if (property in gatewayConfiguration && !isVerifiedDomain(gatewayConfiguration[property])) {
            throw new BraintreeError({
              type: errors.CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN.type,
              code: errors.CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN.code,
              message: property + ' property is on an invalid domain.'
            });
          }
        });
        /**
         * Returns a copy of the configuration values.
         * @public
         * @returns {Client~configuration} configuration
         */

        this.getConfiguration = function () {
          return JSON.parse(configurationJSON);
        };

        this._request = request;
        this._configuration = this.getConfiguration();
        this._clientApiBaseUrl = gatewayConfiguration.clientApiUrl + '/v1/';

        if (gatewayConfiguration.graphQL) {
          this._graphQL = new GraphQL({
            graphQL: gatewayConfiguration.graphQL
          });
        }
      }

      Client.initialize = function (options) {
        var clientInstance, authData;
        var promise = cachedClients[options.authorization];

        if (promise) {
          analytics.sendEvent(promise, 'custom.client.load.cached');
          return promise;
        }

        try {
          authData = createAuthorizationData(options.authorization);
        } catch (err) {
          return Promise.reject(new BraintreeError(errors.CLIENT_INVALID_AUTHORIZATION));
        }

        promise = getGatewayConfiguration(authData).then(function (configuration) {
          if (options.debug) {
            configuration.isDebug = true;
          }

          configuration.authorization = options.authorization;
          clientInstance = new Client(configuration);
          return clientInstance;
        });
        cachedClients[options.authorization] = promise;
        analytics.sendEvent(promise, 'custom.client.load.initialized');
        return promise.then(function (client) {
          analytics.sendEvent(clientInstance, 'custom.client.load.succeeded');
          return client;
        }).catch(function (err) {
          delete cachedClients[options.authorization];
          return Promise.reject(err);
        });
      }; // Primarily used for testing the client initalization call


      Client.clearCache = function () {
        cachedClients = {};
      };

      Client.prototype._findOrCreateFraudnetJSON = function (clientMetadataId) {
        var el = document.querySelector('script[fncls="' + FRAUDNET_FNCLS + '"]');
        var config, additionalData, authorizationFingerprint, parameters;

        if (!el) {
          el = document.body.appendChild(document.createElement('script'));
          el.type = 'application/json';
          el.setAttribute('fncls', FRAUDNET_FNCLS);
        }

        config = this.getConfiguration();
        additionalData = {
          rda_tenant: 'bt_card',
          // eslint-disable-line camelcase
          mid: config.gatewayConfiguration.merchantId
        };
        authorizationFingerprint = config.authorizationFingerprint;

        if (authorizationFingerprint) {
          authorizationFingerprint.split('&').forEach(function (pieces) {
            var component = pieces.split('=');

            if (component[0] === 'customer_id' && component.length > 1) {
              additionalData.cid = component[1];
            }
          });
        }

        parameters = {
          f: clientMetadataId.substr(0, 32),
          fp: additionalData,
          bu: false,
          s: FRAUDNET_SOURCE
        };
        el.text = JSON.stringify(parameters);
      };
      /**
       * Used by other modules to formulate all network requests to the Braintree gateway. It is also capable of being used directly from your own form to tokenize credit card information. However, be sure to satisfy PCI compliance if you use direct card tokenization.
       * @public
       * @param {object} options Request options:
       * @param {string} options.method HTTP method, e.g. "get" or "post".
       * @param {string} options.endpoint Endpoint path, e.g. "payment_methods".
       * @param {object} options.data Data to send with the request.
       * @param {number} [options.timeout=60000] Set a timeout (in milliseconds) for the request.
       * @param {callback} [callback] The second argument, <code>data</code>, is the returned server data.
       * @example
       * <caption>Direct Credit Card Tokenization</caption>
       * var createClient = require('braintree-web/client').create;
       *
       * createClient({
       *   authorization: CLIENT_AUTHORIZATION
       * }, function (createErr, clientInstance) {
       *   var form = document.getElementById('my-form-id');
       *   var data = {
       *     creditCard: {
       *       number: form['cc-number'].value,
       *       cvv: form['cc-cvv'].value,
       *       expirationDate: form['cc-expiration-date'].value,
       *       billingAddress: {
       *         postalCode: form['cc-postal-code'].value
       *       },
       *       options: {
       *         validate: false
       *       }
       *     }
       *   };
       *
       *   // Warning: For a merchant to be eligible for the easiest level of PCI compliance (SAQ A),
       *   // payment fields cannot be hosted on your checkout page.
       *   // For an alternative to the following, use Hosted Fields.
       *   clientInstance.request({
       *     endpoint: 'payment_methods/credit_cards',
       *     method: 'post',
       *     data: data
       *   }, function (requestErr, response) {
       *     // More detailed example of handling API errors: https://codepen.io/braintree/pen/MbwjdM
       *     if (requestErr) { throw new Error(requestErr); }
       *
       *     console.log('Got nonce:', response.creditCards[0].nonce);
       *   });
       * });
       * @example
       * <caption>Tokenizing Fields for AVS Checks</caption>
       * var createClient = require('braintree-web/client').create;
       *
       * createClient({
       *   authorization: CLIENT_AUTHORIZATION
       * }, function (createErr, clientInstance) {
       *   var form = document.getElementById('my-form-id');
       *   var data = {
       *     creditCard: {
       *       number: form['cc-number'].value,
       *       cvv: form['cc-cvv'].value,
       *       expirationDate: form['cc-date'].value,
       *       // The billing address can be checked with AVS rules.
       *       // See: https://articles.braintreepayments.com/support/guides/fraud-tools/basic/avs-cvv-rules
       *       billingAddress: {
       *         postalCode: form['cc-postal-code'].value,
       *         streetAddress: form['cc-street-address'].value,
       *         countryName: form['cc-country-name'].value,
       *         countryCodeAlpha2: form['cc-country-alpha2'].value,
       *         countryCodeAlpha3: form['cc-country-alpha3'].value,
       *         countryCodeNumeric: form['cc-country-numeric'].value
       *       },
       *       options: {
       *         validate: false
       *       }
       *     }
       *   };
       *
       *   // Warning: For a merchant to be eligible for the easiest level of PCI compliance (SAQ A),
       *   // payment fields cannot be hosted on your checkout page.
       *   // For an alternative to the following, use Hosted Fields.
       *   clientInstance.request({
       *     endpoint: 'payment_methods/credit_cards',
       *     method: 'post',
       *     data: data
       *   }, function (requestErr, response) {
       *     // More detailed example of handling API errors: https://codepen.io/braintree/pen/MbwjdM
       *     if (requestErr) { throw new Error(requestErr); }
       *
       *     console.log('Got nonce:', response.creditCards[0].nonce);
       *   });
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      Client.prototype.request = function (options, callback) {
        var self = this; // eslint-disable-line no-invalid-this

        var requestPromise = new Promise(function (resolve, reject) {
          var optionName, api, baseUrl, requestOptions;
          var shouldCollectData = Boolean(options.endpoint === 'payment_methods/credit_cards' && self.getConfiguration().gatewayConfiguration.creditCards.collectDeviceData);

          if (options.api !== 'graphQLApi') {
            if (!options.method) {
              optionName = 'options.method';
            } else if (!options.endpoint) {
              optionName = 'options.endpoint';
            }
          }

          if (optionName) {
            throw new BraintreeError({
              type: errors.CLIENT_OPTION_REQUIRED.type,
              code: errors.CLIENT_OPTION_REQUIRED.code,
              message: optionName + ' is required when making a request.'
            });
          }

          if ('api' in options) {
            api = options.api;
          } else {
            api = 'clientApi';
          }

          requestOptions = {
            method: options.method,
            graphQL: self._graphQL,
            timeout: options.timeout,
            metadata: self._configuration.analyticsMetadata
          };

          if (api === 'clientApi') {
            baseUrl = self._clientApiBaseUrl;
            requestOptions.data = addMetadata(self._configuration, options.data);
          } else if (api === 'graphQLApi') {
            baseUrl = GRAPHQL_URLS[self._configuration.gatewayConfiguration.environment];
            options.endpoint = '';
            requestOptions.method = 'post';
            requestOptions.data = assign({
              clientSdkMetadata: {
                platform: self._configuration.analyticsMetadata.platform,
                source: self._configuration.analyticsMetadata.source,
                integration: self._configuration.analyticsMetadata.integration,
                sessionId: self._configuration.analyticsMetadata.sessionId,
                version: VERSION
              }
            }, options.data);
            requestOptions.headers = getAuthorizationHeadersForGraphQL(self._configuration);
          } else {
            throw new BraintreeError({
              type: errors.CLIENT_OPTION_INVALID.type,
              code: errors.CLIENT_OPTION_INVALID.code,
              message: 'options.api is invalid.'
            });
          }

          requestOptions.url = baseUrl + options.endpoint;

          requestOptions.sendAnalyticsEvent = function (kind) {
            analytics.sendEvent(self, kind);
          };

          self._request(requestOptions, function (err, data, status) {
            var resolvedData, requestError;
            requestError = formatRequestError(status, err);

            if (requestError) {
              reject(requestError);
              return;
            }

            if (api === 'graphQLApi' && data.errors) {
              reject(convertToBraintreeError(data.errors, {
                type: errors.CLIENT_GRAPHQL_REQUEST_ERROR.type,
                code: errors.CLIENT_GRAPHQL_REQUEST_ERROR.code,
                message: errors.CLIENT_GRAPHQL_REQUEST_ERROR.message
              }));
              return;
            }

            resolvedData = assign({
              _httpStatus: status
            }, data);

            if (shouldCollectData && resolvedData.creditCards && resolvedData.creditCards.length > 0) {
              self._findOrCreateFraudnetJSON(resolvedData.creditCards[0].nonce);

              assets.loadScript({
                src: FRAUDNET_URL,
                forceScriptReload: true
              });
            }

            resolve(resolvedData);
          });
        });

        if (typeof callback === 'function') {
          callback = once(deferred(callback));
          requestPromise.then(function (response) {
            callback(null, response, response._httpStatus);
          }).catch(function (err) {
            var status = err && err.details && err.details.httpStatus;
            callback(err, null, status);
          });
          return;
        }

        return requestPromise; // eslint-disable-line consistent-return
      };

      function formatRequestError(status, err) {
        // eslint-disable-line consistent-return
        var requestError;

        if (status === -1) {
          requestError = new BraintreeError(errors.CLIENT_REQUEST_TIMEOUT);
        } else if (status === 401) {
          requestError = new BraintreeError(errors.CLIENT_AUTHORIZATION_INVALID);
        } else if (status === 403) {
          requestError = new BraintreeError(errors.CLIENT_AUTHORIZATION_INSUFFICIENT);
        } else if (status === 429) {
          requestError = new BraintreeError(errors.CLIENT_RATE_LIMITED);
        } else if (status >= 500) {
          requestError = new BraintreeError(errors.CLIENT_GATEWAY_NETWORK);
        } else if (status < 200 || status >= 400) {
          requestError = convertToBraintreeError(err, {
            type: errors.CLIENT_REQUEST_ERROR.type,
            code: errors.CLIENT_REQUEST_ERROR.code,
            message: errors.CLIENT_REQUEST_ERROR.message
          });
        }

        if (requestError) {
          requestError.details = requestError.details || {};
          requestError.details.httpStatus = status;
          return requestError;
        }
      }

      Client.prototype.toJSON = function () {
        return this.getConfiguration();
      };
      /**
       * Returns the Client version.
       * @public
       * @returns {String} The created client's version.
       * @example
       * var createClient = require('braintree-web/client').create;
       *
       * createClient({
       *   authorization: CLIENT_AUTHORIZATION
       * }, function (createErr, clientInstance) {
       *   console.log(clientInstance.getVersion()); // Ex: 1.0.0
       * });
       * @returns {void}
       */


      Client.prototype.getVersion = function () {
        return VERSION;
      };
      /**
       * Cleanly tear down anything set up by {@link module:braintree-web/client.create|create}.
       * @public
       * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.
       * @example
       * clientInstance.teardown();
       * @example <caption>With callback</caption>
       * clientInstance.teardown(function () {
       *   // teardown is complete
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      Client.prototype.teardown = wrapPromise(function () {
        var self = this; // eslint-disable-line no-invalid-this

        delete cachedClients[self.getConfiguration().authorization];
        convertMethodsToError(self, methods(Client.prototype));
        return Promise.resolve();
      });

      function getAuthorizationHeadersForGraphQL(configuration) {
        var token = configuration.authorizationFingerprint || configuration.authorization;
        return {
          Authorization: 'Bearer ' + token,
          'Braintree-Version': BRAINTREE_VERSION
        };
      }

      module.exports = Client;
    }, {
      "../lib/add-metadata": 92,
      "../lib/analytics": 93,
      "../lib/assets": 94,
      "../lib/assign": 95,
      "../lib/braintree-error": 98,
      "../lib/constants": 99,
      "../lib/convert-methods-to-error": 100,
      "../lib/convert-to-braintree-error": 101,
      "../lib/create-authorization-data": 103,
      "../lib/deferred": 105,
      "../lib/is-verified-domain": 126,
      "../lib/methods": 128,
      "../lib/once": 129,
      "../lib/promise": 130,
      "./constants": 56,
      "./errors": 57,
      "./get-configuration": 58,
      "./request": 70,
      "./request/graphql": 68,
      "@braintree/wrap-promise": 50
    }],
    56: [function (require, module, exports) {
      'use strict';

      module.exports = {
        BRAINTREE_VERSION: '2018-05-10'
      };
    }, {}],
    57: [function (require, module, exports) {
      'use strict';
      /**
       * @name BraintreeError.Client - Internal Error Codes
       * @ignore
       * @description These codes should never be experienced by the merchant directly.
       * @property {MERCHANT} CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN An error to prevent client creation for domains that are not allowed in the JS.
       * @property {INTERNAL} CLIENT_MISSING_GATEWAY_CONFIGURATION Occurs when the client is created without a gateway configuration. Should never happen.
       */

      /**
       * @name BraintreeError.Client - Create Error Codes
       * @description Errors that may occur when [creating the client](./module-braintree-web_client.html#.create)
       * @property {MERCHANT} CLIENT_INVALID_AUTHORIZATION Occurs when client token cannot be parsed.
       */

      /**
       * @name BraintreeError.Client - Request Error Codes
       * @description Errors that may occur when [using the request method](./Client.html#request)
       * @property {MERCHANT} CLIENT_OPTION_REQUIRED An option required in the request method was not provided. Usually `options.method` or `options.endpoint`
       * @property {MERCHANT} CLIENT_OPTION_INVALID The request option provided is invalid.
       * @property {MERCHANT} CLIENT_GATEWAY_NETWORK The Braintree gateway could not be contacted.
       * @property {NETWORK} CLIENT_REQUEST_TIMEOUT The request took too long to complete and timed out.
       * @property {NETWORK} CLIENT_REQUEST_ERROR The response from a request had status 400 or greater.
       * @property {NETWORK} CLIENT_GRAPHQL_REQUEST_ERROR The response from a request to GraphQL contained an error.
       * @property {MERCHANT} CLIENT_RATE_LIMITED The response from a request had a status of 429, indicating rate limiting.
       * @property {MERCHANT} CLIENT_AUTHORIZATION_INSUFFICIENT The user associated with the client token or tokenization key does not have permissions to make the request.
       * @property {MERCHANT} CLIENT_AUTHORIZATION_INVALID The provided authorization could not be found. Either the client token has expired and a new client token must be generated or the tokenization key used is set to be inactive or has been deleted.
       */

      var BraintreeError = require('../lib/braintree-error');

      module.exports = {
        CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN: {
          type: BraintreeError.types.MERCHANT,
          code: 'CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN'
        },
        CLIENT_OPTION_REQUIRED: {
          type: BraintreeError.types.MERCHANT,
          code: 'CLIENT_OPTION_REQUIRED'
        },
        CLIENT_OPTION_INVALID: {
          type: BraintreeError.types.MERCHANT,
          code: 'CLIENT_OPTION_INVALID'
        },
        CLIENT_MISSING_GATEWAY_CONFIGURATION: {
          type: BraintreeError.types.INTERNAL,
          code: 'CLIENT_MISSING_GATEWAY_CONFIGURATION',
          message: 'Missing gatewayConfiguration.'
        },
        CLIENT_INVALID_AUTHORIZATION: {
          type: BraintreeError.types.MERCHANT,
          code: 'CLIENT_INVALID_AUTHORIZATION',
          message: 'Authorization is invalid. Make sure your client token or tokenization key is valid.'
        },
        CLIENT_GATEWAY_NETWORK: {
          type: BraintreeError.types.NETWORK,
          code: 'CLIENT_GATEWAY_NETWORK',
          message: 'Cannot contact the gateway at this time.'
        },
        CLIENT_REQUEST_TIMEOUT: {
          type: BraintreeError.types.NETWORK,
          code: 'CLIENT_REQUEST_TIMEOUT',
          message: 'Request timed out waiting for a reply.'
        },
        CLIENT_REQUEST_ERROR: {
          type: BraintreeError.types.NETWORK,
          code: 'CLIENT_REQUEST_ERROR',
          message: 'There was a problem with your request.'
        },
        CLIENT_GRAPHQL_REQUEST_ERROR: {
          type: BraintreeError.types.NETWORK,
          code: 'CLIENT_GRAPHQL_REQUEST_ERROR',
          message: 'There was a problem with your request.'
        },
        CLIENT_RATE_LIMITED: {
          type: BraintreeError.types.MERCHANT,
          code: 'CLIENT_RATE_LIMITED',
          message: 'You are being rate-limited; please try again in a few minutes.'
        },
        CLIENT_AUTHORIZATION_INSUFFICIENT: {
          type: BraintreeError.types.MERCHANT,
          code: 'CLIENT_AUTHORIZATION_INSUFFICIENT',
          message: 'The authorization used has insufficient privileges.'
        },
        CLIENT_AUTHORIZATION_INVALID: {
          type: BraintreeError.types.MERCHANT,
          code: 'CLIENT_AUTHORIZATION_INVALID',
          message: 'Either the client token has expired and a new one should be generated or the tokenization key has been deactivated or deleted.'
        }
      };
    }, {
      "../lib/braintree-error": 98
    }],
    58: [function (require, module, exports) {
      'use strict';

      var BraintreeError = require('../lib/braintree-error');

      var Promise = require('../lib/promise');

      var wrapPromise = require('@braintree/wrap-promise');

      var request = require('./request');

      var uuid = require('@braintree/uuid');

      var constants = require('../lib/constants');

      var errors = require('./errors');

      var GraphQL = require('./request/graphql');

      var GRAPHQL_URLS = require('../lib/constants').GRAPHQL_URLS;

      var isDateStringBeforeOrOn = require('../lib/is-date-string-before-or-on');

      var BRAINTREE_VERSION = require('./constants').BRAINTREE_VERSION;

      function getConfiguration(authData) {
        return new Promise(function (resolve, reject) {
          var configuration, attrs, configUrl, reqOptions;
          var sessionId = uuid();
          var analyticsMetadata = {
            merchantAppId: window.location.host,
            platform: constants.PLATFORM,
            sdkVersion: constants.VERSION,
            source: constants.SOURCE,
            integration: constants.INTEGRATION,
            integrationType: constants.INTEGRATION,
            sessionId: sessionId
          };
          attrs = authData.attrs;
          configUrl = authData.configUrl;
          attrs._meta = analyticsMetadata;
          attrs.braintreeLibraryVersion = constants.BRAINTREE_LIBRARY_VERSION;
          attrs.configVersion = '3';
          reqOptions = {
            url: configUrl,
            method: 'GET',
            data: attrs
          };

          if (attrs.authorizationFingerprint && authData.graphQL) {
            if (isDateStringBeforeOrOn(authData.graphQL.date, BRAINTREE_VERSION)) {
              reqOptions.graphQL = new GraphQL({
                graphQL: {
                  url: authData.graphQL.url,
                  features: ['configuration']
                }
              });
            }

            reqOptions.metadata = analyticsMetadata;
          } else if (attrs.tokenizationKey) {
            reqOptions.graphQL = new GraphQL({
              graphQL: {
                url: GRAPHQL_URLS[authData.environment],
                features: ['configuration']
              }
            });
            reqOptions.metadata = analyticsMetadata;
          } // NEXT_MAJOR_VERSION
          // there are various issues with the config endpoint where the values returned
          // do not match the values from the merchant account id passed into a client token
          // we need to update the configuration request endpoint to be able to pass the
          // correct values. The following ones are incorrect
          // * applePayWeb - definitely supportedNetworks, which compiles all the card
          //    networks from all the merchant accounts instead of providing just the
          //    ones from the specified one. The same is probably true for ios apple pay
          //    Also the merchantidentifier
          // NEXT_MAJOR_VERSION Allow passing in merchant account id when creating the component
          // to fetch the config for that merchant account id (particularly helpful when using
          // a tokenization key for authorization)


          request(reqOptions, function (err, response, status) {
            var errorTemplate;

            if (err) {
              if (status === 403) {
                errorTemplate = errors.CLIENT_AUTHORIZATION_INSUFFICIENT;
              } else if (status === 401) {
                errorTemplate = errors.CLIENT_AUTHORIZATION_INVALID;
              } else {
                errorTemplate = errors.CLIENT_GATEWAY_NETWORK;
              }

              reject(new BraintreeError({
                type: errorTemplate.type,
                code: errorTemplate.code,
                message: errorTemplate.message,
                details: {
                  originalError: err
                }
              }));
              return;
            }

            configuration = {
              authorizationType: attrs.tokenizationKey ? 'TOKENIZATION_KEY' : 'CLIENT_TOKEN',
              authorizationFingerprint: attrs.authorizationFingerprint,
              analyticsMetadata: analyticsMetadata,
              gatewayConfiguration: response
            };
            resolve(configuration);
          });
        });
      }

      module.exports = {
        getConfiguration: wrapPromise(getConfiguration)
      };
    }, {
      "../lib/braintree-error": 98,
      "../lib/constants": 99,
      "../lib/is-date-string-before-or-on": 124,
      "../lib/promise": 130,
      "./constants": 56,
      "./errors": 57,
      "./request": 70,
      "./request/graphql": 68,
      "@braintree/uuid": 46,
      "@braintree/wrap-promise": 50
    }],
    59: [function (require, module, exports) {
      'use strict';

      var BraintreeError = require('../lib/braintree-error');

      var Client = require('./client');

      var VERSION = "3.83.0";

      var Promise = require('../lib/promise');

      var wrapPromise = require('@braintree/wrap-promise');

      var sharedErrors = require('../lib/errors');
      /** @module braintree-web/client */

      /**
       * @function create
       * @description This function is the entry point for the <code>braintree.client</code> module. It is used for creating {@link Client} instances that service communication to Braintree servers.
       * @param {object} options Object containing all {@link Client} options:
       * @param {string} options.authorization A tokenizationKey or clientToken.
       * @param {callback} [callback] The second argument, <code>data</code>, is the {@link Client} instance.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example
       * var createClient = require('braintree-web/client').create;
       *
       * createClient({
       *   authorization: CLIENT_AUTHORIZATION
       * }, function (createErr, clientInstance) {
       *   if (createErr) {
       *     if (createErr.code === 'CLIENT_AUTHORIZATION_INVALID') {
       *       // either the client token has expired, and a new one should be generated
       *       // or the tokenization key was deactivated or deleted
       *     } else {
       *       console.log('something went wrong creating the client instance', createErr);
       *     }
       *     return;
       *   }
       *
       *  // set up other components
       * });
       * @static
       */


      function create(options) {
        if (!options.authorization) {
          return Promise.reject(new BraintreeError({
            type: sharedErrors.INSTANTIATION_OPTION_REQUIRED.type,
            code: sharedErrors.INSTANTIATION_OPTION_REQUIRED.code,
            message: 'options.authorization is required when instantiating a client.'
          }));
        }

        return Client.initialize(options);
      }

      module.exports = {
        create: wrapPromise(create),

        /**
         * @description The current version of the SDK, i.e. `1.32.1`.
         * @type {string}
         */
        VERSION: VERSION
      };
    }, {
      "../lib/braintree-error": 98,
      "../lib/errors": 108,
      "../lib/promise": 130,
      "./client": 55,
      "@braintree/wrap-promise": 50
    }],
    60: [function (require, module, exports) {
      'use strict';

      var querystring = require('../../lib/querystring');

      var assign = require('../../lib/assign').assign;

      var prepBody = require('./prep-body');

      var parseBody = require('./parse-body');

      var xhr = require('./xhr');

      var isXHRAvailable = xhr.isAvailable;

      var GraphQLRequest = require('./graphql/request');

      var DefaultRequest = require('./default-request');

      var MAX_TCP_RETRYCOUNT = 1;
      var TCP_PRECONNECT_BUG_STATUS_CODE = 408;

      function requestShouldRetry(status) {
        return !status || status === TCP_PRECONNECT_BUG_STATUS_CODE;
      }

      function graphQLRequestShouldRetryWithClientApi(body) {
        var errorClass = !body.data && body.errors && body.errors[0] && body.errors[0].extensions && body.errors[0].extensions.errorClass;
        return errorClass === 'UNKNOWN' || errorClass === 'INTERNAL';
      }

      function _requestWithRetry(options, tcpRetryCount, cb) {
        var status, resBody, ajaxRequest, body, method, headers, parsedBody;
        var url = options.url;
        var graphQL = options.graphQL;
        var timeout = options.timeout;
        var req = xhr.getRequestObject();
        var callback = cb;
        var isGraphQLRequest = Boolean(graphQL && graphQL.isGraphQLRequest(url, options.data));
        options.headers = assign({
          'Content-Type': 'application/json'
        }, options.headers);

        if (isGraphQLRequest) {
          ajaxRequest = new GraphQLRequest(options);
        } else {
          ajaxRequest = new DefaultRequest(options);
        }

        url = ajaxRequest.getUrl();
        body = ajaxRequest.getBody();
        method = ajaxRequest.getMethod();
        headers = ajaxRequest.getHeaders();

        if (method === 'GET') {
          url = querystring.queryify(url, body);
          body = null;
        }

        if (isXHRAvailable) {
          req.onreadystatechange = function () {
            if (req.readyState !== 4) {
              return;
            }

            if (req.status === 0 && isGraphQLRequest) {
              // If a merchant experiences a connection
              // issue to the GraphQL endpoint (possibly
              // due to a Content Security Policy), retry
              // the request against the old client API.
              delete options.graphQL;

              _requestWithRetry(options, tcpRetryCount, cb);

              return;
            }

            parsedBody = parseBody(req.responseText);
            resBody = ajaxRequest.adaptResponseBody(parsedBody);
            status = ajaxRequest.determineStatus(req.status, parsedBody);

            if (status >= 400 || status < 200) {
              if (isGraphQLRequest && graphQLRequestShouldRetryWithClientApi(parsedBody)) {
                delete options.graphQL;

                _requestWithRetry(options, tcpRetryCount, cb);

                return;
              }

              if (tcpRetryCount < MAX_TCP_RETRYCOUNT && requestShouldRetry(status)) {
                tcpRetryCount++;

                _requestWithRetry(options, tcpRetryCount, cb);

                return;
              }

              callback(resBody || 'error', null, status || 500);
            } else {
              callback(null, resBody, status);
            }
          };
        } else {
          if (options.headers) {
            url = querystring.queryify(url, headers);
          }

          req.onload = function () {
            callback(null, parseBody(req.responseText), req.status);
          };

          req.onerror = function () {
            // XDomainRequest does not report a body or status for errors, so
            // hardcode to 'error' and 500, respectively
            callback('error', null, 500);
          }; // This must remain for IE9 to work


          req.onprogress = function () {};

          req.ontimeout = function () {
            callback('timeout', null, -1);
          };
        }

        try {
          req.open(method, url, true);
        } catch (requestOpenError) {
          // If a merchant has a Content Security Policy and they have
          // not allowed our endpoints, some browsers may
          // synchronously throw an error. If it is not a GraphQL
          // request, we throw the error. If it is a GraphQL request
          // we remove the GraphQL option and try the request against
          // the old client API.
          if (!isGraphQLRequest) {
            throw requestOpenError;
          }

          delete options.graphQL;

          _requestWithRetry(options, tcpRetryCount, cb);

          return;
        }

        req.timeout = timeout;

        if (isXHRAvailable) {
          Object.keys(headers).forEach(function (headerKey) {
            req.setRequestHeader(headerKey, headers[headerKey]);
          });
        }

        try {
          req.send(prepBody(method, body));
        } catch (e) {
          /* ignored */
        }
      }

      function request(options, cb) {
        _requestWithRetry(options, 0, cb);
      }

      module.exports = {
        request: request
      };
    }, {
      "../../lib/assign": 95,
      "../../lib/querystring": 131,
      "./default-request": 61,
      "./graphql/request": 69,
      "./parse-body": 73,
      "./prep-body": 74,
      "./xhr": 75
    }],
    61: [function (require, module, exports) {
      'use strict';

      function DefaultRequest(options) {
        this._url = options.url;
        this._data = options.data;
        this._method = options.method;
        this._headers = options.headers;
      }

      DefaultRequest.prototype.getUrl = function () {
        return this._url;
      };

      DefaultRequest.prototype.getBody = function () {
        return this._data;
      };

      DefaultRequest.prototype.getMethod = function () {
        return this._method;
      };

      DefaultRequest.prototype.getHeaders = function () {
        return this._headers;
      };

      DefaultRequest.prototype.adaptResponseBody = function (parsedBody) {
        return parsedBody;
      };

      DefaultRequest.prototype.determineStatus = function (status) {
        return status;
      };

      module.exports = DefaultRequest;
    }, {}],
    62: [function (require, module, exports) {
      'use strict';

      module.exports = function getUserAgent() {
        return window.navigator.userAgent;
      };
    }, {}],
    63: [function (require, module, exports) {
      'use strict';

      var errorResponseAdapter = require('./error');

      var assign = require('../../../../lib/assign').assign;
      /* eslint-disable camelcase */


      var cardTypeTransforms = {
        creditCard: {
          AMERICAN_EXPRESS: 'American Express',
          DISCOVER: 'Discover',
          INTERNATIONAL_MAESTRO: 'Maestro',
          JCB: 'JCB',
          MASTERCARD: 'MasterCard',
          SOLO: 'Solo',
          UK_MAESTRO: 'UK Maestro',
          UNION_PAY: 'UnionPay',
          VISA: 'Visa'
        },
        applePayWeb: {
          VISA: 'visa',
          MASTERCARD: 'mastercard',
          DISCOVER: 'discover',
          AMERICAN_EXPRESS: 'amex',
          INTERNATIONAL_MAESTRO: 'maestro',
          ELO: 'elo'
        },
        visaCheckout: {
          VISA: 'Visa',
          MASTERCARD: 'MasterCard',
          DISCOVER: 'Discover',
          AMERICAN_EXPRESS: 'American Express'
        },
        googlePay: {
          VISA: 'visa',
          MASTERCARD: 'mastercard',
          DISCOVER: 'discover',
          AMERICAN_EXPRESS: 'amex',
          INTERNATIONAL_MAESTRO: 'maestro',
          ELO: 'elo'
        },
        masterpass: {
          VISA: 'visa',
          MASTERCARD: 'master',
          DISCOVER: 'discover',
          AMERICAN_EXPRESS: 'amex',
          DINERS: 'diners',
          INTERNATIONAL_MAESTRO: 'maestro',
          JCB: 'jcb'
        }
      };
      /* eslint-enable camelcase */

      function configurationResponseAdapter(responseBody, ctx) {
        var adaptedResponse;

        if (responseBody.data && !responseBody.errors) {
          adaptedResponse = adaptConfigurationResponseBody(responseBody, ctx);
        } else {
          adaptedResponse = errorResponseAdapter(responseBody);
        }

        return adaptedResponse;
      }

      function adaptConfigurationResponseBody(body, ctx) {
        var configuration = body.data.clientConfiguration;
        var response;
        response = {
          environment: configuration.environment.toLowerCase(),
          clientApiUrl: configuration.clientApiUrl,
          assetsUrl: configuration.assetsUrl,
          analytics: {
            url: configuration.analyticsUrl
          },
          merchantId: configuration.merchantId,
          venmo: 'off'
        };

        if (configuration.supportedFeatures) {
          response.graphQL = {
            url: ctx._graphQL._config.url,
            features: configuration.supportedFeatures.map(function (feature) {
              return feature.toLowerCase();
            })
          };
        }

        if (configuration.braintreeApi) {
          response.braintreeApi = configuration.braintreeApi;
        }

        if (configuration.applePayWeb) {
          response.applePayWeb = configuration.applePayWeb;
          response.applePayWeb.supportedNetworks = mapCardTypes(configuration.applePayWeb.supportedCardBrands, cardTypeTransforms.applePayWeb);
          delete response.applePayWeb.supportedCardBrands;
        }

        if (configuration.ideal) {
          response.ideal = configuration.ideal;
        }

        if (configuration.kount) {
          response.kount = {
            kountMerchantId: configuration.kount.merchantId
          };
        }

        if (configuration.creditCard) {
          response.challenges = configuration.creditCard.challenges.map(function (challenge) {
            return challenge.toLowerCase();
          });
          response.creditCards = {
            supportedCardTypes: mapCardTypes(configuration.creditCard.supportedCardBrands, cardTypeTransforms.creditCard)
          };
          response.threeDSecureEnabled = configuration.creditCard.threeDSecureEnabled;
          response.threeDSecure = configuration.creditCard.threeDSecure;
        } else {
          response.challenges = [];
          response.creditCards = {
            supportedCardTypes: []
          };
          response.threeDSecureEnabled = false;
        }

        if (configuration.googlePay) {
          response.androidPay = {
            displayName: configuration.googlePay.displayName,
            enabled: true,
            environment: configuration.googlePay.environment.toLowerCase(),
            googleAuthorizationFingerprint: configuration.googlePay.googleAuthorization,
            paypalClientId: configuration.googlePay.paypalClientId,
            supportedNetworks: mapCardTypes(configuration.googlePay.supportedCardBrands, cardTypeTransforms.googlePay)
          };
        }

        if (configuration.venmo) {
          response.payWithVenmo = {
            merchantId: configuration.venmo.merchantId,
            accessToken: configuration.venmo.accessToken,
            environment: configuration.venmo.environment.toLowerCase()
          };
        }

        if (configuration.paypal) {
          response.paypalEnabled = true;
          response.paypal = assign({}, configuration.paypal);
          response.paypal.currencyIsoCode = response.paypal.currencyCode;
          response.paypal.environment = response.paypal.environment.toLowerCase();
          delete response.paypal.currencyCode;
        } else {
          response.paypalEnabled = false;
        }

        if (configuration.unionPay) {
          response.unionPay = {
            enabled: true,
            merchantAccountId: configuration.unionPay.merchantAccountId
          };
        }

        if (configuration.visaCheckout) {
          response.visaCheckout = {
            apikey: configuration.visaCheckout.apiKey,
            encryptionKey: configuration.visaCheckout.encryptionKey,
            externalClientId: configuration.visaCheckout.externalClientId,
            supportedCardTypes: mapCardTypes(configuration.visaCheckout.supportedCardBrands, cardTypeTransforms.visaCheckout)
          };
        }

        if (configuration.masterpass) {
          response.masterpass = {
            merchantCheckoutId: configuration.masterpass.merchantCheckoutId,
            supportedNetworks: mapCardTypes(configuration.masterpass.supportedCardBrands, cardTypeTransforms.masterpass)
          };
        }

        if (configuration.usBankAccount) {
          response.usBankAccount = {
            routeId: configuration.usBankAccount.routeId,
            plaid: {
              publicKey: configuration.usBankAccount.plaidPublicKey
            }
          };
        }

        return response;
      }

      function mapCardTypes(cardTypes, cardTypeTransformMap) {
        return cardTypes.reduce(function (acc, type) {
          if (cardTypeTransformMap.hasOwnProperty(type)) {
            return acc.concat(cardTypeTransformMap[type]);
          }

          return acc;
        }, []);
      }

      module.exports = configurationResponseAdapter;
    }, {
      "../../../../lib/assign": 95,
      "./error": 65
    }],
    64: [function (require, module, exports) {
      'use strict';

      var errorResponseAdapter = require('./error');

      var CARD_BRAND_MAP = {
        /* eslint-disable camelcase */
        AMERICAN_EXPRESS: 'American Express',
        DINERS: 'Discover',
        DISCOVER: 'Discover',
        INTERNATIONAL_MAESTRO: 'Maestro',
        JCB: 'JCB',
        MASTERCARD: 'MasterCard',
        UK_MAESTRO: 'Maestro',
        UNION_PAY: 'Union Pay',
        VISA: 'Visa'
        /* eslint-enable camelcase */

      };
      var BIN_DATA_MAP = {
        YES: 'Yes',
        NO: 'No',
        UNKNOWN: 'Unknown'
      };
      var AUTHENTICATION_INSIGHT_MAP = {
        PSDTWO: 'psd2'
      };

      function creditCardTokenizationResponseAdapter(responseBody) {
        var adaptedResponse;

        if (responseBody.data && !responseBody.errors) {
          adaptedResponse = adaptTokenizeCreditCardResponseBody(responseBody);
        } else {
          adaptedResponse = errorResponseAdapter(responseBody);
        }

        return adaptedResponse;
      }

      function adaptTokenizeCreditCardResponseBody(body) {
        var data = body.data.tokenizeCreditCard;
        var creditCard = data.creditCard;
        var lastTwo = creditCard.last4 ? creditCard.last4.substr(2, 4) : '';
        var binData = creditCard.binData;
        var response, regulationEnvironment;

        if (binData) {
          ['commercial', 'debit', 'durbinRegulated', 'healthcare', 'payroll', 'prepaid'].forEach(function (key) {
            if (binData[key]) {
              binData[key] = BIN_DATA_MAP[binData[key]];
            } else {
              binData[key] = 'Unknown';
            }
          });
          ['issuingBank', 'countryOfIssuance', 'productId'].forEach(function (key) {
            if (!binData[key]) {
              binData[key] = 'Unknown';
            }
          });
        }

        response = {
          creditCards: [{
            binData: binData,
            consumed: false,
            description: lastTwo ? 'ending in ' + lastTwo : '',
            nonce: data.token,
            details: {
              cardholderName: creditCard.cardholderName,
              expirationMonth: creditCard.expirationMonth,
              expirationYear: creditCard.expirationYear,
              bin: creditCard.bin || '',
              cardType: CARD_BRAND_MAP[creditCard.brandCode] || 'Unknown',
              lastFour: creditCard.last4 || '',
              lastTwo: lastTwo
            },
            type: 'CreditCard',
            threeDSecureInfo: null
          }]
        };

        if (data.authenticationInsight) {
          regulationEnvironment = data.authenticationInsight.customerAuthenticationRegulationEnvironment;
          response.creditCards[0].authenticationInsight = {
            regulationEnvironment: AUTHENTICATION_INSIGHT_MAP[regulationEnvironment] || regulationEnvironment.toLowerCase()
          };
        }

        return response;
      }

      module.exports = creditCardTokenizationResponseAdapter;
    }, {
      "./error": 65
    }],
    65: [function (require, module, exports) {
      'use strict';

      function errorResponseAdapter(responseBody) {
        var response;
        var errorClass = responseBody.errors && responseBody.errors[0] && responseBody.errors[0].extensions && responseBody.errors[0].extensions.errorClass;

        if (errorClass === 'VALIDATION') {
          response = userErrorResponseAdapter(responseBody);
        } else if (errorClass) {
          response = errorWithClassResponseAdapter(responseBody);
        } else {
          response = {
            error: {
              message: 'There was a problem serving your request'
            },
            fieldErrors: []
          };
        }

        return response;
      }

      function errorWithClassResponseAdapter(responseBody) {
        return {
          error: {
            message: responseBody.errors[0].message
          },
          fieldErrors: []
        };
      }

      function userErrorResponseAdapter(responseBody) {
        var fieldErrors = buildFieldErrors(responseBody.errors);

        if (fieldErrors.length === 0) {
          return {
            error: {
              message: responseBody.errors[0].message
            }
          };
        }

        return {
          error: {
            message: getLegacyMessage(fieldErrors)
          },
          fieldErrors: fieldErrors
        };
      }

      function buildFieldErrors(errors) {
        var fieldErrors = [];
        errors.forEach(function (error) {
          if (!(error.extensions && error.extensions.inputPath)) {
            return;
          }

          addFieldError(error.extensions.inputPath.slice(1), error, fieldErrors);
        });
        return fieldErrors;
      }

      function addFieldError(inputPath, errorDetail, fieldErrors) {
        var fieldError;
        var legacyCode = errorDetail.extensions.legacyCode;
        var inputField = inputPath[0];

        if (inputPath.length === 1) {
          fieldErrors.push({
            code: legacyCode,
            field: inputField,
            message: errorDetail.message
          });
          return;
        }

        fieldErrors.forEach(function (candidate) {
          if (candidate.field === inputField) {
            fieldError = candidate;
          }
        });

        if (!fieldError) {
          fieldError = {
            field: inputField,
            fieldErrors: []
          };
          fieldErrors.push(fieldError);
        }

        addFieldError(inputPath.slice(1), errorDetail, fieldError.fieldErrors);
      }

      function getLegacyMessage(errors) {
        var legacyMessages = {
          creditCard: 'Credit card is invalid'
        };
        var field = errors[0].field;
        return legacyMessages[field];
      }

      module.exports = errorResponseAdapter;
    }, {}],
    66: [function (require, module, exports) {
      'use strict';

      var CONFIGURATION_QUERY = 'query ClientConfiguration { ' + '  clientConfiguration { ' + '    analyticsUrl ' + '    environment ' + '    merchantId ' + '    assetsUrl ' + '    clientApiUrl ' + '    creditCard { ' + '      supportedCardBrands ' + '      challenges ' + '      threeDSecureEnabled ' + '      threeDSecure { ' + '        cardinalAuthenticationJWT ' + '      } ' + '    } ' + '    applePayWeb { ' + '      countryCode ' + '      currencyCode ' + '      merchantIdentifier ' + '      supportedCardBrands ' + '    } ' + '    googlePay { ' + '      displayName ' + '      supportedCardBrands ' + '      environment ' + '      googleAuthorization ' + '      paypalClientId ' + '    } ' + '    ideal { ' + '      routeId ' + '      assetsUrl ' + '    } ' + '    kount { ' + '      merchantId ' + '    } ' + '    masterpass { ' + '      merchantCheckoutId ' + '      supportedCardBrands ' + '    } ' + '    paypal { ' + '      displayName ' + '      clientId ' + '      privacyUrl ' + '      userAgreementUrl ' + '      assetsUrl ' + '      environment ' + '      environmentNoNetwork ' + '      unvettedMerchant ' + '      braintreeClientId ' + '      billingAgreementsEnabled ' + '      merchantAccountId ' + '      currencyCode ' + '      payeeEmail ' + '    } ' + '    unionPay { ' + '      merchantAccountId ' + '    } ' + '    usBankAccount { ' + '      routeId ' + '      plaidPublicKey ' + '    } ' + '    venmo { ' + '      merchantId ' + '      accessToken ' + '      environment ' + '    } ' + '    visaCheckout { ' + '      apiKey ' + '      externalClientId ' + '      supportedCardBrands ' + '    } ' + '    braintreeApi { ' + '      accessToken ' + '      url ' + '    } ' + '    supportedFeatures ' + '  } ' + '}';

      function configuration() {
        return {
          query: CONFIGURATION_QUERY,
          operationName: 'ClientConfiguration'
        };
      }

      module.exports = configuration;
    }, {}],
    67: [function (require, module, exports) {
      'use strict';

      var assign = require('../../../../lib/assign').assign;

      function createMutation(config) {
        var hasAuthenticationInsight = config.hasAuthenticationInsight;
        var mutation = 'mutation TokenizeCreditCard($input: TokenizeCreditCardInput!';

        if (hasAuthenticationInsight) {
          mutation += ', $authenticationInsightInput: AuthenticationInsightInput!';
        }

        mutation += ') { ' + '  tokenizeCreditCard(input: $input) { ' + '    token ' + '    creditCard { ' + '      bin ' + '      brandCode ' + '      last4 ' + '      cardholderName ' + '      expirationMonth' + '      expirationYear' + '      binData { ' + '        prepaid ' + '        healthcare ' + '        debit ' + '        durbinRegulated ' + '        commercial ' + '        payroll ' + '        issuingBank ' + '        countryOfIssuance ' + '        productId ' + '      } ' + '    } ';

        if (hasAuthenticationInsight) {
          mutation += '    authenticationInsight(input: $authenticationInsightInput) {' + '      customerAuthenticationRegulationEnvironment' + '    }';
        }

        mutation += '  } ' + '}';
        return mutation;
      }

      function createCreditCardTokenizationBody(body, options) {
        var cc = body.creditCard;
        var billingAddress = cc && cc.billingAddress;
        var expDate = cc && cc.expirationDate;
        var expirationMonth = cc && (cc.expirationMonth || expDate && expDate.split('/')[0].trim());
        var expirationYear = cc && (cc.expirationYear || expDate && expDate.split('/')[1].trim());
        var variables = {
          input: {
            creditCard: {
              number: cc && cc.number,
              expirationMonth: expirationMonth,
              expirationYear: expirationYear,
              cvv: cc && cc.cvv,
              cardholderName: cc && cc.cardholderName
            },
            options: {}
          }
        };

        if (options.hasAuthenticationInsight) {
          variables.authenticationInsightInput = {
            merchantAccountId: body.merchantAccountId
          };
        }

        if (billingAddress) {
          variables.input.creditCard.billingAddress = billingAddress;
        }

        variables.input = addValidationRule(body, variables.input);
        return variables;
      }

      function addValidationRule(body, input) {
        var validate;

        if (body.creditCard && body.creditCard.options && typeof body.creditCard.options.validate === 'boolean') {
          validate = body.creditCard.options.validate;
        } else if (body.authorizationFingerprint && body.tokenizationKey || body.authorizationFingerprint) {
          validate = true;
        } else if (body.tokenizationKey) {
          validate = false;
        }

        if (typeof validate === 'boolean') {
          input.options = assign({
            validate: validate
          }, input.options);
        }

        return input;
      }

      function creditCardTokenization(body) {
        var options = {
          hasAuthenticationInsight: Boolean(body.authenticationInsight && body.merchantAccountId)
        };
        return {
          query: createMutation(options),
          variables: createCreditCardTokenizationBody(body, options),
          operationName: 'TokenizeCreditCard'
        };
      }

      module.exports = creditCardTokenization;
    }, {
      "../../../../lib/assign": 95
    }],
    68: [function (require, module, exports) {
      'use strict';

      var browserDetection = require('../../browser-detection');

      var features = {
        tokenize_credit_cards: 'payment_methods/credit_cards',
        // eslint-disable-line camelcase
        configuration: 'configuration'
      };
      var disallowedInputPaths = ['creditCard.options.unionPayEnrollment'];

      function GraphQL(config) {
        this._config = config.graphQL;
      }

      GraphQL.prototype.getGraphQLEndpoint = function () {
        return this._config.url;
      };

      GraphQL.prototype.isGraphQLRequest = function (url, body) {
        var featureEnabled;
        var path = this.getClientApiPath(url);

        if (!this._isGraphQLEnabled() || !path || browserDetection.isIe9()) {
          return false;
        }

        featureEnabled = this._config.features.some(function (feature) {
          return features[feature] === path;
        });

        if (containsDisallowedlistedKeys(body)) {
          return false;
        }

        return featureEnabled;
      };

      GraphQL.prototype.getClientApiPath = function (url) {
        var path;
        var clientApiPrefix = '/client_api/v1/';
        var pathParts = url.split(clientApiPrefix);

        if (pathParts.length > 1) {
          path = pathParts[1].split('?')[0];
        }

        return path;
      };

      GraphQL.prototype._isGraphQLEnabled = function () {
        return Boolean(this._config);
      };

      function containsDisallowedlistedKeys(body) {
        return disallowedInputPaths.some(function (keys) {
          var value = keys.split('.').reduce(function (accumulator, key) {
            return accumulator && accumulator[key];
          }, body);
          return value !== undefined; // eslint-disable-line no-undefined
        });
      }

      module.exports = GraphQL;
    }, {
      "../../browser-detection": 54
    }],
    69: [function (require, module, exports) {
      'use strict';

      var BRAINTREE_VERSION = require('../../constants').BRAINTREE_VERSION;

      var assign = require('../../../lib/assign').assign;

      var creditCardTokenizationBodyGenerator = require('./generators/credit-card-tokenization');

      var creditCardTokenizationResponseAdapter = require('./adapters/credit-card-tokenization');

      var configurationBodyGenerator = require('./generators/configuration');

      var configurationResponseAdapter = require('./adapters/configuration');

      var generators = {
        'payment_methods/credit_cards': creditCardTokenizationBodyGenerator,
        configuration: configurationBodyGenerator
      };
      var adapters = {
        'payment_methods/credit_cards': creditCardTokenizationResponseAdapter,
        configuration: configurationResponseAdapter
      };

      function GraphQLRequest(options) {
        var clientApiPath = options.graphQL.getClientApiPath(options.url);
        this._graphQL = options.graphQL;
        this._data = options.data;
        this._method = options.method;
        this._headers = options.headers;
        this._clientSdkMetadata = {
          source: options.metadata.source,
          integration: options.metadata.integration,
          sessionId: options.metadata.sessionId
        };
        this._sendAnalyticsEvent = options.sendAnalyticsEvent || Function.prototype;
        this._generator = generators[clientApiPath];
        this._adapter = adapters[clientApiPath];

        this._sendAnalyticsEvent('graphql.init');
      }

      GraphQLRequest.prototype.getUrl = function () {
        return this._graphQL.getGraphQLEndpoint();
      };

      GraphQLRequest.prototype.getBody = function () {
        var formattedBody = formatBodyKeys(this._data);

        var generatedBody = this._generator(formattedBody);

        var body = assign({
          clientSdkMetadata: this._clientSdkMetadata
        }, generatedBody);
        return JSON.stringify(body);
      };

      GraphQLRequest.prototype.getMethod = function () {
        return 'POST';
      };

      GraphQLRequest.prototype.getHeaders = function () {
        var authorization, headers;

        if (this._data.authorizationFingerprint) {
          this._sendAnalyticsEvent('graphql.authorization-fingerprint');

          authorization = this._data.authorizationFingerprint;
        } else {
          this._sendAnalyticsEvent('graphql.tokenization-key');

          authorization = this._data.tokenizationKey;
        }

        headers = {
          Authorization: 'Bearer ' + authorization,
          'Braintree-Version': BRAINTREE_VERSION
        };
        return assign({}, this._headers, headers);
      };

      GraphQLRequest.prototype.adaptResponseBody = function (parsedBody) {
        return this._adapter(parsedBody, this);
      };

      GraphQLRequest.prototype.determineStatus = function (httpStatus, parsedResponse) {
        var status, errorClass;

        if (httpStatus === 200) {
          errorClass = parsedResponse.errors && parsedResponse.errors[0] && parsedResponse.errors[0].extensions && parsedResponse.errors[0].extensions.errorClass;

          if (parsedResponse.data && !parsedResponse.errors) {
            status = 200;
          } else if (errorClass === 'VALIDATION') {
            status = 422;
          } else if (errorClass === 'AUTHORIZATION') {
            status = 403;
          } else if (errorClass === 'AUTHENTICATION') {
            status = 401;
          } else if (isGraphQLError(errorClass, parsedResponse)) {
            status = 403;
          } else {
            status = 500;
          }
        } else if (!httpStatus) {
          status = 500;
        } else {
          status = httpStatus;
        }

        this._sendAnalyticsEvent('graphql.status.' + httpStatus);

        this._sendAnalyticsEvent('graphql.determinedStatus.' + status);

        return status;
      };

      function isGraphQLError(errorClass, parsedResponse) {
        return !errorClass && parsedResponse.errors[0].message;
      }

      function snakeCaseToCamelCase(snakeString) {
        if (snakeString.indexOf('_') === -1) {
          return snakeString;
        }

        return snakeString.toLowerCase().replace(/(\_\w)/g, function (match) {
          return match[1].toUpperCase();
        });
      }

      function formatBodyKeys(originalBody) {
        var body = {};
        Object.keys(originalBody).forEach(function (key) {
          var camelCaseKey = snakeCaseToCamelCase(key);

          if (_typeof(originalBody[key]) === 'object') {
            body[camelCaseKey] = formatBodyKeys(originalBody[key]);
          } else if (typeof originalBody[key] === 'number') {
            body[camelCaseKey] = String(originalBody[key]);
          } else {
            body[camelCaseKey] = originalBody[key];
          }
        });
        return body;
      }

      module.exports = GraphQLRequest;
    }, {
      "../../../lib/assign": 95,
      "../../constants": 56,
      "./adapters/configuration": 63,
      "./adapters/credit-card-tokenization": 64,
      "./generators/configuration": 66,
      "./generators/credit-card-tokenization": 67
    }],
    70: [function (require, module, exports) {
      'use strict';

      var ajaxIsAvaliable;

      var once = require('../../lib/once');

      var JSONPDriver = require('./jsonp-driver');

      var AJAXDriver = require('./ajax-driver');

      var getUserAgent = require('./get-user-agent');

      var isHTTP = require('./is-http');

      function isAjaxAvailable() {
        if (ajaxIsAvaliable == null) {
          ajaxIsAvaliable = !(isHTTP() && /MSIE\s(8|9)/.test(getUserAgent()));
        }

        return ajaxIsAvaliable;
      }

      module.exports = function (options, cb) {
        cb = once(cb || Function.prototype);
        options.method = (options.method || 'GET').toUpperCase();
        options.timeout = options.timeout == null ? 60000 : options.timeout;
        options.data = options.data || {};

        if (isAjaxAvailable()) {
          AJAXDriver.request(options, cb);
        } else {
          JSONPDriver.request(options, cb);
        }
      };
    }, {
      "../../lib/once": 129,
      "./ajax-driver": 60,
      "./get-user-agent": 62,
      "./is-http": 71,
      "./jsonp-driver": 72
    }],
    71: [function (require, module, exports) {
      'use strict';

      module.exports = function () {
        return window.location.protocol === 'http:';
      };
    }, {}],
    72: [function (require, module, exports) {
      'use strict';

      var head;

      var uuid = require('@braintree/uuid');

      var querystring = require('../../lib/querystring');

      var timeouts = {};

      function _removeScript(script) {
        if (script && script.parentNode) {
          script.parentNode.removeChild(script);
        }
      }

      function _createScriptTag(url, callbackName) {
        var script = document.createElement('script');
        var done = false;
        script.src = url;
        script.async = true;

        script.onerror = function () {
          window[callbackName]({
            message: 'error',
            status: 500
          });
        };

        script.onload = script.onreadystatechange = function () {
          if (done) {
            return;
          }

          if (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete') {
            done = true;
            script.onload = script.onreadystatechange = null;
          }
        };

        return script;
      }

      function _cleanupGlobal(callbackName) {
        try {
          delete window[callbackName];
        } catch (_) {
          window[callbackName] = null;
        }
      }

      function _setupTimeout(timeout, callbackName) {
        timeouts[callbackName] = setTimeout(function () {
          timeouts[callbackName] = null;
          window[callbackName]({
            error: 'timeout',
            status: -1
          });

          window[callbackName] = function () {
            _cleanupGlobal(callbackName);
          };
        }, timeout);
      }

      function _setupGlobalCallback(script, callback, callbackName) {
        window[callbackName] = function (response) {
          var status = response.status || 500;
          var err = null;
          var data = null;
          delete response.status;

          if (status >= 400 || status < 200) {
            err = response;
          } else {
            data = response;
          }

          _cleanupGlobal(callbackName);

          _removeScript(script);

          clearTimeout(timeouts[callbackName]);
          callback(err, data, status);
        };
      }

      function request(options, callback) {
        var script;
        var callbackName = 'callback_json_' + uuid().replace(/-/g, '');
        var url = options.url;
        var attrs = options.data;
        var method = options.method;
        var timeout = options.timeout;
        url = querystring.queryify(url, attrs);
        url = querystring.queryify(url, {
          _method: method,
          callback: callbackName
        });
        script = _createScriptTag(url, callbackName);

        _setupGlobalCallback(script, callback, callbackName);

        _setupTimeout(timeout, callbackName);

        if (!head) {
          head = document.getElementsByTagName('head')[0];
        }

        head.appendChild(script);
      }

      module.exports = {
        request: request
      };
    }, {
      "../../lib/querystring": 131,
      "@braintree/uuid": 46
    }],
    73: [function (require, module, exports) {
      'use strict';

      module.exports = function (body) {
        try {
          body = JSON.parse(body);
        } catch (e) {
          /* ignored */
        }

        return body;
      };
    }, {}],
    74: [function (require, module, exports) {
      'use strict';

      module.exports = function (method, body) {
        if (typeof method !== 'string') {
          throw new Error('Method must be a string');
        }

        if (method.toLowerCase() !== 'get' && body != null) {
          body = typeof body === 'string' ? body : JSON.stringify(body);
        }

        return body;
      };
    }, {}],
    75: [function (require, module, exports) {
      'use strict';

      var isXHRAvailable = typeof window !== 'undefined' && window.XMLHttpRequest && 'withCredentials' in new window.XMLHttpRequest();

      function getRequestObject() {
        return isXHRAvailable ? new window.XMLHttpRequest() : new window.XDomainRequest();
      }

      module.exports = {
        isAvailable: isXHRAvailable,
        getRequestObject: getRequestObject
      };
    }, {}],
    76: [function (require, module, exports) {
      'use strict';
      /**
       * @name BraintreeError.Google Payment - Creation Error Codes
       * @description Errors that occur when [creating the Google Payment component](./module-braintree-web_google-payment.html#.create).
       * @property {MERCHANT} GOOGLE_PAYMENT_NOT_ENABLED Occurs when Google Pay is not enabled on the Braintree control panel.
       * @property {MERCHANT} GOOGLE_PAYMENT_UNSUPPORTED_VERSION Occurs when a Google Pay version is used that is not supported by the Braintree SDK.
       */

      /**
       * @name BraintreeError.Google Payment - parseResponse Error Codes
       * @description Errors that occur when [parsing the response from Google](./GooglePayment.html#parseResponse).
       * @property {UNKNOWN} GOOGLE_PAYMENT_GATEWAY_ERROR Occurs when Google Pay could not be tokenized.
       */

      var BraintreeError = require('../lib/braintree-error');

      module.exports = {
        GOOGLE_PAYMENT_NOT_ENABLED: {
          type: BraintreeError.types.MERCHANT,
          code: 'GOOGLE_PAYMENT_NOT_ENABLED',
          message: 'Google Pay is not enabled for this merchant.'
        },
        GOOGLE_PAYMENT_GATEWAY_ERROR: {
          code: 'GOOGLE_PAYMENT_GATEWAY_ERROR',
          message: 'There was an error when tokenizing the Google Pay payment method.',
          type: BraintreeError.types.UNKNOWN
        },
        GOOGLE_PAYMENT_UNSUPPORTED_VERSION: {
          code: 'GOOGLE_PAYMENT_UNSUPPORTED_VERSION',
          type: BraintreeError.types.MERCHANT
        }
      };
    }, {
      "../lib/braintree-error": 98
    }],
    77: [function (require, module, exports) {
      'use strict';

      var analytics = require('../lib/analytics');

      var assign = require('../lib/assign').assign;

      var convertMethodsToError = require('../lib/convert-methods-to-error');

      var find = require('../lib/find');

      var generateGooglePayConfiguration = require('../lib/generate-google-pay-configuration');

      var BraintreeError = require('../lib/braintree-error');

      var errors = require('./errors');

      var methods = require('../lib/methods');

      var Promise = require('../lib/promise');

      var wrapPromise = require('@braintree/wrap-promise');

      var CREATE_PAYMENT_DATA_REQUEST_METHODS = {
        1: '_createV1PaymentDataRequest',
        2: '_createV2PaymentDataRequest'
      };
      /**
       * @typedef {object} GooglePayment~tokenizePayload
       * @property {string} nonce The payment method nonce.
       * @property {object} details Additional account details.
       * @property {string} details.cardType Type of card, ex: Visa, MasterCard.
       * @property {string} details.lastFour Last four digits of card number.
       * @property {string} details.lastTwo Last two digits of card number.
       * @property {boolean} details.isNetworkTokenized True if the card is network tokenized.
       * @property {string} details.bin First six digits of card number.
       * @property {string} description A human-readable description.
       * @property {string} type The payment method type, `CreditCard` or `AndroidPayCard`.
       * @property {object} binData Information about the card based on the bin.
       * @property {string} binData.commercial Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.countryOfIssuance The country of issuance.
       * @property {string} binData.debit Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.durbinRegulated Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.healthcare Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.issuingBank The issuing bank.
       * @property {string} binData.payroll Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.prepaid Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.productId The product id.
       */

      /**
       * @class GooglePayment
       * @param {object} options Google Payment {@link module:braintree-web/google-payment.create create} options.
       * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/google-payment.create|braintree-web.google-payment.create} instead.</strong>
       * @classdesc This class represents a Google Payment component produced by {@link module:braintree-web/google-payment.create|braintree-web/google-payment.create}. Instances of this class have methods for initializing the Google Pay flow.
       */

      function GooglePayment(options) {
        this._createPromise = options.createPromise;
        this._client = options.client;
        this._useDeferredClient = options.useDeferredClient; // NEXT_MAJOR_VERSION this should be updated to 2 (or whatever the current latest version is)

        this._googlePayVersion = options.googlePayVersion || 1;
        this._googleMerchantId = options.googleMerchantId;

        if (this._isUnsupportedGooglePayAPIVersion()) {
          throw new BraintreeError({
            code: errors.GOOGLE_PAYMENT_UNSUPPORTED_VERSION.code,
            message: 'The Braintree SDK does not support Google Pay version ' + this._googlePayVersion + '. Please upgrade the version of your Braintree SDK and contact support if this error persists.',
            type: errors.GOOGLE_PAYMENT_UNSUPPORTED_VERSION.type
          });
        }
      }

      GooglePayment.prototype._waitForClient = function () {
        if (this._client) {
          return Promise.resolve();
        }

        return this._createPromise.then(function (client) {
          this._client = client;
        }.bind(this));
      };

      GooglePayment.prototype._isUnsupportedGooglePayAPIVersion = function () {
        // if we don't have createPaymentDatqRequest method for the specific
        // API version, then the version is not supported
        return !(this._googlePayVersion in CREATE_PAYMENT_DATA_REQUEST_METHODS);
      };

      GooglePayment.prototype._getDefaultConfig = function () {
        if (!this._defaultConfig) {
          this._defaultConfig = generateGooglePayConfiguration(this._client.getConfiguration(), this._googlePayVersion, this._googleMerchantId);
        }

        return this._defaultConfig;
      };

      GooglePayment.prototype._createV1PaymentDataRequest = function (paymentDataRequest) {
        var defaultConfig = this._getDefaultConfig();

        var overrideCardNetworks = paymentDataRequest.cardRequirements && paymentDataRequest.cardRequirements.allowedCardNetworks;
        var defaultConfigCardNetworks = defaultConfig.cardRequirements.allowedCardNetworks;
        var allowedCardNetworks = overrideCardNetworks || defaultConfigCardNetworks;
        paymentDataRequest = assign({}, defaultConfig, paymentDataRequest); // this way we can preserve allowedCardNetworks from default integration
        // if merchant did not pass any in `cardRequirements`

        paymentDataRequest.cardRequirements.allowedCardNetworks = allowedCardNetworks;
        return paymentDataRequest;
      };

      GooglePayment.prototype._createV2PaymentDataRequest = function (paymentDataRequest) {
        var defaultConfig = this._getDefaultConfig();

        if (paymentDataRequest.allowedPaymentMethods) {
          paymentDataRequest.allowedPaymentMethods.forEach(function (paymentMethod) {
            var defaultPaymentMethod = find(defaultConfig.allowedPaymentMethods, 'type', paymentMethod.type);

            if (defaultPaymentMethod) {
              applyDefaultsToPaymentMethodConfiguration(paymentMethod, defaultPaymentMethod);
            }
          });
        }

        paymentDataRequest = assign({}, defaultConfig, paymentDataRequest);
        return paymentDataRequest;
      };
      /**
       * Create a configuration object for use in the `loadPaymentData` method.
       *
       * **Note**: Version 1 of the Google Pay Api is deprecated and will become unsupported in a future version. Until then, version 1 will continue to be used by default, and version 1 schema parameters and overrides will remain functional on existing integrations. However, new integrations and all following examples will be presented in the GooglePay version 2 schema. See [Google Pay's upgrade guide](https://developers.google.com/pay/api/web/guides/resources/update-to-latest-version) to see how to update your integration.
       *
       * If `options.googlePayVersion === 2` was set during the initial {@link module:braintree-web/google-payment.create|create} call, overrides must match the Google Pay v2 schema to be valid.
       *
       * @public
       * @param {object} overrides The supplied parameters for creating the PaymentDataRequest object. Required parameters are:
       *  @param {object} overrides.transactionInfo Object according to the [Google Pay Transaction Info](https://developers.google.com/pay/api/web/reference/object#TransactionInfo) spec.
       *  Optionally, any of the parameters in the [PaymentDataRequest](https://developers.google.com/pay/api/web/reference/object#PaymentDataRequest) parameters can be overridden, but note that it is recommended only to override top level parameters to avoid squashing deeply nested configuration objects. An example can be found below showing how to safely edit these deeply nested objects.
       * @example
       * var paymentDataRequest = googlePaymentInstance.createPaymentDataRequest({
       *   merchantInfo: {
       *     merchantId: 'my-merchant-id-from-google'
       *   },
       *   transactionInfo: {
       *     currencyCode: 'USD',
       *     totalPriceStatus: 'FINAL',
       *     totalPrice: '100.00'
       *   }
       * });
       *
       * // Update card payment methods to require billing address
       * var cardPaymentMethod = paymentDataRequest.allowedPaymentMethods;
       * cardPaymentMethod.parameters.billingAddressRequired = true;
       * cardPaymentMethod.parameters.billingAddressParameters = {
       *   format: 'FULL',
       *   phoneNumberRequired: true
       * };
       *
       * var paymentsClient = new google.payments.api.PaymentsClient({
       *   environment: 'TEST' // or 'PRODUCTION'
       * })
       *
       * paymentsClient.loadPaymentData(paymentDataRequest).then(function (response) {
       *   // handle response with googlePaymentInstance.parseResponse
       *   // (see below)
       * });
       * @example <caption>With deferred client</caption>
       * googlePaymentInstance.createPaymentDataRequest({
       *   merchantInfo: {
       *     merchantId: 'my-merchant-id-from-google'
       *   },
       *   transactionInfo: {
       *     currencyCode: 'USD',
       *     totalPriceStatus: 'FINAL',
       *     totalPrice: '100.00'
       *   }
       * }).then(function (paymentDataRequest) {
       *   // Update card payment methods to require billing address
       *   var cardPaymentMethod = paymentDataRequest.allowedPaymentMethods;
       *   cardPaymentMethod.parameters.billingAddressRequired = true;
       *   cardPaymentMethod.parameters.billingAddressParameters = {
       *     format: 'FULL',
       *     phoneNumberRequired: true
       *   };
       *
       *   var paymentsClient = new google.payments.api.PaymentsClient({
       *     environment: 'TEST' // or 'PRODUCTION'
       *   })
       *
       *   return paymentsClient.loadPaymentData(paymentDataRequest);
       * }).then(function (response) {
       *   // handle response with googlePaymentInstance.parseResponse
       *   // (see below)
       * });
       * @returns {object|Promise} Returns a configuration object for Google PaymentDataRequest. If instantiated with `useDeferredClient` and an `authorization` it will return a promise that resolves with the configuration.
       */


      GooglePayment.prototype.createPaymentDataRequest = function (overrides) {
        if (!this._useDeferredClient) {
          return this._createPaymentDataRequestSyncronously(overrides);
        }

        return this._waitForClient().then(function () {
          return this._createPaymentDataRequestSyncronously(overrides);
        }.bind(this));
      };

      GooglePayment.prototype._createPaymentDataRequestSyncronously = function (overrides) {
        var paymentDataRequest = assign({}, overrides);
        var version = this._googlePayVersion;
        var createPaymentDataRequestMethod = CREATE_PAYMENT_DATA_REQUEST_METHODS[version];
        analytics.sendEvent(this._createPromise, 'google-payment.v' + version + '.createPaymentDataRequest');
        return this[createPaymentDataRequestMethod](paymentDataRequest);
      };
      /**
       * Parse the response from the tokenization.
       * @public
       * @param {object} response The response back from the Google Pay tokenization.
       * @param {callback} [callback] The second argument, <code>data</code>, is a {@link GooglePay~tokenizePayload|tokenizePayload}. If no callback is provided, `parseResponse` returns a promise that resolves with a {@link GooglePayment~tokenizePayload|tokenizePayload}.
       * @example with callback
       * var paymentsClient = new google.payments.api.PaymentsClient({
       *   environment: 'TEST' // or 'PRODUCTION'
       * })
       *
       * paymentsClient.loadPaymentData(paymentDataRequestFromCreatePaymentDataRequest).then(function (response) {
       *   googlePaymentInstance.parseResponse(response, function (err, data) {
       *     if (err) {
       *       // handle errors
       *     }
       *     // send parsedResponse.nonce to your server
       *   });
       * });
       * @example with promise
       * var paymentsClient = new google.payments.api.PaymentsClient({
       *   environment: 'TEST' // or 'PRODUCTION'
       * })
       *
       * paymentsClient.loadPaymentData(paymentDataRequestFromCreatePaymentDataRequest).then(function (response) {
       *   return googlePaymentInstance.parseResponse(response);
       * }).then(function (parsedResponse) {
       *   // send parsedResponse.nonce to your server
       * }).catch(function (err) {
       *   // handle errors
       * });
       * @returns {(Promise|void)} Returns a promise that resolves the parsed response if no callback is provided.
       */


      GooglePayment.prototype.parseResponse = function (response) {
        var self = this;
        return Promise.resolve().then(function () {
          var payload;
          var rawResponse = response.apiVersion === 2 ? response.paymentMethodData.tokenizationData.token : response.paymentMethodToken.token;
          var parsedResponse = JSON.parse(rawResponse);
          var error = parsedResponse.error;

          if (error) {
            return Promise.reject(error);
          }

          analytics.sendEvent(self._createPromise, 'google-payment.parseResponse.succeeded');

          if (parsedResponse.paypalAccounts) {
            payload = parsedResponse.paypalAccounts[0];
            analytics.sendEvent(self._createPromise, 'google-payment.parseResponse.succeeded.paypal');
            return Promise.resolve({
              nonce: payload.nonce,
              type: payload.type,
              description: payload.description
            });
          }

          payload = parsedResponse.androidPayCards[0];
          analytics.sendEvent(self._createPromise, 'google-payment.parseResponse.succeeded.google-payment');
          return Promise.resolve({
            nonce: payload.nonce,
            type: payload.type,
            description: payload.description,
            details: {
              cardType: payload.details.cardType,
              lastFour: payload.details.lastFour,
              lastTwo: payload.details.lastTwo,
              isNetworkTokenized: payload.details.isNetworkTokenized,
              bin: payload.details.bin
            },
            binData: payload.binData
          });
        }).catch(function (error) {
          analytics.sendEvent(self._createPromise, 'google-payment.parseResponse.failed');
          return Promise.reject(new BraintreeError({
            code: errors.GOOGLE_PAYMENT_GATEWAY_ERROR.code,
            message: errors.GOOGLE_PAYMENT_GATEWAY_ERROR.message,
            type: errors.GOOGLE_PAYMENT_GATEWAY_ERROR.type,
            details: {
              originalError: error
            }
          }));
        });
      };
      /**
       * Cleanly tear down anything set up by {@link module:braintree-web/google-payment.create|create}.
       * @public
       * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.
       * @example
       * googlePaymentInstance.teardown();
       * @example <caption>With callback</caption>
       * googlePaymentInstance.teardown(function () {
       *   // teardown is complete
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      GooglePayment.prototype.teardown = function () {
        convertMethodsToError(this, methods(GooglePayment.prototype));
        return Promise.resolve();
      };

      function applyDefaultsToPaymentMethodConfiguration(merchantSubmittedPaymentMethod, defaultPaymentMethod) {
        Object.keys(defaultPaymentMethod).forEach(function (parameter) {
          if (_typeof(defaultPaymentMethod[parameter]) === 'object') {
            merchantSubmittedPaymentMethod[parameter] = assign({}, defaultPaymentMethod[parameter], merchantSubmittedPaymentMethod[parameter]);
          } else {
            merchantSubmittedPaymentMethod[parameter] = merchantSubmittedPaymentMethod[parameter] || defaultPaymentMethod[parameter];
          }
        });
      }

      module.exports = wrapPromise.wrapPrototype(GooglePayment);
    }, {
      "../lib/analytics": 93,
      "../lib/assign": 95,
      "../lib/braintree-error": 98,
      "../lib/convert-methods-to-error": 100,
      "../lib/find": 110,
      "../lib/generate-google-pay-configuration": 122,
      "../lib/methods": 128,
      "../lib/promise": 130,
      "./errors": 76,
      "@braintree/wrap-promise": 50
    }],
    78: [function (require, module, exports) {
      'use strict';
      /**
       * @module braintree-web/google-payment
       * @description A component to integrate with Google Pay. The majority of the integration uses [Google's pay.js JavaScript file](https://pay.google.com/gp/p/js/pay.js). The Braintree component generates the configuration object necessary for Google Pay to initiate the Payment Request and parse the returned data to retrieve the payment method nonce which is used to process the transaction on the server.
       */

      var GooglePayment = require('./google-payment');

      var BraintreeError = require('../lib/braintree-error');

      var Promise = require('../lib/promise');

      var createAssetsUrl = require('../lib/create-assets-url');

      var createDeferredClient = require('../lib/create-deferred-client');

      var basicComponentVerification = require('../lib/basic-component-verification');

      var wrapPromise = require('@braintree/wrap-promise');

      var VERSION = "3.83.0";

      var errors = require('./errors');
      /**
       * @static
       * @function create
       * @param {object} options Creation options:
       * @param {Client} [options.client] A {@link Client} instance.
       * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.
       * @param {boolean} [options.useDeferredClient] Used in conjunction with `authorization`, allows the Google Payment instance to be available right away by fetching the client configuration in the background. When this option is used, {@link GooglePayment#createPaymentDataRequest} will return a promise that resolves with the configuration instead of returning synchronously.
       * @param {number} [options.googlePayVersion] The version of the Google Pay API to use. Value of 2 is required to accept parameters documented [by Google](https://developers.google.com/pay/api/web/reference/object). Omit this parameter to use the deprecated Google Pay Version 1.
       * @param {string} [options.googleMerchantId] A Google merchant identifier issued after your website is approved by Google. Required when PaymentsClient is initialized with an environment property of PRODUCTION, but may be omitted in TEST environment.
       * @param {callback} [callback] The second argument, `data`, is the {@link GooglePayment} instance. If no callback is provided, `create` returns a promise that resolves with the {@link GooglePayment} instance.
       * @example <caption>Simple Example</caption>
       * // include https://pay.google.com/gp/p/js/pay.js in a script tag
       * // on your page to load the `google.payments.api.PaymentsClient` global object.
       *
       * var paymentButton = document.querySelector('#google-pay-button');
       * var paymentsClient = new google.payments.api.PaymentsClient({
       *   environment: 'TEST' // or 'PRODUCTION'
       * });
       *
       * braintree.client.create({
       *   authorization: 'tokenization-key-or-client-token'
       * }).then(function (clientInstance) {
       *   return braintree.googlePayment.create({
       *     client: clientInstance,
      *      googlePayVersion: 2,
      *      googleMerchantId: 'your-merchant-id-from-google'
       *   });
       * }).then(function (googlePaymentInstance) {
       *   paymentButton.addEventListener('click', function (event) {
       *     var paymentDataRequest;
       *
       *     event.preventDefault();
       *
       *     paymentDataRequest = googlePaymentInstance.createPaymentDataRequest({
       *       transactionInfo: {
       *         currencyCode: 'USD',
       *         totalPriceStatus: 'FINAL',
       *         totalPrice: '100.00'
       *       }
       *     });
       *
       *     paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {
       *       return googlePaymentInstance.parseResponse(paymentData);
       *     }).then(function (result) {
       *       // send result.nonce to your server
       *     }).catch(function (err) {
       *       // handle err
       *     });
       *   });
       * });
       * @example <caption>Check Browser and Customer Compatibility</caption>
       * var paymentsClient = new google.payments.api.PaymentsClient({
       *   environment: 'TEST' // or 'PRODUCTION'
       * });
       *
       * function setupGooglePayButton(googlePaymentInstance) {
       *   var button = document.createElement('button');
       *
       *   button.id = 'google-pay';
       *   button.appendChild(document.createTextNode('Google Pay'));
       *   button.addEventListener('click', function (event) {
       *     var paymentRequestData;
       *
       *     event.preventDefault();
       *
       *     paymentDataRequest = googlePaymentInstance.createPaymentDataRequest({
       *       transactionInfo: {
       *         currencyCode: 'USD',
       *         totalPriceStatus: 'FINAL',
       *         totalPrice: '100.00' // your amount
       *       }
       *     });
       *
       *     paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {
       *       return googlePaymentInstance.parseResponse(paymentData);
      *       }).then(function (result) {
       *       // send result.nonce to your server
       *     }).catch(function (err) {
       *       // handle errors
       *     });
       *   });
       *
       *   document.getElementById('container').appendChild(button);
       * }
       *
       * braintree.client.create({
       *   authorization: 'tokenization-key-or-client-token'
       * }).then(function (clientInstance) {
       *   return braintree.googlePayment.create({
       *     client: clientInstance,
       *     googlePayVersion: 2,
       *     googleMerchantId: 'your-merchant-id-from-google'
       *   });
       * }).then(function (googlePaymentInstance) {
       *
       *   return paymentsClient.isReadyToPay({
       *     // see https://developers.google.com/pay/api/web/reference/object#IsReadyToPayRequest for all options
       *     apiVersion: 2,
       *     apiVersionMinor: 0,
       *     allowedPaymentMethods: googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods,
       *     existingPaymentMethodRequired: true
       *   });
       * }).then(function (response) {
       *   if (response.result) {
       *     setupGooglePayButton(googlePaymentInstance);
       *   }
       * }).catch(function (err) {
       *   // handle setup errors
       * });
       *
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      function create(options) {
        var name = 'Google Pay';
        return basicComponentVerification.verify({
          name: name,
          client: options.client,
          authorization: options.authorization
        }).then(function () {
          var createPromise, instance;
          createPromise = createDeferredClient.create({
            authorization: options.authorization,
            client: options.client,
            debug: options.debug,
            assetsUrl: createAssetsUrl.create(options.authorization),
            name: name
          }).then(function (client) {
            var configuration = client.getConfiguration();
            options.client = client;

            if (!configuration.gatewayConfiguration.androidPay) {
              return Promise.reject(new BraintreeError(errors.GOOGLE_PAYMENT_NOT_ENABLED));
            }

            return client;
          });
          options.createPromise = createPromise;
          instance = new GooglePayment(options);

          if (!options.useDeferredClient) {
            return createPromise.then(function (client) {
              instance._client = client;
              return instance;
            });
          }

          return instance;
        });
      }

      module.exports = {
        create: wrapPromise(create),

        /**
         * @description The current version of the SDK, i.e. `1.32.1`.
         * @type {string}
         */
        VERSION: VERSION
      };
    }, {
      "../lib/basic-component-verification": 96,
      "../lib/braintree-error": 98,
      "../lib/create-assets-url": 102,
      "../lib/create-deferred-client": 104,
      "../lib/promise": 130,
      "./errors": 76,
      "./google-payment": 77,
      "@braintree/wrap-promise": 50
    }],
    79: [function (require, module, exports) {
      'use strict';

      var BraintreeError = require('../../lib/braintree-error');

      var errors = require('../shared/errors');

      var allowedAttributes = require('../shared/constants').allowedAttributes;

      function attributeValidationError(attribute, value) {
        var err;

        if (!allowedAttributes.hasOwnProperty(attribute)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED.type,
            code: errors.HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED.code,
            message: 'The "' + attribute + '" attribute is not supported in Hosted Fields.'
          });
        } else if (value != null && !_isValid(attribute, value)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED.type,
            code: errors.HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED.code,
            message: 'Value "' + value + '" is not allowed for "' + attribute + '" attribute.'
          });
        }

        return err;
      }

      function _isValid(attribute, value) {
        if (allowedAttributes[attribute] === 'string') {
          return typeof value === 'string' || typeof value === 'number';
        } else if (allowedAttributes[attribute] === 'boolean') {
          return String(value) === 'true' || String(value) === 'false';
        }

        return false;
      }

      module.exports = attributeValidationError;
    }, {
      "../../lib/braintree-error": 98,
      "../shared/constants": 87,
      "../shared/errors": 88
    }],
    80: [function (require, module, exports) {
      'use strict';

      var constants = require('../shared/constants');

      var useMin = require('../../lib/use-min');

      module.exports = function composeUrl(assetsUrl, componentId, isDebug) {
        return assetsUrl + '/web/' + constants.VERSION + '/html/hosted-fields-frame' + useMin(isDebug) + '.html#' + componentId;
      };
    }, {
      "../../lib/use-min": 133,
      "../shared/constants": 87
    }],
    81: [function (require, module, exports) {
      'use strict';

      var directions = require('../shared/constants').navigationDirections;

      var browserDetection = require('../shared/browser-detection');

      var focusIntercept = require('../shared/focus-intercept');

      var findParentTags = require('../shared/find-parent-tags');

      var userFocusableTagNames = ['INPUT', 'SELECT', 'TEXTAREA']; // Devices with software keyboards do not or cannot focus on input types
      // that do not require keyboard-based interaction.

      var unfocusedInputTypes = ['hidden', 'button', 'reset', 'submit', 'checkbox', 'radio', 'file'];

      function _isUserFocusableElement(element) {
        if (!browserDetection.hasSoftwareKeyboard()) {
          // on desktop browsers, the only input type that isn't focusable
          // is the hidden input
          return element.type !== 'hidden';
        }

        return userFocusableTagNames.indexOf(element.tagName) > -1 && unfocusedInputTypes.indexOf(element.type) < 0;
      }

      function _createNavigationHelper(direction, numberOfElementsInForm) {
        switch (direction) {
          case directions.BACK:
            return {
              checkIndexBounds: function checkIndexBounds(index) {
                return index < 0;
              },
              indexChange: -1
            };

          case directions.FORWARD:
            return {
              checkIndexBounds: function checkIndexBounds(index) {
                return index > numberOfElementsInForm - 1;
              },
              indexChange: 1
            };

          default:
        }

        return {};
      }

      function _findFirstFocusableElement(elementsInForm) {
        var elementsIndex, element;

        for (elementsIndex = 0; elementsIndex < elementsInForm.length; elementsIndex++) {
          element = elementsInForm[elementsIndex];

          if (_isUserFocusableElement(element)) {
            return element;
          }
        }

        return null;
      }

      module.exports = {
        removeExtraFocusElements: function removeExtraFocusElements(checkoutForm, onRemoveFocusIntercepts) {
          var elements = Array.prototype.slice.call(checkoutForm.elements);

          var firstFocusableInput = _findFirstFocusableElement(elements);

          var lastFocusableInput = _findFirstFocusableElement(elements.reverse()); // these should never be identical, because there will at least be the
          // before and the after input


          [firstFocusableInput, lastFocusableInput].forEach(function (input) {
            if (!input) {
              return;
            }

            if (focusIntercept.matchFocusElement(input.getAttribute('id'))) {
              onRemoveFocusIntercepts(input.getAttribute('id'));
            }
          });
        },
        createFocusChangeHandler: function createFocusChangeHandler(hostedFieldsId, callbacks) {
          return function (data) {
            var currentIndex, targetElement, checkoutForm, navHelper;
            var sourceElement = document.getElementById('bt-' + data.field + '-' + data.direction + '-' + hostedFieldsId);

            if (!sourceElement) {
              return;
            }

            checkoutForm = findParentTags(sourceElement, 'form')[0];

            if (document.forms.length < 1 || !checkoutForm) {
              callbacks.onRemoveFocusIntercepts();
              return;
            }

            checkoutForm = [].slice.call(checkoutForm.elements);
            currentIndex = checkoutForm.indexOf(sourceElement);
            navHelper = _createNavigationHelper(data.direction, checkoutForm.length);

            do {
              currentIndex += navHelper.indexChange;

              if (navHelper.checkIndexBounds(currentIndex)) {
                return;
              }

              targetElement = checkoutForm[currentIndex];
            } while (!_isUserFocusableElement(targetElement));

            if (focusIntercept.matchFocusElement(targetElement.getAttribute('id'))) {
              callbacks.onTriggerInputFocus(targetElement.getAttribute('data-braintree-type'));
            } else {
              targetElement.focus();
            }
          };
        }
      };
    }, {
      "../shared/browser-detection": 86,
      "../shared/constants": 87,
      "../shared/find-parent-tags": 89,
      "../shared/focus-intercept": 90
    }],
    82: [function (require, module, exports) {
      'use strict';

      var allowedStyles = require('../shared/constants').allowedStyles;

      module.exports = function getStylesFromClass(cssClass) {
        var element = document.createElement('input');
        var styles = {};
        var computedStyles;

        if (cssClass[0] === '.') {
          cssClass = cssClass.substring(1);
        }

        element.className = cssClass;
        element.style.display = 'none !important';
        element.style.position = 'fixed !important';
        element.style.left = '-99999px !important';
        element.style.top = '-99999px !important';
        document.body.appendChild(element);
        computedStyles = window.getComputedStyle(element);
        allowedStyles.forEach(function (style) {
          var value = computedStyles[style];

          if (value) {
            styles[style] = value;
          }
        });
        document.body.removeChild(element);
        return styles;
      };
    }, {
      "../shared/constants": 87
    }],
    83: [function (require, module, exports) {
      'use strict';

      var assign = require('../../lib/assign').assign;

      var createAssetsUrl = require('../../lib/create-assets-url');

      var isVerifiedDomain = require('../../lib/is-verified-domain');

      var Destructor = require('../../lib/destructor');

      var classList = require('@braintree/class-list');

      var iFramer = require('@braintree/iframer');

      var Bus = require('framebus');

      var createDeferredClient = require('../../lib/create-deferred-client');

      var BraintreeError = require('../../lib/braintree-error');

      var composeUrl = require('./compose-url');

      var getStylesFromClass = require('./get-styles-from-class');

      var constants = require('../shared/constants');

      var errors = require('../shared/errors');

      var INTEGRATION_TIMEOUT_MS = require('../../lib/constants').INTEGRATION_TIMEOUT_MS;

      var uuid = require('@braintree/uuid');

      var findParentTags = require('../shared/find-parent-tags');

      var browserDetection = require('../shared/browser-detection');

      var events = constants.events;

      var EventEmitter = require('@braintree/event-emitter');

      var injectFrame = require('./inject-frame');

      var analytics = require('../../lib/analytics');

      var allowedFields = constants.allowedFields;

      var methods = require('../../lib/methods');

      var shadow = require('../../lib/shadow');

      var findRootNode = require('../../lib/find-root-node');

      var convertMethodsToError = require('../../lib/convert-methods-to-error');

      var sharedErrors = require('../../lib/errors');

      var getCardTypes = require('../shared/get-card-types');

      var attributeValidationError = require('./attribute-validation-error');

      var Promise = require('../../lib/promise');

      var wrapPromise = require('@braintree/wrap-promise');

      var focusChange = require('./focus-change');

      var destroyFocusIntercept = require('../shared/focus-intercept').destroy;

      var SAFARI_FOCUS_TIMEOUT = 5;
      /**
       * @typedef {object} HostedFields~tokenizePayload
       * @property {string} nonce The payment method nonce.
       * @property {object} authenticationInsight Info about the [regulatory environment](https://developer.paypal.com/braintree/docs/guides/3d-secure/advanced-options/javascript/v3#authentication-insight) of the tokenized card. Only available if `authenticationInsight.merchantAccountId` is passed in the `tokenize` method options.
       * @property {string} authenticationInsight.regulationEnvironment The [regulation environment](https://developer.paypal.com/braintree/docs/guides/3d-secure/advanced-options/javascript/v3#authentication-insight) for the tokenized card.
       * @property {object} details Additional account details.
       * @property {string} details.bin The BIN number of the card.
       * @property {string} details.cardType Type of card, ex: Visa, MasterCard.
       * @property {string} details.expirationMonth The expiration month of the card.
       * @property {string} details.expirationYear The expiration year of the card.
       * @property {string} details.cardholderName The cardholder name tokenized with the card.
       * @property {string} details.lastFour Last four digits of card number.
       * @property {string} details.lastTwo Last two digits of card number.
       * @property {string} description A human-readable description.
       * @property {string} type The payment method type, always `CreditCard`.
       * @property {object} binData Information about the card based on the bin.
       * @property {string} binData.commercial Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.countryOfIssuance The country of issuance.
       * @property {string} binData.debit Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.durbinRegulated Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.healthcare Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.issuingBank The issuing bank.
       * @property {string} binData.payroll Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.prepaid Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.productId The product id.
       */

      /**
       * @typedef {object} HostedFields~stateObject
       * @description The event payload sent from {@link HostedFields#on|on} or {@link HostedFields#getState|getState}.
       * @property {HostedFields~hostedFieldsCard[]} cards
       * This will return an array of potential {@link HostedFields~hostedFieldsCard|cards}. If the card type has been determined, the array will contain only one card.
       * Internally, Hosted Fields uses <a href="https://github.com/braintree/credit-card-type">credit-card-type</a>,
       * an open-source card detection library.
       * @property {string} emittedBy
       * The name of the field associated with an event. This will not be included if returned by {@link HostedFields#getState|getState}. It will be one of the following strings:<br>
       * - `"number"`
       * - `"cvv"`
       * - `"expirationDate"`
       * - `"expirationMonth"`
       * - `"expirationYear"`
       * - `"postalCode"`
       * - `"cardholderName"`
       * @property {object} fields
       * @property {?HostedFields~hostedFieldsFieldData} fields.number {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the number field, if it is present.
       * @property {?HostedFields~hostedFieldsFieldData} fields.cvv {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the CVV field, if it is present.
       * @property {?HostedFields~hostedFieldsFieldData} fields.expirationDate {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the expiration date field, if it is present.
       * @property {?HostedFields~hostedFieldsFieldData} fields.expirationMonth {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the expiration month field, if it is present.
       * @property {?HostedFields~hostedFieldsFieldData} fields.expirationYear {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the expiration year field, if it is present.
       * @property {?HostedFields~hostedFieldsFieldData} fields.postalCode {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the postal code field, if it is present.
       * @property {?HostedFields~hostedFieldsFieldData} fields.cardholderName {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the cardholder name field, if it is present.
       */

      /**
       * @typedef {object} HostedFields~binPayload
       * @description The event payload sent from {@link HostedFields#on|on} when the {@link HostedFields#event:binAvailable|binAvailable} event is emitted.
       * @property {string} bin The first 6 digits of the card number.
       */

      /**
       * @typedef {object} HostedFields~hostedFieldsFieldData
       * @description Data about Hosted Fields fields, sent in {@link HostedFields~stateObject|stateObjects}.
       * @property {HTMLElement} container Reference to the container DOM element on your page associated with the current event.
       * @property {boolean} isFocused Whether or not the input is currently focused.
       * @property {boolean} isEmpty Whether or not the user has entered a value in the input.
       * @property {boolean} isPotentiallyValid
       * A determination based on the future validity of the input value.
       * This is helpful when a user is entering a card number and types <code>"41"</code>.
       * While that value is not valid for submission, it is still possible for
       * it to become a fully qualified entry. However, if the user enters <code>"4x"</code>
       * it is clear that the card number can never become valid and isPotentiallyValid will
       * return false.
       * @property {boolean} isValid Whether or not the value of the associated input is <i>fully</i> qualified for submission.
       */

      /**
       * @typedef {object} HostedFields~hostedFieldsCard
       * @description Information about the card type, sent in {@link HostedFields~stateObject|stateObjects}.
       * @property {string} type The code-friendly representation of the card type. It will be one of the following strings:
       * - `american-express`
       * - `diners-club`
       * - `discover`
       * - `jcb`
       * - `maestro`
       * - `master-card`
       * - `unionpay`
       * - `visa`
       * @property {string} niceType The pretty-printed card type. It will be one of the following strings:
       * - `American Express`
       * - `Diners Club`
       * - `Discover`
       * - `JCB`
       * - `Maestro`
       * - `MasterCard`
       * - `UnionPay`
       * - `Visa`
       * @property {object} code
       * This object contains data relevant to the security code requirements of the card brand.
       * For example, on a Visa card there will be a <code>CVV</code> of 3 digits, whereas an
       * American Express card requires a 4-digit <code>CID</code>.
       * @property {string} code.name <code>"CVV"</code> <code>"CID"</code> <code>"CVC"</code>
       * @property {number} code.size The expected length of the security code. Typically, this is 3 or 4.
       */

      /**
       * @name HostedFields#on
       * @function
       * @param {string} event The name of the event to which you are subscribing.
       * @param {function} handler A callback to handle the event.
       * @description Subscribes a handler function to a named event.
       *
       * **Events that emit a {@link HostedFields~stateObject|stateObject}.**
       * * {@link HostedFields#event:blur|blur}
       * * {@link HostedFields#event:focus|focus}
       * * {@link HostedFields#event:empty|empty}
       * * {@link HostedFields#event:notEmpty|notEmpty}
       * * {@link HostedFields#event:cardTypeChange|cardTypeChange}
       * * {@link HostedFields#event:validityChange|validityChange}
       * * {@link HostedFields#event:inputSubmitRequest|inputSubmitRequest}
       *
       * **Other Events**
       * * {@link HostedFields#event:binAvailable|binAvailable} - emits a {@link HostedFields~binPayload|bin payload}
       * @example
       * <caption>Listening to a Hosted Field event, in this case 'focus'</caption>
       * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {
       *   hostedFieldsInstance.on('focus', function (event) {
       *     console.log(event.emittedBy, 'has been focused');
       *   });
       * });
       * @returns {void}
       */

      /**
       * @name HostedFields#off
       * @function
       * @param {string} event The name of the event to which you are unsubscribing.
       * @param {function} handler The callback for the event you are unsubscribing from.
       * @description Unsubscribes the handler function to a named event.
       * @example
       * <caption>Subscribing and then unsubscribing from a Hosted Field event, in this case 'focus'</caption>
       * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {
       *   var callback = function (event) {
       *     console.log(event.emittedBy, 'has been focused');
       *   };
       *   hostedFieldsInstance.on('focus', callback);
       *
       *   // later on
       *   hostedFieldsInstance.off('focus', callback);
       * });
       * @returns {void}
       */

      /**
       * This event is emitted when the user requests submission of an input field, such as by pressing the Enter or Return key on their keyboard, or mobile equivalent.
       * @event HostedFields#inputSubmitRequest
       * @type {HostedFields~stateObject}
       * @example
       * <caption>Clicking a submit button upon hitting Enter (or equivalent) within a Hosted Field</caption>
       * var hostedFields = require('braintree-web/hosted-fields');
       * var submitButton = document.querySelector('input[type="submit"]');
       *
       * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {
       *   hostedFieldsInstance.on('inputSubmitRequest', function () {
       *     // User requested submission, e.g. by pressing Enter or equivalent
       *     submitButton.click();
       *   });
       * });
       */

      /**
       * This event is emitted when a field transitions from having data to being empty.
       * @event HostedFields#empty
       * @type {HostedFields~stateObject}
       * @example
       * <caption>Listening to an empty event</caption>
       * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {
       *   hostedFieldsInstance.on('empty', function (event) {
       *     console.log(event.emittedBy, 'is now empty');
       *   });
       * });
       */

      /**
       * This event is emitted when a field transitions from being empty to having data.
       * @event HostedFields#notEmpty
       * @type {HostedFields~stateObject}
       * @example
       * <caption>Listening to an notEmpty event</caption>
       * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {
       *   hostedFieldsInstance.on('notEmpty', function (event) {
       *     console.log(event.emittedBy, 'is now not empty');
       *   });
       * });
       */

      /**
       * This event is emitted when a field loses focus.
       * @event HostedFields#blur
       * @type {HostedFields~stateObject}
       * @example
       * <caption>Listening to a blur event</caption>
       * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {
       *   hostedFieldsInstance.on('blur', function (event) {
       *     console.log(event.emittedBy, 'lost focus');
       *   });
       * });
       */

      /**
       * This event is emitted when a field gains focus.
       * @event HostedFields#focus
       * @type {HostedFields~stateObject}
       * @example
       * <caption>Listening to a focus event</caption>
       * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {
       *   hostedFieldsInstance.on('focus', function (event) {
       *     console.log(event.emittedBy, 'gained focus');
       *   });
       * });
       */

      /**
       * This event is emitted when activity within the number field has changed such that the possible card type has changed.
       * @event HostedFields#cardTypeChange
       * @type {HostedFields~stateObject}
       * @example
       * <caption>Listening to a cardTypeChange event</caption>
       * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {
       *   hostedFieldsInstance.on('cardTypeChange', function (event) {
       *     if (event.cards.length === 1) {
       *       console.log(event.cards[0].type);
       *     } else {
       *       console.log('Type of card not yet known');
       *     }
       *   });
       * });
       */

      /**
       * This event is emitted when the validity of a field has changed. Validity is represented in the {@link HostedFields~stateObject|stateObject} as two booleans: `isValid` and `isPotentiallyValid`.
       * @event HostedFields#validityChange
       * @type {HostedFields~stateObject}
       * @example
       * <caption>Listening to a validityChange event</caption>
       * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {
       *   hostedFieldsInstance.on('validityChange', function (event) {
       *     var field = event.fields[event.emittedBy];
       *
       *     if (field.isValid) {
       *       console.log(event.emittedBy, 'is fully valid');
       *     } else if (field.isPotentiallyValid) {
       *       console.log(event.emittedBy, 'is potentially valid');
       *     } else {
       *       console.log(event.emittedBy, 'is not valid');
       *     }
       *   });
       * });
       */

      /**
       * This event is emitted when the first 6 digits of the card number have been entered by the customer.
       * @event HostedFields#binAvailable
       * @type {string}
       * @example
       * <caption>Listening to a `binAvailable` event</caption>
       * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {
       *   hostedFieldsInstance.on('binAvailable', function (event) {
       *     event.bin // send bin to 3rd party bin service
       *   });
       * });
       */

      function createInputEventHandler(fields) {
        return function (eventData) {
          var field;
          var merchantPayload = eventData.merchantPayload;
          var emittedBy = merchantPayload.emittedBy;
          var container = fields[emittedBy].containerElement;
          Object.keys(merchantPayload.fields).forEach(function (key) {
            merchantPayload.fields[key].container = fields[key].containerElement;
          });
          field = merchantPayload.fields[emittedBy];

          if (eventData.type === 'blur') {
            performBlurFixForIos(container);
          }

          classList.toggle(container, constants.externalClasses.FOCUSED, field.isFocused);
          classList.toggle(container, constants.externalClasses.VALID, field.isValid);
          classList.toggle(container, constants.externalClasses.INVALID, !field.isPotentiallyValid);
          this._state = {
            // eslint-disable-line no-invalid-this
            cards: merchantPayload.cards,
            fields: merchantPayload.fields
          };

          this._emit(eventData.type, merchantPayload); // eslint-disable-line no-invalid-this

        };
      } // iOS Safari has a bug where inputs in iframes
      // will not dismiss the keyboard when they lose
      // focus. We create a hidden button input that we
      // can focus on and blur to force the keyboard to
      // dismiss. See #229


      function performBlurFixForIos(container) {
        var hiddenInput;

        if (!browserDetection.isIos()) {
          return;
        }

        if (document.activeElement === document.body) {
          hiddenInput = container.querySelector('input');

          if (!hiddenInput) {
            hiddenInput = document.createElement('input');
            hiddenInput.type = 'button';
            hiddenInput.style.height = '0px';
            hiddenInput.style.width = '0px';
            hiddenInput.style.opacity = '0';
            hiddenInput.style.padding = '0';
            hiddenInput.style.position = 'absolute';
            hiddenInput.style.left = '-200%';
            hiddenInput.style.top = '0px';
            container.insertBefore(hiddenInput, container.firstChild);
          }

          hiddenInput.focus();
          hiddenInput.blur();
        }
      }

      function isVisibleEnough(node) {
        var boundingBox = node.getBoundingClientRect();
        var verticalMidpoint = Math.floor(boundingBox.height / 2);
        var horizontalMidpoint = Math.floor(boundingBox.width / 2);
        return boundingBox.top < (window.innerHeight - verticalMidpoint || document.documentElement.clientHeight - verticalMidpoint) && boundingBox.right > horizontalMidpoint && boundingBox.bottom > verticalMidpoint && boundingBox.left < (window.innerWidth - horizontalMidpoint || document.documentElement.clientWidth - horizontalMidpoint);
      }
      /**
       * @class HostedFields
       * @param {object} options The Hosted Fields {@link module:braintree-web/hosted-fields.create create} options.
       * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/hosted-fields.create|braintree-web.hosted-fields.create} instead.</strong>
       * @classdesc This class represents a Hosted Fields component produced by {@link module:braintree-web/hosted-fields.create|braintree-web/hosted-fields.create}. Instances of this class have methods for interacting with the input fields within Hosted Fields' iframes.
       */


      function HostedFields(options) {
        var failureTimeout, clientConfig, assetsUrl, isDebug, hostedFieldsUrl;
        var self = this;
        var fields = {};
        var frameReadyPromiseResolveFunctions = {};
        var frameReadyPromises = [];
        var componentId = uuid();
        this._merchantConfigurationOptions = assign({}, options);

        if (options.client) {
          clientConfig = options.client.getConfiguration();
          assetsUrl = clientConfig.gatewayConfiguration.assetsUrl;
          isDebug = clientConfig.isDebug;
        } else {
          assetsUrl = createAssetsUrl.create(options.authorization);
          isDebug = Boolean(options.isDebug);
        }

        this._clientPromise = createDeferredClient.create({
          client: options.client,
          authorization: options.authorization,
          debug: isDebug,
          assetsUrl: assetsUrl,
          name: 'Hosted Fields'
        });
        hostedFieldsUrl = composeUrl(assetsUrl, componentId, isDebug);

        if (!options.fields || Object.keys(options.fields).length === 0) {
          throw new BraintreeError({
            type: sharedErrors.INSTANTIATION_OPTION_REQUIRED.type,
            code: sharedErrors.INSTANTIATION_OPTION_REQUIRED.code,
            message: 'options.fields is required when instantiating Hosted Fields.'
          });
        }

        EventEmitter.call(this);
        this._injectedNodes = [];
        this._destructor = new Destructor();
        this._fields = fields;
        this._state = {
          fields: {},
          cards: getCardTypes('')
        };
        this._bus = new Bus({
          channel: componentId,
          verifyDomain: isVerifiedDomain
        });

        this._destructor.registerFunctionForTeardown(function () {
          self._bus.teardown();
        }); // NEXT_MAJOR_VERSION analytics events should have present tense verbs


        if (!options.client) {
          analytics.sendEvent(this._clientPromise, 'custom.hosted-fields.initialized.deferred-client');
        } else {
          analytics.sendEvent(this._clientPromise, 'custom.hosted-fields.initialized');
        }

        Object.keys(options.fields).forEach(function (key) {
          var field, externalContainer, internalContainer, frame, frameReadyPromise;

          if (!constants.allowedFields.hasOwnProperty(key)) {
            throw new BraintreeError({
              type: errors.HOSTED_FIELDS_INVALID_FIELD_KEY.type,
              code: errors.HOSTED_FIELDS_INVALID_FIELD_KEY.code,
              message: '"' + key + '" is not a valid field.'
            });
          }

          field = options.fields[key]; // NEXT_MAJOR_VERSION remove selector as an option
          // and simply make the API take a container

          externalContainer = field.container || field.selector;

          if (typeof externalContainer === 'string') {
            externalContainer = document.querySelector(externalContainer);
          }

          if (!externalContainer || externalContainer.nodeType !== 1) {
            throw new BraintreeError({
              type: errors.HOSTED_FIELDS_INVALID_FIELD_SELECTOR.type,
              code: errors.HOSTED_FIELDS_INVALID_FIELD_SELECTOR.code,
              message: errors.HOSTED_FIELDS_INVALID_FIELD_SELECTOR.message,
              details: {
                fieldSelector: field.selector,
                fieldContainer: field.container,
                fieldKey: key
              }
            });
          } else if (externalContainer.querySelector('iframe[name^="braintree-"]')) {
            throw new BraintreeError({
              type: errors.HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME.type,
              code: errors.HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME.code,
              message: errors.HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME.message,
              details: {
                fieldSelector: field.selector,
                fieldContainer: field.container,
                fieldKey: key
              }
            });
          }

          internalContainer = externalContainer;

          if (shadow.isShadowElement(internalContainer)) {
            internalContainer = shadow.transformToSlot(internalContainer, 'height: 100%');
          }

          if (field.maxlength && typeof field.maxlength !== 'number') {
            throw new BraintreeError({
              type: errors.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.type,
              code: errors.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.code,
              message: 'The value for maxlength must be a number.',
              details: {
                fieldKey: key
              }
            });
          }

          if (field.minlength && typeof field.minlength !== 'number') {
            throw new BraintreeError({
              type: errors.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.type,
              code: errors.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.code,
              message: 'The value for minlength must be a number.',
              details: {
                fieldKey: key
              }
            });
          }

          frame = iFramer({
            type: key,
            name: 'braintree-hosted-field-' + key,
            style: constants.defaultIFrameStyle,
            title: field.iframeTitle || 'Secure Credit Card Frame - ' + constants.allowedFields[key].label
          });

          this._injectedNodes.push.apply(this._injectedNodes, injectFrame(componentId, frame, internalContainer, function () {
            self.focus(key);
          }));

          this._setupLabelFocus(key, externalContainer);

          fields[key] = {
            frameElement: frame,
            containerElement: externalContainer
          };
          frameReadyPromise = new Promise(function (resolve) {
            frameReadyPromiseResolveFunctions[key] = resolve;
          });
          frameReadyPromises.push(frameReadyPromise);
          this._state.fields[key] = {
            isEmpty: true,
            isValid: false,
            isPotentiallyValid: true,
            isFocused: false,
            container: externalContainer
          };
          setTimeout(function () {
            // Edge has an intermittent issue where
            // the iframes load, but the JavaScript
            // can't message out to the parent page.
            // We can fix this by setting the src
            // to about:blank first followed by
            // the actual source. Both instances
            // of setting the src need to be in a
            // setTimeout to work.
            if (browserDetection.isIE() || browserDetection.isEdge()) {
              frame.src = 'about:blank';
              setTimeout(function () {
                frame.src = hostedFieldsUrl;
              }, 0);
            } else {
              frame.src = hostedFieldsUrl;
            }
          }, 0);
        }.bind(this));

        if (this._merchantConfigurationOptions.styles) {
          Object.keys(this._merchantConfigurationOptions.styles).forEach(function (selector) {
            var className = self._merchantConfigurationOptions.styles[selector];

            if (typeof className === 'string') {
              self._merchantConfigurationOptions.styles[selector] = getStylesFromClass(className);
            }
          });
        }

        this._bus.on(events.REMOVE_FOCUS_INTERCEPTS, function (data) {
          destroyFocusIntercept(data && data.id);
        });

        this._bus.on(events.TRIGGER_FOCUS_CHANGE, focusChange.createFocusChangeHandler(componentId, {
          onRemoveFocusIntercepts: function onRemoveFocusIntercepts(element) {
            self._bus.emit(events.REMOVE_FOCUS_INTERCEPTS, {
              id: element
            });
          },
          onTriggerInputFocus: function onTriggerInputFocus(targetType) {
            self.focus(targetType);
          }
        }));

        this._bus.on(events.READY_FOR_CLIENT, function (reply) {
          self._clientPromise.then(function (client) {
            reply(client);
          });
        });

        this._bus.on(events.CARD_FORM_ENTRY_HAS_BEGUN, function () {
          analytics.sendEvent(self._clientPromise, 'hosted-fields.input.started');
        });

        this._bus.on(events.BIN_AVAILABLE, function (bin) {
          self._emit('binAvailable', {
            bin: bin
          });
        });

        failureTimeout = setTimeout(function () {
          analytics.sendEvent(self._clientPromise, 'custom.hosted-fields.load.timed-out');

          self._emit('timeout');
        }, INTEGRATION_TIMEOUT_MS);
        Promise.all(frameReadyPromises).then(function (results) {
          var reply = results[0];
          clearTimeout(failureTimeout);
          reply(formatMerchantConfigurationForIframes(self._merchantConfigurationOptions));

          self._cleanUpFocusIntercepts();

          self._emit('ready');
        });

        this._bus.on(events.FRAME_READY, function (data, reply) {
          frameReadyPromiseResolveFunctions[data.field](reply);
        });

        this._bus.on(events.INPUT_EVENT, createInputEventHandler(fields).bind(this));

        this._destructor.registerFunctionForTeardown(function () {
          var j, node, parent;

          for (j = 0; j < self._injectedNodes.length; j++) {
            node = self._injectedNodes[j];
            parent = node.parentNode;
            parent.removeChild(node);
            classList.remove(parent, constants.externalClasses.FOCUSED, constants.externalClasses.INVALID, constants.externalClasses.VALID);
          }
        });

        this._destructor.registerFunctionForTeardown(function () {
          destroyFocusIntercept();
        });

        this._destructor.registerFunctionForTeardown(function () {
          var methodNames = methods(HostedFields.prototype).concat(methods(EventEmitter.prototype));
          convertMethodsToError(self, methodNames);
        });
      }

      EventEmitter.createChild(HostedFields);

      HostedFields.prototype._setupLabelFocus = function (type, container) {
        var labels, i;
        var self = this;
        var rootNode = findRootNode(container);

        if (container.id == null) {
          return;
        }

        function triggerFocus() {
          self.focus(type);
        } // find any labels in the normal DOM


        labels = Array.prototype.slice.call(document.querySelectorAll('label[for="' + container.id + '"]'));

        if (rootNode !== document) {
          // find any labels within the shadow dom
          labels = labels.concat(Array.prototype.slice.call(rootNode.querySelectorAll('label[for="' + container.id + '"]')));
        } // find any labels surrounding the container that don't also have the `for` attribute


        labels = labels.concat(findParentTags(container, 'label')); // filter out any accidental duplicates

        labels = labels.filter(function (label, index, arr) {
          return arr.indexOf(label) === index;
        });

        for (i = 0; i < labels.length; i++) {
          labels[i].addEventListener('click', triggerFocus, false);
        }

        this._destructor.registerFunctionForTeardown(function () {
          for (i = 0; i < labels.length; i++) {
            labels[i].removeEventListener('click', triggerFocus, false);
          }
        });
      };

      HostedFields.prototype._getAnyFieldContainer = function () {
        var self = this;
        return Object.keys(this._fields).reduce(function (found, field) {
          return found || self._fields[field].containerElement;
        }, null);
      };

      HostedFields.prototype._cleanUpFocusIntercepts = function () {
        var iframeContainer, checkoutForm;

        if (document.forms.length < 1) {
          this._bus.emit(events.REMOVE_FOCUS_INTERCEPTS);
        } else {
          iframeContainer = this._getAnyFieldContainer();
          checkoutForm = findParentTags(iframeContainer, 'form')[0];

          if (checkoutForm) {
            focusChange.removeExtraFocusElements(checkoutForm, function (id) {
              this._bus.emit(events.REMOVE_FOCUS_INTERCEPTS, {
                id: id
              });
            }.bind(this));
          } else {
            this._bus.emit(events.REMOVE_FOCUS_INTERCEPTS);
          }
        }
      };

      HostedFields.prototype._attachInvalidFieldContainersToError = function (err) {
        if (!(err.details && err.details.invalidFieldKeys && err.details.invalidFieldKeys.length > 0)) {
          return;
        }

        err.details.invalidFields = {};
        err.details.invalidFieldKeys.forEach(function (field) {
          err.details.invalidFields[field] = this._fields[field].containerElement;
        }.bind(this));
      };
      /**
       * Get card verification challenges, such as requirements for cvv and postal code.
       * @public
       * @param {callback} [callback] Called on completion, containing an error if one occurred. If no callback is provided, `getChallenges` returns a promise.
       * @example
       * hostedFieldsInstance.getChallenges().then(function (challenges) {
       *   challenges // ['cvv', 'postal_code']
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      HostedFields.prototype.getChallenges = function () {
        return this._clientPromise.then(function (client) {
          return client.getConfiguration().gatewayConfiguration.challenges;
        });
      };
      /**
       * Get supported card types configured in the Braintree Control Panel
       * @public
       * @param {callback} [callback] Called on completion, containing an error if one occurred. If no callback is provided, `getSupportedCardTypes` returns a promise.
       * @example
       * hostedFieldsInstance.getSupportedCardTypes().then(function (cardTypes) {
       *   cardTypes // ['Visa', 'American Express', 'Mastercard']
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      HostedFields.prototype.getSupportedCardTypes = function () {
        return this._clientPromise.then(function (client) {
          var cards = client.getConfiguration().gatewayConfiguration.creditCards.supportedCardTypes.map(function (cardType) {
            if (cardType === 'MasterCard') {
              // Mastercard changed their branding. We can't update our
              // config without creating a breaking change, so we just
              // hard code the change here
              return 'Mastercard';
            }

            return cardType;
          });
          return cards;
        });
      };
      /**
       * Cleanly remove anything set up by {@link module:braintree-web/hosted-fields.create|create}.
       * @public
       * @param {callback} [callback] Called on completion, containing an error if one occurred. No data is returned if teardown completes successfully. If no callback is provided, `teardown` returns a promise.
       * @example
       * hostedFieldsInstance.teardown(function (teardownErr) {
       *   if (teardownErr) {
       *     console.error('Could not tear down Hosted Fields!');
       *   } else {
       *     console.info('Hosted Fields has been torn down!');
       *   }
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      HostedFields.prototype.teardown = function () {
        var self = this;
        return new Promise(function (resolve, reject) {
          self._destructor.teardown(function (err) {
            analytics.sendEvent(self._clientPromise, 'custom.hosted-fields.teardown-completed');

            if (err) {
              reject(err);
            } else {
              resolve();
            }
          });
        });
      };
      /**
       * Tokenizes fields and returns a nonce payload.
       * @public
       * @param {object} [options] All tokenization options for the Hosted Fields component.
       * @param {boolean} [options.vault=false] When true, will vault the tokenized card. Cards will only be vaulted when using a client created with a client token that includes a customer ID. Note: merchants using Advanced Fraud Tools should not use this option, as device data will not be included.
       * @param {object} [options.authenticationInsight] Options for checking authentication insight - the [regulatory environment](https://developer.paypal.com/braintree/docs/guides/3d-secure/advanced-options/javascript/v3#authentication-insight) of the tokenized card.
       * @param {string} options.authenticationInsight.merchantAccountId The Braintree merchant account id to use to look up the authentication insight information.
       * @param {array} [options.fieldsToTokenize] By default, all fields will be tokenized. You may specify which fields specifically you wish to tokenize with this property. Valid options are `'number'`, `'cvv'`, `'expirationDate'`, `'expirationMonth'`, `'expirationYear'`, `'postalCode'`, `'cardholderName'`.
       * @param {string} [options.cardholderName] When supplied, the cardholder name to be tokenized with the contents of the fields.
       * @param {string} [options.billingAddress.postalCode] When supplied, this postal code will be tokenized along with the contents of the fields. If a postal code is provided as part of the Hosted Fields configuration, the value of the field will be tokenized and this value will be ignored.
       * @param {string} [options.billingAddress.firstName] When supplied, this customer first name will be tokenized along with the contents of the fields.
       * @param {string} [options.billingAddress.lastName] When supplied, this customer last name will be tokenized along with the contents of the fields.
       * @param {string} [options.billingAddress.company] When supplied, this company name will be tokenized along with the contents of the fields.
       * @param {string} [options.billingAddress.streetAddress] When supplied, this street address will be tokenized along with the contents of the fields.
       * @param {string} [options.billingAddress.extendedAddress] When supplied, this extended address will be tokenized along with the contents of the fields.
       * @param {string} [options.billingAddress.locality] When supplied, this locality (the city) will be tokenized along with the contents of the fields.
       * @param {string} [options.billingAddress.region] When supplied, this region (the state) will be tokenized along with the contents of the fields.
       * @param {string} [options.billingAddress.countryCodeNumeric] When supplied, this numeric country code will be tokenized along with the contents of the fields.
       * @param {string} [options.billingAddress.countryCodeAlpha2] When supplied, this alpha 2 representation of a country will be tokenized along with the contents of the fields.
       * @param {string} [options.billingAddress.countryCodeAlpha3] When supplied, this alpha 3 representation of a country will be tokenized along with the contents of the fields.
       * @param {string} [options.billingAddress.countryName] When supplied, this country name will be tokenized along with the contents of the fields.
       *
       * @param {callback} [callback] May be used as the only parameter of the function if no options are passed in. The second argument, <code>data</code>, is a {@link HostedFields~tokenizePayload|tokenizePayload}. If no callback is provided, `tokenize` returns a function that resolves with a {@link HostedFields~tokenizePayload|tokenizePayload}.
       * @example <caption>Tokenize a card</caption>
       * hostedFieldsInstance.tokenize(function (tokenizeErr, payload) {
       *   if (tokenizeErr) {
       *     switch (tokenizeErr.code) {
       *       case 'HOSTED_FIELDS_FIELDS_EMPTY':
       *         // occurs when none of the fields are filled in
       *         console.error('All fields are empty! Please fill out the form.');
       *         break;
       *       case 'HOSTED_FIELDS_FIELDS_INVALID':
       *         // occurs when certain fields do not pass client side validation
       *         console.error('Some fields are invalid:', tokenizeErr.details.invalidFieldKeys);
       *
       *         // you can also programmatically access the field containers for the invalid fields
       *         tokenizeErr.details.invalidFields.forEach(function (fieldContainer) {
       *           fieldContainer.className = 'invalid';
       *         });
       *         break;
       *       case 'HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE':
       *         // occurs when:
       *         //   * the client token used for client authorization was generated
       *         //     with a customer ID and the fail on duplicate payment method
       *         //     option is set to true
       *         //   * the card being tokenized has previously been vaulted (with any customer)
       *         // See: https://developer.paypal.com/braintree/docs/reference/request/client-token/generate#options.fail_on_duplicate_payment_method
       *         console.error('This payment method already exists in your vault.');
       *         break;
       *       case 'HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED':
       *         // occurs when:
       *         //   * the client token used for client authorization was generated
       *         //     with a customer ID and the verify card option is set to true
       *         //     and you have credit card verification turned on in the Braintree
       *         //     control panel
       *         //   * the cvv does not pass verification (https://developer.paypal.com/braintree/docs/reference/general/testing#avs-and-cvv/cid-responses)
       *         // See: https://developer.paypal.com/braintree/docs/reference/request/client-token/generate#options.verify_card
       *         console.error('CVV did not pass verification');
       *         break;
       *       case 'HOSTED_FIELDS_FAILED_TOKENIZATION':
       *         // occurs for any other tokenization error on the server
       *         console.error('Tokenization failed server side. Is the card valid?');
       *         break;
       *       case 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR':
       *         // occurs when the Braintree gateway cannot be contacted
       *         console.error('Network error occurred when tokenizing.');
       *         break;
       *       default:
       *         console.error('Something bad happened!', tokenizeErr);
       *     }
       *   } else {
       *     console.log('Got nonce:', payload.nonce);
       *   }
       * });
       * @example <caption>Tokenize and vault a card</caption>
       * hostedFieldsInstance.tokenize({
       *   vault: true
       * }, function (tokenizeErr, payload) {
       *   if (tokenizeErr) {
       *     console.error(tokenizeErr);
       *   } else {
       *     console.log('Got nonce:', payload.nonce);
       *   }
       * });
       * @example <caption>Tokenize a card with non-Hosted Fields cardholder name</caption>
       * hostedFieldsInstance.tokenize({
       *   cardholderName: 'First Last'
       * }, function (tokenizeErr, payload) {
       *   if (tokenizeErr) {
       *     console.error(tokenizeErr);
       *   } else {
       *     console.log('Got nonce:', payload.nonce);
       *   }
       * });
       * @example <caption>Tokenize a card with non-Hosted Fields postal code option</caption>
       * hostedFieldsInstance.tokenize({
       *   billingAddress: {
       *     postalCode: '11111'
       *   }
       * }, function (tokenizeErr, payload) {
       *   if (tokenizeErr) {
       *     console.error(tokenizeErr);
       *   } else {
       *     console.log('Got nonce:', payload.nonce);
       *   }
       * });
       * @example <caption>Tokenize a card with additional billing address options</caption>
       * hostedFieldsInstance.tokenize({
       *   billingAddress: {
       *     firstName: 'First',
       *     lastName: 'Last',
       *     company: 'Company',
       *     streetAddress: '123 Street',
       *     extendedAddress: 'Unit 1',
       *     // passing just one of the country options is sufficient to
       *     // associate the card details with a particular country
       *     // valid country names and codes can be found here:
       *     // https://developer.paypal.com/braintree/docs/reference/general/countries/ruby#list-of-countries
       *     countryName: 'United States',
       *     countryCodeAlpha2: 'US',
       *     countryCodeAlpha3: 'USA',
       *     countryCodeNumeric: '840'
       *   }
       * }, function (tokenizeErr, payload) {
       *   if (tokenizeErr) {
       *     console.error(tokenizeErr);
       *   } else {
       *     console.log('Got nonce:', payload.nonce);
       *   }
       * });
       * @example <caption>Allow tokenization with empty cardholder name field</caption>
       * var state = hostedFieldsInstance.getState();
       * var fields = Object.keys(state.fields);
       *
       * // normally, if you tried to tokenize an empty cardholder name field
       * // you would get an error, to allow making this field optional,
       * // tokenize all the fields except for the cardholder name field
       * // when the cardholder name field is empty. Otherwise, tokenize
       * // all the fields
       * if (state.fields.cardholderName.isEmpty) {
       *  fields = fields.filter(function (field) {
       *    return field !== 'cardholderName';
       *  });
       * }
       *
       * hostedFieldsInstance.tokenize({
       *  fieldsToTokenize: fields
       * }, function (tokenizeErr, payload) {
       *   if (tokenizeErr) {
       *     console.error(tokenizeErr);
       *   } else {
       *     console.log('Got nonce:', payload.nonce);
       *   }
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      HostedFields.prototype.tokenize = function (options) {
        var self = this;

        if (!options) {
          options = {};
        }

        return new Promise(function (resolve, reject) {
          self._bus.emit(events.TOKENIZATION_REQUEST, options, function (response) {
            var err = response[0];
            var payload = response[1];

            if (err) {
              self._attachInvalidFieldContainersToError(err);

              reject(new BraintreeError(err));
            } else {
              resolve(payload);
            }
          });
        });
      };
      /**
       * Add a class to a {@link module:braintree-web/hosted-fields~field field}. Useful for updating field styles when events occur elsewhere in your checkout.
       * @public
       * @param {string} field The field you wish to add a class to. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.
       * @param {string} classname The class to be added.
       * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the class is added successfully.
       *
       * @example
       * hostedFieldsInstance.addClass('number', 'custom-class', function (addClassErr) {
       *   if (addClassErr) {
       *     console.error(addClassErr);
       *   }
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      HostedFields.prototype.addClass = function (field, classname) {
        var err;

        if (!allowedFields.hasOwnProperty(field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_INVALID.type,
            code: errors.HOSTED_FIELDS_FIELD_INVALID.code,
            message: '"' + field + '" is not a valid field. You must use a valid field option when adding a class.'
          });
        } else if (!this._fields.hasOwnProperty(field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,
            code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,
            message: 'Cannot add class to "' + field + '" field because it is not part of the current Hosted Fields options.'
          });
        } else {
          this._bus.emit(events.ADD_CLASS, {
            field: field,
            classname: classname
          });
        }

        if (err) {
          return Promise.reject(err);
        }

        return Promise.resolve();
      };
      /**
       * Removes a class to a {@link module:braintree-web/hosted-fields~field field}. Useful for updating field styles when events occur elsewhere in your checkout.
       * @public
       * @param {string} field The field you wish to remove a class from. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.
       * @param {string} classname The class to be removed.
       * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the class is removed successfully.
       *
       * @example
       * hostedFieldsInstance.addClass('number', 'custom-class', function (addClassErr) {
       *   if (addClassErr) {
       *     console.error(addClassErr);
       *     return;
       *   }
       *
       *   // some time later...
       *   hostedFieldsInstance.removeClass('number', 'custom-class');
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      HostedFields.prototype.removeClass = function (field, classname) {
        var err;

        if (!allowedFields.hasOwnProperty(field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_INVALID.type,
            code: errors.HOSTED_FIELDS_FIELD_INVALID.code,
            message: '"' + field + '" is not a valid field. You must use a valid field option when removing a class.'
          });
        } else if (!this._fields.hasOwnProperty(field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,
            code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,
            message: 'Cannot remove class from "' + field + '" field because it is not part of the current Hosted Fields options.'
          });
        } else {
          this._bus.emit(events.REMOVE_CLASS, {
            field: field,
            classname: classname
          });
        }

        if (err) {
          return Promise.reject(err);
        }

        return Promise.resolve();
      };
      /**
       * Sets an attribute of a {@link module:braintree-web/hosted-fields~field field}.
       * Supported attributes are `aria-invalid`, `aria-required`, `disabled`, and `placeholder`.
       *
       * @public
       * @param {object} options The options for the attribute you wish to set.
       * @param {string} options.field The field to which you wish to add an attribute. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.
       * @param {string} options.attribute The name of the attribute you wish to add to the field.
       * @param {string} options.value The value for the attribute.
       * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the attribute is set successfully.
       *
       * @example <caption>Set the placeholder attribute of a field</caption>
       * hostedFieldsInstance.setAttribute({
       *   field: 'number',
       *   attribute: 'placeholder',
       *   value: '1111 1111 1111 1111'
       * }, function (attributeErr) {
       *   if (attributeErr) {
       *     console.error(attributeErr);
       *   }
       * });
       *
       * @example <caption>Set the aria-required attribute of a field</caption>
       * hostedFieldsInstance.setAttribute({
       *   field: 'number',
       *   attribute: 'aria-required',
       *   value: true
       * }, function (attributeErr) {
       *   if (attributeErr) {
       *     console.error(attributeErr);
       *   }
       * });
       *
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      HostedFields.prototype.setAttribute = function (options) {
        var attributeErr, err;

        if (!allowedFields.hasOwnProperty(options.field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_INVALID.type,
            code: errors.HOSTED_FIELDS_FIELD_INVALID.code,
            message: '"' + options.field + '" is not a valid field. You must use a valid field option when setting an attribute.'
          });
        } else if (!this._fields.hasOwnProperty(options.field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,
            code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,
            message: 'Cannot set attribute for "' + options.field + '" field because it is not part of the current Hosted Fields options.'
          });
        } else {
          attributeErr = attributeValidationError(options.attribute, options.value);

          if (attributeErr) {
            err = attributeErr;
          } else {
            this._bus.emit(events.SET_ATTRIBUTE, {
              field: options.field,
              attribute: options.attribute,
              value: options.value
            });
          }
        }

        if (err) {
          return Promise.reject(err);
        }

        return Promise.resolve();
      };
      /**
       * Sets the month options for the expiration month field when presented as a select element.
       *
       * @public
       * @param {array} options An array of 12 entries corresponding to the 12 months.
       * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the options are updated successfully. Errors if expirationMonth is not configured on the Hosted Fields instance or if the expirationMonth field is not configured to be a select input.
       *
       * @example <caption>Update the month options to spanish</caption>
       * hostedFieldsInstance.setMonthOptions([
       *   '01 - enero',
       *   '02 - febrero',
       *   '03 - marzo',
       *   '04 - abril',
       *   '05 - mayo',
       *   '06 - junio',
       *   '07 - julio',
       *   '08 - agosto',
       *   '09 - septiembre',
       *   '10 - octubre',
       *   '11 - noviembre',
       *   '12 - diciembre'
       * ]);
       *
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      HostedFields.prototype.setMonthOptions = function (options) {
        var self = this;
        var merchantOptions = this._merchantConfigurationOptions.fields;
        var errorMessage;

        if (!merchantOptions.expirationMonth) {
          errorMessage = 'Expiration month field must exist to use setMonthOptions.';
        } else if (!merchantOptions.expirationMonth.select) {
          errorMessage = 'Expiration month field must be a select element.';
        }

        if (errorMessage) {
          return Promise.reject(new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.type,
            code: errors.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.code,
            message: errorMessage
          }));
        }

        return new Promise(function (resolve) {
          self._bus.emit(events.SET_MONTH_OPTIONS, options, resolve);
        });
      };
      /**
       * Sets a visually hidden message (for screen readers) on a {@link module:braintree-web/hosted-fields~field field}.
       *
       * @public
       * @param {object} options The options for the attribute you wish to set.
       * @param {string} options.field The field to which you wish to add an attribute. Must be a valid {@link module:braintree-web/hosted-fields~field field}.
       * @param {string} options.message The message to set.
       *
       * @example <caption>Set an error message on a field</caption>
       * hostedFieldsInstance.setMessage({
       *   field: 'number',
       *   message: 'Invalid card number'
       * });
       *
       * @example <caption>Remove the message on a field</caption>
       * hostedFieldsInstance.setMessage({
       *   field: 'number',
       *   message: ''
       * });
       *
       * @returns {void}
       */


      HostedFields.prototype.setMessage = function (options) {
        this._bus.emit(events.SET_MESSAGE, {
          field: options.field,
          message: options.message
        });
      };
      /**
       * Removes a supported attribute from a {@link module:braintree-web/hosted-fields~field field}.
       *
       * @public
       * @param {object} options The options for the attribute you wish to remove.
       * @param {string} options.field The field from which you wish to remove an attribute. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.
       * @param {string} options.attribute The name of the attribute you wish to remove from the field.
       * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the attribute is removed successfully.
       *
       * @example <caption>Remove the placeholder attribute of a field</caption>
       * hostedFieldsInstance.removeAttribute({
       *   field: 'number',
       *   attribute: 'placeholder'
       * }, function (attributeErr) {
       *   if (attributeErr) {
       *     console.error(attributeErr);
       *   }
       * });
       *
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      HostedFields.prototype.removeAttribute = function (options) {
        var attributeErr, err;

        if (!allowedFields.hasOwnProperty(options.field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_INVALID.type,
            code: errors.HOSTED_FIELDS_FIELD_INVALID.code,
            message: '"' + options.field + '" is not a valid field. You must use a valid field option when removing an attribute.'
          });
        } else if (!this._fields.hasOwnProperty(options.field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,
            code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,
            message: 'Cannot remove attribute for "' + options.field + '" field because it is not part of the current Hosted Fields options.'
          });
        } else {
          attributeErr = attributeValidationError(options.attribute);

          if (attributeErr) {
            err = attributeErr;
          } else {
            this._bus.emit(events.REMOVE_ATTRIBUTE, {
              field: options.field,
              attribute: options.attribute
            });
          }
        }

        if (err) {
          return Promise.reject(err);
        }

        return Promise.resolve();
      };
      /**
       * @deprecated since version 3.8.0. Use {@link HostedFields#setAttribute|setAttribute} instead.
       *
       * @public
       * @param {string} field The field whose placeholder you wish to change. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.
       * @param {string} placeholder Will be used as the `placeholder` attribute of the input.
       * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the placeholder updated successfully.
       *
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      HostedFields.prototype.setPlaceholder = function (field, placeholder) {
        return this.setAttribute({
          field: field,
          attribute: 'placeholder',
          value: placeholder
        });
      };
      /**
       * Clear the value of a {@link module:braintree-web/hosted-fields~field field}.
       * @public
       * @param {string} field The field you wish to clear. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.
       * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the field cleared successfully.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example
       * hostedFieldsInstance.clear('number', function (clearErr) {
       *   if (clearErr) {
       *     console.error(clearErr);
       *   }
       * });
       *
       * @example <caption>Clear several fields</caption>
       * hostedFieldsInstance.clear('number');
       * hostedFieldsInstance.clear('cvv');
       * hostedFieldsInstance.clear('expirationDate');
       */


      HostedFields.prototype.clear = function (field) {
        var err;

        if (!allowedFields.hasOwnProperty(field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_INVALID.type,
            code: errors.HOSTED_FIELDS_FIELD_INVALID.code,
            message: '"' + field + '" is not a valid field. You must use a valid field option when clearing a field.'
          });
        } else if (!this._fields.hasOwnProperty(field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,
            code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,
            message: 'Cannot clear "' + field + '" field because it is not part of the current Hosted Fields options.'
          });
        } else {
          this._bus.emit(events.CLEAR_FIELD, {
            field: field
          });
        }

        if (err) {
          return Promise.reject(err);
        }

        return Promise.resolve();
      };
      /**
       * Programmatically focus a {@link module:braintree-web/hosted-fields~field field}.
       * @public
       * @param {string} field The field you want to focus. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.
       * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the field focused successfully.
       * @returns {void}
       * @example
       * hostedFieldsInstance.focus('number', function (focusErr) {
       *   if (focusErr) {
       *     console.error(focusErr);
       *   }
       * });
       * @example <caption>Using an event listener</caption>
       * myElement.addEventListener('click', function (e) {
       *   // In Firefox, the focus method can be suppressed
       *   //   if the element has a tabindex property or the element
       *   //   is an anchor link with an href property.
       *   e.preventDefault();
       *   hostedFieldsInstance.focus('number');
       * });
       */


      HostedFields.prototype.focus = function (field) {
        var err;
        var fieldConfig = this._fields[field];

        if (!allowedFields.hasOwnProperty(field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_INVALID.type,
            code: errors.HOSTED_FIELDS_FIELD_INVALID.code,
            message: '"' + field + '" is not a valid field. You must use a valid field option when focusing a field.'
          });
        } else if (!this._fields.hasOwnProperty(field)) {
          err = new BraintreeError({
            type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,
            code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,
            message: 'Cannot focus "' + field + '" field because it is not part of the current Hosted Fields options.'
          });
        } else {
          fieldConfig.frameElement.focus();

          this._bus.emit(events.TRIGGER_INPUT_FOCUS, {
            field: field
          });

          if (browserDetection.isIos()) {
            // Inputs outside of the viewport don't always scroll into view on
            // focus in iOS Safari. 5ms timeout gives the browser a chance to
            // do the right thing and prevents stuttering.
            setTimeout(function () {
              if (!isVisibleEnough(fieldConfig.containerElement)) {
                fieldConfig.containerElement.scrollIntoView();
              }
            }, SAFARI_FOCUS_TIMEOUT);
          }
        }

        if (err) {
          return Promise.reject(err);
        }

        return Promise.resolve();
      };
      /**
       * Returns an {@link HostedFields~stateObject|object} that includes the state of all fields and possible card types.
       * @public
       * @returns {object} {@link HostedFields~stateObject|stateObject}
       * @example <caption>Check if all fields are valid</caption>
       * var state = hostedFieldsInstance.getState();
       *
       * var formValid = Object.keys(state.fields).every(function (key) {
       *   return state.fields[key].isValid;
       * });
       */


      HostedFields.prototype.getState = function () {
        return this._state;
      }; // React adds decorations to DOM nodes that cause
      // circular dependencies, so we remove them from the
      // config before sending it to the iframes. However,
      // we don't want to mutate the original object that
      // was passed in, so we create fresh objects via assign


      function formatMerchantConfigurationForIframes(config) {
        var formattedConfig = assign({}, config);
        formattedConfig.fields = assign({}, formattedConfig.fields);
        Object.keys(formattedConfig.fields).forEach(function (field) {
          formattedConfig.fields[field] = assign({}, formattedConfig.fields[field]);
          delete formattedConfig.fields[field].container;
        });
        return formattedConfig;
      }

      module.exports = wrapPromise.wrapPrototype(HostedFields);
    }, {
      "../../lib/analytics": 93,
      "../../lib/assign": 95,
      "../../lib/braintree-error": 98,
      "../../lib/constants": 99,
      "../../lib/convert-methods-to-error": 100,
      "../../lib/create-assets-url": 102,
      "../../lib/create-deferred-client": 104,
      "../../lib/destructor": 106,
      "../../lib/errors": 108,
      "../../lib/find-root-node": 109,
      "../../lib/is-verified-domain": 126,
      "../../lib/methods": 128,
      "../../lib/promise": 130,
      "../../lib/shadow": 132,
      "../shared/browser-detection": 86,
      "../shared/constants": 87,
      "../shared/errors": 88,
      "../shared/find-parent-tags": 89,
      "../shared/focus-intercept": 90,
      "../shared/get-card-types": 91,
      "./attribute-validation-error": 79,
      "./compose-url": 80,
      "./focus-change": 81,
      "./get-styles-from-class": 82,
      "./inject-frame": 84,
      "@braintree/class-list": 39,
      "@braintree/event-emitter": 40,
      "@braintree/iframer": 42,
      "@braintree/uuid": 46,
      "@braintree/wrap-promise": 50,
      "framebus": 172
    }],
    84: [function (require, module, exports) {
      'use strict';

      var focusIntercept = require('../shared/focus-intercept');

      var directions = require('../shared/constants').navigationDirections;

      module.exports = function injectFrame(id, frame, container, focusHandler) {
        var frameType = frame.getAttribute('type');
        var clearboth = document.createElement('div');
        var fragment = document.createDocumentFragment();
        var focusInterceptBefore = focusIntercept.generate(id, frameType, directions.BACK, focusHandler);
        var focusInterceptAfter = focusIntercept.generate(id, frameType, directions.FORWARD, focusHandler);
        clearboth.style.clear = 'both';
        fragment.appendChild(focusInterceptBefore);
        fragment.appendChild(frame);
        fragment.appendChild(focusInterceptAfter);
        fragment.appendChild(clearboth);
        container.appendChild(fragment);
        return [frame, clearboth];
      };
    }, {
      "../shared/constants": 87,
      "../shared/focus-intercept": 90
    }],
    85: [function (require, module, exports) {
      'use strict';
      /** @module braintree-web/hosted-fields */

      var HostedFields = require('./external/hosted-fields');

      var basicComponentVerification = require('../lib/basic-component-verification');

      var errors = require('./shared/errors');

      var supportsInputFormatting = require('restricted-input/supports-input-formatting');

      var wrapPromise = require('@braintree/wrap-promise');

      var BraintreeError = require('../lib/braintree-error');

      var Promise = require('../lib/promise');

      var VERSION = "3.83.0";
      /**
       * Fields used in {@link module:braintree-web/hosted-fields~fieldOptions fields options}
       * @typedef {object} field
       * @property {string} selector Deprecated: Now an alias for `options.container`.
       * @property {(string|HTMLElement)} container A DOM node or CSS selector to find the container where the hosted field will be inserted.
       * @property {string} [placeholder] Will be used as the `placeholder` attribute of the input. If `placeholder` is not natively supported by the browser, it will be polyfilled.
       * @property {string} [type] Will be used as the `type` attribute of the input. To mask `cvv` input, for instance, `type: "password"` can be used.
       * @property {string} [iframeTitle] The title used for the iframe containing the credit card input. By default, this will be `Secure Credit Card Frame - <the name of the specific field>`.
       * @property {string} [internalLabel] Each Hosted Field iframe has a hidden label that is used by screen readers to identify the input. The `internalLabel` property can be used to customize the field for localization purposes. The default values are:
       * * number: Credit Card Number
       * * cvv: CVV
       * * expirationDate: Expiration Date
       * * expirationMonth: Expiration Month
       * * expirationYear: Expiration Year
       * * postalCode: Postal Code
       * * cardholderName: Cardholder Name
       * @property {boolean} [formatInput=true] Enable or disable automatic formatting on this field.
       * @property {(object|boolean)} [maskInput=false] Enable or disable input masking when input is not focused. If set to `true` instead of an object, the defaults for the `maskInput` parameters will be used.
       * @property {string} [maskInput.character=•] The character to use when masking the input. The default character ('•') uses a unicode symbol, so the webpage must support UTF-8 characters when using the default.
       * @property {Boolean} [maskInput.showLastFour=false] Only applicable for the credit card field. Whether or not to show the last 4 digits of the card when masking.
       * @property {(object|boolean)} [select] If truthy, this field becomes a `<select>` dropdown list. This can only be used for `expirationMonth` and `expirationYear` fields. If you do not use a `placeholder` property for the field, the current month/year will be the default selected value.
       * @property {string[]} [select.options] An array of 12 strings, one per month. This can only be used for the `expirationMonth` field. For example, the array can look like `['01 - January', '02 - February', ...]`.
       * @property {number} [maxCardLength] This option applies only to the number field. Allows a limit to the length of the card number, even if the card brand may support numbers of a greater length. If the value passed is greater than the max length for a card brand, the smaller number of the 2 values will be used. For example, is `maxCardLength` is set to 16, but an American Express card is entered (which has a max card length of 15), a max card length of 15 will be used.
       * @property {number} [maxlength] This option applies only to the CVV and postal code fields. Will be used as the `maxlength` attribute of the input. The primary use cases for the `maxlength` option are: limiting the length of the CVV input for CVV-only verifications when the card type is known and setting the length of the postal code input when cards are coming from a known region. The default `maxlength` for the postal code input is `10`.
       * @property {number} [minlength=3] This option applies only to the cvv and postal code fields. Will be used as the `minlength` attribute of the input.
       * For postal code fields, the default value is 3, representing the Icelandic postal code length. This option's primary use case is to increase the `minlength`, e.g. for US customers, the postal code `minlength` can be set to 5.
       * For cvv fields, the default value is 3. The `minlength` attribute only applies to integrations capturing a cvv without a number field.
       * @property {string} [prefill] A value to prefill the field with. For example, when creating an update card form, you can prefill the expiration date fields with the old expiration date data.
       * @property {boolean} [rejectUnsupportedCards=false] Deprecated since version 3.46.0, use `supportedCardBrands` instead. Only allow card types that your merchant account is able to process. Unsupported card types will invalidate the card form. e.g. if you only process Visa cards, a customer entering a American Express card would get an invalid card field. This can only be used for the `number` field.
       * @property {object} [supportedCardBrands] Override card brands that are supported by the card form. Pass `'card-brand-id': true` to override the default in the merchant configuration and enable a card brand. Pass `'card-brand-id': false` to disable a card brand. Unsupported card types will invalidate the card form. e.g. if you only process Visa cards, a customer entering an American Express card would get an invalid card field. This can only be used for the  `number` field. (Note: only allow card types that your merchant account is actually able to process.)
       *
       * Valid card brand ids are:
       * * visa
       * * mastercard
       * * american-express
       * * diners-club
       * * discover
       * * jcb
       * * union-pay
       * * maestro
       * * elo
       * * mir
       * * hiper
       * * hipercard
       */

      /**
       * An object that has {@link module:braintree-web/hosted-fields~field field objects} for each field. Used in {@link module:braintree-web/hosted-fields~create create}.
       * @typedef {object} fieldOptions
       * @property {field} [number] A field for card number.
       * @property {field} [expirationDate] A field for expiration date in `MM/YYYY` or `MM/YY` format. This should not be used with the `expirationMonth` and `expirationYear` properties.
       * @property {field} [expirationMonth] A field for expiration month in `MM` format. This should be used with the `expirationYear` property.
       * @property {field} [expirationYear] A field for expiration year in `YYYY` or `YY` format. This should be used with the `expirationMonth` property.
       * @property {field} [cvv] A field for 3 or 4 digit card verification code (like CVV or CID). If you wish to create a CVV-only payment method nonce to verify a card already stored in your Vault, omit all other fields to only collect CVV.
       * @property {field} [postalCode] A field for postal or region code.
       * @property {field} [cardholderName] A field for the cardholder name on the customer's credit card.
       */

      /**
       * An object that represents CSS that will be applied in each hosted field. This object looks similar to CSS. Typically, these styles involve fonts (such as `font-family` or `color`).
       *
       * You may also pass the name of a class on your site that contains the styles you would like to apply. The style properties will be automatically pulled off the class and applied to the Hosted Fields inputs. Note: this is recommended for `input` elements only. If using a `select` for the expiration date, unexpected styling may occur.
       *
       * These are the CSS properties that Hosted Fields supports. Any other CSS should be specified on your page and outside of any Braintree configuration. Trying to set unsupported properties will fail and put a warning in the console.
       *
       * Supported CSS properties are:
       * `appearance`
       * `box-shadow`
       * `color`
       * `direction`
       * `font-family`
       * `font-size-adjust`
       * `font-size`
       * `font-stretch`
       * `font-style`
       * `font-variant-alternates`
       * `font-variant-caps`
       * `font-variant-east-asian`
       * `font-variant-ligatures`
       * `font-variant-numeric`
       * `font-variant`
       * `font-weight`
       * `font`
       * `letter-spacing`
       * `line-height`
       * `opacity`
       * `outline`
       * `margin`
       * `margin-top`
       * `margin-right`
       * `margin-bottom`
       * `margin-left`
       * `padding`
       * `padding-top`
       * `padding-right`
       * `padding-bottom`
       * `padding-left`
       * `text-align`
       * `text-shadow`
       * `transition`
       * `-moz-appearance`
       * `-moz-box-shadow`
       * `-moz-osx-font-smoothing`
       * `-moz-tap-highlight-color`
       * `-moz-transition`
       * `-webkit-appearance`
       * `-webkit-box-shadow`
       * `-webkit-font-smoothing`
       * `-webkit-tap-highlight-color`
       * `-webkit-transition`
       * @typedef {object} styleOptions
       */

      /**
       * @static
       * @function create
       * @param {object} options Creation options:
       * @param {Client} [options.client] A {@link Client} instance.
       * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.
       * @param {fieldOptions} options.fields A {@link module:braintree-web/hosted-fields~fieldOptions set of options for each field}.
       * @param {styleOptions} [options.styles] {@link module:braintree-web/hosted-fields~styleOptions Styles} applied to each field.
       * @param {boolean} [options.preventAutofill=false] When true, browsers will not try to prompt the customer to autofill their credit card information.
       * @param {callback} [callback] The second argument, `data`, is the {@link HostedFields} instance. If no callback is provided, `create` returns a promise that resolves with the {@link HostedFields} instance.
       * @returns {void}
       * @example
       * braintree.hostedFields.create({
       *   client: clientInstance,
       *   styles: {
       *     'input': {
       *       'font-size': '16pt',
       *       'color': '#3A3A3A'
       *     },
       *     '.number': {
       *       'font-family': 'monospace'
       *     },
       *     '.valid': {
       *       'color': 'green'
       *     }
       *   },
       *   fields: {
       *     number: {
       *       container: '#card-number'
       *     },
       *     cvv: {
       *       container: '#cvv',
       *       placeholder: '•••'
       *     },
       *     expirationDate: {
       *       container: '#expiration-date'
       *     }
       *   }
       * }, callback);
       * @example <caption>With cardholder name</caption>
       * braintree.hostedFields.create({
       *   client: clientInstance,
       *   fields: {
       *     number: {
       *       container: '#card-number'
       *     },
       *     cardholderName: {
       *       container: '#cardholder-name'
       *     },
       *     cvv: {
       *       container: '#cvv',
       *     },
       *     expirationDate: {
       *       container: '#expiration-date'
       *     }
       *   }
       * }, callback);
       * @example <caption>Applying styles with a class name</caption>
       * // in document head
       * <style>
       *   .braintree-input-class {
       *     color: black;
       *   }
       *   .braintree-valid-class {
       *     color: green;
       *   }
       *   .braintree-invalid-class {
       *     color: red;
       *   }
       * </style>
       * // in a script tag
       * braintree.hostedFields.create({
       *   client: clientInstance,
       *   styles: {
       *     'input': 'braintree-input-class',
       *     '.invalid': 'braintree-invalid-class',
       *     '.valid': {
       *       // you can also use the object syntax alongside
       *       // the class name syntax
       *       color: green;
       *     }
       *   },
       *   fields: {
       *     number: {
       *       container: '#card-number'
       *     },
       *     // etc...
       *   }
       * }, callback);
       * @example <caption>Right to Left Language Support</caption>
       * braintree.hostedFields.create({
       *   client: clientInstance,
       *   styles: {
       *     'input': {
       *       // other styles
       *       direction: 'rtl'
       *     },
       *   },
       *   fields: {
       *     number: {
       *       container: '#card-number',
       *       // Credit card formatting is not currently supported
       *       // with RTL languages, so we need to turn it off for the number input
       *       formatInput: false
       *     },
       *     cvv: {
       *       container: '#cvv',
       *       placeholder: '•••'
       *     },
       *     expirationDate: {
       *       container: '#expiration-date',
       *       type: 'month'
       *     }
       *   }
       * }, callback);
       * @example <caption>Setting up Hosted Fields to tokenize CVV only</caption>
       * braintree.hostedFields.create({
       *   client: clientInstance,
       *   fields: {
       *     // Only add the `cvv` option.
       *     cvv: {
       *       container: '#cvv',
       *       placeholder: '•••'
       *     }
       *   }
       * }, callback);
       * @example <caption>Creating an expiration date update form with prefilled data</caption>
       * var storedCreditCardInformation = {
       *   // get this info from your server
       *   // with a payment method lookup
       *   month: '09',
       *   year: '2017'
       * };
       *
       * braintree.hostedFields.create({
       *   client: clientInstance,
       *   fields: {
       *     expirationMonth: {
       *       container: '#expiration-month',
       *       prefill: storedCreditCardInformation.month
       *     },
       *     expirationYear: {
       *       container: '#expiration-year',
       *       prefill: storedCreditCardInformation.year
       *     }
       *   }
       * }, callback);
       * @example <caption>Validate the card form for supported card types</caption>
       * braintree.hostedFields.create({
       *   client: clientInstance,
       *   fields: {
       *     number: {
       *       container: '#card-number',
       *       supportedCardBrands: {
       *         visa: false, // prevents Visas from showing up as valid even when the Braintree control panel is configured to allow them
       *         'diners-club': true // allow Diners Club cards to be valid (processed as Discover cards on the Braintree backend)
       *       }
       *     },
       *     cvv: {
       *       container: '#cvv',
       *       placeholder: '•••'
       *     },
       *     expirationDate: {
       *       container: '#expiration-date',
       *       type: 'month'
       *     }
       *   },
       * }, callback);
       */

      function create(options) {
        return basicComponentVerification.verify({
          name: 'Hosted Fields',
          authorization: options.authorization,
          client: options.client
        }).then(function () {
          var integration = new HostedFields(options);
          return new Promise(function (resolve, reject) {
            integration.on('ready', function () {
              resolve(integration);
            });
            integration.on('timeout', function () {
              reject(new BraintreeError(errors.HOSTED_FIELDS_TIMEOUT));
            });
          });
        });
      }

      module.exports = {
        /**
         * @static
         * @function supportsInputFormatting
         * @description Returns false if input formatting will be automatically disabled due to browser incompatibility. Otherwise, returns true. For a list of unsupported browsers, [go here](https://github.com/braintree/restricted-input/blob/main/README.md#browsers-where-formatting-is-turned-off-automatically).
         * @returns {Boolean} Returns false if input formatting will be automatically disabled due to browser incompatibility. Otherwise, returns true.
         * @example
         * <caption>Conditionally choosing split expiration date inputs if formatting is unavailable</caption>
         * var canFormat = braintree.hostedFields.supportsInputFormatting();
         * var fields = {
         *   number: {
         *     container: '#card-number'
         *   },
         *   cvv: {
         *     container: '#cvv'
         *   }
         * };
         *
         * if (canFormat) {
         *   fields.expirationDate = {
         *     selection: '#expiration-date'
         *   };
         *   functionToCreateAndInsertExpirationDateDivToForm();
         * } else {
         *   fields.expirationMonth = {
         *     selection: '#expiration-month'
         *   };
         *   fields.expirationYear = {
         *     selection: '#expiration-year'
         *   };
         *   functionToCreateAndInsertExpirationMonthAndYearDivsToForm();
         * }
         *
         * braintree.hostedFields.create({
         *   client: clientInstance,
         *   styles: {
         *     // Styles
         *   },
         *   fields: fields
         * }, callback);
         */
        supportsInputFormatting: supportsInputFormatting,
        create: wrapPromise(create),

        /**
         * @description The current version of the SDK, i.e. `1.32.1`.
         * @type {string}
         */
        VERSION: VERSION
      };
    }, {
      "../lib/basic-component-verification": 96,
      "../lib/braintree-error": 98,
      "../lib/promise": 130,
      "./external/hosted-fields": 83,
      "./shared/errors": 88,
      "@braintree/wrap-promise": 50,
      "restricted-input/supports-input-formatting": 189
    }],
    86: [function (require, module, exports) {
      'use strict';

      var isAndroid = require('@braintree/browser-detection/is-android');

      var isChromeOS = require('@braintree/browser-detection/is-chrome-os');

      var isIos = require('@braintree/browser-detection/is-ios');

      var isChrome = require('@braintree/browser-detection/is-chrome');

      function hasSoftwareKeyboard() {
        return isAndroid() || isChromeOS() || isIos();
      }

      function isChromeIos() {
        return isChrome() && isIos();
      }

      module.exports = {
        isIE: require('@braintree/browser-detection/is-ie'),
        isEdge: require('@braintree/browser-detection/is-edge'),
        isIe9: require('@braintree/browser-detection/is-ie9'),
        isIe10: require('@braintree/browser-detection/is-ie10'),
        isAndroid: isAndroid,
        isChromeOS: isChromeOS,
        isChromeIos: isChromeIos,
        isFirefox: require('@braintree/browser-detection/is-firefox'),
        isIos: isIos,
        isIosWebview: require('@braintree/browser-detection/is-ios-webview'),
        hasSoftwareKeyboard: hasSoftwareKeyboard
      };
    }, {
      "@braintree/browser-detection/is-android": 26,
      "@braintree/browser-detection/is-chrome": 28,
      "@braintree/browser-detection/is-chrome-os": 27,
      "@braintree/browser-detection/is-edge": 29,
      "@braintree/browser-detection/is-firefox": 30,
      "@braintree/browser-detection/is-ie": 31,
      "@braintree/browser-detection/is-ie10": 32,
      "@braintree/browser-detection/is-ie9": 33,
      "@braintree/browser-detection/is-ios": 37,
      "@braintree/browser-detection/is-ios-webview": 35
    }],
    87: [function (require, module, exports) {
      'use strict';

      var enumerate = require('../../lib/enumerate');

      var errors = require('./errors');

      var VERSION = "3.83.0";
      var constants = {
        VERSION: VERSION,
        maxExpirationYearAge: 19,
        externalEvents: {
          FOCUS: 'focus',
          BLUR: 'blur',
          EMPTY: 'empty',
          NOT_EMPTY: 'notEmpty',
          VALIDITY_CHANGE: 'validityChange',
          CARD_TYPE_CHANGE: 'cardTypeChange'
        },
        defaultMaxLengths: {
          number: 19,
          postalCode: 8,
          expirationDate: 7,
          expirationMonth: 2,
          expirationYear: 4,
          cvv: 3
        },
        externalClasses: {
          FOCUSED: 'braintree-hosted-fields-focused',
          INVALID: 'braintree-hosted-fields-invalid',
          VALID: 'braintree-hosted-fields-valid'
        },
        navigationDirections: {
          BACK: 'before',
          FORWARD: 'after'
        },
        defaultIFrameStyle: {
          border: 'none',
          width: '100%',
          height: '100%',
          'float': 'left'
        },
        tokenizationErrorCodes: {
          81724: errors.HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE,
          // NEXT_MAJOR_VERSION this error triggers for both AVS and CVV errors
          // but the code name implies that it would only trigger for CVV verification
          // failures
          81736: errors.HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED
        },
        allowedStyles: ['-moz-appearance', '-moz-box-shadow', '-moz-osx-font-smoothing', '-moz-tap-highlight-color', '-moz-transition', '-webkit-appearance', '-webkit-box-shadow', '-webkit-font-smoothing', '-webkit-tap-highlight-color', '-webkit-transition', 'appearance', 'box-shadow', 'color', 'direction', 'font', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-variant-alternates', 'font-variant-caps', 'font-variant-east-asian', 'font-variant-ligatures', 'font-variant-numeric', 'font-weight', 'letter-spacing', 'line-height', 'margin', 'margin-top', 'margin-right', 'margin-bottom', 'margin-left', 'opacity', 'outline', 'padding', 'padding-top', 'padding-right', 'padding-bottom', 'padding-left', 'text-align', 'text-shadow', 'transition'],
        allowedFields: {
          cardholderName: {
            name: 'cardholder-name',
            label: 'Cardholder Name'
          },
          number: {
            name: 'credit-card-number',
            label: 'Credit Card Number'
          },
          cvv: {
            name: 'cvv',
            label: 'CVV'
          },
          expirationDate: {
            name: 'expiration',
            label: 'Expiration Date'
          },
          expirationMonth: {
            name: 'expiration-month',
            label: 'Expiration Month'
          },
          expirationYear: {
            name: 'expiration-year',
            label: 'Expiration Year'
          },
          postalCode: {
            name: 'postal-code',
            label: 'Postal Code'
          }
        },
        allowedAttributes: {
          'aria-invalid': 'boolean',
          'aria-required': 'boolean',
          disabled: 'boolean',
          placeholder: 'string'
        },
        autocompleteMappings: {
          'cardholder-name': 'cc-name',
          'credit-card-number': 'cc-number',
          expiration: 'cc-exp',
          'expiration-month': 'cc-exp-month',
          'expiration-year': 'cc-exp-year',
          cvv: 'cc-csc',
          'postal-code': 'billing postal-code'
        }
      };
      constants.events = enumerate(['ADD_CLASS', 'AUTOFILL_DATA_AVAILABLE', 'BIN_AVAILABLE', 'CARD_FORM_ENTRY_HAS_BEGUN', 'CLEAR_FIELD', 'CONFIGURATION', 'FRAME_READY', 'INPUT_EVENT', 'READY_FOR_CLIENT', 'REMOVE_ATTRIBUTE', 'REMOVE_CLASS', 'REMOVE_FOCUS_INTERCEPTS', 'SET_ATTRIBUTE', 'SET_MESSAGE', 'SET_MONTH_OPTIONS', 'TOKENIZATION_REQUEST', 'TRIGGER_FOCUS_CHANGE', 'TRIGGER_INPUT_FOCUS', 'VALIDATE_STRICT'], 'hosted-fields:');
      module.exports = constants;
    }, {
      "../../lib/enumerate": 107,
      "./errors": 88
    }],
    88: [function (require, module, exports) {
      'use strict';
      /**
       * @name BraintreeError.Hosted Fields - Creation Error Codes
       * @description Errors that occur when [creating the Hosted Fields component](./module-braintree-web_hosted-fields.html#.create).
       * @property {UNKNOWN} HOSTED_FIELDS_TIMEOUT Occurs when Hosted Fields does not finish setting up within 60 seconds.
       * @property {MERCHANT} HOSTED_FIELDS_INVALID_FIELD_KEY Occurs when Hosted Fields is instantiated with an invalid Field option.
       * @property {MERCHANT} HOSTED_FIELDS_INVALID_FIELD_SELECTOR Occurs when Hosted Fields given a field selector that is not valid.
       * @property {MERCHANT} HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME Occurs when Hosted Fields given a field selector that already contains an iframe.
       * @property {MERCHANT} HOSTED_FIELDS_FIELD_PROPERTY_INVALID Occurs when a field configuration option is not valid.
       */

      /**
       * @name BraintreeError.Hosted Fields - Field Manipulation Error Codes
       * @description Errors that occur when modifying fields through [`addClass`](./HostedFields.html#addClass), [`removeClass`](./HostedFields.html#removeClass), [`setAttribute`](./HostedFields.html#setAttribute), [`removeAttribute`](./HostedFields.html#removeAttribute), [`clear`](./HostedFields.html#clear), [`focus`](./HostedFields.html#focus), and [`setMonthOptions`](./HostedFields.html#setMonthOptions).
       * @property {MERCHANT} HOSTED_FIELDS_FIELD_INVALID Occurs when attempting to modify a field that is not a valid Hosted Fields option.
       * @property {MERCHANT} HOSTED_FIELDS_FIELD_NOT_PRESENT Occurs when attempting to modify a field that is not configured with Hosted Fields.
       * @property {MERCHANT} HOSTED_FIELDS_FIELD_PROPERTY_INVALID Occurs when a field configuration option is not valid.
       */

      /**
       * @name BraintreeError.Hosted Fields - Set Attribute Error Codes
       * @description Errors that occur when using the [`setAttribute` method](./HostedFields.html#setAttribute)
       * @property {MERCHANT} HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED Occurs when trying to set an attribute that is not supported to be set.
       * @property {MERCHANT} HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED Occurs when the type of value for an attribute is not allowed to be set.
       */

      /**
       * @name BraintreeError.Hosted Fields - Tokenize Error Codes
       * @description Errors that occur when [tokenizing the card details with Hosted Fields](./HostedFields.html#tokenize).
       * @property {NETWORK} HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR Occurs when the Braintree gateway cannot be contacted.
       * @property {CUSTOMER} HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE Occurs when attempting to vault a card, but the client token being used is configured to fail if the card already exists in the vault.
       * @property {CUSTOMER} HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED Occurs when cvv verification is turned on in the Braintree control panel.
       * @property {CUSTOMER} HOSTED_FIELDS_FAILED_TOKENIZATION Occurs when the credit card details were sent to Braintree, but failed to tokenize.
       * @property {CUSTOMER} HOSTED_FIELDS_FIELDS_EMPTY Occurs when all the Hosted Fields inputs are empty.
       * @property {CUSTOMER} HOSTED_FIELDS_FIELDS_INVALID Occurs when one ore more fields are invalid.
       */

      var BraintreeError = require('../../lib/braintree-error');

      module.exports = {
        HOSTED_FIELDS_TIMEOUT: {
          type: BraintreeError.types.UNKNOWN,
          code: 'HOSTED_FIELDS_TIMEOUT',
          message: 'Hosted Fields timed out when attempting to set up.'
        },
        HOSTED_FIELDS_INVALID_FIELD_KEY: {
          type: BraintreeError.types.MERCHANT,
          code: 'HOSTED_FIELDS_INVALID_FIELD_KEY'
        },
        HOSTED_FIELDS_INVALID_FIELD_SELECTOR: {
          type: BraintreeError.types.MERCHANT,
          code: 'HOSTED_FIELDS_INVALID_FIELD_SELECTOR',
          message: 'Selector does not reference a valid DOM node.'
        },
        HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME: {
          type: BraintreeError.types.MERCHANT,
          code: 'HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME',
          message: 'Element already contains a Braintree iframe.'
        },
        HOSTED_FIELDS_FIELD_INVALID: {
          type: BraintreeError.types.MERCHANT,
          code: 'HOSTED_FIELDS_FIELD_INVALID'
        },
        HOSTED_FIELDS_FIELD_NOT_PRESENT: {
          type: BraintreeError.types.MERCHANT,
          code: 'HOSTED_FIELDS_FIELD_NOT_PRESENT'
        },
        HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR: {
          type: BraintreeError.types.NETWORK,
          code: 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR',
          message: 'A tokenization network error occurred.'
        },
        HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE: {
          type: BraintreeError.types.CUSTOMER,
          code: 'HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE',
          message: 'This credit card already exists in the merchant\'s vault.'
        },
        HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED: {
          type: BraintreeError.types.CUSTOMER,
          code: 'HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED',
          message: 'CVV verification failed during tokenization.'
        },
        HOSTED_FIELDS_FAILED_TOKENIZATION: {
          type: BraintreeError.types.CUSTOMER,
          code: 'HOSTED_FIELDS_FAILED_TOKENIZATION',
          message: 'The supplied card data failed tokenization.'
        },
        HOSTED_FIELDS_FIELDS_EMPTY: {
          type: BraintreeError.types.CUSTOMER,
          code: 'HOSTED_FIELDS_FIELDS_EMPTY',
          message: 'All fields are empty. Cannot tokenize empty card fields.'
        },
        HOSTED_FIELDS_FIELDS_INVALID: {
          type: BraintreeError.types.CUSTOMER,
          code: 'HOSTED_FIELDS_FIELDS_INVALID',
          message: 'Some payment input fields are invalid. Cannot tokenize invalid card fields.'
        },
        HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED: {
          type: BraintreeError.types.MERCHANT,
          code: 'HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED'
        },
        HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED: {
          type: BraintreeError.types.MERCHANT,
          code: 'HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED'
        },
        HOSTED_FIELDS_FIELD_PROPERTY_INVALID: {
          type: BraintreeError.types.MERCHANT,
          code: 'HOSTED_FIELDS_FIELD_PROPERTY_INVALID'
        }
      };
    }, {
      "../../lib/braintree-error": 98
    }],
    89: [function (require, module, exports) {
      'use strict';

      function findParentTags(element, tag) {
        var parent = element.parentNode;
        var parents = [];

        while (parent != null) {
          if (parent.tagName != null && parent.tagName.toLowerCase() === tag) {
            parents.push(parent);
          }

          parent = parent.parentNode;
        }

        return parents;
      }

      module.exports = findParentTags;
    }, {}],
    90: [function (require, module, exports) {
      'use strict';

      var browserDetection = require('./browser-detection');

      var classList = require('@braintree/class-list');

      var constants = require('./constants');

      var allowedFields = Object.keys(constants.allowedFields);
      var directions = constants.navigationDirections;
      var focusIntercept = {
        generate: function generate(hostedFieldsId, type, direction, handler) {
          var input = document.createElement('input');
          var focusInterceptStyles = {
            border: 'none !important',
            display: 'block !important',
            height: '1px !important',
            left: '-1px !important',
            opacity: '0 !important',
            position: 'absolute !important',
            top: '-1px !important',
            width: '1px !important'
          };
          var shouldCreateFocusIntercept = browserDetection.hasSoftwareKeyboard() || browserDetection.isFirefox() || browserDetection.isIE();

          if (!shouldCreateFocusIntercept) {
            return document.createDocumentFragment();
          }

          input.setAttribute('aria-hidden', 'true');
          input.setAttribute('autocomplete', 'off');
          input.setAttribute('data-braintree-direction', direction);
          input.setAttribute('data-braintree-type', type);
          input.setAttribute('id', 'bt-' + type + '-' + direction + '-' + hostedFieldsId);
          input.setAttribute('style', JSON.stringify(focusInterceptStyles).replace(/[{}"]/g, '').replace(/,/g, ';'));
          classList.add(input, 'focus-intercept');
          input.addEventListener('focus', function (event) {
            handler(event);
            /*
              Certain browsers without software keyboards (Firefox, Internet
              Explorer) need the focus intercept inputs that get inserted
              around the actual input to blur themselves, otherwise the
              browser gets confused about what should have focus. Can't
              apply this to browsers with software keyboards however,
              because it blurs everything, and focus on the actual input is
              also lost.
            */

            if (!browserDetection.hasSoftwareKeyboard()) {
              input.blur();
            }
          });
          return input;
        },
        destroy: function destroy(idString) {
          var focusInputs;

          if (!idString) {
            focusInputs = document.querySelectorAll('[data-braintree-direction]');
            focusInputs = [].slice.call(focusInputs);
          } else {
            focusInputs = [document.getElementById(idString)];
          }

          focusInputs.forEach(function (node) {
            if (node && node.nodeType === 1 && focusIntercept.matchFocusElement(node.getAttribute('id'))) {
              node.parentNode.removeChild(node);
            }
          });
        },
        matchFocusElement: function matchFocusElement(idString) {
          var idComponents, hasBTPrefix, isAllowedType, isValidDirection;

          if (!idString) {
            return false;
          }

          idComponents = idString.split('-');

          if (idComponents.length < 4) {
            return false;
          }

          hasBTPrefix = idComponents[0] === 'bt';
          isAllowedType = allowedFields.indexOf(idComponents[1]) > -1;
          isValidDirection = idComponents[2] === directions.BACK || idComponents[2] === directions.FORWARD;
          return Boolean(hasBTPrefix && isAllowedType && isValidDirection);
        }
      };
      module.exports = focusIntercept;
    }, {
      "./browser-detection": 86,
      "./constants": 87,
      "@braintree/class-list": 39
    }],
    91: [function (require, module, exports) {
      'use strict';

      var creditCardType = require('credit-card-type');

      module.exports = function (number) {
        var results = creditCardType(number);
        results.forEach(function (card) {
          // NEXT_MAJOR_VERSION credit-card-type fixed the mastercard enum
          // but we still pass master-card in the braintree API
          // in a major version bump, we can remove this and
          // this will be mastercard instead of master-card
          if (card.type === 'mastercard') {
            card.type = 'master-card';
          }
        });
        return results;
      };
    }, {
      "credit-card-type": 164
    }],
    92: [function (require, module, exports) {
      'use strict';

      var createAuthorizationData = require('./create-authorization-data');

      var jsonClone = require('./json-clone');

      var constants = require('./constants');

      function addMetadata(configuration, data) {
        var key;
        var attrs = data ? jsonClone(data) : {};
        var authAttrs = createAuthorizationData(configuration.authorization).attrs;

        var _meta = jsonClone(configuration.analyticsMetadata);

        attrs.braintreeLibraryVersion = constants.BRAINTREE_LIBRARY_VERSION;

        for (key in attrs._meta) {
          if (attrs._meta.hasOwnProperty(key)) {
            _meta[key] = attrs._meta[key];
          }
        }

        attrs._meta = _meta;

        if (authAttrs.tokenizationKey) {
          attrs.tokenizationKey = authAttrs.tokenizationKey;
        } else {
          attrs.authorizationFingerprint = authAttrs.authorizationFingerprint;
        }

        return attrs;
      }

      module.exports = addMetadata;
    }, {
      "./constants": 99,
      "./create-authorization-data": 103,
      "./json-clone": 127
    }],
    93: [function (require, module, exports) {
      'use strict';

      var Promise = require('./promise');

      var constants = require('./constants');

      var addMetadata = require('./add-metadata');

      function sendAnalyticsEvent(clientInstanceOrPromise, kind, callback) {
        var timestamp = Date.now(); // milliseconds

        return Promise.resolve(clientInstanceOrPromise).then(function (client) {
          var timestampInPromise = Date.now();
          var configuration = client.getConfiguration();
          var request = client._request;
          var url = configuration.gatewayConfiguration.analytics.url;
          var data = {
            analytics: [{
              kind: constants.ANALYTICS_PREFIX + kind,
              isAsync: Math.floor(timestampInPromise / 1000) !== Math.floor(timestamp / 1000),
              timestamp: timestamp
            }]
          };
          request({
            url: url,
            method: 'post',
            data: addMetadata(configuration, data),
            timeout: constants.ANALYTICS_REQUEST_TIMEOUT_MS
          }, callback);
        });
      }

      module.exports = {
        sendEvent: sendAnalyticsEvent
      };
    }, {
      "./add-metadata": 92,
      "./constants": 99,
      "./promise": 130
    }],
    94: [function (require, module, exports) {
      'use strict';

      var loadScript = require('@braintree/asset-loader/load-script');

      module.exports = {
        loadScript: loadScript
      };
    }, {
      "@braintree/asset-loader/load-script": 5
    }],
    95: [function (require, module, exports) {
      'use strict';

      var assignNormalized = typeof Object.assign === 'function' ? Object.assign : assignPolyfill;

      function assignPolyfill(destination) {
        var i, source, key;

        for (i = 1; i < arguments.length; i++) {
          source = arguments[i];

          for (key in source) {
            if (source.hasOwnProperty(key)) {
              destination[key] = source[key];
            }
          }
        }

        return destination;
      }

      module.exports = {
        assign: assignNormalized,
        _assign: assignPolyfill
      };
    }, {}],
    96: [function (require, module, exports) {
      'use strict';

      var BraintreeError = require('./braintree-error');

      var Promise = require('./promise');

      var sharedErrors = require('./errors');

      var VERSION = "3.83.0";

      function basicComponentVerification(options) {
        var client, authorization, name;

        if (!options) {
          return Promise.reject(new BraintreeError({
            type: sharedErrors.INVALID_USE_OF_INTERNAL_FUNCTION.type,
            code: sharedErrors.INVALID_USE_OF_INTERNAL_FUNCTION.code,
            message: 'Options must be passed to basicComponentVerification function.'
          }));
        }

        name = options.name;
        client = options.client;
        authorization = options.authorization;

        if (!client && !authorization) {
          return Promise.reject(new BraintreeError({
            type: sharedErrors.INSTANTIATION_OPTION_REQUIRED.type,
            code: sharedErrors.INSTANTIATION_OPTION_REQUIRED.code,
            // NEXT_MAJOR_VERSION in major version, we expose passing in authorization for all components
            // instead of passing in a client instance. Leave this a silent feature for now.
            message: 'options.client is required when instantiating ' + name + '.'
          }));
        }

        if (!authorization && client.getVersion() !== VERSION) {
          return Promise.reject(new BraintreeError({
            type: sharedErrors.INCOMPATIBLE_VERSIONS.type,
            code: sharedErrors.INCOMPATIBLE_VERSIONS.code,
            message: 'Client (version ' + client.getVersion() + ') and ' + name + ' (version ' + VERSION + ') components must be from the same SDK version.'
          }));
        }

        return Promise.resolve();
      }

      module.exports = {
        verify: basicComponentVerification
      };
    }, {
      "./braintree-error": 98,
      "./errors": 108,
      "./promise": 130
    }],
    97: [function (require, module, exports) {
      'use strict';

      var once = require('./once');

      function call(fn, callback) {
        var isSync = fn.length === 0;

        if (isSync) {
          fn();
          callback(null);
        } else {
          fn(callback);
        }
      }

      module.exports = function (functions, cb) {
        var i;
        var length = functions.length;
        var remaining = length;
        var callback = once(cb);

        if (length === 0) {
          callback(null);
          return;
        }

        function finish(err) {
          if (err) {
            callback(err);
            return;
          }

          remaining -= 1;

          if (remaining === 0) {
            callback(null);
          }
        }

        for (i = 0; i < length; i++) {
          call(functions[i], finish);
        }
      };
    }, {
      "./once": 129
    }],
    98: [function (require, module, exports) {
      'use strict';

      var enumerate = require('./enumerate');
      /**
       * @class
       * @global
       * @param {object} options Construction options
       * @classdesc This class is used to report error conditions, frequently as the first parameter to callbacks throughout the Braintree SDK.
       * @description <strong>You cannot use this constructor directly. Interact with instances of this class through {@link callback callbacks}.</strong>
       */


      function BraintreeError(options) {
        if (!BraintreeError.types.hasOwnProperty(options.type)) {
          throw new Error(options.type + ' is not a valid type.');
        }

        if (!options.code) {
          throw new Error('Error code required.');
        }

        if (!options.message) {
          throw new Error('Error message required.');
        }

        this.name = 'BraintreeError';
        /**
         * @type {string}
         * @description A code that corresponds to specific errors.
         */

        this.code = options.code;
        /**
         * @type {string}
         * @description A short description of the error.
         */

        this.message = options.message;
        /**
         * @type {BraintreeError.types}
         * @description The type of error.
         */

        this.type = options.type;
        /**
         * @type {object=}
         * @description Additional information about the error, such as an underlying network error response.
         */

        this.details = options.details;
      }

      BraintreeError.prototype = Object.create(Error.prototype);
      BraintreeError.prototype.constructor = BraintreeError;
      /**
       * Enum for {@link BraintreeError} types.
       * @name BraintreeError.types
       * @enum
       * @readonly
       * @memberof BraintreeError
       * @property {string} CUSTOMER An error caused by the customer.
       * @property {string} MERCHANT An error that is actionable by the merchant.
       * @property {string} NETWORK An error due to a network problem.
       * @property {string} INTERNAL An error caused by Braintree code.
       * @property {string} UNKNOWN An error where the origin is unknown.
       */

      BraintreeError.types = enumerate(['CUSTOMER', 'MERCHANT', 'NETWORK', 'INTERNAL', 'UNKNOWN']);

      BraintreeError.findRootError = function (err) {
        if (err instanceof BraintreeError && err.details && err.details.originalError) {
          return BraintreeError.findRootError(err.details.originalError);
        }

        return err;
      };

      module.exports = BraintreeError;
    }, {
      "./enumerate": 107
    }],
    99: [function (require, module, exports) {
      'use strict';

      var VERSION = "3.83.0";
      var PLATFORM = 'web';
      var CLIENT_API_URLS = {
        production: 'https://api.braintreegateway.com:443',
        sandbox: 'https://api.sandbox.braintreegateway.com:443'
      };
      var ASSETS_URLS = {
        production: 'https://assets.braintreegateway.com',
        sandbox: 'https://assets.braintreegateway.com'
      };
      var GRAPHQL_URLS = {
        production: 'https://payments.braintree-api.com/graphql',
        sandbox: 'https://payments.sandbox.braintree-api.com/graphql'
      };
      module.exports = {
        ANALYTICS_PREFIX: PLATFORM + '.',
        ANALYTICS_REQUEST_TIMEOUT_MS: 2000,
        ASSETS_URLS: ASSETS_URLS,
        CLIENT_API_URLS: CLIENT_API_URLS,
        FRAUDNET_SOURCE: 'BRAINTREE_SIGNIN',
        FRAUDNET_FNCLS: 'fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99',
        FRAUDNET_URL: 'https://c.paypal.com/da/r/fb.js',
        BUS_CONFIGURATION_REQUEST_EVENT: 'BUS_CONFIGURATION_REQUEST',
        GRAPHQL_URLS: GRAPHQL_URLS,
        INTEGRATION_TIMEOUT_MS: 60000,
        VERSION: VERSION,
        INTEGRATION: 'custom',
        SOURCE: 'client',
        PLATFORM: PLATFORM,
        BRAINTREE_LIBRARY_VERSION: 'braintree/' + PLATFORM + '/' + VERSION
      };
    }, {}],
    100: [function (require, module, exports) {
      'use strict';

      var BraintreeError = require('./braintree-error');

      var sharedErrors = require('./errors');

      module.exports = function (instance, methodNames) {
        methodNames.forEach(function (methodName) {
          instance[methodName] = function () {
            throw new BraintreeError({
              type: sharedErrors.METHOD_CALLED_AFTER_TEARDOWN.type,
              code: sharedErrors.METHOD_CALLED_AFTER_TEARDOWN.code,
              message: methodName + ' cannot be called after teardown.'
            });
          };
        });
      };
    }, {
      "./braintree-error": 98,
      "./errors": 108
    }],
    101: [function (require, module, exports) {
      'use strict';

      var BraintreeError = require('./braintree-error');

      function convertToBraintreeError(originalErr, btErrorObject) {
        if (originalErr instanceof BraintreeError) {
          return originalErr;
        }

        return new BraintreeError({
          type: btErrorObject.type,
          code: btErrorObject.code,
          message: btErrorObject.message,
          details: {
            originalError: originalErr
          }
        });
      }

      module.exports = convertToBraintreeError;
    }, {
      "./braintree-error": 98
    }],
    102: [function (require, module, exports) {
      'use strict';

      var ASSETS_URLS = require('./constants').ASSETS_URLS;

      function createAssetsUrl(authorization) {
        return ASSETS_URLS.production;
      }
      /* eslint-enable */


      module.exports = {
        create: createAssetsUrl
      };
    }, {
      "./constants": 99
    }],
    103: [function (require, module, exports) {
      'use strict';

      var atob = require('../lib/vendor/polyfill').atob;

      var CLIENT_API_URLS = require('../lib/constants').CLIENT_API_URLS;

      function _isTokenizationKey(str) {
        return /^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9_]+$/.test(str);
      }

      function _parseTokenizationKey(tokenizationKey) {
        var tokens = tokenizationKey.split('_');
        var environment = tokens[0];
        var merchantId = tokens.slice(2).join('_');
        return {
          merchantId: merchantId,
          environment: environment
        };
      }

      function createAuthorizationData(authorization) {
        var parsedClientToken, parsedTokenizationKey;
        var data = {
          attrs: {},
          configUrl: ''
        };

        if (_isTokenizationKey(authorization)) {
          parsedTokenizationKey = _parseTokenizationKey(authorization);
          data.environment = parsedTokenizationKey.environment;
          data.attrs.tokenizationKey = authorization;
          data.configUrl = CLIENT_API_URLS[parsedTokenizationKey.environment] + '/merchants/' + parsedTokenizationKey.merchantId + '/client_api/v1/configuration';
        } else {
          parsedClientToken = JSON.parse(atob(authorization));
          data.environment = parsedClientToken.environment;
          data.attrs.authorizationFingerprint = parsedClientToken.authorizationFingerprint;
          data.configUrl = parsedClientToken.configUrl;
          data.graphQL = parsedClientToken.graphQL;
        }

        return data;
      }

      module.exports = createAuthorizationData;
    }, {
      "../lib/constants": 99,
      "../lib/vendor/polyfill": 134
    }],
    104: [function (require, module, exports) {
      'use strict';

      var BraintreeError = require('./braintree-error');

      var Promise = require('./promise');

      var assets = require('./assets');

      var sharedErrors = require('./errors');

      var VERSION = "3.83.0";

      function createDeferredClient(options) {
        var promise = Promise.resolve();

        if (options.client) {
          return Promise.resolve(options.client);
        }

        if (!(window.braintree && window.braintree.client)) {
          promise = assets.loadScript({
            src: options.assetsUrl + '/web/' + VERSION + '/js/client.min.js'
          }).catch(function (err) {
            return Promise.reject(new BraintreeError({
              type: sharedErrors.CLIENT_SCRIPT_FAILED_TO_LOAD.type,
              code: sharedErrors.CLIENT_SCRIPT_FAILED_TO_LOAD.code,
              message: sharedErrors.CLIENT_SCRIPT_FAILED_TO_LOAD.message,
              details: {
                originalError: err
              }
            }));
          });
        }

        return promise.then(function () {
          if (window.braintree.client.VERSION !== VERSION) {
            return Promise.reject(new BraintreeError({
              type: sharedErrors.INCOMPATIBLE_VERSIONS.type,
              code: sharedErrors.INCOMPATIBLE_VERSIONS.code,
              message: 'Client (version ' + window.braintree.client.VERSION + ') and ' + options.name + ' (version ' + VERSION + ') components must be from the same SDK version.'
            }));
          }

          return window.braintree.client.create({
            authorization: options.authorization,
            debug: options.debug
          });
        });
      }

      module.exports = {
        create: createDeferredClient
      };
    }, {
      "./assets": 94,
      "./braintree-error": 98,
      "./errors": 108,
      "./promise": 130
    }],
    105: [function (require, module, exports) {
      'use strict';

      module.exports = function (fn) {
        return function () {
          // IE9 doesn't support passing arguments to setTimeout so we have to emulate it.
          var args = arguments;
          setTimeout(function () {
            fn.apply(null, args);
          }, 1);
        };
      };
    }, {}],
    106: [function (require, module, exports) {
      'use strict';

      var batchExecuteFunctions = require('./batch-execute-functions');

      function Destructor() {
        this._teardownRegistry = [];
        this._isTearingDown = false;
      }

      Destructor.prototype.registerFunctionForTeardown = function (fn) {
        if (typeof fn === 'function') {
          this._teardownRegistry.push(fn);
        }
      };

      Destructor.prototype.teardown = function (callback) {
        if (this._isTearingDown) {
          callback(new Error('Destructor is already tearing down'));
          return;
        }

        this._isTearingDown = true;
        batchExecuteFunctions(this._teardownRegistry, function (err) {
          this._teardownRegistry = [];
          this._isTearingDown = false;

          if (typeof callback === 'function') {
            callback(err);
          }
        }.bind(this));
      };

      module.exports = Destructor;
    }, {
      "./batch-execute-functions": 97
    }],
    107: [function (require, module, exports) {
      'use strict';

      function enumerate(values, prefix) {
        prefix = prefix == null ? '' : prefix;
        return values.reduce(function (enumeration, value) {
          enumeration[value] = prefix + value;
          return enumeration;
        }, {});
      }

      module.exports = enumerate;
    }, {}],
    108: [function (require, module, exports) {
      'use strict';
      /**
       * @name BraintreeError.Shared Internal Error Codes
       * @ignore
       * @description These codes should never be experienced by the merchant directly.
       * @property {INTERNAL} INVALID_USE_OF_INTERNAL_FUNCTION Occurs when the client is created without a gateway configuration. Should never happen.
       */

      /**
       * @name BraintreeError.Shared Errors - Component Creation Error Codes
       * @description Errors that occur when creating components.
       * @property {MERCHANT} INSTANTIATION_OPTION_REQUIRED Occurs when a component is created that is missing a required option.
       * @property {MERCHANT} INCOMPATIBLE_VERSIONS Occurs when a component is created with a client with a different version than the component.
       * @property {NETWORK} CLIENT_SCRIPT_FAILED_TO_LOAD Occurs when a component attempts to load the Braintree client script, but the request fails.
       */

      /**
       * @name BraintreeError.Shared Errors - Component Instance Error Codes
       * @description Errors that occur when using instances of components.
       * @property {MERCHANT} METHOD_CALLED_AFTER_TEARDOWN Occurs when a method is called on a component instance after it has been torn down.
       */

      var BraintreeError = require('./braintree-error');

      module.exports = {
        INVALID_USE_OF_INTERNAL_FUNCTION: {
          type: BraintreeError.types.INTERNAL,
          code: 'INVALID_USE_OF_INTERNAL_FUNCTION'
        },
        INSTANTIATION_OPTION_REQUIRED: {
          type: BraintreeError.types.MERCHANT,
          code: 'INSTANTIATION_OPTION_REQUIRED'
        },
        INCOMPATIBLE_VERSIONS: {
          type: BraintreeError.types.MERCHANT,
          code: 'INCOMPATIBLE_VERSIONS'
        },
        CLIENT_SCRIPT_FAILED_TO_LOAD: {
          type: BraintreeError.types.NETWORK,
          code: 'CLIENT_SCRIPT_FAILED_TO_LOAD',
          message: 'Braintree client script could not be loaded.'
        },
        METHOD_CALLED_AFTER_TEARDOWN: {
          type: BraintreeError.types.MERCHANT,
          code: 'METHOD_CALLED_AFTER_TEARDOWN'
        }
      };
    }, {
      "./braintree-error": 98
    }],
    109: [function (require, module, exports) {
      'use strict';

      module.exports = function findRootNode(element) {
        while (element.parentNode) {
          element = element.parentNode;
        }

        return element;
      };
    }, {}],
    110: [function (require, module, exports) {
      'use strict';

      module.exports = function (array, key, value) {
        var i;

        for (i = 0; i < array.length; i++) {
          if (array[i].hasOwnProperty(key) && array[i][key] === value) {
            return array[i];
          }
        }

        return null;
      };
    }, {}],
    111: [function (require, module, exports) {
      'use strict';

      var Popup = require('./strategies/popup');

      var PopupBridge = require('./strategies/popup-bridge');

      var Modal = require('./strategies/modal');

      var Bus = require('framebus');

      var events = require('../shared/events');

      var errors = require('../shared/errors');

      var constants = require('../shared/constants');

      var uuid = require('@braintree/uuid');

      var iFramer = require('@braintree/iframer');

      var BraintreeError = require('../../braintree-error');

      var browserDetection = require('../shared/browser-detection');

      var isHTTPS = require('../../is-https');

      var assign = require('./../../assign').assign;

      var BUS_CONFIGURATION_REQUEST_EVENT = require('../../constants').BUS_CONFIGURATION_REQUEST_EVENT;

      var REQUIRED_CONFIG_KEYS = ['name', 'dispatchFrameUrl', 'openFrameUrl'];

      function noop() {}

      function _validateFrameConfiguration(options) {
        if (!options) {
          throw new Error('Valid configuration is required');
        }

        REQUIRED_CONFIG_KEYS.forEach(function (key) {
          if (!options.hasOwnProperty(key)) {
            throw new Error('A valid frame ' + key + ' must be provided');
          }
        });

        if (!/^[\w_]+$/.test(options.name)) {
          throw new Error('A valid frame name must be provided');
        }
      }

      function FrameService(options) {
        _validateFrameConfiguration(options);

        this._serviceId = uuid().replace(/-/g, '');
        this._options = {
          name: options.name + '_' + this._serviceId,
          dispatchFrameUrl: options.dispatchFrameUrl,
          openFrameUrl: options.openFrameUrl,
          height: options.height,
          width: options.width,
          top: options.top,
          left: options.left
        };
        this.state = options.state || {};
        this._bus = new Bus({
          channel: this._serviceId
        });

        this._setBusEvents();
      }

      FrameService.prototype.initialize = function (callback) {
        var dispatchFrameReadyHandler = function () {
          callback();

          this._bus.off(events.DISPATCH_FRAME_READY, dispatchFrameReadyHandler);
        }.bind(this);

        this._bus.on(events.DISPATCH_FRAME_READY, dispatchFrameReadyHandler);

        this._writeDispatchFrame();
      };

      FrameService.prototype._writeDispatchFrame = function () {
        var frameName = constants.DISPATCH_FRAME_NAME + '_' + this._serviceId;
        var frameSrc = this._options.dispatchFrameUrl;
        this._dispatchFrame = iFramer({
          'aria-hidden': true,
          name: frameName,
          title: frameName,
          src: frameSrc,
          'class': constants.DISPATCH_FRAME_CLASS,
          height: 0,
          width: 0,
          style: {
            position: 'absolute',
            left: '-9999px'
          }
        });
        document.body.appendChild(this._dispatchFrame);
      };

      FrameService.prototype._setBusEvents = function () {
        this._bus.on(events.DISPATCH_FRAME_REPORT, function (res, reply) {
          if (this._onCompleteCallback) {
            this._onCompleteCallback.call(null, res.err, res.payload);
          }

          this._frame.close();

          this._onCompleteCallback = null;

          if (reply) {
            reply();
          }
        }.bind(this));

        this._bus.on(BUS_CONFIGURATION_REQUEST_EVENT, function (reply) {
          reply(this.state);
        }.bind(this));
      };

      FrameService.prototype.open = function (options, callback) {
        var error;
        options = options || {};
        this._frame = this._getFrameForEnvironment(options);

        this._frame.initialize(callback);

        if (this._frame instanceof PopupBridge) {
          return;
        }

        assign(this.state, options.state);
        this._onCompleteCallback = callback;

        this._frame.open();

        if (this.isFrameClosed()) {
          this._cleanupFrame();

          if (callback) {
            if (browserDetection.isIE() && !isHTTPS.isHTTPS()) {
              error = new BraintreeError(errors.FRAME_SERVICE_FRAME_OPEN_FAILED_IE_BUG);
            } else {
              error = new BraintreeError(errors.FRAME_SERVICE_FRAME_OPEN_FAILED);
            }

            callback(error);
          }

          return;
        }

        this._pollForPopupClose();
      };

      FrameService.prototype.redirect = function (url) {
        if (this._frame && !this.isFrameClosed()) {
          this._frame.redirect(url);
        }
      };

      FrameService.prototype.close = function () {
        if (!this.isFrameClosed()) {
          this._frame.close();
        }
      };

      FrameService.prototype.focus = function () {
        if (!this.isFrameClosed()) {
          this._frame.focus();
        }
      };

      FrameService.prototype.createHandler = function (options) {
        options = options || {};
        return {
          close: function () {
            if (options.beforeClose) {
              options.beforeClose();
            }

            this.close();
          }.bind(this),
          focus: function () {
            if (options.beforeFocus) {
              options.beforeFocus();
            }

            this.focus();
          }.bind(this)
        };
      };

      FrameService.prototype.createNoopHandler = function () {
        return {
          close: noop,
          focus: noop
        };
      };

      FrameService.prototype.teardown = function () {
        this.close();

        this._dispatchFrame.parentNode.removeChild(this._dispatchFrame);

        this._dispatchFrame = null;

        this._cleanupFrame();
      };

      FrameService.prototype.isFrameClosed = function () {
        return this._frame == null || this._frame.isClosed();
      };

      FrameService.prototype._cleanupFrame = function () {
        this._frame = null;
        clearInterval(this._popupInterval);
        this._popupInterval = null;
      };

      FrameService.prototype._pollForPopupClose = function () {
        this._popupInterval = setInterval(function () {
          if (this.isFrameClosed()) {
            this._cleanupFrame();

            if (this._onCompleteCallback) {
              this._onCompleteCallback(new BraintreeError(errors.FRAME_SERVICE_FRAME_CLOSED));
            }
          }
        }.bind(this), constants.POPUP_POLL_INTERVAL);
        return this._popupInterval;
      };

      FrameService.prototype._getFrameForEnvironment = function (options) {
        var usePopup = browserDetection.supportsPopups();
        var popupBridgeExists = Boolean(window.popupBridge);
        var initOptions = assign({}, this._options, options);

        if (popupBridgeExists) {
          return new PopupBridge(initOptions);
        } else if (usePopup) {
          return new Popup(initOptions);
        }

        return new Modal(initOptions);
      };

      module.exports = FrameService;
    }, {
      "../../braintree-error": 98,
      "../../constants": 99,
      "../../is-https": 125,
      "../shared/browser-detection": 118,
      "../shared/constants": 119,
      "../shared/errors": 120,
      "../shared/events": 121,
      "./../../assign": 95,
      "./strategies/modal": 113,
      "./strategies/popup": 116,
      "./strategies/popup-bridge": 114,
      "@braintree/iframer": 42,
      "@braintree/uuid": 46,
      "framebus": 172
    }],
    112: [function (require, module, exports) {
      'use strict';

      var FrameService = require('./frame-service');

      module.exports = {
        create: function createFrameService(options, callback) {
          var frameService = new FrameService(options);
          frameService.initialize(function () {
            callback(frameService);
          });
        }
      };
    }, {
      "./frame-service": 111
    }],
    113: [function (require, module, exports) {
      'use strict';

      var iFramer = require('@braintree/iframer');

      var assign = require('../../../assign').assign;

      var browserDetection = require('../../shared/browser-detection');

      var ELEMENT_STYLES = {
        position: 'fixed',
        top: 0,
        left: 0,
        bottom: 0,
        padding: 0,
        margin: 0,
        border: 0,
        outline: 'none',
        zIndex: 20001,
        background: '#FFFFFF'
      };

      function noop() {}

      function Modal(options) {
        this._closed = null;
        this._frame = null;
        this._options = options || {};
        this._container = this._options.container || document.body;
      }

      Modal.prototype.initialize = noop;

      Modal.prototype.open = function () {
        var iframerConfig = {
          src: this._options.openFrameUrl,
          name: this._options.name,
          scrolling: 'yes',
          height: '100%',
          width: '100%',
          style: assign({}, ELEMENT_STYLES),
          title: 'Lightbox Frame'
        };

        if (browserDetection.isIos()) {
          // WKWebView has buggy behavior when scrolling a fixed position modal. The workaround is to lock scrolling in
          // the background. When modal is closed, we restore scrolling and return to the previous scroll position.
          if (browserDetection.isIosWKWebview()) {
            this._lockScrolling(); // Allows WKWebView to scroll all the way down to bottom


            iframerConfig.style = {};
          }

          this._el = document.createElement('div');
          assign(this._el.style, ELEMENT_STYLES, {
            height: '100%',
            width: '100%',
            overflow: 'auto',
            '-webkit-overflow-scrolling': 'touch'
          });
          this._frame = iFramer(iframerConfig);

          this._el.appendChild(this._frame);
        } else {
          this._el = this._frame = iFramer(iframerConfig);
        }

        this._closed = false;

        this._container.appendChild(this._el);
      };

      Modal.prototype.focus = noop;

      Modal.prototype.close = function () {
        this._container.removeChild(this._el);

        this._frame = null;
        this._closed = true;

        if (browserDetection.isIosWKWebview()) {
          this._unlockScrolling();
        }
      };

      Modal.prototype.isClosed = function () {
        return Boolean(this._closed);
      };

      Modal.prototype.redirect = function (redirectUrl) {
        this._frame.src = redirectUrl;
      };

      Modal.prototype._unlockScrolling = function () {
        document.body.style.overflow = this._savedBodyProperties.overflowStyle;
        document.body.style.position = this._savedBodyProperties.positionStyle;
        window.scrollTo(this._savedBodyProperties.left, this._savedBodyProperties.top);
        delete this._savedBodyProperties;
      };

      Modal.prototype._lockScrolling = function () {
        var doc = document.documentElement; // From https://stackoverflow.com/questions/9538868/prevent-body-from-scrolling-when-a-modal-is-opened#comment65626743_24727206

        this._savedBodyProperties = {
          left: (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0),
          top: (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0),
          overflowStyle: document.body.style.overflow,
          positionStyle: document.body.style.position
        };
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        window.scrollTo(0, 0);
      };

      module.exports = Modal;
    }, {
      "../../../assign": 95,
      "../../shared/browser-detection": 118,
      "@braintree/iframer": 42
    }],
    114: [function (require, module, exports) {
      'use strict';

      var BraintreeError = require('../../../braintree-error');

      var errors = require('../../shared/errors');

      function noop() {}

      function PopupBridge(options) {
        this._closed = null;
        this._options = options;
      }

      PopupBridge.prototype.initialize = function (callback) {
        var self = this;

        window.popupBridge.onComplete = function (err, payload) {
          var popupDismissed = !payload && !err;
          self._closed = true;

          if (err || popupDismissed) {
            // User clicked "Done" button of browser view
            callback(new BraintreeError(errors.FRAME_SERVICE_FRAME_CLOSED));
            return;
          } // User completed popup flow (includes success and cancel cases)


          callback(null, payload);
        };
      };

      PopupBridge.prototype.open = function (options) {
        var url;
        options = options || {};
        url = options.openFrameUrl || this._options.openFrameUrl;
        this._closed = false;
        window.popupBridge.open(url);
      };

      PopupBridge.prototype.focus = noop;
      PopupBridge.prototype.close = noop;

      PopupBridge.prototype.isClosed = function () {
        return Boolean(this._closed);
      };

      PopupBridge.prototype.redirect = function (redirectUrl) {
        this.open({
          openFrameUrl: redirectUrl
        });
      };

      module.exports = PopupBridge;
    }, {
      "../../../braintree-error": 98,
      "../../shared/errors": 120
    }],
    115: [function (require, module, exports) {
      'use strict';

      var constants = require('../../../shared/constants');

      var position = require('./position');

      function calculatePosition(type, userDefinedPosition, size) {
        if (typeof userDefinedPosition !== 'undefined') {
          return userDefinedPosition;
        }

        return position[type](size);
      }

      module.exports = function composePopupOptions(options) {
        var height = options.height || constants.DEFAULT_POPUP_HEIGHT;
        var width = options.width || constants.DEFAULT_POPUP_WIDTH;
        var top = calculatePosition('top', options.top, height);
        var left = calculatePosition('left', options.left, width);
        return [constants.POPUP_BASE_OPTIONS, 'height=' + height, 'width=' + width, 'top=' + top, 'left=' + left].join(',');
      };
    }, {
      "../../../shared/constants": 119,
      "./position": 117
    }],
    116: [function (require, module, exports) {
      'use strict';

      var composeOptions = require('./compose-options');

      function noop() {}

      function Popup(options) {
        this._frame = null;
        this._options = options || {};
        this.open();
      }

      Popup.prototype.initialize = noop;

      Popup.prototype.open = function () {
        this._frame = window.open(this._options.openFrameUrl, this._options.name, composeOptions(this._options));
      };

      Popup.prototype.focus = function () {
        this._frame.focus();
      };

      Popup.prototype.close = function () {
        if (this._frame.closed) {
          return;
        }

        this._frame.close();
      };

      Popup.prototype.isClosed = function () {
        return !this._frame || Boolean(this._frame.closed);
      };

      Popup.prototype.redirect = function (redirectUrl) {
        this._frame.location.href = redirectUrl;
      };

      module.exports = Popup;
    }, {
      "./compose-options": 115
    }],
    117: [function (require, module, exports) {
      'use strict';

      function top(height) {
        var windowHeight = window.outerHeight || document.documentElement.clientHeight;
        var windowTop = window.screenY == null ? window.screenTop : window.screenY;
        return center(windowHeight, height, windowTop);
      }

      function left(width) {
        var windowWidth = window.outerWidth || document.documentElement.clientWidth;
        var windowLeft = window.screenX == null ? window.screenLeft : window.screenX;
        return center(windowWidth, width, windowLeft);
      }

      function center(windowMetric, popupMetric, offset) {
        return (windowMetric - popupMetric) / 2 + offset;
      }

      module.exports = {
        top: top,
        left: left,
        center: center
      };
    }, {}],
    118: [function (require, module, exports) {
      'use strict';

      module.exports = {
        isIos: require('@braintree/browser-detection/is-ios'),
        isIosWKWebview: require('@braintree/browser-detection/is-ios-wkwebview'),
        isIE: require('@braintree/browser-detection/is-ie'),
        supportsPopups: require('@braintree/browser-detection/supports-popups')
      };
    }, {
      "@braintree/browser-detection/is-ie": 31,
      "@braintree/browser-detection/is-ios": 37,
      "@braintree/browser-detection/is-ios-wkwebview": 36,
      "@braintree/browser-detection/supports-popups": 38
    }],
    119: [function (require, module, exports) {
      'use strict';

      module.exports = {
        DISPATCH_FRAME_NAME: 'dispatch',
        DISPATCH_FRAME_CLASS: 'braintree-dispatch-frame',
        POPUP_BASE_OPTIONS: 'resizable,scrollbars',
        DEFAULT_POPUP_WIDTH: 450,
        DEFAULT_POPUP_HEIGHT: 535,
        POPUP_POLL_INTERVAL: 100,
        POPUP_CLOSE_TIMEOUT: 100
      };
    }, {}],
    120: [function (require, module, exports) {
      'use strict';
      /**
       * @name BraintreeError.Popup Related Error Codes
       * @ignore
       * @description Errors that occur when using a component that opens a popup window.
       * @property {INTERNAL} FRAME_SERVICE_FRAME_CLOSED - Occurs when the frame is closed before tokenization can occur.
       * @property {INTERNAL} FRAME_SERVICE_FRAME_OPEN_FAILED - Occurs when the popup could not be opened.
       * @property {INTERNAL} FRAME_SERVICE_FRAME_OPEN_FAILED_IE_BUG - Occurs when the frame could not be opened because of a specific bug in Internet Explorer - https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11324352/.
       */

      var BraintreeError = require('../../braintree-error');

      module.exports = {
        FRAME_SERVICE_FRAME_CLOSED: {
          type: BraintreeError.types.INTERNAL,
          code: 'FRAME_SERVICE_FRAME_CLOSED',
          message: 'Frame closed before tokenization could occur.'
        },
        FRAME_SERVICE_FRAME_OPEN_FAILED: {
          type: BraintreeError.types.INTERNAL,
          code: 'FRAME_SERVICE_FRAME_OPEN_FAILED',
          message: 'Frame failed to open.'
        },
        FRAME_SERVICE_FRAME_OPEN_FAILED_IE_BUG: {
          type: BraintreeError.types.INTERNAL,
          code: 'FRAME_SERVICE_FRAME_OPEN_FAILED_IE_BUG',
          message: 'Could not open frame. This may be due to a bug in IE browsers when attempting to open an HTTPS page from a HTTP page. https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11324352/'
        }
      };
    }, {
      "../../braintree-error": 98
    }],
    121: [function (require, module, exports) {
      'use strict';

      var enumerate = require('../../enumerate');

      module.exports = enumerate(['DISPATCH_FRAME_READY', 'DISPATCH_FRAME_REPORT'], 'frameService:');
    }, {
      "../../enumerate": 107
    }],
    122: [function (require, module, exports) {
      'use strict';

      var VERSION = "3.83.0";

      var assign = require('./assign').assign;

      function generateTokenizationParameters(configuration, overrides) {
        var metadata = configuration.analyticsMetadata;
        var basicTokenizationParameters = {
          gateway: 'braintree',
          'braintree:merchantId': configuration.gatewayConfiguration.merchantId,
          'braintree:apiVersion': 'v1',
          'braintree:sdkVersion': VERSION,
          'braintree:metadata': JSON.stringify({
            source: metadata.source,
            integration: metadata.integration,
            sessionId: metadata.sessionId,
            version: VERSION,
            platform: metadata.platform
          })
        };
        return assign({}, basicTokenizationParameters, overrides);
      }

      module.exports = function (configuration, googlePayVersion, googleMerchantId) {
        var data, paypalPaymentMethod;
        var androidPayConfiguration = configuration.gatewayConfiguration.androidPay;
        var environment = configuration.gatewayConfiguration.environment === 'production' ? 'PRODUCTION' : 'TEST';

        if (googlePayVersion === 2) {
          data = {
            apiVersion: 2,
            apiVersionMinor: 0,
            environment: environment,
            allowedPaymentMethods: [{
              type: 'CARD',
              parameters: {
                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],
                allowedCardNetworks: androidPayConfiguration.supportedNetworks.map(function (card) {
                  return card.toUpperCase();
                })
              },
              tokenizationSpecification: {
                type: 'PAYMENT_GATEWAY',
                parameters: generateTokenizationParameters(configuration, {
                  'braintree:authorizationFingerprint': androidPayConfiguration.googleAuthorizationFingerprint
                })
              }
            }]
          };

          if (googleMerchantId) {
            data.merchantInfo = {
              merchantId: googleMerchantId
            };
          }

          if (androidPayConfiguration.paypalClientId) {
            paypalPaymentMethod = {
              type: 'PAYPAL',
              parameters: {
                /* eslint-disable camelcase */
                purchase_context: {
                  purchase_units: [{
                    payee: {
                      client_id: androidPayConfiguration.paypalClientId
                    },
                    recurring_payment: true
                  }]
                }
                /* eslint-enable camelcase */

              },
              tokenizationSpecification: {
                type: 'PAYMENT_GATEWAY',
                parameters: generateTokenizationParameters(configuration, {
                  'braintree:paypalClientId': androidPayConfiguration.paypalClientId
                })
              }
            };
            data.allowedPaymentMethods.push(paypalPaymentMethod);
          }
        } else {
          data = {
            environment: environment,
            allowedPaymentMethods: ['CARD', 'TOKENIZED_CARD'],
            paymentMethodTokenizationParameters: {
              tokenizationType: 'PAYMENT_GATEWAY',
              parameters: generateTokenizationParameters(configuration, {
                'braintree:authorizationFingerprint': androidPayConfiguration.googleAuthorizationFingerprint
              })
            },
            cardRequirements: {
              allowedCardNetworks: androidPayConfiguration.supportedNetworks.map(function (card) {
                return card.toUpperCase();
              })
            }
          };

          if (configuration.authorizationType === 'TOKENIZATION_KEY') {
            data.paymentMethodTokenizationParameters.parameters['braintree:clientKey'] = configuration.authorization;
          }

          if (googleMerchantId) {
            data.merchantId = googleMerchantId;
          }

          if (googlePayVersion) {
            data.apiVersion = googlePayVersion;
          }
        }

        return data;
      };
    }, {
      "./assign": 95
    }],
    123: [function (require, module, exports) {
      'use strict';

      module.exports = function inIframe(win) {
        win = win || window;

        try {
          return win.self !== win.top;
        } catch (e) {
          return true;
        }
      };
    }, {}],
    124: [function (require, module, exports) {
      'use strict';

      function convertDateStringToDate(dateString) {
        var splitDate = dateString.split('-');
        return new Date(splitDate[0], splitDate[1], splitDate[2]);
      }

      function isDateStringBeforeOrOn(firstDate, secondDate) {
        return convertDateStringToDate(firstDate) <= convertDateStringToDate(secondDate);
      }

      module.exports = isDateStringBeforeOrOn;
    }, {}],
    125: [function (require, module, exports) {
      'use strict';

      function isHTTPS(protocol) {
        protocol = protocol || window.location.protocol;
        return protocol === 'https:';
      }

      module.exports = {
        isHTTPS: isHTTPS
      };
    }, {}],
    126: [function (require, module, exports) {
      'use strict';

      var parser;
      var legalHosts = {
        'paypal.com': 1,
        'braintreepayments.com': 1,
        'braintreegateway.com': 1,
        'braintree-api.com': 1
      };

      function stripSubdomains(domain) {
        return domain.split('.').slice(-2).join('.');
      }

      function isVerifiedDomain(url) {
        var mainDomain;
        url = url.toLowerCase();

        if (!/^https:/.test(url)) {
          return false;
        }

        parser = parser || document.createElement('a');
        parser.href = url;
        mainDomain = stripSubdomains(parser.hostname);
        return legalHosts.hasOwnProperty(mainDomain);
      }

      module.exports = isVerifiedDomain;
    }, {}],
    127: [function (require, module, exports) {
      'use strict';

      module.exports = function (value) {
        return JSON.parse(JSON.stringify(value));
      };
    }, {}],
    128: [function (require, module, exports) {
      'use strict';

      module.exports = function (obj) {
        return Object.keys(obj).filter(function (key) {
          return typeof obj[key] === 'function';
        });
      };
    }, {}],
    129: [function (require, module, exports) {
      'use strict';

      function once(fn) {
        var called = false;
        return function () {
          if (!called) {
            called = true;
            fn.apply(null, arguments);
          }
        };
      }

      module.exports = once;
    }, {}],
    130: [function (require, module, exports) {
      'use strict';

      var PromisePolyfill = require('promise-polyfill');

      var ExtendedPromise = require('@braintree/extended-promise'); // eslint-disable-next-line no-undef


      var PromiseGlobal = typeof Promise !== 'undefined' ? Promise : PromisePolyfill;
      ExtendedPromise.suppressUnhandledPromiseMessage = true;
      ExtendedPromise.setPromise(PromiseGlobal);
      module.exports = PromiseGlobal;
    }, {
      "@braintree/extended-promise": 41,
      "promise-polyfill": 186
    }],
    131: [function (require, module, exports) {
      'use strict';

      function _notEmpty(obj) {
        var key;

        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            return true;
          }
        }

        return false;
      }
      /* eslint-disable no-mixed-operators */


      function _isArray(value) {
        return value && _typeof(value) === 'object' && typeof value.length === 'number' && Object.prototype.toString.call(value) === '[object Array]' || false;
      }
      /* eslint-enable no-mixed-operators */


      function hasQueryParams(url) {
        url = url || window.location.href;
        return /\?/.test(url);
      }

      function parse(url) {
        var query, params;
        url = url || window.location.href;

        if (!hasQueryParams(url)) {
          return {};
        }

        query = url.replace(/#.*$/, '').replace(/^.*\?/, '').split('&');
        params = query.reduce(function (toReturn, keyValue) {
          var parts = keyValue.split('=');
          var key = decodeURIComponent(parts[0]);
          var value = decodeURIComponent(parts[1]);
          toReturn[key] = value;
          return toReturn;
        }, {});
        return params;
      }

      function stringify(params, namespace) {
        var k, v, p;
        var query = [];

        for (p in params) {
          if (!params.hasOwnProperty(p)) {
            continue;
          }

          v = params[p];

          if (namespace) {
            if (_isArray(params)) {
              k = namespace + '[]';
            } else {
              k = namespace + '[' + p + ']';
            }
          } else {
            k = p;
          }

          if (_typeof(v) === 'object') {
            query.push(stringify(v, k));
          } else {
            query.push(encodeURIComponent(k) + '=' + encodeURIComponent(v));
          }
        }

        return query.join('&');
      }

      function queryify(url, params) {
        url = url || '';

        if (params != null && _typeof(params) === 'object' && _notEmpty(params)) {
          url += url.indexOf('?') === -1 ? '?' : '';
          url += url.indexOf('=') !== -1 ? '&' : '';
          url += stringify(params);
        }

        return url;
      }

      module.exports = {
        parse: parse,
        stringify: stringify,
        queryify: queryify,
        hasQueryParams: hasQueryParams
      };
    }, {}],
    132: [function (require, module, exports) {
      'use strict';

      var uuid = require('@braintree/uuid');

      var findRootNode = require('./find-root-node'); // based on https://github.com/krakenjs/belter/blob/cdddc4f8ddb172d29db9e7e1ad1eeeacfb93e215/src/dom.js#L981-L1031
      // thanks @bluepnume


      function isShadowElement(element) {
        element = findRootNode(element);
        return element.toString() === '[object ShadowRoot]';
      }

      function getShadowHost(element) {
        element = findRootNode(element);

        if (!isShadowElement(element)) {
          return null;
        }

        return element.host;
      }

      function transformToSlot(element, styles) {
        var styleNode = findRootNode(element).querySelector('style');
        var shadowHost = getShadowHost(element);
        var slotName = 'shadow-slot-' + uuid();
        var slot = document.createElement('slot');
        var slotProvider = document.createElement('div');
        slot.setAttribute('name', slotName);
        element.appendChild(slot);
        slotProvider.setAttribute('slot', slotName);
        shadowHost.appendChild(slotProvider);

        if (styles) {
          if (!styleNode) {
            styleNode = document.createElement('style');
            element.appendChild(styleNode);
          }

          styleNode.sheet.insertRule('::slotted([slot="' + slotName + '"]) { ' + styles + ' }');
        }

        if (isShadowElement(shadowHost)) {
          return transformToSlot(slotProvider, styles);
        }

        return slotProvider;
      }

      module.exports = {
        isShadowElement: isShadowElement,
        getShadowHost: getShadowHost,
        transformToSlot: transformToSlot
      };
    }, {
      "./find-root-node": 109,
      "@braintree/uuid": 46
    }],
    133: [function (require, module, exports) {
      'use strict';

      function useMin(isDebug) {
        return isDebug ? '' : '.min';
      }

      module.exports = useMin;
    }, {}],
    134: [function (require, module, exports) {
      'use strict'; // NEXT_MAJOR_VERSION old versions of IE don't have atob, in the
      // next major version, we're dropping support for those versions
      // so we can eliminate the need to have this atob polyfill

      var atobNormalized = typeof atob === 'function' ? atob : atobPolyfill;

      function atobPolyfill(base64String) {
        var a, b, c, b1, b2, b3, b4, i;
        var base64Matcher = new RegExp('^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})([=]{1,2})?$');
        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        var result = '';

        if (!base64Matcher.test(base64String)) {
          throw new Error('Non base64 encoded input passed to window.atob polyfill');
        }

        i = 0;

        do {
          b1 = characters.indexOf(base64String.charAt(i++));
          b2 = characters.indexOf(base64String.charAt(i++));
          b3 = characters.indexOf(base64String.charAt(i++));
          b4 = characters.indexOf(base64String.charAt(i++));
          a = (b1 & 0x3F) << 2 | b2 >> 4 & 0x3;
          b = (b2 & 0xF) << 4 | b3 >> 2 & 0xF;
          c = (b3 & 0x3) << 6 | b4 & 0x3F;
          result += String.fromCharCode(a) + (b ? String.fromCharCode(b) : '') + (c ? String.fromCharCode(c) : '');
        } while (i < base64String.length);

        return result;
      }

      module.exports = {
        atob: function atob(base64String) {
          return atobNormalized.call(window, base64String);
        },
        _atob: atobPolyfill
      };
    }, {}],
    135: [function (require, module, exports) {
      'use strict';
      /**
       * @name BraintreeError.PayPal Checkout - Creation Error Codes
       * @description Errors that occur when [creating the PayPal Checkout component](./module-braintree-web_paypal-checkout.html#.create).
       * @property {MERCHANT} PAYPAL_NOT_ENABLED Occurs when PayPal is not enabled on the Braintree control panel.
       * @property {MERCHANT} PAYPAL_SANDBOX_ACCOUNT_NOT_LINKED Occurs only when testing in Sandbox, when a PayPal sandbox account is not linked to the merchant account in the Braintree control panel.
       */

      /**
       * @name BraintreeError.PayPal Checkout - createPayment Error Codes
       * @description Errors that occur when using the [`createPayment` method](./PayPalCheckout.html#createPayment).
       * @property {MERCHANT} PAYPAL_FLOW_OPTION_REQUIRED Occurs when a required option is missing.
       * @property {MERCHANT} PAYPAL_INVALID_PAYMENT_OPTION Occurs when an option contains an invalid value.
       * @property {NETWORK} PAYPAL_FLOW_FAILED Occurs when something goes wrong when initializing the flow.
       */

      /**
       * @name BraintreeError.PayPal Checkout - startVaultInitiatedCheckout Error Codes
       * @description Errors that occur when using the [`startVaultInitiatedCheckout` method](./PayPalCheckout.html#startVaultInitiatedCheckout).
       * @property {MERCHANT} PAYPAL_START_VAULT_INITIATED_CHECKOUT_PARAM_REQUIRED Occurs when a required param is missing when calling the method.
       * @property {MERCHANT} PAYPAL_START_VAULT_INITIATED_CHECKOUT_POPUP_OPEN_FAILED Occurs when PayPal window could not be opened. This often occurs because the call to start the vault initiated flow was not triggered from a click event.
       * @property {CUSTOMER} PAYPAL_START_VAULT_INITIATED_CHECKOUT_CANCELED Occurs when a customer closes the PayPal flow before completion.
       * @property {MERCHANT} PAYPAL_START_VAULT_INITIATED_CHECKOUT_IN_PROGRESS Occurs when the flow is initialized while an authorization is already in progress.
       * @property {NETWORK} PAYPAL_START_VAULT_INITIATED_CHECKOUT_SETUP_FAILED Occurs when something went wrong setting up the flow.
       */

      /**
       * @name BraintreeError.PayPal Checkout - tokenizePayment Error Codes
       * @description Errors that occur when using the [`tokenizePayment` method](./PayPalCheckout.html#tokenizePayment).
       * @property {NETWORK} PAYPAL_ACCOUNT_TOKENIZATION_FAILED Occurs when PayPal account could not be tokenized.
       */

      var BraintreeError = require('../lib/braintree-error');

      module.exports = {
        PAYPAL_NOT_ENABLED: {
          type: BraintreeError.types.MERCHANT,
          code: 'PAYPAL_NOT_ENABLED',
          message: 'PayPal is not enabled for this merchant.'
        },
        PAYPAL_SANDBOX_ACCOUNT_NOT_LINKED: {
          type: BraintreeError.types.MERCHANT,
          code: 'PAYPAL_SANDBOX_ACCOUNT_NOT_LINKED',
          message: 'A linked PayPal Sandbox account is required to use PayPal Checkout in Sandbox. See https://developer.paypal.com/braintree/docs/guides/paypal/testing-go-live#linked-paypal-testing for details on linking your PayPal sandbox with Braintree.'
        },
        PAYPAL_ACCOUNT_TOKENIZATION_FAILED: {
          type: BraintreeError.types.NETWORK,
          code: 'PAYPAL_ACCOUNT_TOKENIZATION_FAILED',
          message: 'Could not tokenize user\'s PayPal account.'
        },
        PAYPAL_FLOW_FAILED: {
          type: BraintreeError.types.NETWORK,
          code: 'PAYPAL_FLOW_FAILED',
          message: 'Could not initialize PayPal flow.'
        },
        PAYPAL_FLOW_OPTION_REQUIRED: {
          type: BraintreeError.types.MERCHANT,
          code: 'PAYPAL_FLOW_OPTION_REQUIRED',
          message: 'PayPal flow property is invalid or missing.'
        },
        PAYPAL_START_VAULT_INITIATED_CHECKOUT_PARAM_REQUIRED: {
          type: BraintreeError.types.MERCHANT,
          code: 'PAYPAL_START_VAULT_INITIATED_CHECKOUT_PARAM_REQUIRED'
        },
        PAYPAL_START_VAULT_INITIATED_CHECKOUT_SETUP_FAILED: {
          type: BraintreeError.types.NETWORK,
          code: 'PAYPAL_START_VAULT_INITIATED_CHECKOUT_SETUP_FAILED',
          message: 'Something went wrong when setting up the checkout workflow.'
        },
        PAYPAL_START_VAULT_INITIATED_CHECKOUT_POPUP_OPEN_FAILED: {
          type: BraintreeError.types.MERCHANT,
          code: 'PAYPAL_START_VAULT_INITIATED_CHECKOUT_POPUP_OPEN_FAILED',
          message: 'PayPal popup failed to open, make sure to initiate the vault checkout in response to a user action.'
        },
        PAYPAL_START_VAULT_INITIATED_CHECKOUT_CANCELED: {
          type: BraintreeError.types.CUSTOMER,
          code: 'PAYPAL_START_VAULT_INITIATED_CHECKOUT_CANCELED',
          message: 'Customer closed PayPal popup before authorizing.'
        },
        PAYPAL_START_VAULT_INITIATED_CHECKOUT_IN_PROGRESS: {
          type: BraintreeError.types.MERCHANT,
          code: 'PAYPAL_START_VAULT_INITIATED_CHECKOUT_IN_PROGRESS',
          message: 'Vault initiated checkout already in progress.'
        },
        PAYPAL_INVALID_PAYMENT_OPTION: {
          type: BraintreeError.types.MERCHANT,
          code: 'PAYPAL_INVALID_PAYMENT_OPTION',
          message: 'PayPal payment options are invalid.'
        }
      };
    }, {
      "../lib/braintree-error": 98
    }],
    136: [function (require, module, exports) {
      'use strict';
      /**
       * @module braintree-web/paypal-checkout
       * @description A component to integrate with the [PayPal JS SDK](https://github.com/paypal/paypal-checkout-components).
       */

      var basicComponentVerification = require('../lib/basic-component-verification');

      var wrapPromise = require('@braintree/wrap-promise');

      var PayPalCheckout = require('./paypal-checkout');

      var VERSION = "3.83.0";
      /**
       * @static
       * @function create
       * @description There are two ways to integrate the PayPal Checkout component. See the [PayPal Checkout constructor documentation](PayPalCheckout.html#PayPalCheckout) for more information and examples.
       *
       * @param {object} options Creation options:
       * @param {Client} [options.client] A {@link Client} instance.
       * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.
       * @param {string} [options.merchantAccountId] A non-default merchant account ID to use for tokenization.
       * @param {boolean} [options.autoSetDataUserIdToken=false] Whether or not to render the PayPal SDK button with a customer's vaulted PayPal account. Must be used in conjunction with a Client Token generated with a customer id.
       * @param {callback} [callback] The second argument, `data`, is the {@link PayPalCheckout} instance.
       * @example
       * braintree.client.create({
       *   authorization: 'authorization'
       * }).then(function (clientInstance) {
       *   return braintree.paypalCheckout.create({
       *     client: clientInstance
       *   });
       * }).then(function (paypalCheckoutInstance) {
       *   // set up the PayPal JS SDK
       * }).catch(function (err) {
       *   console.error('Error!', err);
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */

      function create(options) {
        var name = 'PayPal Checkout';
        return basicComponentVerification.verify({
          name: name,
          client: options.client,
          authorization: options.authorization
        }).then(function () {
          var instance = new PayPalCheckout(options);
          return instance._initialize(options);
        });
      }
      /**
       * @static
       * @function isSupported
       * @description Returns true if PayPal Checkout [supports this browser](index.html#browser-support-webviews).
       * @deprecated Previously, this method checked for Popup support in the browser. The PayPal JS SDK now falls back to a modal if popups are not supported.
       * @returns {Boolean} Returns true if PayPal Checkout supports this browser.
       */


      function isSupported() {
        return true;
      }

      module.exports = {
        create: wrapPromise(create),
        isSupported: isSupported,

        /**
         * @description The current version of the SDK, i.e. `1.32.1`.
         * @type {string}
         */
        VERSION: VERSION
      };
    }, {
      "../lib/basic-component-verification": 96,
      "./paypal-checkout": 137,
      "@braintree/wrap-promise": 50
    }],
    137: [function (require, module, exports) {
      'use strict';

      var analytics = require('../lib/analytics');

      var assign = require('../lib/assign').assign;

      var createDeferredClient = require('../lib/create-deferred-client');

      var createAssetsUrl = require('../lib/create-assets-url');

      var Promise = require('../lib/promise');

      var ExtendedPromise = require('@braintree/extended-promise');

      var wrapPromise = require('@braintree/wrap-promise');

      var BraintreeError = require('../lib/braintree-error');

      var convertToBraintreeError = require('../lib/convert-to-braintree-error');

      var errors = require('./errors');

      var constants = require('../paypal/shared/constants');

      var frameService = require('../lib/frame-service/external');

      var createAuthorizationData = require('../lib/create-authorization-data');

      var methods = require('../lib/methods');

      var useMin = require('../lib/use-min');

      var convertMethodsToError = require('../lib/convert-methods-to-error');

      var querystring = require('../lib/querystring');

      var VERSION = "3.83.0";

      var INTEGRATION_TIMEOUT_MS = require('../lib/constants').INTEGRATION_TIMEOUT_MS;

      var REQUIRED_PARAMS_FOR_START_VAULT_INITIATED_CHECKOUT = ['amount', 'currency', 'vaultInitiatedCheckoutPaymentMethodToken'];
      var PAYPAL_SDK_PRELOAD_URL = 'https://www.{ENV}paypal.com/smart/buttons/preload';
      /**
       * PayPal Checkout tokenized payload. Returned in {@link PayPalCheckout#tokenizePayment}'s callback as the second argument, `data`.
       * @typedef {object} PayPalCheckout~tokenizePayload
       * @property {string} nonce The payment method nonce.
       * @property {string} type The payment method type, always `PayPalAccount`.
       * @property {object} details Additional PayPal account details.
       * @property {string} details.email User's email address.
       * @property {string} details.payerId User's payer ID, the unique identifier for each PayPal account.
       * @property {string} details.firstName User's given name.
       * @property {string} details.lastName User's surname.
       * @property {?string} details.countryCode User's 2 character country code.
       * @property {?string} details.phone User's phone number (e.g. 555-867-5309).
       * @property {?object} details.shippingAddress User's shipping address details, only available if shipping address is enabled.
       * @property {string} details.shippingAddress.recipientName Recipient of postage.
       * @property {string} details.shippingAddress.line1 Street number and name.
       * @property {string} details.shippingAddress.line2 Extended address.
       * @property {string} details.shippingAddress.city City or locality.
       * @property {string} details.shippingAddress.state State or region.
       * @property {string} details.shippingAddress.postalCode Postal code.
       * @property {string} details.shippingAddress.countryCode 2 character country code (e.g. US).
       * @property {?object} details.billingAddress User's billing address details.
       * Not available to all merchants; [contact support](https://developer.paypal.com/braintree/help) for details on eligibility and enabling this feature.
       * Alternatively, see `shippingAddress` above as an available client option.
       * @property {string} details.billingAddress.line1 Street number and name.
       * @property {string} details.billingAddress.line2 Extended address.
       * @property {string} details.billingAddress.city City or locality.
       * @property {string} details.billingAddress.state State or region.
       * @property {string} details.billingAddress.postalCode Postal code.
       * @property {string} details.billingAddress.countryCode 2 character country code (e.g. US).
       * @property {?object} creditFinancingOffered This property will only be present when the customer pays with PayPal Credit.
       * @property {object} creditFinancingOffered.totalCost This is the estimated total payment amount including interest and fees the user will pay during the lifetime of the loan.
       * @property {string} creditFinancingOffered.totalCost.value An amount defined by [ISO 4217](https://www.iso.org/iso/home/standards/currency_codes.htm) for the given currency.
       * @property {string} creditFinancingOffered.totalCost.currency 3 letter currency code as defined by [ISO 4217](https://www.iso.org/iso/home/standards/currency_codes.htm).
       * @property {number} creditFinancingOffered.term Length of financing terms in months.
       * @property {object} creditFinancingOffered.monthlyPayment This is the estimated amount per month that the customer will need to pay including fees and interest.
       * @property {string} creditFinancingOffered.monthlyPayment.value An amount defined by [ISO 4217](https://www.iso.org/iso/home/standards/currency_codes.htm) for the given currency.
       * @property {string} creditFinancingOffered.monthlyPayment.currency 3 letter currency code as defined by [ISO 4217](https://www.iso.org/iso/home/standards/currency_codes.htm).
       * @property {object} creditFinancingOffered.totalInterest Estimated interest or fees amount the payer will have to pay during the lifetime of the loan.
       * @property {string} creditFinancingOffered.totalInterest.value An amount defined by [ISO 4217](https://www.iso.org/iso/home/standards/currency_codes.htm) for the given currency.
       * @property {string} creditFinancingOffered.totalInterest.currency 3 letter currency code as defined by [ISO 4217](https://www.iso.org/iso/home/standards/currency_codes.htm).
       * @property {boolean} creditFinancingOffered.payerAcceptance Status of whether the customer ultimately was approved for and chose to make the payment using the approved installment credit.
       * @property {boolean} creditFinancingOffered.cartAmountImmutable Indicates whether the cart amount is editable after payer's acceptance on PayPal side.
       */

      /**
       * @class
       * @param {object} options see {@link module:braintree-web/paypal-checkout.create|paypal-checkout.create}
       * @classdesc This class represents a PayPal Checkout component that coordinates with the {@link https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page|PayPal SDK}. Instances of this class can generate payment data and tokenize authorized payments.
       *
       * All UI (such as preventing actions on the parent page while authentication is in progress) is managed by the {@link https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page|PayPal SDK}. You must provide your PayPal `client-id` as a query parameter. You can [retrieve this value from the PayPal Dashboard](https://developer.paypal.com/docs/checkout/integrate/#1-get-paypal-rest-api-credentials).
       * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/paypal-checkout.create|braintree-web.paypal-checkout.create} instead.</strong>
       *
       * #### Integrate Checkout Flow with PayPal SDK
       *
       * You must have [PayPal's script, configured with various query parameters](https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page), loaded on your page:
       *
       * ```html
       * <script src="https://www.paypal.com/sdk/js?client-id=your-sandbox-or-prod-client-id"></script>
       * <div id="paypal-button"></div>
       * ```
       *
       * When passing values in the `createPayment` method, make sure they match the [corresponding parameters in the query parameters for the PayPal SDK script](https://developer.paypal.com/docs/checkout/reference/customize-sdk/).
       *
       * ```javascript
       * braintree.client.create({
       *   authorization: 'authorization'
       * }).then(function (clientInstance) {
       *   return braintree.paypalCheckout.create({
       *     client: clientInstance
       *   });
       * }).then(function (paypalCheckoutInstance) {
       *   return paypal.Buttons({
       *     createOrder: function () {
       *       return paypalCheckoutInstance.createPayment({
       *         flow: 'checkout',
       *         currency: 'USD',
       *         amount: '10.00',
       *         intent: 'capture' // this value must either be `capture` or match the intent passed into the PayPal SDK intent query parameter
       *         // your other createPayment options here
       *       });
       *     },
       *
       *     onApprove: function (data, actions) {
       *       // some logic here before tokenization happens below
       *       return paypalCheckoutInstance.tokenizePayment(data).then(function (payload) {
       *         // Submit payload.nonce to your server
       *       });
       *     },
       *
       *     onCancel: function () {
       *       // handle case where user cancels
       *     },
       *
       *     onError: function (err) {
       *       // handle case where error occurs
       *     }
       *   }).render('#paypal-button');
       * }).catch(function (err) {
       *  console.error('Error!', err);
       * });
       * ```
       *
       * #### Integrate Vault Flow with PayPal SDK
       *
       * You must have [PayPal's script, configured with various query parameters](https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page), loaded on your page:
       *
       * ```html
       * <script src="https://www.paypal.com/sdk/js?client-id=your-sandbox-or-prod-client-id&vault=true"></script>
       * <div id="paypal-button"></div>
       * ```
       *
       * When passing values in the `createPayment` method, make sure they match the [corresponding parameters in the query parameters for the PayPal SDK script](https://developer.paypal.com/docs/checkout/reference/customize-sdk/).
       *
       * ```javascript
       * braintree.client.create({
       *   authorization: 'authorization'
       * }).then(function (clientInstance) {
       *   return braintree.paypalCheckout.create({
       *     client: clientInstance
       *   });
       * }).then(function (paypalCheckoutInstance) {
       *   return paypal.Buttons({
       *     createBillingAgreement: function () {
       *       return paypalCheckoutInstance.createPayment({
       *         flow: 'vault'
       *         // your other createPayment options here
       *       });
       *     },
       *
       *     onApprove: function (data, actions) {
       *       // some logic here before tokenization happens below
       *       return paypalCheckoutInstance.tokenizePayment(data).then(function (payload) {
       *         // Submit payload.nonce to your server
       *       });
       *     },
       *
       *     onCancel: function () {
       *       // handle case where user cancels
       *     },
       *
       *     onError: function (err) {
       *       // handle case where error occurs
       *     }
       *   }).render('#paypal-button');
       * }).catch(function (err) {
       *  console.error('Error!', err);
       * });
       * ```
       *
       * #### Integrate with Checkout.js (deprecated PayPal SDK)
       *
       * If you are creating a new PayPal integration, please follow the previous integration guide to use the current version of the PayPal SDK. Use this integration guide only as a reference if you are already integrated with Checkout.js.
       *
       * You must have PayPal's Checkout.js script loaded on your page.
       *
       * ```html
       * <script src="https://www.paypalobjects.com/api/checkout.js" data-version-4 log-level="warn"></script>
       * ```
       *
       * ```javascript
       * braintree.client.create({
       *   authorization: 'authorization'
       * }).then(function (clientInstance) {
       *   return braintree.paypalCheckout.create({
       *     client: clientInstance
       *   });
       * }).then(function (paypalCheckoutInstance) {
       *   return paypal.Button.render({
       *     env: 'production', // or 'sandbox'
       *
       *     payment: function () {
       *       return paypalCheckoutInstance.createPayment({
       *         // your createPayment options here
       *       });
       *     },
       *
       *     onAuthorize: function (data, actions) {
       *       // some logic here before tokenization happens below
       *       return paypalCheckoutInstance.tokenizePayment(data).then(function (payload) {
       *         // Submit payload.nonce to your server
       *       });
       *     }
       *   }, '#paypal-button');
       * }).catch(function (err) {
       *  console.error('Error!', err);
       * });
       * ```
       */

      function PayPalCheckout(options) {
        this._merchantAccountId = options.merchantAccountId; // TODO remove this requirement for it to be opt in.
        // This feature is not yet GA, so we're intentionally making
        // it opt in and not publicly documenting it yet. Once it's
        // GA, we can remove the requirement to opt in to it

        this._autoSetDataUserIdToken = Boolean(options.autoSetDataUserIdToken);
      }

      PayPalCheckout.prototype._initialize = function (options) {
        var config;

        if (options.client) {
          config = options.client.getConfiguration();
          this._authorizationInformation = {
            fingerprint: config.authorizationFingerprint,
            environment: config.gatewayConfiguration.environment
          };
        } else {
          config = createAuthorizationData(options.authorization);
          this._authorizationInformation = {
            fingerprint: config.attrs.authorizationFingerprint,
            environment: config.environment
          };
        }

        this._clientPromise = createDeferredClient.create({
          authorization: options.authorization,
          client: options.client,
          debug: options.debug,
          assetsUrl: createAssetsUrl.create(options.authorization),
          name: 'PayPal Checkout'
        }).then(function (client) {
          this._configuration = client.getConfiguration(); // we skip these checks if a merchant account id is
          // passed in, because the default merchant account
          // may not have paypal enabled

          if (!this._merchantAccountId) {
            if (!this._configuration.gatewayConfiguration.paypalEnabled) {
              this._setupError = new BraintreeError(errors.PAYPAL_NOT_ENABLED);
            } else if (this._configuration.gatewayConfiguration.paypal.environmentNoNetwork === true) {
              this._setupError = new BraintreeError(errors.PAYPAL_SANDBOX_ACCOUNT_NOT_LINKED);
            }
          }

          if (this._setupError) {
            return Promise.reject(this._setupError);
          }

          analytics.sendEvent(client, 'paypal-checkout.initialized');
          this._frameServicePromise = this._setupFrameService(client);
          return client;
        }.bind(this)); // if client was passed in, let config checks happen before
        // resolving the instance. Otherwise, just resolve the instance

        if (options.client) {
          return this._clientPromise.then(function () {
            return this;
          }.bind(this));
        }

        return Promise.resolve(this);
      };

      PayPalCheckout.prototype._setupFrameService = function (client) {
        var frameServicePromise = new ExtendedPromise();
        var config = client.getConfiguration();
        var timeoutRef = setTimeout(function () {
          analytics.sendEvent(client, 'paypal-checkout.frame-service.timed-out');
          frameServicePromise.reject(new BraintreeError(errors.PAYPAL_START_VAULT_INITIATED_CHECKOUT_SETUP_FAILED));
        }, INTEGRATION_TIMEOUT_MS);
        this._assetsUrl = config.gatewayConfiguration.paypal.assetsUrl + '/web/' + VERSION;
        this._isDebug = config.isDebug; // Note: this is using the static landing frame that the deprecated PayPal component builds and uses

        this._loadingFrameUrl = this._assetsUrl + '/html/paypal-landing-frame' + useMin(this._isDebug) + '.html';
        frameService.create({
          name: 'braintreepaypallanding',
          dispatchFrameUrl: this._assetsUrl + '/html/dispatch-frame' + useMin(this._isDebug) + '.html',
          openFrameUrl: this._loadingFrameUrl
        }, function (service) {
          this._frameService = service;
          clearTimeout(timeoutRef);
          frameServicePromise.resolve();
        }.bind(this));
        return frameServicePromise;
      };
      /**
       * @typedef {object} PayPalCheckout~lineItem
       * @property {string} quantity Number of units of the item purchased. This value must be a whole number and can't be negative or zero.
       * @property {string} unitAmount Per-unit price of the item. Can include up to 2 decimal places. This value can't be negative or zero.
       * @property {string} name Item name. Maximum 127 characters.
       * @property {string} kind Indicates whether the line item is a debit (sale) or credit (refund) to the customer. Accepted values: `debit` and `credit`.
       * @property {?string} unitTaxAmount Per-unit tax price of the item. Can include up to 2 decimal places. This value can't be negative or zero.
       * @property {?string} description Item description. Maximum 127 characters.
       * @property {?string} productCode Product or UPC code for the item. Maximum 127 characters.
       * @property {?string} url The URL to product information.
       */

      /**
       * @typedef {object} PayPalCheckout~shippingOption
       * @property {string} id A unique ID that identifies a payer-selected shipping option.
       * @property {string} label A description that the payer sees, which helps them choose an appropriate shipping option. For example, `Free Shipping`, `USPS Priority Shipping`, `Expédition prioritaire USPS`, or `USPS yōuxiān fā huò`. Localize this description to the payer's locale.
       * @property {boolean} selected If `selected = true` is specified as part of the API request it represents the shipping option that the payee/merchant expects to be pre-selected for the payer when they first view the shipping options within the PayPal checkout experience. As part of the response if a shipping option has `selected = true` it represents the shipping option that the payer selected during the course of checkout with PayPal. Only 1 `shippingOption` can be set to `selected = true`.
       * @property {string} type The method by which the payer wants to get their items. The possible values are:
       * * `SHIPPING` - The payer intends to receive the items at a specified address.
       * * `PICKUP` - The payer intends to pick up the items at a specified address. For example, a store address.
       * @property {object} amount The shipping cost for the selected option.
       * @property {string} amount.currency The three-character ISO-4217 currency code. PayPal does not support all currencies.
       * @property {string} amount.value The amount the shipping option will cost. Includes the specified number of digits after decimal separator for the ISO-4217 currency code.
       */

      /**
       * Creates a PayPal payment ID or billing token using the given options. This is meant to be passed to the PayPal JS SDK.
       * When a {@link callback} is defined, the function returns undefined and invokes the callback with the id to be used with the PayPal JS SDK. Otherwise, it returns a Promise that resolves with the id.
       * @public
       * @param {object} options All options for the PayPalCheckout component.
       * @param {string} options.flow Set to 'checkout' for one-time payment flow, or 'vault' for Vault flow. If 'vault' is used with a client token generated with a customer ID, the PayPal account will be added to that customer as a saved payment method.
       * @param {string} [options.intent=authorize]
       * * `authorize` - Submits the transaction for authorization but not settlement.
       * * `order` - Validates the transaction without an authorization (i.e. without holding funds). Useful for authorizing and capturing funds up to 90 days after the order has been placed. Only available for Checkout flow.
       * * `capture` - Payment will be immediately submitted for settlement upon creating a transaction. `sale` can be used as an alias for this value.
       * @param {boolean} [options.offerCredit=false] Offers PayPal Credit as the default funding instrument for the transaction. If the customer isn't pre-approved for PayPal Credit, they will be prompted to apply for it.
       * @param {(string|number)} [options.amount] The amount of the transaction. Required when using the Checkout flow.
       * @param {string} [options.currency] The currency code of the amount, such as 'USD'. Required when using the Checkout flow.
       * @param {string} [options.displayName] The merchant name displayed inside of the PayPal lightbox; defaults to the company name on your Braintree account
       * @param {boolean} [options.requestBillingAgreement] If `true` and `flow = checkout`, the customer will be prompted to consent to a billing agreement during the checkout flow. This value is ignored when `flow = vault`.
       * @param {object} [options.billingAgreementDetails] When `requestBillingAgreement = true`, allows for details to be set for the billing agreement portion of the flow.
       * @param {string} [options.billingAgreementDetails.description] Description of the billing agreement to display to the customer.
       * @param {string} [options.vaultInitiatedCheckoutPaymentMethodToken] Use the payment method nonce representing a PayPal account with a Billing Agreement ID to create the payment and redirect the customer to select a new financial instrument. This option is only applicable to the `checkout` flow.
       * @param {shippingOption[]} [options.shippingOptions] List of shipping options offered by the payee or merchant to the payer to ship or pick up their items. **Note:** `shippingOptions` may not be passed with `intent="order"`.
       * @param {boolean} [options.enableShippingAddress=false] Returns a shipping address object in {@link PayPal#tokenize}.
       * @param {object} [options.shippingAddressOverride] Allows you to pass a shipping address you have already collected into the PayPal payment flow.
       * @param {string} options.shippingAddressOverride.line1 Street address.
       * @param {string} [options.shippingAddressOverride.line2] Street address (extended).
       * @param {string} options.shippingAddressOverride.city City.
       * @param {string} options.shippingAddressOverride.state State.
       * @param {string} options.shippingAddressOverride.postalCode Postal code.
       * @param {string} options.shippingAddressOverride.countryCode Country.
       * @param {string} [options.shippingAddressOverride.phone] Phone number.
       * @param {string} [options.shippingAddressOverride.recipientName] Recipient's name.
       * @param {boolean} [options.shippingAddressEditable=true] Set to false to disable user editing of the shipping address.
       * @param {string} [options.billingAgreementDescription] Use this option to set the description of the preapproved payment agreement visible to customers in their PayPal profile during Vault flows. Max 255 characters.
       * @param {string} [options.landingPageType] Use this option to specify the PayPal page to display when a user lands on the PayPal site to complete the payment.
       * * `login` - A PayPal account login page is used.
       * * `billing` - A non-PayPal account landing page is used.
       * @param {lineItem[]} [options.lineItems] The {@link PayPalCheckout~lineItem|line items} for this transaction. It can include up to 249 line items.
       * @param {callback} [callback] The second argument is a PayPal `paymentId` or `billingToken` string, depending on whether `options.flow` is `checkout` or `vault`. This is also what is resolved by the promise if no callback is provided.
       * @example
       * // this paypal object is created by the PayPal JS SDK
       * // see https://github.com/paypal/paypal-checkout-components
       * paypal.Buttons({
       *   createOrder: function () {
       *     // when createPayment resolves, it is automatically passed to the PayPal JS SDK
       *     return paypalCheckoutInstance.createPayment({
       *       flow: 'checkout',
       *       amount: '10.00',
       *       currency: 'USD',
       *       intent: 'capture' // this value must either be `capture` or match the intent passed into the PayPal SDK intent query parameter
       *     });
       *   },
       *   // Add other options, e.g. onApproved, onCancel, onError
       * }).render('#paypal-button');
       *
       * @example
       * // shippingOptions are passed to createPayment. You can review the result from onAuthorize to determine which shipping option id was selected.
       * ```javascript
       * braintree.client.create({
       *   authorization: 'authorization'
       * }).then(function (clientInstance) {
       *   return braintree.paypalCheckout.create({
       *     client: clientInstance
       *   });
       * }).then(function (paypalCheckoutInstance) {
       *   return paypal.Button.render({
       *     env: 'production'
       *
       *     payment: function () {
       *       return paypalCheckoutInstance.createPayment({
       *         flow: 'checkout',
       *         amount: '10.00',
       *         currency: 'USD',
       *         shippingOptions: [
       *           {
       *             id: 'UUID-9',
       *             type: 'PICKUP',
       *             label: 'Store Location Five',
       *             selected: true,
       *             amount: {
       *               value: '1.00',
       *               currency: 'USD'
       *             }
       *           },
       *           {
       *             id: 'shipping-speed-fast',
       *             type: 'SHIPPING',
       *             label: 'Fast Shipping',
       *             selected: false,
       *             amount: {
       *               value: '1.00',
       *               currency: 'USD'
       *             }
       *           },
       *           {
       *             id: 'shipping-speed-slow',
       *             type: 'SHIPPING',
       *             label: 'Slow Shipping',
       *             selected: false,
       *             amount: {
       *               value: '1.00',
       *               currency: 'USD'
       *             }
       *           }
       *         ]
       *       });
       *     },
       *
       *     onAuthorize: function (data, actions) {
       *       return paypalCheckoutInstance.tokenizePayment(data).then(function (payload) {
       *         // Submit payload.nonce to your server
       *       });
       *     }
       *   }, '#paypal-button');
       * }).catch(function (err) {
       *  console.error('Error!', err);
       * });
       * ```
       *
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      PayPalCheckout.prototype.createPayment = function (options) {
        if (!options || !constants.FLOW_ENDPOINTS.hasOwnProperty(options.flow)) {
          return Promise.reject(new BraintreeError(errors.PAYPAL_FLOW_OPTION_REQUIRED));
        }

        analytics.sendEvent(this._clientPromise, 'paypal-checkout.createPayment');
        return this._createPaymentResource(options).then(function (response) {
          var flowToken;

          if (options.flow === 'checkout') {
            flowToken = response.paymentResource.redirectUrl.match(/EC-\w+/)[0];
          } else {
            flowToken = response.agreementSetup.tokenId;
          }

          return flowToken;
        });
      };

      PayPalCheckout.prototype._createPaymentResource = function (options, config) {
        var self = this;
        var endpoint = 'paypal_hermes/' + constants.FLOW_ENDPOINTS[options.flow];
        delete this.intentFromCreatePayment;
        config = config || {};

        if (options.offerCredit === true) {
          analytics.sendEvent(this._clientPromise, 'paypal-checkout.credit.offered');
        }

        return this._clientPromise.then(function (client) {
          return client.request({
            endpoint: endpoint,
            method: 'post',
            data: self._formatPaymentResourceData(options, config)
          }).then(function (data) {
            self.intentFromCreatePayment = options.intent;
            return data;
          });
        }).catch(function (err) {
          var status;

          if (self._setupError) {
            return Promise.reject(self._setupError);
          }

          status = err.details && err.details.httpStatus;

          if (status === 422) {
            return Promise.reject(new BraintreeError({
              type: errors.PAYPAL_INVALID_PAYMENT_OPTION.type,
              code: errors.PAYPAL_INVALID_PAYMENT_OPTION.code,
              message: errors.PAYPAL_INVALID_PAYMENT_OPTION.message,
              details: {
                originalError: err
              }
            }));
          }

          return Promise.reject(convertToBraintreeError(err, {
            type: errors.PAYPAL_FLOW_FAILED.type,
            code: errors.PAYPAL_FLOW_FAILED.code,
            message: errors.PAYPAL_FLOW_FAILED.message
          }));
        });
      };
      /**
       * Initializes the PayPal checkout flow with a payment method nonce that represents a vaulted PayPal account.
       * When a {@link callback} is defined, the function returns undefined and invokes the callback with the id to be used with the PayPal JS SDK. Otherwise, it returns a Promise that resolves with the id.
       * @public
       * @ignore
       * @param {object} options These options are identical to the {@link PayPalCheckout#createPayment|options for creating a payment resource}, except for the following:
       * * `flow` cannot be set (will always be `'checkout'`)
       * * `amount`, `currency`, and `vaultInitiatedCheckoutPaymentMethodToken` are required instead of optional
       * * Additional configuration is available (listed below)
       * @param {boolean} [options.optOutOfModalBackdrop=false] By default, the webpage will darken and become unusable while the PayPal window is open. For full control of the UI, pass `true` for this option.
       * @param {callback} [callback] The second argument, <code>payload</code>, is a {@link PayPalCheckout~tokenizePayload|tokenizePayload}. If no callback is provided, the promise resolves with a {@link PayPalCheckout~tokenizePayload|tokenizePayload}.
       * @example
       * paypalCheckoutInstance.startVaultInitiatedCheckout({
       *   vaultInitiatedCheckoutPaymentMethodToken: 'nonce-that-represents-a-vaulted-paypal-account',
       *   amount: '10.00',
       *   currency: 'USD'
       * }).then(function (payload) {
       *   // send payload.nonce to your server
       * }).catch(function (err) {
       *   if (err.code === 'PAYPAL_POPUP_CLOSED') {
       *     // indicates that customer canceled by
       *     // manually closing the PayPal popup
       *   }
       *
       *   // handle other errors
       * });
       *
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      PayPalCheckout.prototype.startVaultInitiatedCheckout = function (options) {
        var missingRequiredParam;
        var self = this;

        if (this._vaultInitiatedCheckoutInProgress) {
          analytics.sendEvent(this._clientPromise, 'paypal-checkout.startVaultInitiatedCheckout.error.already-in-progress');
          return Promise.reject(new BraintreeError(errors.PAYPAL_START_VAULT_INITIATED_CHECKOUT_IN_PROGRESS));
        }

        REQUIRED_PARAMS_FOR_START_VAULT_INITIATED_CHECKOUT.forEach(function (param) {
          if (!options.hasOwnProperty(param)) {
            missingRequiredParam = param;
          }
        });

        if (missingRequiredParam) {
          return Promise.reject(new BraintreeError({
            type: errors.PAYPAL_START_VAULT_INITIATED_CHECKOUT_PARAM_REQUIRED.type,
            code: errors.PAYPAL_START_VAULT_INITIATED_CHECKOUT_PARAM_REQUIRED.code,
            message: 'Required param ' + missingRequiredParam + ' is missing.'
          }));
        }

        this._vaultInitiatedCheckoutInProgress = true;

        this._addModalBackdrop(options);

        options = assign({}, options, {
          flow: 'checkout'
        });
        analytics.sendEvent(this._clientPromise, 'paypal-checkout.startVaultInitiatedCheckout.started');
        return this._waitForVaultInitiatedCheckoutDependencies().then(function () {
          var frameCommunicationPromise = new ExtendedPromise();

          var startVaultInitiatedCheckoutPromise = self._createPaymentResource(options, {
            returnUrl: self._constructVaultCheckutUrl('redirect-frame'),
            cancelUrl: self._constructVaultCheckutUrl('cancel-frame')
          }).then(function (response) {
            var redirectUrl = response.paymentResource.redirectUrl;

            self._frameService.redirect(redirectUrl);

            return frameCommunicationPromise;
          });

          self._frameService.open({}, self._createFrameServiceCallback(frameCommunicationPromise));

          return startVaultInitiatedCheckoutPromise;
        }).catch(function (err) {
          self._vaultInitiatedCheckoutInProgress = false;

          self._removeModalBackdrop();

          if (err.code === 'FRAME_SERVICE_FRAME_CLOSED') {
            analytics.sendEvent(self._clientPromise, 'paypal-checkout.startVaultInitiatedCheckout.canceled.by-customer');
            return Promise.reject(new BraintreeError(errors.PAYPAL_START_VAULT_INITIATED_CHECKOUT_CANCELED));
          }

          if (self._frameService) {
            self._frameService.close();
          }

          if (err.code && err.code.indexOf('FRAME_SERVICE_FRAME_OPEN_FAILED') > -1) {
            analytics.sendEvent(self._clientPromise, 'paypal-checkout.startVaultInitiatedCheckout.failed.popup-not-opened');
            return Promise.reject(new BraintreeError({
              code: errors.PAYPAL_START_VAULT_INITIATED_CHECKOUT_POPUP_OPEN_FAILED.code,
              type: errors.PAYPAL_START_VAULT_INITIATED_CHECKOUT_POPUP_OPEN_FAILED.type,
              message: errors.PAYPAL_START_VAULT_INITIATED_CHECKOUT_POPUP_OPEN_FAILED.message,
              details: {
                originalError: err
              }
            }));
          }

          return Promise.reject(err);
        }).then(function (response) {
          self._frameService.close();

          self._vaultInitiatedCheckoutInProgress = false;

          self._removeModalBackdrop();

          analytics.sendEvent(self._clientPromise, 'paypal-checkout.startVaultInitiatedCheckout.succeeded');
          return Promise.resolve(response);
        });
      };

      PayPalCheckout.prototype._addModalBackdrop = function (options) {
        if (options.optOutOfModalBackdrop) {
          return;
        }

        if (!this._modalBackdrop) {
          this._modalBackdrop = document.createElement('div');

          this._modalBackdrop.setAttribute('data-braintree-paypal-vault-initiated-checkout-modal', true);

          this._modalBackdrop.style.position = 'fixed';
          this._modalBackdrop.style.top = 0;
          this._modalBackdrop.style.bottom = 0;
          this._modalBackdrop.style.left = 0;
          this._modalBackdrop.style.right = 0;
          this._modalBackdrop.style.zIndex = 9999;
          this._modalBackdrop.style.background = 'black';
          this._modalBackdrop.style.opacity = '0.7';

          this._modalBackdrop.addEventListener('click', function () {
            this.focusVaultInitiatedCheckoutWindow();
          }.bind(this));
        }

        document.body.appendChild(this._modalBackdrop);
      };

      PayPalCheckout.prototype._removeModalBackdrop = function () {
        if (!(this._modalBackdrop && this._modalBackdrop.parentNode)) {
          return;
        }

        this._modalBackdrop.parentNode.removeChild(this._modalBackdrop);
      };
      /**
       * Closes the PayPal window if it is opened via `startVaultInitiatedCheckout`.
       * @public
       * @ignore
       * @param {callback} [callback] Gets called when window is closed.
       * @example
       * paypalCheckoutInstance.closeVaultInitiatedCheckoutWindow();
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      PayPalCheckout.prototype.closeVaultInitiatedCheckoutWindow = function () {
        if (this._vaultInitiatedCheckoutInProgress) {
          analytics.sendEvent(this._clientPromise, 'paypal-checkout.startVaultInitiatedCheckout.canceled.by-merchant');
        }

        return this._waitForVaultInitiatedCheckoutDependencies().then(function () {
          this._frameService.close();
        }.bind(this));
      };
      /**
       * Focuses the PayPal window if it is opened via `startVaultInitiatedCheckout`.
       * @public
       * @ignore
       * @param {callback} [callback] Gets called when window is focused.
       * @example
       * paypalCheckoutInstance.focusVaultInitiatedCheckoutWindow();
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      PayPalCheckout.prototype.focusVaultInitiatedCheckoutWindow = function () {
        return this._waitForVaultInitiatedCheckoutDependencies().then(function () {
          this._frameService.focus();
        }.bind(this));
      };

      PayPalCheckout.prototype._createFrameServiceCallback = function (frameCommunicationPromise) {
        var self = this; // TODO when a merchant integrates an iOS or Android integration
        // with a webview using the web SDK, we will have to add popupbridge
        // support

        return function (err, payload) {
          if (err) {
            frameCommunicationPromise.reject(err);
          } else if (payload) {
            self._frameService.redirect(self._loadingFrameUrl);

            self.tokenizePayment({
              paymentToken: payload.token,
              payerID: payload.PayerID,
              paymentID: payload.paymentId
            }).then(function (res) {
              frameCommunicationPromise.resolve(res);
            }).catch(function (tokenizationError) {
              frameCommunicationPromise.reject(tokenizationError);
            });
          }
        };
      };

      PayPalCheckout.prototype._waitForVaultInitiatedCheckoutDependencies = function () {
        var self = this;
        return this._clientPromise.then(function () {
          return self._frameServicePromise;
        });
      };

      PayPalCheckout.prototype._constructVaultCheckutUrl = function (frameName) {
        var serviceId = this._frameService._serviceId;
        return this._assetsUrl + '/html/' + frameName + useMin(this._isDebug) + '.html?channel=' + serviceId;
      };
      /**
       * Tokenizes the authorize data from the PayPal JS SDK when completing a buyer approval flow.
       * When a {@link callback} is defined, invokes the callback with {@link PayPalCheckout~tokenizePayload|tokenizePayload} and returns undefined. Otherwise, returns a Promise that resolves with a {@link PayPalCheckout~tokenizePayload|tokenizePayload}.
       * @public
       * @param {object} tokenizeOptions Tokens and IDs required to tokenize the payment.
       * @param {string} tokenizeOptions.payerId Payer ID returned by PayPal `onApproved` callback.
       * @param {string} [tokenizeOptions.paymentId] Payment ID returned by PayPal `onApproved` callback.
       * @param {string} [tokenizeOptions.billingToken] Billing Token returned by PayPal `onApproved` callback.
       * @param {boolean} [tokenizeOptions.vault=true] Whether or not to vault the resulting PayPal account (if using a client token generated with a customer id and the vault flow).
       * @param {callback} [callback] The second argument, <code>payload</code>, is a {@link PayPalCheckout~tokenizePayload|tokenizePayload}. If no callback is provided, the promise resolves with a {@link PayPalCheckout~tokenizePayload|tokenizePayload}.
       * @example <caption>Opt out of auto-vaulting behavior</caption>
       * // create the paypalCheckoutInstance with a client token generated with a customer id
       * paypal.Buttons({
       *   createBillingAgreement: function () {
       *     return paypalCheckoutInstance.createPayment({
       *       flow: 'vault'
       *       // your other createPayment options here
       *     });
       *   },
       *   onApproved: function (data) {
       *     data.vault = false;
       *
       *     return paypalCheckoutInstance.tokenizePayment(data);
       *   },
       *   // Add other options, e.g. onCancel, onError
       * }).render('#paypal-button');
       *
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      PayPalCheckout.prototype.tokenizePayment = function (tokenizeOptions) {
        var self = this;
        var shouldVault = true;
        var payload;
        var options = {
          flow: tokenizeOptions.billingToken && !tokenizeOptions.paymentID ? 'vault' : 'checkout',
          intent: tokenizeOptions.intent || this.intentFromCreatePayment
        };
        var params = {
          // The paymentToken provided by the PayPal JS SDK is the EC Token
          ecToken: tokenizeOptions.paymentToken,
          billingToken: tokenizeOptions.billingToken,
          payerId: tokenizeOptions.payerID,
          paymentId: tokenizeOptions.paymentID,
          shippingOptionsId: tokenizeOptions.shippingOptionsId
        };

        if (tokenizeOptions.hasOwnProperty('vault')) {
          shouldVault = tokenizeOptions.vault;
        }

        options.vault = shouldVault;
        analytics.sendEvent(this._clientPromise, 'paypal-checkout.tokenization.started');
        return this._clientPromise.then(function (client) {
          return client.request({
            endpoint: 'payment_methods/paypal_accounts',
            method: 'post',
            data: self._formatTokenizeData(options, params)
          });
        }).then(function (response) {
          payload = self._formatTokenizePayload(response);
          analytics.sendEvent(self._clientPromise, 'paypal-checkout.tokenization.success');

          if (payload.creditFinancingOffered) {
            analytics.sendEvent(self._clientPromise, 'paypal-checkout.credit.accepted');
          }

          return payload;
        }).catch(function (err) {
          if (self._setupError) {
            return Promise.reject(self._setupError);
          }

          analytics.sendEvent(self._clientPromise, 'paypal-checkout.tokenization.failed');
          return Promise.reject(convertToBraintreeError(err, {
            type: errors.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.type,
            code: errors.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.code,
            message: errors.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.message
          }));
        });
      };
      /**
       * Resolves with the PayPal client id to be used when loading the PayPal SDK.
       * @public
       * @param {callback} [callback] The second argument, <code>id</code>, is a the PayPal client id. If no callback is provided, the promise resolves with the PayPal client id.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example
       * paypalCheckoutInstance.getClientId().then(function (id) {
       *  var script = document.createElement('script');
       *
       *  script.src = 'https://www.paypal.com/sdk/js?client-id=' + id;
       *  script.onload = function () {
       *    // setup the PayPal SDK
       *  };
       *
       *  document.body.appendChild(script);
       * });
       */


      PayPalCheckout.prototype.getClientId = function () {
        return this._clientPromise.then(function (client) {
          return client.getConfiguration().gatewayConfiguration.paypal.clientId;
        });
      };
      /**
       * Resolves when the PayPal SDK has been successfully loaded onto the page.
       * @public
       * @param {object} [options] A configuration object to modify the query params and data-attributes on the PayPal SDK. A subset of the parameters are listed below. For a full list of query params, see the [PayPal docs](https://developer.paypal.com/docs/checkout/reference/customize-sdk/?mark=query#query-parameters).
       * @param {string} [options.client-id] By default, this will be the client id associated with the authorization used to create the Braintree component. When used in conjunction with passing `authorization` when creating the PayPal Checkout component, you can speed up the loading of the PayPal SDK.
       * @param {string} [options.intent="authorize"] By default, the PayPal SDK defaults to an intent of `capture`. Since the default intent when calling {@link PayPalCheckout#createPayment|`createPayment`} is `authorize`, the PayPal SDK will be loaded with `intent=authorize`. If you wish to use a different intent when calling {@link PayPalCheckout#createPayment|`createPayment`}, make sure it matches here. If `sale` is used, it will be converted to `capture` for the PayPal SDK. If the `vault: true` param is used, `tokenize` will be passed as the default intent.
       * @param {string} [options.locale=en_US] Use this option to change the language, links, and terminology used in the PayPal flow. This locale will be used unless the buyer has set a preferred locale for their account. If an unsupported locale is supplied, a fallback locale (determined by buyer preference or browser data) will be used and no error will be thrown.
       *
       * Supported locales are:
       * `da_DK`,
       * `de_DE`,
       * `en_AU`,
       * `en_GB`,
       * `en_US`,
       * `es_ES`,
       * `fr_CA`,
       * `fr_FR`,
       * `id_ID`,
       * `it_IT`,
       * `ja_JP`,
       * `ko_KR`,
       * `nl_NL`,
       * `no_NO`,
       * `pl_PL`,
       * `pt_BR`,
       * `pt_PT`,
       * `ru_RU`,
       * `sv_SE`,
       * `th_TH`,
       * `zh_CN`,
       * `zh_HK`,
       * and `zh_TW`.
       *
       * @param {string} [options.currency="USD"] If a currency is passed in {@link PayPalCheckout#createPayment|`createPayment`}, it must match the currency passed here.
       * @param {boolean} [options.vault] Must be `true` when using `flow: vault` in {@link PayPalCheckout#createPayment|`createPayment`}.
       * @param {string} [options.components=buttons] By default, the Braintree SDK will only load the PayPal smart buttons component. If you would like to load just the [messages component](https://developer.paypal.com/docs/business/checkout/add-capabilities/credit-messaging/), pass `messages`. If you would like to load both, pass `buttons,messages`
       * @param {object} [options.dataAttributes] The data attributes to apply to the script. Any data attribute can be passed. A subset of the parameters are listed below. For a full list of data attributes, see the [PayPal docs](https://developer.paypal.com/docs/checkout/reference/customize-sdk/#script-parameters).
       * @param {string} [options.dataAttributes.client-token] The client token to use in the script. (usually not needed)
       * @param {string} [options.dataAttributes.csp-nonce] See the [PayPal docs about content security nonces](https://developer.paypal.com/docs/checkout/reference/customize-sdk/#csp-nonce).
       * @param {callback} [callback] Called when the PayPal SDK has been loaded onto the page. The second argument is the PayPal Checkout instance. If no callback is provided, the promise resolves with the PayPal Checkout instance when the PayPal SDK has been loaded onto the page.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example <caption>Without options</caption>
       * paypalCheckoutInstance.loadPayPalSDK().then(function () {
       *   // window.paypal.Buttons is now available to use
       * });
       * @example <caption>With options</caption>
       * paypalCheckoutInstance.loadPayPalSDK({
       *   'client-id': 'PayPal Client Id', // Can speed up rendering time to hardcode this value
       *
       *   intent: 'capture', // Make sure this value matches the value in createPayment
       *   currency: 'USD', // Make sure this value matches the value in createPayment
       * }).then(function () {
       *   // window.paypal.Buttons is now available to use
       * });
       * @example <caption>With Vaulting</caption>
       * paypalCheckoutInstance.loadPayPalSDK({
       *   vault: true
       * }).then(function () {
       *   // window.paypal.Buttons is now available to use
       * });
       */


      PayPalCheckout.prototype.loadPayPalSDK = function (options) {
        var idPromise, src;
        var loadPromise = new ExtendedPromise();
        var dataAttributes = options && options.dataAttributes || {};
        var userIdToken = dataAttributes['user-id-token'] || dataAttributes['data-user-id-token'];

        if (!userIdToken) {
          userIdToken = this._authorizationInformation.fingerprint && this._authorizationInformation.fingerprint.split('?')[0];
        }

        this._paypalScript = document.createElement('script'); // NEXT_MAJOR_VERSION
        // this options object should have 2 properties:
        // * queryParams
        // * dataAttributes
        // should make organizing this better than squashing
        // all the query params at the top level and extracting
        // the data attributes

        options = assign({}, {
          components: 'buttons'
        }, options);
        delete options.dataAttributes; // NEXT_MAJOR_VERSION if merchant passes an explicit intent,
        // currency, amount, etc, save those for use in createPayment
        // if no explicit param of that type is passed in when calling
        // createPayment to reduce the number of items that need to be
        // duplicated here and in createPayment

        if (options.vault) {
          options.intent = options.intent || 'tokenize';
        } else {
          options.intent = options.intent || 'authorize';
          options.currency = options.currency || 'USD';
        }

        src = 'https://www.paypal.com/sdk/js?';

        this._paypalScript.onload = function () {
          loadPromise.resolve();
        };

        Object.keys(dataAttributes).forEach(function (attribute) {
          this._paypalScript.setAttribute('data-' + attribute.replace(/^data\-/, ''), dataAttributes[attribute]);
        }.bind(this));

        if (options['client-id']) {
          idPromise = Promise.resolve(options['client-id']);
        } else {
          idPromise = this.getClientId();
        }

        idPromise.then(function (id) {
          options['client-id'] = id;

          if (this._autoSetDataUserIdToken && userIdToken) {
            this._paypalScript.setAttribute('data-user-id-token', userIdToken); // preloading improves the rendering time of the PayPal button


            this._attachPreloadPixel({
              id: id,
              userIdToken: userIdToken,
              amount: dataAttributes.amount,
              currency: options.currency,
              merchantId: options['merchant-id']
            });
          }

          this._paypalScript.src = querystring.queryify(src, options);
          document.head.insertBefore(this._paypalScript, document.head.firstElementChild);
        }.bind(this));
        return loadPromise.then(function () {
          return this;
        }.bind(this));
      };

      PayPalCheckout.prototype._attachPreloadPixel = function (options) {
        var request;
        var id = options.id;
        var userIdToken = options.userIdToken;
        var env = this._authorizationInformation.environment;
        var subdomain = env === 'production' ? '' : 'sandbox.';
        var url = PAYPAL_SDK_PRELOAD_URL.replace('{ENV}', subdomain);
        var preloadOptions = {
          'client-id': id,
          'user-id-token': userIdToken
        };

        if (options.amount) {
          preloadOptions.amount = options.amount;
        }

        if (options.currency) {
          preloadOptions.currency = options.currency;
        }

        if (options.merchantId) {
          preloadOptions['merchant-id'] = options.merchantId;
        }

        request = new XMLHttpRequest();
        request.open('GET', querystring.queryify(url, preloadOptions));
        request.send();
      };

      PayPalCheckout.prototype._formatPaymentResourceData = function (options, config) {
        var key;
        var gatewayConfiguration = this._configuration.gatewayConfiguration; // NEXT_MAJOR_VERSION default value for intent in PayPal SDK is capture
        // but our integrations default value is authorize. Default this to capture
        // in the next major version.

        var intent = options.intent;
        var paymentResource = {
          // returnUrl and cancelUrl are required in hermes create_payment_resource route
          // but are not used by the PayPal sdk, except to redirect to an error page
          returnUrl: config.returnUrl || 'https://www.paypal.com/checkoutnow/error',
          cancelUrl: config.cancelUrl || 'https://www.paypal.com/checkoutnow/error',
          offerPaypalCredit: options.offerCredit === true,
          merchantAccountId: this._merchantAccountId,
          experienceProfile: {
            brandName: options.displayName || gatewayConfiguration.paypal.displayName,
            localeCode: options.locale,
            noShipping: (!options.enableShippingAddress).toString(),
            addressOverride: options.shippingAddressEditable === false,
            landingPageType: options.landingPageType
          },
          shippingOptions: options.shippingOptions
        };

        if (options.flow === 'checkout') {
          paymentResource.amount = options.amount;
          paymentResource.currencyIsoCode = options.currency;
          paymentResource.requestBillingAgreement = options.requestBillingAgreement;

          if (intent) {
            // 'sale' has been changed to 'capture' in PayPal's backend, but
            // we use an old version with 'sale'. We provide capture as an alias
            // to match the PayPal SDK
            if (intent === 'capture') {
              intent = 'sale';
            }

            paymentResource.intent = intent;
          }

          if (options.hasOwnProperty('lineItems')) {
            paymentResource.lineItems = options.lineItems;
          }

          if (options.hasOwnProperty('vaultInitiatedCheckoutPaymentMethodToken')) {
            paymentResource.vaultInitiatedCheckoutPaymentMethodToken = options.vaultInitiatedCheckoutPaymentMethodToken;
          }

          if (options.hasOwnProperty('shippingOptions')) {
            paymentResource.shippingOptions = options.shippingOptions;
          }

          for (key in options.shippingAddressOverride) {
            if (options.shippingAddressOverride.hasOwnProperty(key)) {
              paymentResource[key] = options.shippingAddressOverride[key];
            }
          }

          if (options.hasOwnProperty('billingAgreementDetails')) {
            paymentResource.billingAgreementDetails = options.billingAgreementDetails;
          }
        } else {
          paymentResource.shippingAddress = options.shippingAddressOverride;

          if (options.billingAgreementDescription) {
            paymentResource.description = options.billingAgreementDescription;
          }
        } // this needs to be set outside of the block where add it to the
        // payment request so that a follow up tokenization call can use it,
        // but if a second create payment resource call is made without
        // the correlation id, we want to reset it to undefined so that the
        // tokenization call does not use a stale correlation id


        this._riskCorrelationId = options.riskCorrelationId;

        if (options.riskCorrelationId) {
          paymentResource.correlationId = this._riskCorrelationId;
        }

        return paymentResource;
      };

      PayPalCheckout.prototype._formatTokenizeData = function (options, params) {
        var clientConfiguration = this._configuration;
        var gatewayConfiguration = clientConfiguration.gatewayConfiguration;
        var isTokenizationKey = clientConfiguration.authorizationType === 'TOKENIZATION_KEY';
        var isVaultFlow = options.flow === 'vault';
        var correlationId = this._riskCorrelationId || params.billingToken || params.ecToken;
        var data = {
          paypalAccount: {
            correlationId: correlationId,
            options: {
              validate: isVaultFlow && !isTokenizationKey && options.vault
            }
          }
        };

        if (isVaultFlow) {
          data.paypalAccount.billingAgreementToken = params.billingToken;
        } else {
          data.paypalAccount.paymentToken = params.paymentId;
          data.paypalAccount.payerId = params.payerId;
          data.paypalAccount.unilateral = gatewayConfiguration.paypal.unvettedMerchant;

          if (options.intent) {
            data.paypalAccount.intent = options.intent;
          }
        }

        if (this._merchantAccountId) {
          data.merchantAccountId = this._merchantAccountId;
        }

        return data;
      };

      PayPalCheckout.prototype._formatTokenizePayload = function (response) {
        var payload;
        var account = {};

        if (response.paypalAccounts) {
          account = response.paypalAccounts[0];
        }

        payload = {
          nonce: account.nonce,
          details: {},
          type: account.type
        };

        if (account.details && account.details.payerInfo) {
          payload.details = account.details.payerInfo;
        }

        if (account.details && account.details.creditFinancingOffered) {
          payload.creditFinancingOffered = account.details.creditFinancingOffered;
        }

        if (account.details && account.details.shippingOptionId) {
          payload.shippingOptionId = account.details.shippingOptionId;
        }

        if (account.details && account.details.cobrandedCardLabel) {
          payload.cobrandedCardLabel = account.details.cobrandedCardLabel;
        }

        return payload;
      };
      /**
       * Cleanly tear down anything set up by {@link module:braintree-web/paypal-checkout.create|create}.
       * @public
       * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.
       * @example
       * paypalCheckoutInstance.teardown();
       * @example <caption>With callback</caption>
       * paypalCheckoutInstance.teardown(function () {
       *   // teardown is complete
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      PayPalCheckout.prototype.teardown = function () {
        var self = this;
        convertMethodsToError(this, methods(PayPalCheckout.prototype));

        if (this._paypalScript && this._paypalScript.parentNode) {
          this._paypalScript.parentNode.removeChild(this._paypalScript);
        }

        return this._frameServicePromise.catch(function () {// no need to error in teardown for an error setting up the frame service
        }).then(function () {
          if (!self._frameService) {
            return Promise.resolve();
          }

          return self._frameService.teardown();
        });
      };

      module.exports = wrapPromise.wrapPrototype(PayPalCheckout);
    }, {
      "../lib/analytics": 93,
      "../lib/assign": 95,
      "../lib/braintree-error": 98,
      "../lib/constants": 99,
      "../lib/convert-methods-to-error": 100,
      "../lib/convert-to-braintree-error": 101,
      "../lib/create-assets-url": 102,
      "../lib/create-authorization-data": 103,
      "../lib/create-deferred-client": 104,
      "../lib/frame-service/external": 112,
      "../lib/methods": 128,
      "../lib/promise": 130,
      "../lib/querystring": 131,
      "../lib/use-min": 133,
      "../paypal/shared/constants": 138,
      "./errors": 135,
      "@braintree/extended-promise": 41,
      "@braintree/wrap-promise": 50
    }],
    138: [function (require, module, exports) {
      'use strict';

      module.exports = {
        LANDING_FRAME_NAME: 'braintreepaypallanding',
        FLOW_ENDPOINTS: {
          checkout: 'create_payment_resource',
          vault: 'setup_billing_agreement'
        }
      };
    }, {}],
    139: [function (require, module, exports) {
      'use strict';

      var assign = require('../../../lib/assign').assign;

      var analytics = require('../../../lib/analytics');

      var BraintreeError = require('../../../lib/braintree-error');

      var Promise = require('../../../lib/promise');

      var isVerifiedDomain = require('../../../lib/is-verified-domain');

      var ExtendedPromise = require('@braintree/extended-promise');

      var EventEmitter = require('@braintree/event-emitter');

      var errors = require('../../shared/errors');

      var iFramer = require('@braintree/iframer');

      var Bus = require('framebus');

      var constants = require('../../shared/constants');

      var uuid = require('@braintree/uuid');

      var events = require('../../shared/events');

      var useMin = require('../../../lib/use-min');

      var BUS_CONFIGURATION_REQUEST_EVENT = require('../../../lib/constants').BUS_CONFIGURATION_REQUEST_EVENT;

      var VERSION = "3.83.0";
      var IFRAME_HEIGHT = 400;
      var IFRAME_WIDTH = 400;

      function BaseFramework(options) {
        EventEmitter.call(this);
        this._client = options.client;
        this._createPromise = options.createPromise;
        this._createOptions = options;

        if (this._client) {
          this._isDebug = this._client.getConfiguration().isDebug;
          this._assetsUrl = this._client.getConfiguration().gatewayConfiguration.assetsUrl;
        } else {
          this._isDebug = Boolean(options.isDebug);
          this._assetsUrl = options.assetsUrl;
        }

        this._assetsUrl = this._assetsUrl + '/web/' + VERSION;
      }

      EventEmitter.createChild(BaseFramework);

      BaseFramework.prototype._waitForClient = function () {
        if (this._client) {
          return Promise.resolve();
        }

        return this._createPromise.then(function (client) {
          this._client = client;
        }.bind(this));
      };

      BaseFramework.prototype.setUpEventListeners = function () {
        throw new BraintreeError(errors.THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED);
      };

      BaseFramework.prototype.verifyCard = function (options, privateOptions) {
        var formattedOptions, error;
        var self = this;
        privateOptions = privateOptions || {};
        error = this._checkForVerifyCardError(options, privateOptions);

        if (error) {
          return Promise.reject(error);
        }

        this._verifyCardInProgress = true;
        formattedOptions = this._formatVerifyCardOptions(options);
        return this._formatLookupData(formattedOptions).then(function (data) {
          analytics.sendEvent(self._createPromise, 'three-d-secure.verification-flow.started');
          return self._performLookup(formattedOptions.nonce, data);
        }).then(function (response) {
          analytics.sendEvent(self._createPromise, 'three-d-secure.verification-flow.3ds-version.' + response.lookup.threeDSecureVersion);
          return self._onLookupComplete(response, formattedOptions);
        }).then(function (response) {
          return self.initializeChallengeWithLookupResponse(response, formattedOptions);
        }).then(function (payload) {
          self._resetVerificationState();

          analytics.sendEvent(self._createPromise, 'three-d-secure.verification-flow.completed');
          return payload;
        }).catch(function (err) {
          self._resetVerificationState();

          analytics.sendEvent(self._createPromise, 'three-d-secure.verification-flow.failed');
          return Promise.reject(err);
        });
      };

      BaseFramework.prototype._checkForFrameworkSpecificVerifyCardErrors = function () {
        throw new BraintreeError(errors.THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED);
      };

      BaseFramework.prototype._presentChallenge = function () {
        throw new BraintreeError(errors.THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED);
      };

      BaseFramework.prototype.prepareLookup = function () {
        throw new BraintreeError(errors.THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED);
      };

      BaseFramework.prototype._resetVerificationState = function () {
        this._verifyCardInProgress = false;
        this._verifyCardPromisePlus = null;
      };

      BaseFramework.prototype._performLookup = function (nonce, data) {
        var self = this;
        var url = 'payment_methods/' + nonce + '/three_d_secure/lookup';
        return this._waitForClient().then(function () {
          return self._client.request({
            endpoint: url,
            method: 'post',
            data: data
          }).catch(function (err) {
            var status = err && err.details && err.details.httpStatus;
            var analyticsMessage = 'three-d-secure.verification-flow.lookup-failed';
            var lookupError;

            if (status === 404) {
              lookupError = errors.THREEDS_LOOKUP_TOKENIZED_CARD_NOT_FOUND_ERROR;
              analyticsMessage += '.404';
            } else if (status === 422) {
              lookupError = errors.THREEDS_LOOKUP_VALIDATION_ERROR;
              analyticsMessage += '.422';
            } else {
              lookupError = errors.THREEDS_LOOKUP_ERROR;
            }

            analytics.sendEvent(self._createPromise, analyticsMessage);
            return Promise.reject(new BraintreeError({
              type: lookupError.type,
              code: lookupError.code,
              message: lookupError.message,
              details: {
                originalError: err
              }
            }));
          });
        });
      };

      BaseFramework.prototype._checkForVerifyCardError = function (options, privateOptions) {
        var errorOption;

        if (this._verifyCardInProgress === true) {
          return new BraintreeError(errors.THREEDS_AUTHENTICATION_IN_PROGRESS);
        } else if (!options.nonce) {
          errorOption = 'a nonce';
        } else if (!options.amount) {
          errorOption = 'an amount';
        }

        if (!errorOption) {
          errorOption = this._checkForFrameworkSpecificVerifyCardErrors(options, privateOptions);
        }

        if (errorOption) {
          return new BraintreeError({
            type: errors.THREEDS_MISSING_VERIFY_CARD_OPTION.type,
            code: errors.THREEDS_MISSING_VERIFY_CARD_OPTION.code,
            message: 'verifyCard options must include ' + errorOption + '.'
          });
        }

        return null;
      };

      BaseFramework.prototype.initializeChallengeWithLookupResponse = function (lookupResponse, options) {
        var self = this;
        options = options || {};
        this._lookupPaymentMethod = lookupResponse.paymentMethod; // sets this in the case that initializeChallengeWithLookupResponse is
        // called as a standalone method from a server side lookup. In a normal
        // verifyCard flow, this promise will already exist

        self._verifyCardPromisePlus = self._verifyCardPromisePlus || new ExtendedPromise();

        self._handleLookupResponse(lookupResponse, options);

        return self._verifyCardPromisePlus.then(function (payload) {
          analytics.sendEvent(self._createPromise, 'three-d-secure.verification-flow.liability-shifted.' + String(payload.liabilityShifted));
          analytics.sendEvent(self._createPromise, 'three-d-secure.verification-flow.liability-shift-possible.' + String(payload.liabilityShiftPossible));
          return payload;
        });
      };

      BaseFramework.prototype._handleLookupResponse = function (lookupResponse, options) {
        var challengeShouldBePresented = Boolean(lookupResponse.lookup && lookupResponse.lookup.acsUrl);
        var details;
        analytics.sendEvent(this._createPromise, 'three-d-secure.verification-flow.challenge-presented.' + String(challengeShouldBePresented));

        if (challengeShouldBePresented) {
          this._presentChallenge(lookupResponse, options);
        } else {
          details = this._formatAuthResponse(lookupResponse.paymentMethod, lookupResponse.threeDSecureInfo);
          details.verificationDetails = lookupResponse.threeDSecureInfo;

          this._verifyCardPromisePlus.resolve(details);
        }
      };

      BaseFramework.prototype._onLookupComplete = function (response) {
        this._lookupPaymentMethod = response.paymentMethod;
        this._verifyCardPromisePlus = new ExtendedPromise();
        return Promise.resolve(response);
      };

      BaseFramework.prototype._formatAuthResponse = function (paymentMethod, threeDSecureInfo) {
        return {
          nonce: paymentMethod.nonce,
          type: paymentMethod.type,
          binData: paymentMethod.binData,
          details: paymentMethod.details,
          description: paymentMethod.description && paymentMethod.description.replace(/\+/g, ' '),
          liabilityShifted: threeDSecureInfo && threeDSecureInfo.liabilityShifted,
          liabilityShiftPossible: threeDSecureInfo && threeDSecureInfo.liabilityShiftPossible,
          threeDSecureInfo: paymentMethod.threeDSecureInfo
        };
      };

      BaseFramework.prototype._formatVerifyCardOptions = function (options) {
        return assign({}, options);
      };

      BaseFramework.prototype._formatLookupData = function (options) {
        var data = {
          amount: options.amount
        };
        return Promise.resolve(data);
      };

      BaseFramework.prototype._handleV1AuthResponse = function (data) {
        var authResponse = JSON.parse(data.auth_response);

        if (authResponse.success) {
          this._verifyCardPromisePlus.resolve(this._formatAuthResponse(authResponse.paymentMethod, authResponse.threeDSecureInfo));
        } else if (authResponse.threeDSecureInfo && authResponse.threeDSecureInfo.liabilityShiftPossible) {
          this._verifyCardPromisePlus.resolve(this._formatAuthResponse(this._lookupPaymentMethod, authResponse.threeDSecureInfo));
        } else {
          this._verifyCardPromisePlus.reject(new BraintreeError({
            type: BraintreeError.types.UNKNOWN,
            code: 'UNKNOWN_AUTH_RESPONSE',
            message: authResponse.error.message
          }));
        }
      };

      BaseFramework.prototype.cancelVerifyCard = function () {
        var response, threeDSecureInfo;
        this._verifyCardInProgress = false;

        if (!this._lookupPaymentMethod) {
          return Promise.reject(new BraintreeError(errors.THREEDS_NO_VERIFICATION_PAYLOAD));
        }

        threeDSecureInfo = this._lookupPaymentMethod.threeDSecureInfo;
        response = assign({}, this._lookupPaymentMethod, {
          liabilityShiftPossible: threeDSecureInfo && threeDSecureInfo.liabilityShiftPossible,
          liabilityShifted: threeDSecureInfo && threeDSecureInfo.liabilityShifted,
          verificationDetails: threeDSecureInfo && threeDSecureInfo.verificationDetails
        });
        return Promise.resolve(response);
      };

      BaseFramework.prototype._setupV1Bus = function (options) {
        var parentURL = window.location.href.split('#')[0];
        var lookupResponse = options.lookupResponse;
        var channel = uuid();
        var bus = new Bus({
          channel: channel,
          verifyDomain: isVerifiedDomain
        });
        var authenticationCompleteBaseUrl = this._assetsUrl + '/html/three-d-secure-authentication-complete-frame.html?channel=' + encodeURIComponent(channel) + '&';
        bus.on(BUS_CONFIGURATION_REQUEST_EVENT, function (reply) {
          reply({
            acsUrl: lookupResponse.acsUrl,
            pareq: lookupResponse.pareq,
            termUrl: lookupResponse.termUrl + '&three_d_secure_version=' + VERSION + '&authentication_complete_base_url=' + encodeURIComponent(authenticationCompleteBaseUrl),
            md: lookupResponse.md,
            parentUrl: parentURL
          });
        });
        bus.on(events.AUTHENTICATION_COMPLETE, options.handleAuthResponse);
        return bus;
      };

      BaseFramework.prototype._setupV1Iframe = function (options) {
        var url = this._assetsUrl + '/html/three-d-secure-bank-frame' + useMin(this._isDebug) + '.html?showLoader=' + options.showLoader;
        var bankIframe = iFramer({
          src: url,
          height: IFRAME_HEIGHT,
          width: IFRAME_WIDTH,
          name: constants.LANDING_FRAME_NAME + '_' + this._v1Bus.channel,
          title: '3D Secure Authorization Frame'
        });
        return bankIframe;
      };

      BaseFramework.prototype._setupV1Elements = function (options) {
        this._v1Bus = this._setupV1Bus(options);
        this._v1Iframe = this._setupV1Iframe(options);
      };

      BaseFramework.prototype._teardownV1Elements = function () {
        if (this._v1Bus) {
          this._v1Bus.teardown();

          this._v1Bus = null;
        }

        if (this._v1Iframe && this._v1Iframe.parentNode) {
          this._v1Iframe.parentNode.removeChild(this._v1Iframe);

          this._v1Iframe = null;
        }

        if (this._onV1Keyup) {
          document.removeEventListener('keyup', this._onV1Keyup);
          this._onV1Keyup = null;
        }
      };

      BaseFramework.prototype.teardown = function () {
        analytics.sendEvent(this._createPromise, 'three-d-secure.teardown-completed');

        this._teardownV1Elements();

        return Promise.resolve();
      };

      module.exports = BaseFramework;
    }, {
      "../../../lib/analytics": 93,
      "../../../lib/assign": 95,
      "../../../lib/braintree-error": 98,
      "../../../lib/constants": 99,
      "../../../lib/is-verified-domain": 126,
      "../../../lib/promise": 130,
      "../../../lib/use-min": 133,
      "../../shared/constants": 148,
      "../../shared/errors": 149,
      "../../shared/events": 150,
      "@braintree/event-emitter": 40,
      "@braintree/extended-promise": 41,
      "@braintree/iframer": 42,
      "@braintree/uuid": 46,
      "framebus": 172
    }],
    140: [function (require, module, exports) {
      'use strict'; // NEXT_MAJOR_VERSION drop support for Bootstrap framework,
      // recomend using inline frame version and putting it in
      // the merchant's own bootstrap modal

      var SongbirdFramework = require('./songbird');

      function Bootstrap3ModalFramework(options) {
        SongbirdFramework.call(this, options);
      }

      Bootstrap3ModalFramework.prototype = Object.create(SongbirdFramework.prototype, {
        constructor: SongbirdFramework
      });

      Bootstrap3ModalFramework.prototype._createV1IframeModalElement = function (iframe) {
        var modal = document.createElement('div');
        modal.innerHTML = '<div class="modal fade in" tabindex="-1" role="dialog" aria-labelledby="CCAFrameModal-label" aria-hidden="true" style="display: block;">' + '<div class="modal-dialog" style="width:440px;z-index:999999;">' + '<div class="modal-content">' + '<div class="modal-body" data-braintree-v1-fallback-iframe-container>' + '<button type="button" data-braintree-v1-fallback-close-button class="close" data-dismiss="modal" aria-hidden="true">×</button>' + '</div>' + '</div>' + '</div>' + '<div data-braintree-v1-fallback-backdrop style="' + 'position: fixed;' + 'cursor: pointer;' + 'z-index: 999998;' + 'top: 0;' + 'left: 0;' + 'width: 100%;' + 'height: 100%;' + '"></div>' + '</div>';
        modal.querySelector('[data-braintree-v1-fallback-iframe-container]').appendChild(iframe);
        return modal;
      };

      Bootstrap3ModalFramework.prototype._createCardinalConfigurationOptions = function (setupOptions) {
        var options = SongbirdFramework.prototype._createCardinalConfigurationOptions.call(this, setupOptions);

        options.payment.framework = 'bootstrap3';
        return options;
      };

      module.exports = Bootstrap3ModalFramework;
    }, {
      "./songbird": 145
    }],
    141: [function (require, module, exports) {
      'use strict';

      var SongbirdFramework = require('./songbird');

      function CardinalModalFramework(options) {
        SongbirdFramework.call(this, options);
      }

      CardinalModalFramework.prototype = Object.create(SongbirdFramework.prototype, {
        constructor: SongbirdFramework
      });

      CardinalModalFramework.prototype._createV1IframeModalElement = function (iframe) {
        var modal = document.createElement('div');
        var addCloseButton = Boolean(this._createOptions && this._createOptions.cardinalSDKConfig && this._createOptions.cardinalSDKConfig.payment && this._createOptions.cardinalSDKConfig.payment.displayExitButton);
        modal.innerHTML = '<div style="' + 'position: fixed;' + 'z-index: 999999;' + 'top: 50%;' + 'left: 50%;' + 'padding: 24px 20px;' + 'transform: translate(-50%,-50%);' + 'border-radius: 2px;' + 'background: #fff;' + 'max-width: 100%;' + 'overflow: auto;' + '">' + '<div>' + '<button data-braintree-v1-fallback-close-button ' + 'style="' + 'font-family: Helvetica,Arial,sans-serif;' + 'font-size: 25px;' + 'line-height: 12px;' + 'position: absolute;' + 'top: 2px;' + 'right: 0px;' + 'cursor: pointer;' + 'color: #999;' + 'border: 0;' + 'outline: none;' + 'background: none;' + '" ' + 'onMouseOver="this.style.color=\'#000\'" ' + 'onMouseOut="this.style.color=\'#999\'"' + '>×</button>' + '</div>' + // iframe container
        '<div data-braintree-v1-fallback-iframe-container style="' + 'height: 400px;' + '"></div>' + '</div>' + // modal backdrop
        '<div data-braintree-v1-fallback-backdrop style="' + 'position: fixed;' + 'z-index: 999998;' + 'cursor: pointer;' + 'top: 0;' + 'left: 0;' + 'width: 100%;' + 'height: 100%;' + 'transition: opacity 1ms ease;' + 'background: rgba(0,0,0,.6);' + '"></div>';

        if (!addCloseButton) {
          modal.querySelector('[data-braintree-v1-fallback-close-button]').style.display = 'none';
        }

        modal.querySelector('[data-braintree-v1-fallback-iframe-container]').appendChild(iframe);
        return modal;
      };

      module.exports = CardinalModalFramework;
    }, {
      "./songbird": 145
    }],
    142: [function (require, module, exports) {
      'use strict';

      var LegacyFramework = require('./legacy');

      var CardinalModalFramework = require('./cardinal-modal');

      var Bootstrap3ModalFramework = require('./bootstrap3-modal');

      var InlineIframeFramework = require('./inline-iframe');

      module.exports = {
        legacy: LegacyFramework,
        'cardinal-modal': CardinalModalFramework,
        'bootstrap3-modal': Bootstrap3ModalFramework,
        'inline-iframe': InlineIframeFramework
      };
    }, {
      "./bootstrap3-modal": 140,
      "./cardinal-modal": 141,
      "./inline-iframe": 143,
      "./legacy": 144
    }],
    143: [function (require, module, exports) {
      'use strict';

      var SongbirdFramework = require('./songbird');

      var BraintreeError = require('../../../lib/braintree-error');

      var errors = require('../../shared/errors');

      var enumerate = require('../../../lib/enumerate');

      function InlineIframeFramework(options) {
        SongbirdFramework.call(this, options);
      }

      InlineIframeFramework.prototype = Object.create(SongbirdFramework.prototype, {
        constructor: SongbirdFramework
      });
      InlineIframeFramework.events = enumerate(['AUTHENTICATION_IFRAME_AVAILABLE'], 'inline-iframe-framework:');

      InlineIframeFramework.prototype.setUpEventListeners = function (reply) {
        SongbirdFramework.prototype.setUpEventListeners.call(this, reply);
        this.on(InlineIframeFramework.events.AUTHENTICATION_IFRAME_AVAILABLE, function (payload, next) {
          reply('authentication-iframe-available', payload, next);
        });
      };

      InlineIframeFramework.prototype._createCardinalConfigurationOptions = function (setupOptions) {
        var options = SongbirdFramework.prototype._createCardinalConfigurationOptions.call(this, setupOptions);

        options.payment.framework = 'inline';
        return options;
      };

      InlineIframeFramework.prototype._addV1IframeToPage = function () {
        this._emit(InlineIframeFramework.events.AUTHENTICATION_IFRAME_AVAILABLE, {
          element: this._v1Modal
        }, function () {// NOOP
        });
      };

      InlineIframeFramework.prototype._setupFrameworkSpecificListeners = function () {
        this.setCardinalListener('ui.inline.setup', this._onInlineSetup.bind(this));
      };

      InlineIframeFramework.prototype._onInlineSetup = function (htmlTemplate, details, resolve, reject) {
        var container, hasError;

        if (!htmlTemplate || !details) {
          hasError = true;
        } else if (details.paymentType !== 'CCA') {
          hasError = true;
        } else if (!(details.data.mode === 'suppress' || details.data.mode === 'static')) {
          hasError = true;
        }

        if (hasError) {
          reject(new BraintreeError(errors.THREEDS_INLINE_IFRAME_DETAILS_INCORRECT));
          return;
        }

        container = document.createElement('div');
        container.innerHTML = htmlTemplate;

        if (details.data.mode === 'suppress') {
          container.style.display = 'none';
          document.body.appendChild(container);
          resolve();
        } else if (details.data.mode === 'static') {
          this._emit(InlineIframeFramework.events.AUTHENTICATION_IFRAME_AVAILABLE, {
            element: container
          }, function () {
            resolve();
          });
        }
      };

      module.exports = InlineIframeFramework;
    }, {
      "../../../lib/braintree-error": 98,
      "../../../lib/enumerate": 107,
      "../../shared/errors": 149,
      "./songbird": 145
    }],
    144: [function (require, module, exports) {
      'use strict';

      var BaseFramework = require('./base');

      var deferred = require('../../../lib/deferred');

      function LegacyFramework(options) {
        BaseFramework.call(this, options);
      }

      LegacyFramework.prototype = Object.create(BaseFramework.prototype, {
        constructor: LegacyFramework
      });

      LegacyFramework.prototype.setUpEventListeners = function () {// noop
      };

      LegacyFramework.prototype.transformV1CustomerBillingAddress = function (customer) {
        customer.billingAddress.line1 = customer.billingAddress.streetAddress;
        customer.billingAddress.line2 = customer.billingAddress.extendedAddress;
        customer.billingAddress.city = customer.billingAddress.locality;
        customer.billingAddress.state = customer.billingAddress.region;
        customer.billingAddress.countryCode = customer.billingAddress.countryCodeAlpha2;
        delete customer.billingAddress.streetAddress;
        delete customer.billingAddress.extendedAddress;
        delete customer.billingAddress.locality;
        delete customer.billingAddress.region;
        delete customer.billingAddress.countryCodeAlpha2;
        return customer;
      };

      LegacyFramework.prototype._createIframe = function (options) {
        var self = this;

        this._setupV1Elements({
          lookupResponse: options.lookupResponse,
          showLoader: options.showLoader,
          handleAuthResponse: function handleAuthResponse(data) {
            self._handleAuthResponse(data, options);
          }
        });

        return this._v1Iframe;
      };

      LegacyFramework.prototype._handleAuthResponse = function (data, options) {
        this._v1Bus.teardown();

        options.removeFrame(); // This also has to be in a setTimeout so it executes after the `removeFrame`.

        deferred(function () {
          this._handleV1AuthResponse(data);
        }.bind(this))();
      };

      LegacyFramework.prototype._checkForFrameworkSpecificVerifyCardErrors = function (options) {
        var errorOption;

        if (typeof options.addFrame !== 'function') {
          errorOption = 'an addFrame function';
        } else if (typeof options.removeFrame !== 'function') {
          errorOption = 'a removeFrame function';
        }

        return errorOption;
      };

      LegacyFramework.prototype._formatVerifyCardOptions = function (options) {
        var modifiedOptions = BaseFramework.prototype._formatVerifyCardOptions.call(this, options);

        modifiedOptions.addFrame = deferred(options.addFrame);
        modifiedOptions.removeFrame = deferred(options.removeFrame);
        modifiedOptions.showLoader = options.showLoader !== false;
        return modifiedOptions;
      };

      LegacyFramework.prototype._formatLookupData = function (options) {
        var self = this;
        return BaseFramework.prototype._formatLookupData.call(this, options).then(function (data) {
          if (options.customer && options.customer.billingAddress) {
            data.customer = self.transformV1CustomerBillingAddress(options.customer);
          }

          return data;
        });
      };

      LegacyFramework.prototype._presentChallenge = function (lookupResponse, options) {
        options.addFrame(null, this._createIframe({
          showLoader: options.showLoader,
          lookupResponse: lookupResponse.lookup,
          removeFrame: options.removeFrame
        }));
      };

      module.exports = LegacyFramework;
    }, {
      "../../../lib/deferred": 105,
      "./base": 139
    }],
    145: [function (require, module, exports) {
      'use strict';

      var BaseFramework = require('./base');

      var assign = require('../../../lib/assign').assign;

      var deferred = require('../../../lib/deferred');

      var BraintreeError = require('../../../lib/braintree-error');

      var convertToBraintreeError = require('../../../lib/convert-to-braintree-error');

      var analytics = require('../../../lib/analytics');

      var assets = require('../../../lib/assets');

      var errors = require('../../shared/errors');

      var enumerate = require('../../../lib/enumerate');

      var constants = require('../../shared/constants');

      var Promise = require('../../../lib/promise');

      var ExtendedPromise = require('@braintree/extended-promise');

      var INTEGRATION_TIMEOUT_MS = require('../../../lib/constants').INTEGRATION_TIMEOUT_MS;

      var PLATFORM = require('../../../lib/constants').PLATFORM;

      var VERSION = "3.83.0";
      var CUSTOMER_CANCELED_SONGBIRD_MODAL = '01';
      var SONGBIRD_UI_EVENTS = ['ui.close', 'ui.render', // TODO these events are not documented in the
      // client reference because so far we have
      // not been able to trigger them in our testing
      'ui.renderHidden', 'ui.loading.close', 'ui.loading.render'];

      function SongbirdFramework(options) {
        BaseFramework.call(this, options);
        this._useV1Fallback = false;
        this._clientMetadata = {
          requestedThreeDSecureVersion: '2',
          sdkVersion: PLATFORM + '/' + VERSION
        };
        this._getDfReferenceIdPromisePlus = new ExtendedPromise();
        this.setupSongbird(options);
        this._cardinalEvents = [];
      }

      SongbirdFramework.prototype = Object.create(BaseFramework.prototype, {
        constructor: SongbirdFramework
      });
      SongbirdFramework.events = enumerate(['LOOKUP_COMPLETE', 'CUSTOMER_CANCELED', 'UI.CLOSE', 'UI.RENDER', 'UI.RENDERHIDDEN', 'UI.LOADING.CLOSE', 'UI.LOADING.RENDER'], 'songbird-framework:');

      SongbirdFramework.prototype.setUpEventListeners = function (reply) {
        this.on(SongbirdFramework.events.LOOKUP_COMPLETE, function (data, next) {
          reply('lookup-complete', data, next);
        });
        this.on(SongbirdFramework.events.CUSTOMER_CANCELED, function () {
          reply('customer-canceled');
        });
        this.on(SongbirdFramework.events['UI.CLOSE'], function () {
          reply('authentication-modal-close');
        });
        this.on(SongbirdFramework.events['UI.RENDER'], function () {
          reply('authentication-modal-render');
        });
        this.on(SongbirdFramework.events['UI.RENDERHIDDEN'], function () {
          reply('authentication-modal-render-hidden');
        });
        this.on(SongbirdFramework.events['UI.LOADING.CLOSE'], function () {
          reply('authentication-modal-loader-close');
        });
        this.on(SongbirdFramework.events['UI.LOADING.RENDER'], function () {
          reply('authentication-modal-loader-render');
        });
      };

      SongbirdFramework.prototype.prepareLookup = function (options) {
        var data = assign({}, options);
        var self = this;
        return this.getDfReferenceId().then(function (id) {
          data.dfReferenceId = id;
        }).then(function () {
          return self._triggerCardinalBinProcess(options.bin);
        }).catch(function () {// catch and ignore errors from looking up
          // df reference and Cardinal bin process
        }).then(function () {
          return self._waitForClient();
        }).then(function () {
          data.clientMetadata = self._clientMetadata;
          data.authorizationFingerprint = self._client.getConfiguration().authorizationFingerprint;
          data.braintreeLibraryVersion = 'braintree/web/' + VERSION;
          return data;
        });
      };

      SongbirdFramework.prototype.initializeChallengeWithLookupResponse = function (lookupResponse, options) {
        return this.setupSongbird().then(function () {
          return BaseFramework.prototype.initializeChallengeWithLookupResponse.call(this, lookupResponse, options);
        }.bind(this));
      };

      SongbirdFramework.prototype.initiateV1Fallback = function (errorType) {
        this._useV1Fallback = true;

        this._removeSongbirdListeners();

        analytics.sendEvent(this._createPromise, 'three-d-secure.v1-fallback.' + errorType);

        if (this._songbirdPromise) {
          this._songbirdPromise.resolve();
        }
      };

      SongbirdFramework.prototype._triggerCardinalBinProcess = function (bin) {
        var self = this;
        var issuerStartTime = Date.now();

        if (!bin) {
          // skip bin lookup because bin wasn't passed in
          return Promise.resolve();
        }

        return window.Cardinal.trigger('bin.process', bin).then(function (binResults) {
          self._clientMetadata.issuerDeviceDataCollectionTimeElapsed = Date.now() - issuerStartTime;
          self._clientMetadata.issuerDeviceDataCollectionResult = binResults && binResults.Status;
        });
      };

      SongbirdFramework.prototype.transformBillingAddress = function (additionalInformation, billingAddress) {
        if (billingAddress) {
          // map from public API to the API that the Gateway expects
          extractAddressData(billingAddress, additionalInformation, 'billing');
          additionalInformation.billingPhoneNumber = billingAddress.phoneNumber;
          additionalInformation.billingGivenName = billingAddress.givenName;
          additionalInformation.billingSurname = billingAddress.surname;
        }

        return additionalInformation;
      };

      SongbirdFramework.prototype.transformShippingAddress = function (additionalInformation) {
        var shippingAddress = additionalInformation.shippingAddress;

        if (shippingAddress) {
          // map from public API to the API that the Gateway expects
          extractAddressData(shippingAddress, additionalInformation, 'shipping');
          delete additionalInformation.shippingAddress;
        }

        return additionalInformation;
      };

      SongbirdFramework.prototype._createV1IframeModalElement = function (iframe) {
        var modal = document.createElement('div');
        modal.innerHTML = '<div data-braintree-v1-fallback-iframe-container="true" style="' + 'height: 400px;' + '"></div>';
        modal.querySelector('[data-braintree-v1-fallback-iframe-container="true"]').appendChild(iframe);
        return modal;
      };

      SongbirdFramework.prototype._createV1IframeModal = function (iframe) {
        var modal = this._createV1IframeModalElement(iframe);

        var btn = modal.querySelector('[data-braintree-v1-fallback-close-button]');
        var backdrop = modal.querySelector('[data-braintree-v1-fallback-backdrop]');
        var self = this;

        function closeHandler() {
          modal.parentNode.removeChild(modal);
          self.cancelVerifyCard(errors.THREEDS_CARDINAL_SDK_CANCELED);
          document.removeEventListener('keyup', self._onV1Keyup);
          self._onV1Keyup = null;
        }

        this._onV1Keyup = function (e) {
          if (e.key !== 'Escape') {
            return;
          }

          if (!modal.parentNode) {
            // modal not on page
            return;
          }

          closeHandler();
        };

        if (btn) {
          btn.addEventListener('click', closeHandler);
        }

        if (backdrop) {
          backdrop.addEventListener('click', closeHandler);
        }

        document.addEventListener('keyup', this._onV1Keyup);
        return modal;
      };

      SongbirdFramework.prototype._addV1IframeToPage = function () {
        document.body.appendChild(this._v1Modal);
      };

      SongbirdFramework.prototype._handleAuthResponseFromV1Fallback = function (data) {
        this._teardownV1Elements();

        this._v1Modal.parentNode.removeChild(this._v1Modal);

        this._handleV1AuthResponse(data);
      };

      SongbirdFramework.prototype._presentChallengeWithV1Fallback = function (lookupResponse) {
        var self = this;

        this._setupV1Elements({
          lookupResponse: lookupResponse,
          showLoader: true,
          handleAuthResponse: function handleAuthResponse(data) {
            self._handleAuthResponseFromV1Fallback(data);
          }
        });

        this._v1Modal = this._createV1IframeModal(this._v1Iframe);

        this._addV1IframeToPage();
      };

      SongbirdFramework.prototype.setupSongbird = function (setupOptions) {
        var self = this;
        var startTime = Date.now();

        if (this._songbirdPromise) {
          return this._songbirdPromise;
        }

        setupOptions = setupOptions || {};
        this._songbirdPromise = new ExtendedPromise();
        this._v2SetupFailureReason = 'reason-unknown';

        self._loadCardinalScript(setupOptions).then(function () {
          if (!window.Cardinal) {
            self._v2SetupFailureReason = 'cardinal-global-unavailable';
            return Promise.reject(new BraintreeError(errors.THREEDS_CARDINAL_SDK_SETUP_FAILED));
          }

          return self._configureCardinalSdk({
            setupOptions: setupOptions,
            setupStartTime: startTime
          });
        }).catch(function (err) {
          var error = convertToBraintreeError(err, {
            type: errors.THREEDS_CARDINAL_SDK_SETUP_FAILED.type,
            code: errors.THREEDS_CARDINAL_SDK_SETUP_FAILED.code,
            message: errors.THREEDS_CARDINAL_SDK_SETUP_FAILED.message
          });

          self._getDfReferenceIdPromisePlus.reject(error);

          window.clearTimeout(self._songbirdSetupTimeoutReference);
          analytics.sendEvent(self._client, 'three-d-secure.cardinal-sdk.init.setup-failed');
          self.initiateV1Fallback('cardinal-sdk-setup-failed.' + self._v2SetupFailureReason);
        });

        return this._songbirdPromise;
      };

      SongbirdFramework.prototype._configureCardinalSdk = function (config) {
        var self = this;
        return this._waitForClient().then(function () {
          var threeDSConfig = self._client.getConfiguration().gatewayConfiguration.threeDSecure;

          if (threeDSConfig.hasOwnProperty('versionTwo') && threeDSConfig.versionTwo !== 'cardinal') {
            return Promise.reject(new Error('cardinal-api-not-available-or-configured'));
          }

          return threeDSConfig;
        }).then(function (threeDSConfig) {
          var jwt = threeDSConfig.cardinalAuthenticationJWT;
          var setupOptions = config.setupOptions;
          var setupStartTime = config.setupStartTime;

          var cardinalConfiguration = self._createCardinalConfigurationOptions(setupOptions);

          SONGBIRD_UI_EVENTS.forEach(function (eventName) {
            self.setCardinalListener(eventName, function () {
              self._emit(SongbirdFramework.events[eventName.toUpperCase()]);
            });
          });
          self.setCardinalListener('payments.setupComplete', self._createPaymentsSetupCompleteCallback());

          self._setupFrameworkSpecificListeners();

          window.Cardinal.configure(cardinalConfiguration);
          window.Cardinal.setup('init', {
            jwt: jwt
          });
          self._clientMetadata.cardinalDeviceDataCollectionTimeElapsed = Date.now() - setupStartTime;
          self.setCardinalListener('payments.validated', self._createPaymentsValidatedCallback());
        }).catch(function (err) {
          if (err.message === 'cardinal-api-not-available-or-configured') {
            self._v2SetupFailureReason = 'cardinal-api-not-available-or-configured';
          } else {
            self._v2SetupFailureReason = 'cardinal-configuration-threw-error';
          }

          return Promise.reject(err);
        });
      };

      SongbirdFramework.prototype.setCardinalListener = function (eventName, cb) {
        this._cardinalEvents.push(eventName);

        window.Cardinal.on(eventName, cb);
      };

      SongbirdFramework.prototype._setupFrameworkSpecificListeners = function () {// noop
      };

      SongbirdFramework.prototype._createCardinalConfigurationOptions = function (setupOptions) {
        var cardinalConfiguration = setupOptions.cardinalSDKConfig || {};
        var paymentSettings = cardinalConfiguration.payment || {};

        if (!cardinalConfiguration.logging && setupOptions.loggingEnabled) {
          cardinalConfiguration.logging = {
            level: 'verbose'
          };
        }

        cardinalConfiguration.payment = {};

        if (paymentSettings.hasOwnProperty('displayLoading')) {
          cardinalConfiguration.payment.displayLoading = paymentSettings.displayLoading;
        }

        if (paymentSettings.hasOwnProperty('displayExitButton')) {
          cardinalConfiguration.payment.displayExitButton = paymentSettings.displayExitButton;
        }

        return cardinalConfiguration;
      };

      SongbirdFramework.prototype._loadCardinalScript = function (setupOptions) {
        var self = this;
        var scriptSource = constants.CARDINAL_SCRIPT_SOURCE.sandbox;
        return this._waitForClient().then(function () {
          var isProduction = self._client.getConfiguration().gatewayConfiguration.environment === 'production';
          self._songbirdSetupTimeoutReference = window.setTimeout(function () {
            analytics.sendEvent(self._client, 'three-d-secure.cardinal-sdk.init.setup-timeout');
            self.initiateV1Fallback('cardinal-sdk-setup-timeout');
          }, setupOptions.timeout || INTEGRATION_TIMEOUT_MS);

          if (isProduction) {
            scriptSource = constants.CARDINAL_SCRIPT_SOURCE.production;
          }

          return assets.loadScript({
            src: scriptSource
          });
        }).catch(function (err) {
          self._v2SetupFailureReason = 'songbird-js-failed-to-load';
          return Promise.reject(convertToBraintreeError(err, errors.THREEDS_CARDINAL_SDK_SCRIPT_LOAD_FAILED));
        });
      };

      SongbirdFramework.prototype._createPaymentsSetupCompleteCallback = function () {
        var self = this;
        return function (data) {
          self._getDfReferenceIdPromisePlus.resolve(data.sessionId);

          window.clearTimeout(self._songbirdSetupTimeoutReference);
          analytics.sendEvent(self._createPromise, 'three-d-secure.cardinal-sdk.init.setup-completed');

          self._songbirdPromise.resolve();
        };
      };

      SongbirdFramework.prototype.getDfReferenceId = function () {
        return this._getDfReferenceIdPromisePlus;
      };

      SongbirdFramework.prototype._performJWTValidation = function (rawCardinalSDKVerificationData, jwt) {
        var self = this;
        var nonce = this._lookupPaymentMethod.nonce;
        var url = 'payment_methods/' + nonce + '/three_d_secure/authenticate_from_jwt';
        var cancelCode = rawCardinalSDKVerificationData && rawCardinalSDKVerificationData.Payment && rawCardinalSDKVerificationData.Payment.ExtendedData && rawCardinalSDKVerificationData.Payment.ExtendedData.ChallengeCancel;

        if (cancelCode) {
          // see ChallengeCancel docs here for different values:
          // https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/98315/Response+Objects
          analytics.sendEvent(this._createPromise, 'three-d-secure.verification-flow.cardinal-sdk.cancel-code.' + cancelCode);

          if (cancelCode === CUSTOMER_CANCELED_SONGBIRD_MODAL) {
            this._emit(SongbirdFramework.events.CUSTOMER_CANCELED);
          }
        }

        analytics.sendEvent(this._createPromise, 'three-d-secure.verification-flow.upgrade-payment-method.started');
        return this._waitForClient().then(function () {
          return self._client.request({
            method: 'post',
            endpoint: url,
            data: {
              jwt: jwt,
              paymentMethodNonce: nonce
            }
          });
        }).then(function (response) {
          var paymentMethod = response.paymentMethod || self._lookupPaymentMethod;

          var formattedResponse = self._formatAuthResponse(paymentMethod, response.threeDSecureInfo);

          formattedResponse.rawCardinalSDKVerificationData = rawCardinalSDKVerificationData;
          analytics.sendEvent(self._client, 'three-d-secure.verification-flow.upgrade-payment-method.succeeded');
          return Promise.resolve(formattedResponse);
        }).catch(function (err) {
          var error = new BraintreeError({
            type: errors.THREEDS_JWT_AUTHENTICATION_FAILED.type,
            code: errors.THREEDS_JWT_AUTHENTICATION_FAILED.code,
            message: errors.THREEDS_JWT_AUTHENTICATION_FAILED.message,
            details: {
              originalError: err
            }
          });
          analytics.sendEvent(self._client, 'three-d-secure.verification-flow.upgrade-payment-method.errored');
          return Promise.reject(error);
        });
      };

      SongbirdFramework.prototype._createPaymentsValidatedCallback = function () {
        var self = this;
        /**
         * @param {object} data Response Data
         * @see {@link https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/98315/Response+Objects#ResponseObjects-ObjectDefinition}
         * @param {string} data.ActionCode The resulting state of the transaction.
         * @param {boolean} data.Validated Represents whether transaction was successfully or not.
         * @param {object} data.Payment Represents additional information about the verification.
         * @param {number} data.ErrorNumber A non-zero value represents the error encountered while attempting the process the message request.
         * @param {string} data.ErrorDescription Application error description for the associated error number.
         * @param {string} validatedJwt Response JWT
         * @returns {void}
         * */

        return function (data, validatedJwt) {
          var formattedError;

          if (self._useV1Fallback) {
            // TODO since we've removed the listeners for the payments validated callback when initiating the v1 fallback,
            // we should never get to this point. Leave this analtyics event in for now and review if that is indeed the
            // case before removing this block.
            analytics.sendEvent(self._createPromise, 'three-d-secure.verification-flow.cardinal-sdk.payments-validated-callback-called-in-v1-fallback-flow');
            return;
          }

          analytics.sendEvent(self._createPromise, 'three-d-secure.verification-flow.cardinal-sdk.action-code.' + data.ActionCode.toLowerCase());

          if (!self._verifyCardPromisePlus) {
            self.initiateV1Fallback('cardinal-sdk-setup-error.number-' + data.ErrorNumber);
            return;
          }

          switch (data.ActionCode) {
            // Handle these scenarios based on liability shift information in the response.
            case 'SUCCESS':
            case 'NOACTION':
            case 'FAILURE':
              self._performJWTValidation(data, validatedJwt).then(function (result) {
                self._verifyCardPromisePlus.resolve(result);
              }).catch(function (err) {
                self._verifyCardPromisePlus.reject(err);
              });

              break;

            case 'ERROR':
              analytics.sendEvent(self._createPromise, 'three-d-secure.verification-flow.cardinal-sdk-error.' + data.ErrorNumber);

              switch (data.ErrorNumber) {
                case 10001: // Cardinal Docs: Timeout when sending an /Init message

                case 10002:
                  // Cardinal Docs: Timeout when sending an /Start message
                  formattedError = new BraintreeError(errors.THREEDS_CARDINAL_SDK_SETUP_TIMEDOUT);
                  break;

                case 10003: // Cardinal Docs: Timeout when sending an /Validate message. Although this code exists we do not yet have a flow where a validate message is sent to Midas. This error should not yet be triggered

                case 10007: // Cardinal Docs: Timeout when sending an /Confirm message

                case 10009:
                  // Cardinal Docs: Timeout when sending an /Continue message
                  formattedError = new BraintreeError(errors.THREEDS_CARDINAL_SDK_RESPONSE_TIMEDOUT);
                  break;

                case 10005: // Cardinal Docs: Songbird was started without a request jwt.

                case 10006:
                  // Cardinal Docs: This is a general configuration error. The description is populated by the specific configuration error that caused the error.
                  formattedError = new BraintreeError(errors.THREEDS_CARDINAL_SDK_BAD_CONFIG);
                  break;

                case 10008: // Cardinal Docs: Songbird was initialized without a merchant JWT.

                case 10010:
                  // Cardinal Docs: The response JWT was
                  formattedError = new BraintreeError(errors.THREEDS_CARDINAL_SDK_BAD_JWT);
                  break;

                case 10011:
                  // This may never get called, according to the Cardinal docs:
                  // The user has canceled the transaction. This is generally found in alternative
                  // payments that supply a cancel button on the payment brand side.
                  analytics.sendEvent(self._createPromise, 'three-d-secure.verification-flow.canceled');
                  formattedError = new BraintreeError(errors.THREEDS_CARDINAL_SDK_CANCELED);
                  break;

                default:
                  formattedError = new BraintreeError(errors.THREEDS_CARDINAL_SDK_ERROR);
              }

              formattedError.details = {
                originalError: {
                  code: data.ErrorNumber,
                  description: data.ErrorDescription
                }
              };

              self._verifyCardPromisePlus.reject(formattedError);

              break;

            default:
          }
        };
      };

      SongbirdFramework.prototype._checkForVerifyCardError = function (options, privateOptions) {
        return BaseFramework.prototype._checkForVerifyCardError.call(this, options, privateOptions);
      };

      SongbirdFramework.prototype._checkForFrameworkSpecificVerifyCardErrors = function (options, privateOptions) {
        var errorOption;

        if (typeof options.onLookupComplete !== 'function' && !privateOptions.ignoreOnLookupCompleteRequirement) {
          errorOption = 'an onLookupComplete function';
        }

        return errorOption;
      };

      SongbirdFramework.prototype._formatVerifyCardOptions = function (options) {
        var modifiedOptions = BaseFramework.prototype._formatVerifyCardOptions.call(this, options);

        var additionalInformation = modifiedOptions.additionalInformation || {};
        additionalInformation = this.transformBillingAddress(additionalInformation, options.billingAddress);
        additionalInformation = this.transformShippingAddress(additionalInformation);

        if (options.onLookupComplete) {
          modifiedOptions.onLookupComplete = deferred(options.onLookupComplete);
        }

        if (options.email) {
          additionalInformation.email = options.email;
        }

        if (options.mobilePhoneNumber) {
          additionalInformation.mobilePhoneNumber = options.mobilePhoneNumber;
        }

        modifiedOptions.additionalInformation = additionalInformation;
        return modifiedOptions;
      };

      SongbirdFramework.prototype._onLookupComplete = function (lookupResponse, options) {
        var self = this;
        return BaseFramework.prototype._onLookupComplete.call(this, lookupResponse).then(function (response) {
          return new Promise(function (resolve, reject) {
            // NEXT_MAJOR_VERSION format this response object to look like the mobile sdk response
            // which is basically the lookup param at the top level with some additional accessors
            response.requiresUserAuthentication = Boolean(response.lookup && response.lookup.acsUrl);

            function next() {
              resolve(response);
            }

            self._verifyCardPromisePlus.catch(reject); // If both event and callback are mistakenly used together,
            // prefer the callback when it is passed into the verifyCard options


            if (options.onLookupComplete) {
              options.onLookupComplete(response, next);
            } else {
              self._emit(SongbirdFramework.events.LOOKUP_COMPLETE, response, next);
            }
          });
        });
      };

      SongbirdFramework.prototype._presentChallenge = function (lookupResponse) {
        // transactionId is required for the Songbird flow, so if it
        // does not exist, we fallback to the 3ds v1 flow
        if (this._useV1Fallback || !lookupResponse.lookup.transactionId) {
          this._presentChallengeWithV1Fallback(lookupResponse.lookup);

          return;
        } // set up listener for ref id to call out to bt before calling verify callback


        window.Cardinal.continue('cca', {
          AcsUrl: lookupResponse.lookup.acsUrl,
          Payload: lookupResponse.lookup.pareq
        }, {
          OrderDetails: {
            TransactionId: lookupResponse.lookup.transactionId
          }
        });
      };

      SongbirdFramework.prototype._formatLookupData = function (options) {
        var self = this;
        return BaseFramework.prototype._formatLookupData.call(this, options).then(function (data) {
          data.additionalInfo = options.additionalInformation;

          if (options.accountType) {
            data.accountType = options.accountType;
          }

          if (options.challengeRequested) {
            data.challengeRequested = options.challengeRequested;
          }

          if (options.dataOnlyRequested) {
            data.dataOnlyRequested = options.dataOnlyRequested;
          }

          if (options.exemptionRequested) {
            data.exemptionRequested = options.exemptionRequested;
          }

          if (options.bin) {
            data.bin = options.bin;
          } // NEXT_MAJOR_VERSION remove cardAdd in favor of cardAddChallengeRequested


          if (options.cardAdd != null) {
            data.cardAdd = options.cardAdd;
          }

          if (options.cardAddChallengeRequested != null) {
            data.cardAdd = options.cardAddChallengeRequested;
          }

          return self.prepareLookup(data);
        });
      };

      SongbirdFramework.prototype.cancelVerifyCard = function (verifyCardError) {
        var self = this;
        return BaseFramework.prototype.cancelVerifyCard.call(this).then(function (response) {
          if (self._verifyCardPromisePlus) {
            verifyCardError = verifyCardError || new BraintreeError(errors.THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT);

            self._verifyCardPromisePlus.reject(verifyCardError);
          }

          return response;
        });
      };

      SongbirdFramework.prototype._removeSongbirdListeners = function () {
        this._cardinalEvents.forEach(function (eventName) {
          window.Cardinal.off(eventName);
        });

        this._cardinalEvents = [];
      };

      SongbirdFramework.prototype.teardown = function () {
        if (window.Cardinal) {
          this._removeSongbirdListeners();
        } // we intentionally do not remove the Cardinal SDK
        // from the page when tearing down. Subsequent
        // component creations will be faster because
        // the asset is already on the page


        return BaseFramework.prototype.teardown.call(this);
      };

      function extractAddressData(source, target, prefix) {
        target[prefix + 'Line1'] = source.streetAddress;
        target[prefix + 'Line2'] = source.extendedAddress;
        target[prefix + 'Line3'] = source.line3;
        target[prefix + 'City'] = source.locality;
        target[prefix + 'State'] = source.region;
        target[prefix + 'PostalCode'] = source.postalCode;
        target[prefix + 'CountryCode'] = source.countryCodeAlpha2;
      }

      module.exports = SongbirdFramework;
    }, {
      "../../../lib/analytics": 93,
      "../../../lib/assets": 94,
      "../../../lib/assign": 95,
      "../../../lib/braintree-error": 98,
      "../../../lib/constants": 99,
      "../../../lib/convert-to-braintree-error": 101,
      "../../../lib/deferred": 105,
      "../../../lib/enumerate": 107,
      "../../../lib/promise": 130,
      "../../shared/constants": 148,
      "../../shared/errors": 149,
      "./base": 139,
      "@braintree/extended-promise": 41
    }],
    146: [function (require, module, exports) {
      'use strict';

      var wrapPromise = require('@braintree/wrap-promise');

      var methods = require('../../lib/methods');

      var convertMethodsToError = require('../../lib/convert-methods-to-error');

      var EventEmitter = require('@braintree/event-emitter');

      var FRAMEWORKS = require('./frameworks');
      /**
       * @deprecated
       * @callback ThreeDSecure~addFrameCallback
       * @param {?BraintreeError} [err] `null` or `undefined` if there was no error.
       * @param {HTMLIFrameElement} iframe An iframe element containing the bank's authentication page that you must put on your page.
       * @description **Deprecated** The callback used for options.addFrame in 3DS 1.0's {@link ThreeDSecure#verifyCard|verifyCard}.
       * @returns {void}
       */

      /**
       * @deprecated
       * @callback ThreeDSecure~removeFrameCallback
       * @description **Deprecated** The callback used for options.removeFrame in 3DS 1.0's {@link ThreeDSecure#verifyCard|verifyCard}.
       * @returns {void}
       */

      /**
       * @deprecated
       * @typedef {object} ThreeDSecure~verifyCardCustomerObject
       * @property {string} [customer.mobilePhoneNumber] The mobile phone number used for verification. Only numbers; remove dashes, parenthesis and other characters.
       * @property {string} [customer.email] The email used for verification.
       * @property {string} [customer.shippingMethod] The 2-digit string indicating the shipping method chosen for the transaction.
       * @property {string} [customer.billingAddress.firstName] The first name associated with the address.
       * @property {string} [customer.billingAddress.lastName] The last name associated with the address.
       * @property {string} [customer.billingAddress.streetAddress] Line 1 of the Address (eg. number, street, etc).
       * @property {string} [customer.billingAddress.extendedAddress] Line 2 of the Address (eg. suite, apt #, etc.).
       * @property {string} [customer.billingAddress.locality] The locality (city) name associated with the address.
       * @property {string} [customer.billingAddress.region] The 2 letter code for US states or an ISO-3166-2 country subdivision code of up to three letters.
       * @property {string} [customer.billingAddress.postalCode] The zip code or equivalent for countries that have them.
       * @property {string} [customer.billingAddress.countryCodeAlpha2] The 2 character country code.
       * @property {string} [customer.billingAddress.phoneNumber] The phone number associated with the address. Only numbers; remove dashes, parenthesis and other characters.
       * @description **Deprecated** Optional customer information to be passed to 3DS 1.0 for verification.
       */

      /**
       * @typedef {object} ThreeDSecure~verifyPayload
       * @property {string} nonce The new payment method nonce produced by the 3D Secure lookup. The original nonce passed into {@link ThreeDSecure#verifyCard|verifyCard} was consumed. This new nonce should be used to transact on your server.
       * @property {string} type The payment method type.
       * @property {object} details Additional account details.
       * @property {string} details.cardType Type of card, ex: Visa, MasterCard.
       * @property {string} details.lastFour Last four digits of card number.
       * @property {string} details.lastTwo Last two digits of card number.
       * @property {string} description A human-readable description.
       * @property {object} binData Information about the card based on the bin.
       * @property {string} binData.commercial Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.countryOfIssuance The country of issuance.
       * @property {string} binData.debit Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.durbinRegulated Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.healthcare Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.issuingBank The issuing bank.
       * @property {string} binData.payroll Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.prepaid Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} binData.productId The product id.
       * @property {boolean} liabilityShiftPossible *Deprecated:* Use `threeDSecureInfo.liabilityShiftPossible` instead.
       * @property {boolean} liabilityShifted *Deprecated:* Use `threeDSecureInfo.liabilityShifted` instead.
       * @property {object} threeDSecureInfo 3DS information about the card. Note: This information should be verified on the server by using the [payment method nonce find method](https://developer.paypal.com/braintree/docs/reference/request/payment-method-nonce/find). The values provided here are merely for convenience. Only values looked up on the server should determine the logic about how to process a transaction.
       * @property {boolean} threeDSecureInfo.liabilityShiftPossible Indicates whether the card was eligible for 3D Secure.
       * @property {boolean} threeDSecureInfo.liabilityShifted Indicates whether the liability for fraud has been shifted away from the merchant.
       * @property {string} threeDSecureInfo.cavv Cardholder authentication verification value or CAVV. The main encrypted message issuers and card networks use to verify authentication has occurred. Mastercard uses an AVV message and American Express uses an AEVV message, each of which should also be passed in the cavv parameter.
       * @property {string} threeDSecureInfo.xid Transaction identifier resulting from 3D Secure authentication. Uniquely identifies the transaction and sometimes required in the authorization message. This is a base64-encoded value. This field will no longer be used in 3D Secure 2 authentications for Visa and Mastercard, however it will be supported by American Express.
       * @property {string} threeDSecureInfo.dsTransactionId Transaction identifier resulting from 3D Secure 2 authentication.
       * @property {string} threeDSecureInfo.threeDSecureVersion The version of 3D Secure authentication used for the transaction.
       * @property {string} threeDSecureInfo.eciFlag The value of the electronic commerce indicator (ECI) flag, which indicates the outcome of the 3DS authentication. This will be a two-digit value.
       * @property {string} threeDSecureInfo.threeDSecureAuthenticationId ID of the 3D Secure authentication performed for this transaction. Do not provide this field as a transaction sale parameter if you are using the returned payment method nonce from the payload.
       * @property {object} rawCardinalSDKVerificationData The response back from the Cardinal SDK after verification has completed. See [Cardinal's Documentation](https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/98315/Response+Objects) for more information. If the customer was not required to do a 3D Secure challenge, this object will not be available.
       */

      /**
       * @typedef {string} ThreeDSecure~prepareLookupPayload The client data to pass on when doing a server side lookup call.
       */

      /**
       * @typedef {object} ThreeDSecure~verificationData
       * @property {boolean} requiresUserAuthentication When `true`, the user will be presented with a 3D Secure challenge when calling `next` in the {@link ThreeDSecure#event:lookup-complete|`lookup-complete` event}.
       * @property {object} threeDSecureInfo Contains liability shift details.
       * @property {boolean} threeDSecureInfo.liabilityShiftPossible Indicates whether the card was eligible for 3D Secure.
       * @property {boolean} threeDSecureInfo.liabilityShifted Indicates whether the liability for fraud has been shifted away from the merchant.
       * @property {object} paymentMethod A {@link ThreeDSecure~verifyPayload|verifyPayload} object.
       * @property {object} lookup Details about the 3D Secure lookup.
       * @property {string} lookup.threeDSecureVersion The version of 3D Secure that will be used for the 3D Secure challenge.
      */

      /**
       * @typedef {object} ThreeDSecure~billingAddress
       * @property {string} [givenName] The first name associated with the billing address. (maximum length 50)
       * @property {string} [surname] The last name associated with the billing address. (maximum length 50)
       * @property {string} [phoneNumber] The phone number associated with the billing address. Only numbers; remove dashes, parenthesis and other characters.
       * @property {string} [streetAddress] Line 1 of the billing address (eg. number, street, etc). (maximum length 50)
       * @property {string} [extendedAddress] Line 2 of the billing address (eg. suite, apt #, etc.). (maximum length 50)
       * @property {string} [line3] Line 3 of the billing address if needed (eg. suite, apt #, etc). (maximum length 50)
       * @property {string} [locality] The locality (city) name associated with the billing address.
       * @property {string} [region] The 2 letter code for US states or an ISO-3166-2 country subdivision code of up to three letters.
       * @property {string} [postalCode] The zip code or equivalent for countries that have them.
       * @property {string} [countryCodeAlpha2] The 2 character country code.
      */

      /**
       * @typedef {object} ThreeDSecure~additionalInformation
       * @property {string} [workPhoneNumber] The work phone number used for verification. Only numbers; remove dashes, parenthesis and other characters. (maximum length 25)
       * @property {string} [shippingGivenName] The first name associated with the shipping address. (maximum length 50)
       * @property {string} [shippingSurname] The last name associated with the shipping address. (maximum length 50)
       * @property {object} [shippingAddress]
       * @property {string} [shippingAddress.streetAddress] Line 1 of the shipping address (eg. number, street, etc). (maximum length 50)
       * @property {string} [shippingAddress.extendedAddress] Line 2 of the shipping address (eg. suite, apt #, etc.). (maximum length 50)
       * @property {string} [shippingAddress.line3] Line 3 of the shipping address if needed (eg. suite, apt #, etc). (maximum length 50)
       * @property {string} [shippingAddress.locality] The locality (city) name associated with the shipping address. (maximum length 50)
       * @property {string} [shippingAddress.region] The 2 letter code for US states or an ISO-3166-2 country subdivision code of up to three letters. (maximum length 50)
       * @property {string} [shippingAddress.postalCode] The zip code or equivalent for countries that have them. (maximum length 10)
       * @property {string} [shippingAddress.countryCodeAlpha2] The 2 character country code. (maximum length 2)
       * @property {string} [shippingPhone] The phone number associated with the shipping address. Only numbers; remove dashes, parenthesis and other characters. (maximum length 20)
       * @property {string} [shippingMethod] The 2-digit string indicating the name of the shipping method chosen for the transaction. (maximum length 50) Possible values:
       * - `01` Same Day
       * - `02` Overnight / Expedited
       * - `03` Priority (2-3 Days)
       * - `04` Ground
       * - `05` Electronic Delivery
       * - `06` Ship to Store
       * @property {string} [shippingMethodIndicator] The 2-digit string indicating the shipping method chosen for the transaction Possible values.
       * - `01` Ship to cardholder billing address
       * - `02` Ship to another verified address on file with merchant
       * - `03` Ship to address that is different from billing address
       * - `04` Ship to store (store address should be populated on request)
       * - `05` Digital goods
       * - `06` Travel and event tickets, not shipped
       * - `07` Other
       * @property {string} [productCode] The 3-letter string representing the merchant product code. Possible values:
       * - `AIR` Airline
       * - `GEN` General Retail
       * - `DIG` Digital Goods
       * - `SVC` Services
       * - `RES` Restaurant
       * - `TRA` Travel
       * - `DSP` Cash Dispensing
       * - `REN` Car Rental
       * - `GAS` Fuel
       * - `LUX` Luxury Retail
       * - `ACC` Accommodation Retail
       * - `TBD` Other
       * @property {string} [deliveryTimeframe] The 2-digit number indicating the delivery time frame. Possible values:
       * - `01` Electronic delivery
       * - `02` Same day shipping
       * - `03` Overnight shipping
       * - `04` Two or more day shipping
       * @property {string} [deliveryEmail] For electronic delivery, email address to which the merchandise was delivered. (maximum length 254)
       * @property {string} [reorderindicator] The 2-digit number indicating whether the cardholder is reordering previously purchased merchandise. possible values:
       * - `01` First time ordered
       * - `02` Reordered
       * @property {string} [preorderIndicator] The 2-digit number indicating whether cardholder is placing an order with a future availability or release date. possible values:
       * - `01` Merchandise available
       * - `02` Future availability
       * @property {string} [preorderDate] The 8-digit number (format: YYYYMMDD) indicating expected date that a pre-ordered purchase will be available.
       * @property {string} [giftCardAmount] The purchase amount total for prepaid gift cards in major units. (maximum length 15)
       * @property {string} [giftCardCurrencyCode] ISO 4217 currency code for the gift card purchased. (maximum length 3)
       * @property {string} [giftCardCount] Total count of individual prepaid gift cards purchased. (maximum length 2)
       * @property {string} [accountAgeIndicator] The 2-digit value representing the length of time cardholder has had account. Possible values:
       * - `01` No Account
       * - `02` Created during transaction
       * - `03` Less than 30 days
       * - `04` 30-60 days
       * - `05` More than 60 days
       * @property {string} [accountCreateDate] The 8-digit number (format: YYYYMMDD) indicating the date the cardholder opened the account.
       * @property {string} [accountChangeIndicator] The 2-digit value representing the length of time since the last change to the cardholder account. This includes shipping address, new payment account or new user added. Possible values:
       * - `01` Changed during transaction
       * - `02` Less than 30 days
       * - `03` 30-60 days
       * - `04` More than 60 days
       * @property {string} [accountChangeDate] The 8-digit number (format: YYYYMMDD) indicating the date the cardholder's account was last changed. This includes changes to the billing or shipping address, new payment accounts or new users added.
       * @property {string} [accountPwdChangeIndicator] The 2-digit value representing the length of time since the cardholder changed or reset the password on the account. Possible values:
       * - `01` No change
       * - `02` Changed during transaction
       * - `03` Less than 30 days
       * - `04` 30-60 days
       * - `05` More than 60 days
       * @property {string} [accountPwdChangeDate] The 8-digit number (format: YYYYMMDD) indicating the date the cardholder last changed or reset password on account.
       * @property {string} [shippingAddressUsageIndicator] The 2-digit value indicating when the shipping address used for transaction was first used. Possible values:
       * - `01` This transaction
       * - `02` Less than 30 days
       * - `03` 30-60 days
       * - `04` More than 60 days
       * @property {string} [shippingAddressUsageDate] The 8-digit number (format: YYYYMMDD) indicating the date when the shipping address used for this transaction was first used.
       * @property {string} [transactionCountDay] Number of transactions (successful or abandoned) for this cardholder account within the last 24 hours. (maximum length 3)
       * @property {string} [transactionCountYear] Number of transactions (successful or abandoned) for this cardholder account within the last year. (maximum length 3)
       * @property {string} [addCardAttempts] Number of add card attempts in the last 24 hours. (maximum length 3)
       * @property {string} [accountPurchases] Number of purchases with this cardholder account during the previous six months.
       * @property {string} [fraudActivity] The 2-digit value indicating whether the merchant experienced suspicious activity (including previous fraud) on the account. Possible values:
       * - `01` No suspicious activity
       * - `02` Suspicious activity observed
       * @property {string} [shippingNameIndicator] The 2-digit value indicating if the cardholder name on the account is identical to the shipping name used for the transaction. Possible values:
       * - `01` Account and shipping name identical
       * - `02` Account and shipping name differ
       * @property {string} [paymentAccountIndicator] The 2-digit value indicating the length of time that the payment account was enrolled in the merchant account. Possible values:
       * - `01` No account (guest checkout)
       * - `02` During the transaction
       * - `03` Less than 30 days
       * - `04` 30-60 days
       * - `05` More than 60 days
       * @property {string} [paymentAccountAge] The 8-digit number (format: YYYYMMDD) indicating the date the payment account was added to the cardholder account.
       * @property {string} [acsWindowSize] The 2-digit number to set the challenge window size to display to the end cardholder.  The ACS will reply with content that is formatted appropriately to this window size to allow for the best user experience.  The sizes are width x height in pixels of the window displayed in the cardholder browser window. Possible values:
       * - `01` 250x400
       * - `02` 390x400
       * - `03` 500x600
       * - `04` 600x400
       * - `05` Full page
       * @property {string} [sdkMaxTimeout] The 2-digit number of minutes (minimum 05) to set the maximum amount of time for all 3DS 2.0 messages to be communicated between all components.
       * @property {string} [addressMatch] The 1-character value (Y/N) indicating whether cardholder billing and shipping addresses match.
       * @property {string} [accountId] Additional cardholder account information. (maximum length 64)
       * @property {string} [ipAddress] The IP address of the consumer. IPv4 and IPv6 are supported.
       * @property {string} [orderDescription] Brief description of items purchased. (maximum length 256)
       * @property {string} [taxAmount] Unformatted tax amount without any decimalization (ie. $123.67 = 12367). (maximum length 20)
       * @property {string} [userAgent] The exact content of the HTTP user agent header. (maximum length 500)
       * @property {string} [authenticationIndicator] The 2-digit number indicating the type of authentication request. Possible values:
       *  - `02` Recurring
       *  - `03` Installment
       * @property {string} [installment] An integer value greater than 1 indicating the maximum number of permitted authorizations for installment payments. (maximum length 3)
       * @property {string} [purchaseDate] The 14-digit number (format: YYYYMMDDHHMMSS) indicating the date in UTC of original purchase.
       * @property {string} [recurringEnd] The 8-digit number (format: YYYYMMDD) indicating the date after which no further recurring authorizations should be performed.
       * @property {string} [recurringFrequency] Integer value indicating the minimum number of days between recurring authorizations. A frequency of monthly is indicated by the value 28. Multiple of 28 days will be used to indicate months (ex. 6 months = 168). (maximum length 3)
       */

      /**
       * @name ThreeDSecure#on
       * @function
       * @param {string} event The name of the event to which you are subscribing.
       * @param {function} handler A callback to handle the event.
       * @description Subscribes a handler function to a named event. The following events are available:
       *   * {@link ThreeDSecure#event:lookup-complete|lookup-complete}
       *   * {@link ThreeDSecure#event:customer-canceled|customer-canceled}
       *   * {@link ThreeDSecure#event:authentication-iframe-available|authentication-iframe-available}
       *   * {@link ThreeDSecure#event:authentication-modal-render|authentication-modal-render}
       *   * {@link ThreeDSecure#event:authentication-modal-close|authentication-modal-close}
       * @example
       * <caption>Listening to a 3D Secure event</caption>
       * braintree.threeDSecure.create({ ... }, function (createErr, threeDSecureInstance) {
       *   threeDSecureInstance.on('lookup-complete', function (data, next) {
       *     console.log('data from the lookup', data);
       *     next();
       *   });
       *   threeDSecureInstance.on('customer-canceled', function () {
       *     console.log('log that the customer canceled');
       *   });
       * });
       * @returns {void}
       */

      /**
       * @name ThreeDSecure#off
       * @function
       * @param {string} event The name of the event to which you are unsubscribing.
       * @param {function} handler The callback for the event you are unsubscribing from.
       * @description Unsubscribes the handler function to a named event.
       * @example
       * <caption>Subscribing and then unsubscribing from a 3D Secure eld event</caption>
       * braintree.threeDSecure.create({ ... }, function (createErr, threeDSecureInstance) {
       *   var lookupCallback = function (data, next) {
       *     console.log(data);
       *     next();
       *   };
       *   var cancelCallback = function () {
       *     // log the cancelation
       *     // or update UI
       *   };
       *
       *   threeDSecureInstance.on('lookup-complete', lookupCallback);
       *   threeDSecureInstance.on('customer-canceled', cancelCallback);
       *
       *   // later on
       *   threeDSecureInstance.off('lookup-complete', lookupCallback);
       *   threeDSecureInstance.off('customer-canceled', cancelCallback);
       * });
       * @returns {void}
       */

      /**
       * This event is emitted when the `2-inline-iframe` version is specified when creating the 3D Secure instance and the authentication iframe becomes available.
       * @event ThreeDSecure#authentication-iframe-available
       * @example
       * <caption>Listening for the authentication iframe to be available</caption>
       *   threeDSecureInstance.on('authentication-iframe-available', function (event, next) {
       *     document.body.appendChild(event.element); // add iframe element to page
       *
       *     next(); // let the SDK know the iframe is ready
       *   });
       * });
       */

      /**
       * This event is emitted when using the 3D Secure 2.0 flow and the initial lookup request completes. If this is not used, a `onLookupComplete` callback must be passed into the `verifyCard` method.
       * @event ThreeDSecure#lookup-complete
       * @example
       * <caption>Listening for when the lookup request is complete</caption>
       * braintree.threeDSecure.create({
       *   client: clientInstance,
       *   version: '2'
       * }, function (createErr, threeDSecureInstance) {
       *   threeDSecureInstance.on('lookup-complete', function (data, next) {
       *     // inspect the data
       *
       *     // call next when ready to proceed with the challenge
       *     next();
       *   });
       * });
       */

      /**
       * This event is emitted when using the 3D Secure 2.0 flow and the customer cancels the 3D Secure challenge.
       * @event ThreeDSecure#customer-canceled
       * @example
       * <caption>Listening for when the customer cancels the 3D Secure challenge</caption>
       * braintree.threeDSecure.create({
       *   client: clientInstance,
       *   version: '2'
       * }, function (createErr, threeDSecureInstance) {
       *   threeDSecureInstance.on('customer-canceled', function () {
       *     // the customer canceled the 3D Secure challenge
       *   });
       * });
       */

      /**
       * This event is emitted when using the 3D Secure 2.0 flow and the authentication modal closes, either because the authentication was completed or because the customer canceled the process.
       * @event ThreeDSecure#authentication-modal-close
       * @example
       * braintree.threeDSecure.create({
       *   client: clientInstance,
       *   version: '2'
       * }, function (createErr, threeDSecureInstance) {
       *   threeDSecureInstance.on('authentication-modal-close', function () {
       *     // the modal was closed
       *   });
       * });
       */

      /**
       * This event is emitted when using the 3D Secure 2.0 flow and the authentication modal is rendered.
       * @event ThreeDSecure#authentication-modal-render
       * @example
       * braintree.threeDSecure.create({
       *   client: clientInstance,
       *   version: '2'
       * }, function (createErr, threeDSecureInstance) {
       *   threeDSecureInstance.on('authentication-modal-render', function () {
       *     // the modal was rendered, presenting the authentication form to the customer
       *   });
       * });
       */

      /**
       * @class
       * @param {object} options 3D Secure {@link module:braintree-web/three-d-secure.create create} options
       * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/three-d-secure.create|braintree.threeDSecure.create} instead.</strong>
       * @classdesc This class represents a ThreeDSecure component produced by {@link module:braintree-web/three-d-secure.create|braintree.threeDSecure.create}. Instances of this class have a method for launching a 3D Secure authentication flow.
       *
       * If you use the Braintree SDK from within an iframe, you must not use the `sandbox` attribute on your iframe or the 3D Secure modal will not function correctly.
       *
       * **Note**: 3D Secure 2.0 is documented below and will become the default integration method in a future version of Braintree-web. Until then, version 1.0 will continue to be supported. To view 3D Secure 1.0 documentation, look at Braintree-web documentation from version [3.40.0](https://braintree.github.io/braintree-web/3.40.0/ThreeDSecure.html) and earlier, or upgrade your integration by referring to the [3D Secure 2.0 adoption guide](https://developer.paypal.com/braintree/docs/guides/3d-secure/migration/javascript/v3).
       */


      function ThreeDSecure(options) {
        var self = this;
        var Framework = FRAMEWORKS[options.framework];
        EventEmitter.call(this);
        this._framework = new Framework(options);

        this._framework.setUpEventListeners(function () {
          self._emit.apply(self, arguments);
        });
      }

      EventEmitter.createChild(ThreeDSecure);
      /**
       * Launch the 3D Secure login flow, returning a nonce payload.
       *
       * @public
       * @param {object} options Options for card verification.
       * @param {string} options.nonce The nonce representing the card from a tokenization payload. For example, this can be a {@link HostedFields~tokenizePayload|tokenizePayload} returned by Hosted Fields under `payload.nonce`.
       * @param {string} options.bin The numeric Bank Identification Number (bin) of the card from a tokenization payload. For example, this can be a {@link HostedFields~tokenizePayload|tokenizePayload} returned by Hosted Fields under `payload.details.bin`.
       * @param {string} options.amount The amount of the transaction in the current merchant account's currency. This must be expressed in numbers with an optional decimal (using `.`) and precision up to the hundredths place. For example, if you're processing a transaction for 1.234,56 € then `amount` should be `1234.56`.
       * @param {string} [options.accountType] The account type for the card (if known). Accepted values: `credit` or `debit`.
       * @param {boolean} [options.cardAddChallengeRequested] If set to `true`, a card-add challenge will be requested from the issuer. If set to `false`, a card-add challenge will not be requested. If the param is missing, a card-add challenge will only be requested for $0 amount. An authentication created using this flag should only be used for vaulting operations (creation of customers' credit cards or payment methods) and not for creating transactions.
       * @param {boolean} [options.cardAdd] *Deprecated:* Use `cardAddChallengeRequested` instead.
       * @param {boolean} [options.challengeRequested] If set to true, an authentication challenge will be forced if possible.
       * @param {boolean} [options.exemptionRequested] If set to true, an exemption to the authentication challenge will be requested.
       * @param {function} [options.onLookupComplete] *Deprecated:* Use {@link ThreeDSecure#event:lookup-complete|`threeDSecureInstance.on('lookup-complete')`} instead. Function to execute when lookup completes. The first argument, `data`, is a {@link ThreeDSecure~verificationData|verificationData} object, and the second argument, `next`, is a callback. `next` must be called to continue.
       * @param {string} [options.email] The email used for verification. (maximum length 255)
       * @param {string} [options.mobilePhoneNumber] The mobile phone number used for verification. Only numbers; remove dashes, parenthesis and other characters. (maximum length 25)
       * @param {object} [options.billingAddress] An {@link ThreeDSecure~billingAddress|billingAddress} object for verification.
       * @param {object} [options.additionalInformation] An {@link ThreeDSecure~additionalInformation|additionalInformation} object for verification.
       * @param {object} [options.customer] **Deprecated** Customer information for use in 3DS 1.0 verifications. Can contain any subset of a {@link ThreeDSecure~verifyCardCustomerObject|verifyCardCustomerObject}. Only to be used for 3DS 1.0 integrations.
       * @param {callback} options.addFrame **Deprecated** This {@link ThreeDSecure~addFrameCallback|addFrameCallback} will be called when the bank frame needs to be added to your page. Only to be used for 3DS 1.0 integrations.
       * @param {callback} options.removeFrame **Deprecated** For use in 3DS 1.0 Flows. This {@link ThreeDSecure~removeFrameCallback|removeFrameCallback} will be called when the bank frame needs to be removed from your page. Only to be used in 3DS 1.0 integrations.
       * @param {callback} [callback] The second argument, <code>data</code>, is a {@link ThreeDSecure~verifyPayload|verifyPayload}. If no callback is provided, it will return a promise that resolves {@link ThreeDSecure~verifyPayload|verifyPayload}.
      
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example
       * <caption>Verifying a payment method nonce with 3DS 2.0</caption>
       * var my3DSContainer;
       *
       * // set up listener after initialization
       * threeDSecure.on(('lookup-complete', function (data, next) {
       *   // use `data` here, then call `next()`
       *   next();
       * });
       *
       * // call verifyCard after tokenizing a card
       * threeDSecure.verifyCard({
       *   amount: '123.45',
       *   nonce: hostedFieldsTokenizationPayload.nonce,
       *   bin: hostedFieldsTokenizationPayload.details.bin,
       *   email: 'test@example.com'
       *   billingAddress: {
       *     givenName: 'Jill',
       *     surname: 'Doe',
       *     phoneNumber: '8101234567',
       *     streetAddress: '555 Smith St.',
       *     extendedAddress: '#5',
       *     locality: 'Oakland',
       *     region: 'CA',
       *     postalCode: '12345',
       *     countryCodeAlpha2: 'US'
       *   },
       *   additionalInformation: {
       *     workPhoneNumber: '5555555555',
       *     shippingGivenName: 'Jill',
       *     shippingSurname: 'Doe',
       *     shippingAddress: {
       *       streetAddress: '555 Smith st',
       *       extendedAddress: '#5',
       *       locality: 'Oakland',
       *       region: 'CA',
       *       postalCode: '12345',
       *       countryCodeAlpha2: 'US'
       *     }
       *     shippingPhone: '8101234567'
       *   }
       * }, function (err, payload) {
       *   if (err) {
       *     console.error(err);
       *     return;
       *   }
       *
       *   if (payload.liabilityShifted) {
       *     // Liability has shifted
       *     submitNonceToServer(payload.nonce);
       *   } else if (payload.liabilityShiftPossible) {
       *     // Liability may still be shifted
       *     // Decide if you want to submit the nonce
       *   } else {
       *     // Liability has not shifted and will not shift
       *     // Decide if you want to submit the nonce
       *   }
       * });
       * <caption>Verifying a payment method nonce with 3DS 2.0 with onLookupComplete callback</caption>
       * var my3DSContainer;
       *
       * threeDSecure.verifyCard({
       *   amount: '123.45',
       *   nonce: hostedFieldsTokenizationPayload.nonce,
       *   bin: hostedFieldsTokenizationPayload.details.bin,
       *   email: 'test@example.com'
       *   billingAddress: {
       *     givenName: 'Jill',
       *     surname: 'Doe',
       *     phoneNumber: '8101234567',
       *     streetAddress: '555 Smith St.',
       *     extendedAddress: '#5',
       *     locality: 'Oakland',
       *     region: 'CA',
       *     postalCode: '12345',
       *     countryCodeAlpha2: 'US'
       *   },
       *   additionalInformation: {
       *     workPhoneNumber: '5555555555',
       *     shippingGivenName: 'Jill',
       *     shippingSurname: 'Doe',
       *     shippingAddress: {
       *       streetAddress: '555 Smith st',
       *       extendedAddress: '#5',
       *       locality: 'Oakland',
       *       region: 'CA',
       *       postalCode: '12345',
       *       countryCodeAlpha2: 'US'
       *     }
       *     shippingPhone: '8101234567'
       *   },
       *   onLookupComplete: function (data, next) {
       *     // use `data` here, then call `next()`
       *     next();
       *   }
       * }, function (err, payload) {
       *   if (err) {
       *     console.error(err);
       *     return;
       *   }
       *
       *   if (payload.liabilityShifted) {
       *     // Liability has shifted
       *     submitNonceToServer(payload.nonce);
       *   } else if (payload.liabilityShiftPossible) {
       *     // Liability may still be shifted
       *     // Decide if you want to submit the nonce
       *   } else {
       *     // Liability has not shifted and will not shift
       *     // Decide if you want to submit the nonce
       *   }
       * });
       * @example
       * <caption>Handling 3DS lookup errors</caption>
       * var my3DSContainer;
       *
       * // set up listener after initialization
       * threeDSecure.on(('lookup-complete', function (data, next) {
       *   // use `data` here, then call `next()`
       *   next();
       * });
       *
       * // call verifyCard after tokenizing a card
       * threeDSecure.verifyCard({
       *   amount: '123.45',
       *   nonce: hostedFieldsTokenizationPayload.nonce,
       *   bin: hostedFieldsTokenizationPayload.details.bin,
       *   email: 'test@example.com',
       *   billingAddress: billingAddressFromCustomer,
       *   additionalInformation: additionalInfoFromCustomer
       * }, function (err, payload) {
       *   if (err) {
       *     if (err.code.indexOf('THREEDS_LOOKUP') === 0) {
       *       // an error occurred during the initial lookup request
       *
       *       if (err.code === 'THREEDS_LOOKUP_TOKENIZED_CARD_NOT_FOUND_ERROR') {
       *         // either the passed payment method nonce does not exist
       *         // or it was already consumed before the lookup call was made
       *       } else if (err.code.indexOf('THREEDS_LOOKUP_VALIDATION') === 0) {
       *         // a validation error occurred
       *         // likely some non-ascii characters were included in the billing
       *         // address given name or surname fields, or the cardholdername field
       *
       *         // Instruct your user to check their data and try again
       *       } else {
       *         // an unknown lookup error occurred
       *       }
       *     } else {
       *       // some other kind of error
       *     }
       *     return;
       *   }
       *
       *   // handle success
       * });
       * @example
       * <caption>Deprecated: Verifying an existing nonce with 3DS 1.0</caption>
       * var my3DSContainer;
       *
       * threeDSecure.verifyCard({
       *   nonce: existingNonce,
       *   amount: 123.45,
       *   addFrame: function (err, iframe) {
       *     // Set up your UI and add the iframe.
       *     my3DSContainer = document.createElement('div');
       *     my3DSContainer.appendChild(iframe);
       *     document.body.appendChild(my3DSContainer);
       *   },
       *   removeFrame: function () {
       *     // Remove UI that you added in addFrame.
       *     document.body.removeChild(my3DSContainer);
       *   }
       * }, function (err, payload) {
       *   if (err) {
       *     console.error(err);
       *     return;
       *   }
       *
       *   if (payload.liabilityShifted) {
       *     // Liability has shifted
       *     submitNonceToServer(payload.nonce);
       *   } else if (payload.liabilityShiftPossible) {
       *     // Liability may still be shifted
       *     // Decide if you want to submit the nonce
       *   } else {
       *     // Liability has not shifted and will not shift
       *     // Decide if you want to submit the nonce
       *   }
       * });
       */

      ThreeDSecure.prototype.verifyCard = function (options) {
        var privateOptions;

        if (this.hasListener('lookup-complete')) {
          privateOptions = {
            ignoreOnLookupCompleteRequirement: true
          };
        }

        return this._framework.verifyCard(options, privateOptions);
      };
      /* eslint-disable-next-line valid-jsdoc */

      /**
       * Launch the iframe challenge using a 3D Secure lookup response from a server side lookup.
       *
       * @public
       * @param {(object|string)} lookupResponse The lookup response from the server side call to lookup the 3D Secure information. The raw string or a parsed object can be passed.
       * @returns {Promise} Returns a promise.
       * @example
       * var my3DSContainer;
       *
       * threeDSecure.initializeChallengeWithLookupResponse(lookupResponseFromServer).then(function (payload) {
       *   if (payload.liabilityShifted) {
       *     // Liability has shifted
       *     submitNonceToServer(payload.nonce);
       *   } else if (payload.liabilityShiftPossible) {
       *     // Liability may still be shifted
       *     // Decide if you want to submit the nonce
       *   } else {
       *     // Liability has not shifted and will not shift
       *     // Decide if you want to submit the nonce
       *   }
       * });
       */


      ThreeDSecure.prototype.initializeChallengeWithLookupResponse = function (lookupResponse) {
        if (typeof lookupResponse === 'string') {
          lookupResponse = JSON.parse(lookupResponse);
        }

        return this._framework.initializeChallengeWithLookupResponse(lookupResponse);
      };
      /**
       * Gather the data needed for a 3D Secure lookup call.
       *
       * @public
       * @param {object} options Options for 3D Secure lookup.
       * @param {string} options.nonce The nonce representing the card from a tokenization payload. For example, this can be a {@link HostedFields~tokenizePayload|tokenizePayload} returned by Hosted Fields under `payload.nonce`.
       * @param {string} [options.bin] The numeric Bank Identification Number (bin) of the card from a tokenization payload. For example, this can be a {@link HostedFields~tokenizePayload|tokenizePayload} returned by Hosted Fields under `payload.details.bin`. Though not required to start the verification, it is required to receive a 3DS 2.0 lookup response.
       * @param {callback} [callback] The second argument, <code>data</code>, is a {@link ThreeDSecure~prepareLookupPayload|prepareLookupPayload}. If no callback is provided, it will return a promise that resolves {@link ThreeDSecure~prepareLookupPayload|prepareLookupPayload}.
      
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example
       * <caption>Preparing data for a 3D Secure lookup</caption>
       * threeDSecure.prepareLookup({
       *   nonce: hostedFieldsTokenizationPayload.nonce,
       *   bin: hostedFieldsTokenizationPayload.details.bin
       * }, function (err, payload) {
       *   if (err) {
       *     console.error(err);
       *     return;
       *   }
       *
       *   // send payload to server to do server side lookup
       * });
       */


      ThreeDSecure.prototype.prepareLookup = function (options) {
        return this._framework.prepareLookup(options).then(function (data) {
          return JSON.stringify(data);
        });
      };
      /**
       * Cancel the 3DS flow and return the verification payload if available. If using 3D Secure version 2, this will not close the UI of the authentication modal. It is recommended that this method only be used in the {@link ThreeDSecure#event:lookup-complete|`lookup-complete`} event or the `onLookupComplete` callback.
       * @public
       * @param {callback} [callback] The second argument is a {@link ThreeDSecure~verifyPayload|verifyPayload}. If there is no verifyPayload (the initial lookup did not complete), an error will be returned. If no callback is passed, `cancelVerifyCard` will return a promise.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example <caption>Cancel the verification in `lookup-complete` event</caption>
       * // set up listener after instantiation
       * threeDSecure.on('lookup-complete', function (data, next) {
       *   // determine if you want to call next to start the challenge,
       *   // if not, call cancelVerifyCard
       *   threeDSecure.cancelVerifyCard(function (err, verifyPayload) {
       *     if (err) {
       *       // Handle error
       *       console.log(err.message); // No verification payload available
       *       return;
       *     }
       *
       *     verifyPayload.nonce; // The nonce returned from the 3ds lookup call
       *     verifyPayload.liabilityShifted; // boolean
       *     verifyPayload.liabilityShiftPossible; // boolean
       *   });
       * });
       *
       * // after tokenizing a credit card
       * threeDSecure.verifyCard({
       *   amount: '100.00',
       *   nonce: nonceFromTokenizationPayload,
       *   bin: binFromTokenizationPayload
       *   // other fields such as billing address
       * }, function (verifyError, payload) {
       *   if (verifyError) {
       *     if (verifyError.code === 'THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT ') {
       *       // flow was canceled by merchant, 3ds info can be found in the payload
       *       // for cancelVerifyCard
       *     }
       *   }
       * });
       * @example <caption>Cancel the verification in onLookupComplete callback</caption>
       * threeDSecure.verifyCard({
       *   amount: '100.00',
       *   nonce: nonceFromTokenizationPayload,
       *   bin: binFromTokenizationPayload,
       *   // other fields such as billing address
       *   onLookupComplete: function (data, next) {
       *     // determine if you want to call next to start the challenge,
       *     // if not, call cancelVerifyCard
       *     threeDSecure.cancelVerifyCard(function (err, verifyPayload) {
       *       if (err) {
       *         // Handle error
       *         console.log(err.message); // No verification payload available
       *         return;
       *       }
       *
       *       verifyPayload.nonce; // The nonce returned from the 3ds lookup call
       *       verifyPayload.liabilityShifted; // boolean
       *       verifyPayload.liabilityShiftPossible; // boolean
       *     });
       *   }
       * }, function (verifyError, payload) {
       *   if (verifyError) {
       *     if (verifyError.code === 'THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT ') {
       *       // flow was canceled by merchant, 3ds info can be found in the payload
       *       // for cancelVerifyCard
       *     }
       *   }
       * });
       * @example <caption>Cancel the verification in 3D Secure version 1</caption>
       * // unlike with v2, this will not cause `verifyCard` to error, it will simply
       * // never call the callback
       * threeDSecure.cancelVerifyCard(function (err, verifyPayload) {
       *   if (err) {
       *     // Handle error
       *     console.log(err.message); // No verification payload available
       *     return;
       *   }
       *
       *   verifyPayload.nonce; // The nonce returned from the 3ds lookup call
       *   verifyPayload.liabilityShifted; // boolean
       *   verifyPayload.liabilityShiftPossible; // boolean
       * });
       */


      ThreeDSecure.prototype.cancelVerifyCard = function () {
        return this._framework.cancelVerifyCard();
      };
      /**
       * Cleanly remove anything set up by {@link module:braintree-web/three-d-secure.create|create}.
       * @public
       * @param {callback} [callback] Called on completion. If no callback is passed, `teardown` will return a promise.
       * @example
       * threeDSecure.teardown();
       * @example <caption>With callback</caption>
       * threeDSecure.teardown(function () {
       *   // teardown is complete
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      ThreeDSecure.prototype.teardown = function () {
        var methodNames = methods(ThreeDSecure.prototype).concat(methods(EventEmitter.prototype));
        convertMethodsToError(this, methodNames);
        return this._framework.teardown();
      };

      module.exports = wrapPromise.wrapPrototype(ThreeDSecure);
    }, {
      "../../lib/convert-methods-to-error": 100,
      "../../lib/methods": 128,
      "./frameworks": 142,
      "@braintree/event-emitter": 40,
      "@braintree/wrap-promise": 50
    }],
    147: [function (require, module, exports) {
      'use strict';
      /** @module braintree-web/three-d-secure */

      var ThreeDSecure = require('./external/three-d-secure');

      var isHTTPS = require('../lib/is-https').isHTTPS;

      var basicComponentVerification = require('../lib/basic-component-verification');

      var createDeferredClient = require('../lib/create-deferred-client');

      var createAssetsUrl = require('../lib/create-assets-url');

      var BraintreeError = require('../lib/braintree-error');

      var analytics = require('../lib/analytics');

      var errors = require('./shared/errors');

      var VERSION = "3.83.0";

      var Promise = require('../lib/promise');

      var wrapPromise = require('@braintree/wrap-promise');
      /**
       * @static
       * @function create
       * @param {object} options Creation options:
       * @param {object} [options.cardinalSDKConfig] A config for the underlying Cardinal SDK.
       * @param {object} [options.cardinalSDKConfig.logging] The logging configuration for the Cardinal SDK. See [Cardinal's documentation for the logging object](https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/1409568/Configurations#Configurations-Logging) for more information.
       * @param {number} [options.cardinalSDKConfig.timeout] The time in milliseconds to wait before a request to Cardinal's API times out. See [Cardinal's documentation for root level configuration](https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/1409568/Configurations#Configurations-RootLevelConfiguration) for more information.
       * @param {number} [options.cardinalSDKConfig.maxRequestRetries] How many times a request should be re-attempted to Cardinal's API before giving up as a failure. See [Cardinal's documentation for root level configuration](https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/1409568/Configurations#Configurations-RootLevelConfiguration) for more information.
       * @param {object} [options.cardinalSDKConfig.payment] An object to describe how you want the user interactions to behave. Only a subset of the [Cardinal SDK payment configuration object](https://cardinaldocs.atlassian.net/wiki/spaces/CC/pages/1409568/Configurations#Configurations-Payment) are supported: `displayLoading` and `displayExitButton`.
       * @param {Client} [options.client] A {@link Client} instance.
       * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.
       * @param {(number|string)} [options.version=1] The version of 3D Secure to use. Possible options:
       * * 1 - The legacy 3D Secure v1.0 integration.
       * * 2 - A 3D Secure v2.0 integration that uses a modal to host the 3D Secure iframe.
       * * 2-bootstrap3-modal - A 3D Secure v2.0 integration that uses a modal styled with Bootstrap 3 styles to host the 3D Secure iframe. Requires having the Bootstrap 3 script files and stylesheets on your page.
       * * 2-inline-iframe - A 3D Secure v2.0 integration that provides the authentication iframe directly to the merchant.
       * @param {callback} [callback] The second argument, `data`, is the {@link ThreeDSecure} instance. If no callback is provided, it returns a promise that resolves the {@link ThreeDSecure} instance.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
      @example
       * <caption>Creating a v2 3D Secure component using 2 version (Cardinal modal)</caption>
       * braintree.threeDSecure.create({
       *   client: clientInstance,
       *   version: '2'
       * }, function (createError, threeDSecure) {
       *   // set up lookup-complete listener
       *   threeDSecure.on('lookup-complete', function (data, next) {
       *     // check lookup data
       *
       *     next();
       *   });
       *
       *   // using Hosted Fields, use `tokenize` to get back a credit card nonce
       *
       *   threeDSecure.verifyCard({
       *     nonce: nonceFromTokenizationPayload,,
       *     bin: binFromTokenizationPayload,
       *     amount: '100.00'
       *   }, function (verifyError, payload) {
       *     // inspect payload
       *     // send payload.nonce to your server
       *   });
       * });
       * @example
       * <caption>Creating a v2 3D Secure component using 2-bootstrap3-modal version</caption>
       * // must have the boostrap js, css and jquery files on your page
       * braintree.threeDSecure.create({
       *   client: clientInstance,
       *   version: '2-bootstrap3-modal'
       * }, function (createError, threeDSecure) {
       *   // set up lookup-complete listener
       *   threeDSecure.on('lookup-complete', function (data, next) {
       *     // check lookup data
       *
       *     next();
       *   });
       *
       *   // using Hosted Fields, use `tokenize` to get back a credit card nonce
       *
       *   // challenge will be presented in a bootstrap 3 modal
       *   threeDSecure.verifyCard({
       *     nonce: nonceFromTokenizationPayload,
       *     bin: binFromTokenizationPayload,
       *     amount: '100.00'
       *   }, function (verifyError, payload) {
       *     // inspect payload
       *     // send payload.nonce to your server
       *   });
       * });
       * @example
       * <caption>Creating a v2 3D Secure component using 2-inline-iframe version</caption>
       * braintree.threeDSecure.create({
       *   client: clientInstance,
       *   version: '2-inline-iframe'
       * }, function (createError, threeDSecure) {
       *   // set up lookup-complete listener
       *   threeDSecure.on('lookup-complete', function (data, next) {
       *     // check lookup data
       *
       *     next();
       *   });
       *   // set up iframe listener
       *   threeDSecure.on('authentication-iframe-available', function (event, next) {
       *     var element = event.element; // an html element that contains the iframe
       *
       *     document.body.appendChild(element); // put it on your page
       *
       *     next(); // let the sdk know the element has been added to the page
       *   });
       *
       *   // using Hosted Fields, use `tokenize` to get back a credit card nonce
       *
       *   threeDSecure.verifyCard({
       *     nonce: nonceFromTokenizationPayload,,
       *     bin: binFromTokenizationPayload,
       *     amount: '100.00'
       *   }, function (verifyError, payload) {
       *     // inspect payload
       *     // send payload.nonce to your server
       *   });
       * });
       */


      function create(options) {
        var name = '3D Secure';
        return basicComponentVerification.verify({
          name: name,
          client: options.client,
          authorization: options.authorization
        }).then(function () {
          var assetsUrl = createAssetsUrl.create(options.authorization);
          var framework = getFramework(options);
          var createPromise = createDeferredClient.create({
            authorization: options.authorization,
            client: options.client,
            debug: options.debug,
            assetsUrl: assetsUrl,
            name: name
          }).then(function (client) {
            var error, isProduction;
            var config = client.getConfiguration();
            var gwConfig = config.gatewayConfiguration;
            options.client = client;

            if (!gwConfig.threeDSecureEnabled) {
              error = errors.THREEDS_NOT_ENABLED;
            }

            if (config.authorizationType === 'TOKENIZATION_KEY') {
              error = errors.THREEDS_CAN_NOT_USE_TOKENIZATION_KEY;
            }

            isProduction = gwConfig.environment === 'production';

            if (isProduction && !isHTTPS()) {
              error = errors.THREEDS_HTTPS_REQUIRED;
            }

            if (framework !== 'legacy' && !(gwConfig.threeDSecure && gwConfig.threeDSecure.cardinalAuthenticationJWT)) {
              analytics.sendEvent(options.client, 'three-d-secure.initialization.failed.missing-cardinalAuthenticationJWT');
              error = errors.THREEDS_NOT_ENABLED_FOR_V2;
            }

            if (error) {
              return Promise.reject(new BraintreeError(error));
            }

            analytics.sendEvent(options.client, 'three-d-secure.initialized');
            return client;
          });
          var instance = new ThreeDSecure({
            client: options.client,
            assetsUrl: assetsUrl,
            createPromise: createPromise,
            loggingEnabled: options.loggingEnabled,
            cardinalSDKConfig: options.cardinalSDKConfig,
            framework: framework
          });

          if (options.client) {
            return createPromise.then(function () {
              return instance;
            });
          }

          return instance;
        });
      }

      function getFramework(options) {
        var version = String(options.version || '');

        if (!version || version === '1') {
          return 'legacy';
        }

        switch (version) {
          case '2':
          case '2-cardinal-modal':
            return 'cardinal-modal';

          case '2-bootstrap3-modal':
            return 'bootstrap3-modal';

          case '2-inline-iframe':
            return 'inline-iframe';

          default:
            throw new BraintreeError({
              code: errors.THREEDS_UNRECOGNIZED_VERSION.code,
              type: errors.THREEDS_UNRECOGNIZED_VERSION.type,
              message: 'Version `' + options.version + '` is not a recognized version. You may need to update the version of your Braintree SDK to support this version.'
            });
        }
      }

      module.exports = {
        create: wrapPromise(create),

        /**
         * @description The current version of the SDK, i.e. `1.32.1`.
         * @type {string}
         */
        VERSION: VERSION
      };
    }, {
      "../lib/analytics": 93,
      "../lib/basic-component-verification": 96,
      "../lib/braintree-error": 98,
      "../lib/create-assets-url": 102,
      "../lib/create-deferred-client": 104,
      "../lib/is-https": 125,
      "../lib/promise": 130,
      "./external/three-d-secure": 146,
      "./shared/errors": 149,
      "@braintree/wrap-promise": 50
    }],
    148: [function (require, module, exports) {
      'use strict';

      module.exports = {
        LANDING_FRAME_NAME: 'braintreethreedsecurelanding',
        CARDINAL_SCRIPT_SOURCE: {
          production: 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js',
          sandbox: 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js'
        }
      };
    }, {}],
    149: [function (require, module, exports) {
      'use strict';
      /**
       * @name BraintreeError.3D Secure - Creation Error Codes
       * @description Errors that occur when [creating the 3D Secure component](./module-braintree-web_three-d-secure.html#.create).
       * @property {MERCHANT} THREEDS_NOT_ENABLED Occurs when 3D Secure is not enabled in the Braintree control panel.
       * @property {MERCHANT} THREEDS_CAN_NOT_USE_TOKENIZATION_KEY Occurs when 3D Secure component is created without a Client Token.
       * @property {MERCHANT} THREEDS_HTTPS_REQUIRED Occurs when 3D Secure component is created in production over HTTPS.
       * @property {MERCHANT} THREEDS_NOT_ENABLED_FOR_V2 Occurs when 3D Secure component is created with version 2 parameter, but merchant is not enabled to use version 2.
       * @property {MERCHANT} THREEDS_UNRECOGNIZED_VERSION Occurs when unrecognized version enum is passed into the create call.
       * @property {UNKNOWN} THREEDS_CARDINAL_SDK_SETUP_FAILED Occurs when Cardinal's Songbird.js library fails to setup for an unknown reason.
       * @property {NETWORK} THREEDS_CARDINAL_SDK_SCRIPT_LOAD_FAILED Occurs when using version 2 and Cardinal's Songbird.js script could not be loaded.
       * @property {UNKNOWN} THREEDS_CARDINAL_SDK_SETUP_TIMEDOUT Occurs when Cardinal's Songbird.js library takes longer than 60 seconds to set up.
       * @property {UNKNOWN} THREEDS_CARDINAL_SDK_RESPONSE_TIMEDOUT Occurs when Cardinal sends a response indicating a timeout on /Validate, /Confirm, or /Continue.
       * @property {MERCHANT} THREEDS_CARDINAL_SDK_BAD_CONFIG Occurs when there is no JWT in the request. Also when there's some other malformed aspect of config.
       * @property {MERCHANT} THREEDS_CARDINAL_SDK_BAD_JWT Occurs when a malformed config causes a either a missing response JWT or a malformed Cardinal response.
       * @property {UNKNOWN} THREEDS_CARDINAL_SDK_ERROR Occurs when a "general error" or a Cardinal hosted fields error happens. Description contains more details.
       * @property {CUSTOMER} THREEDS_CARDINAL_SDK_CANCELED Occurs when customer cancels the transaction mid-flow, usually with alt-pays that have their own cancel buttons.
      */

      /**
       * @name BraintreeError.3D Secure - verifyCard Error Codes
       * @description Errors that occur when using the [`verifyCard` method](./ThreeDSecure.html#verifyCard).
       * @property {MERCHANT} THREEDS_AUTHENTICATION_IN_PROGRESS Occurs when another verification is already in progress.
       * @property {MERCHANT} THREEDS_MISSING_VERIFY_CARD_OPTION Occurs when a required option is missing.
       * @property {UNKNOWN} THREEDS_JWT_AUTHENTICATION_FAILED Occurs when something went wrong authenticating the JWT from the Cardinal SDK.
       * @property {MERCHANT} THREEDS_LOOKUP_TOKENIZED_CARD_NOT_FOUND_ERROR Occurs when the supplied payment method nonce does not exist or the payment method nonce has already been consumed.
       * @property {CUSTOMER} THREEDS_LOOKUP_VALIDATION_ERROR Occurs when a validation error occurs during the 3D Secure lookup.
       * @property {UNKNOWN} THREEDS_LOOKUP_ERROR An unknown error occurred while attempting the 3D Secure lookup.
       * @property {MERCHANT} THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT Occurs when the 3D Secure flow is canceled by the merchant using `cancelVerifyCard` (3D Secure v2 flows only).
       * @property {UNKNOWN} THREEDS_INLINE_IFRAME_DETAILS_INCORRECT An unknown error occurred while attempting to use the inline iframe framework.
       */

      /**
       * @name BraintreeError.3D Secure - cancelVerifyCard Error Codes
       * @description Errors that occur when using the [`cancelVerifyCard` method](./ThreeDSecure.html#cancelVerifyCard).
       * @property {MERCHANT} THREEDS_NO_VERIFICATION_PAYLOAD Occurs when the 3D Secure flow is canceled, but there is no 3D Secure information available.
       */

      /**
       * @name BraintreeError.3D Secure - Internal Error Codes
       * @ignore
       * @description Errors that occur internally
       * @property {INTERNAL} THREEDS_TERM_URL_REQUIRES_BRAINTREE_DOMAIN Occurs when iframe is initialized on a non-verified domain.
       * @property {INTERNAL} THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED Occurs when a 3D Secure framework method is not implemented.
       */

      var BraintreeError = require('../../lib/braintree-error');

      module.exports = {
        THREEDS_NOT_ENABLED: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_NOT_ENABLED',
          message: '3D Secure is not enabled for this merchant.'
        },
        THREEDS_CAN_NOT_USE_TOKENIZATION_KEY: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_CAN_NOT_USE_TOKENIZATION_KEY',
          message: '3D Secure can not use a tokenization key for authorization.'
        },
        THREEDS_HTTPS_REQUIRED: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_HTTPS_REQUIRED',
          message: '3D Secure requires HTTPS.'
        },
        THREEDS_NOT_ENABLED_FOR_V2: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_NOT_ENABLED_FOR_V2',
          message: '3D Secure version 2 is not enabled for this merchant. Contact Braintree Support for assistance at https://help.braintreepayments.com/'
        },
        THREEDS_UNRECOGNIZED_VERSION: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_UNRECOGNIZED_VERSION'
        },
        THREEDS_CARDINAL_SDK_SETUP_FAILED: {
          type: BraintreeError.types.UNKNOWN,
          code: 'THREEDS_CARDINAL_SDK_SETUP_FAILED',
          message: 'Something went wrong setting up Cardinal\'s Songbird.js library.'
        },
        THREEDS_CARDINAL_SDK_SCRIPT_LOAD_FAILED: {
          type: BraintreeError.types.NETWORK,
          code: 'THREEDS_CARDINAL_SDK_SCRIPT_LOAD_FAILED',
          message: 'Cardinal\'s Songbird.js library could not be loaded.'
        },
        THREEDS_CARDINAL_SDK_SETUP_TIMEDOUT: {
          type: BraintreeError.types.UNKNOWN,
          code: 'THREEDS_CARDINAL_SDK_SETUP_TIMEDOUT',
          message: 'Cardinal\'s Songbird.js took too long to setup.'
        },
        THREEDS_CARDINAL_SDK_RESPONSE_TIMEDOUT: {
          type: BraintreeError.types.UNKNOWN,
          code: 'THREEDS_CARDINAL_SDK_RESPONSE_TIMEDOUT',
          message: 'Cardinal\'s API took too long to respond.'
        },
        THREEDS_CARDINAL_SDK_BAD_CONFIG: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_CARDINAL_SDK_BAD_CONFIG',
          message: 'JWT or other required field missing. Please check your setup configuration.'
        },
        THREEDS_CARDINAL_SDK_BAD_JWT: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_CARDINAL_SDK_BAD_JWT',
          message: 'Cardinal JWT missing or malformed. Please check your setup configuration.'
        },
        THREEDS_CARDINAL_SDK_ERROR: {
          type: BraintreeError.types.UNKNOWN,
          code: 'THREEDS_CARDINAL_SDK_ERROR',
          message: 'A general error has occurred with Cardinal. See description for more information.'
        },
        THREEDS_CARDINAL_SDK_CANCELED: {
          type: BraintreeError.types.CUSTOMER,
          code: 'THREEDS_CARDINAL_SDK_CANCELED',
          message: 'Canceled by user.'
        },
        THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT',
          message: '3D Secure verfication canceled by merchant.'
        },
        THREEDS_AUTHENTICATION_IN_PROGRESS: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_AUTHENTICATION_IN_PROGRESS',
          message: 'Cannot call verifyCard while existing authentication is in progress.'
        },
        THREEDS_MISSING_VERIFY_CARD_OPTION: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_MISSING_VERIFY_CARD_OPTION'
        },
        THREEDS_JWT_AUTHENTICATION_FAILED: {
          type: BraintreeError.types.UNKNOWN,
          code: 'THREEDS_JWT_AUTHENTICATION_FAILED',
          message: 'Something went wrong authenticating the JWT from Cardinal'
        },
        THREEDS_LOOKUP_TOKENIZED_CARD_NOT_FOUND_ERROR: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_LOOKUP_TOKENIZED_CARD_NOT_FOUND_ERROR',
          message: 'Either the payment method nonce passed to `verifyCard` does not exist, or it was already consumed'
        },
        THREEDS_LOOKUP_VALIDATION_ERROR: {
          type: BraintreeError.types.CUSTOMER,
          code: 'THREEDS_LOOKUP_VALIDATION_ERROR',
          message: 'The data passed in `verifyCard` did not pass validation checks. See details for more info'
        },
        THREEDS_LOOKUP_ERROR: {
          type: BraintreeError.types.UNKNOWN,
          code: 'THREEDS_LOOKUP_ERROR',
          message: 'Something went wrong during the 3D Secure lookup'
        },
        THREEDS_INLINE_IFRAME_DETAILS_INCORRECT: {
          type: BraintreeError.types.UNKNOWN,
          code: 'THREEDS_INLINE_IFRAME_DETAILS_INCORRECT',
          message: 'Something went wrong when attempting to add the authentication iframe to the page.'
        },
        THREEDS_NO_VERIFICATION_PAYLOAD: {
          type: BraintreeError.types.MERCHANT,
          code: 'THREEDS_NO_VERIFICATION_PAYLOAD',
          message: 'No verification payload available.'
        },
        THREEDS_TERM_URL_REQUIRES_BRAINTREE_DOMAIN: {
          type: BraintreeError.types.INTERNAL,
          code: 'THREEDS_TERM_URL_REQUIRES_BRAINTREE_DOMAIN',
          message: 'Term Url must be on a Braintree domain.'
        },
        THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED: {
          type: BraintreeError.types.INTERNAL,
          code: 'THREEDS_FRAMEWORK_METHOD_NOT_IMPLEMENTED',
          message: 'Method not implemented for this framework.'
        }
      };
    }, {
      "../../lib/braintree-error": 98
    }],
    150: [function (require, module, exports) {
      'use strict';

      var enumerate = require('../../lib/enumerate');

      module.exports = enumerate(['AUTHENTICATION_COMPLETE'], 'threedsecure:');
    }, {
      "../../lib/enumerate": 107
    }],
    151: [function (require, module, exports) {
      'use strict';
      /**
       * @name BraintreeError.Vault Manager - deletePaymentMethod Error Codes
       * @description Errors that occur when using the [`deletePaymentMethod` method](./VaultManager.html#deletePaymentMethod).
       * @property {MERCHANT} VAULT_MANAGER_DELETE_PAYMENT_METHOD_NONCE_REQUIRES_CLIENT_TOKEN Occurs when vault manager is initialized with a tokenization key instead of a Client Token.
       * @property {MERCHANT} VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND Occurs when the specified payment method can not be found.
       * @property {UNKNOWN} VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR Occurs when there is an error attempting to delete the payment method.
       */

      var BraintreeError = require('../lib/braintree-error');

      module.exports = {
        VAULT_MANAGER_DELETE_PAYMENT_METHOD_NONCE_REQUIRES_CLIENT_TOKEN: {
          type: BraintreeError.types.MERCHANT,
          code: 'VAULT_MANAGER_DELETE_PAYMENT_METHOD_NONCE_REQUIRES_CLIENT_TOKEN',
          message: 'A client token with a customer id must be used to delete a payment method nonce.'
        },
        VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND: {
          type: BraintreeError.types.MERCHANT,
          code: 'VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND'
        },
        VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR: {
          type: BraintreeError.types.UNKNOWN,
          code: 'VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR'
        }
      };
    }, {
      "../lib/braintree-error": 98
    }],
    152: [function (require, module, exports) {
      'use strict';
      /**
       * @module braintree-web/vault-manager
       * @description Manages customer's payment methods.
       */

      var basicComponentVerification = require('../lib/basic-component-verification');

      var createDeferredClient = require('../lib/create-deferred-client');

      var createAssetsUrl = require('../lib/create-assets-url');

      var VaultManager = require('./vault-manager');

      var VERSION = "3.83.0";

      var wrapPromise = require('@braintree/wrap-promise');
      /**
       * @static
       * @function create
       * @param {object} options Creation options:
       * @param {Client} [options.client] A {@link Client} instance.
       * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.
       * @param {callback} callback The second argument, `data`, is the {@link VaultManager} instance.
       * @returns {void}
       */


      function create(options) {
        var name = 'Vault Manager';
        return basicComponentVerification.verify({
          name: name,
          client: options.client,
          authorization: options.authorization
        }).then(function () {
          return new VaultManager({
            createPromise: createDeferredClient.create({
              authorization: options.authorization,
              client: options.client,
              debug: options.debug,
              assetsUrl: createAssetsUrl.create(options.authorization),
              name: name
            })
          });
        });
      }

      module.exports = {
        create: wrapPromise(create),

        /**
         * @description The current version of the SDK, i.e. `1.32.1`.
         * @type {string}
         */
        VERSION: VERSION
      };
    }, {
      "../lib/basic-component-verification": 96,
      "../lib/create-assets-url": 102,
      "../lib/create-deferred-client": 104,
      "./vault-manager": 153,
      "@braintree/wrap-promise": 50
    }],
    153: [function (require, module, exports) {
      'use strict';

      var analytics = require('../lib/analytics');

      var BraintreeError = require('../lib/braintree-error');

      var errors = require('./errors');

      var convertMethodsToError = require('../lib/convert-methods-to-error');

      var methods = require('../lib/methods');

      var Promise = require('../lib/promise');

      var wrapPromise = require('@braintree/wrap-promise');

      var DELETE_PAYMENT_METHOD_MUTATION = 'mutation DeletePaymentMethodFromSingleUseToken($input: DeletePaymentMethodFromSingleUseTokenInput!) {' + '  deletePaymentMethodFromSingleUseToken(input: $input) {' + '    clientMutationId' + '  }' + '}';
      /**
       * @typedef {array} VaultManager~fetchPaymentMethodsPayload The customer's payment methods.
       * @property {object} paymentMethod The payment method object.
       * @property {string} paymentMethod.nonce A nonce that can be sent to your server to transact on the payment method.
       * @property {boolean} paymentMethod.default Whether or not this is the default payment method for the customer.
       * @property {object} paymentMethod.details Any additional details about the payment method. Varies depending on the type of payment method.
       * @property {string} paymentMethod.type A constant indicating the type of payment method.
       * @property {?string} paymentMethod.description Additional description about the payment method.
       * @property {?object} paymentMethod.binData Bin data about the payment method.
       *
       */

      /**
       * @class
       * @param {object} options Options
       * @description <strong>You cannot use this constructor directly. Use {@link module:braintree-web/vault-manager.create|braintree.vault-manager.create} instead.</strong>
       * @classdesc This class allows you to manage a customer's payment methods on the client.
       */

      function VaultManager(options) {
        this._createPromise = options.createPromise;
      }
      /**
       * Fetches payment methods owned by the customer whose id was used to generate the client token used to create the {@link module:braintree-web/client|client}.
       * @public
       * @param {object} [options] Options for fetching payment methods.
       * @param {boolean} [options.defaultFirst = false] If `true`, the payment methods will be returned with the default payment method for the customer first. Otherwise, the payment methods will be returned with the most recently used payment method first.
       * @param {callback} [callback] The second argument is a {@link VaultManager~fetchPaymentMethodsPayload|fetchPaymentMethodsPayload}. This is also what is resolved by the promise if no callback is provided.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example
       * vaultManagerInstance.fetchPaymentMethods(function (err, paymentMethods) {
       *   paymentMethods.forEach(function (paymentMethod) {
       *     // add payment method to UI
       *     // paymentMethod.nonce <- transactable nonce associated with payment method
       *     // paymentMethod.details <- object with additional information about payment method
       *     // paymentMethod.type <- a constant signifying the type
       *   });
       * });
       */


      VaultManager.prototype.fetchPaymentMethods = function (options) {
        var defaultFirst;
        options = options || {};
        defaultFirst = options.defaultFirst === true ? 1 : 0;
        return this._createPromise.then(function (client) {
          return client.request({
            endpoint: 'payment_methods',
            method: 'get',
            data: {
              defaultFirst: defaultFirst
            }
          });
        }).then(function (paymentMethodsPayload) {
          analytics.sendEvent(this._createPromise, 'vault-manager.fetch-payment-methods.succeeded');
          return paymentMethodsPayload.paymentMethods.map(formatPaymentMethodPayload);
        }.bind(this));
      }; // TODO hide from jsdoc for now until the GraphQL API is on for all merchants by default

      /**
       * Deletes a payment method owned by the customer whose id was used to generate the client token used to create the {@link module:braintree-web/client|client}.
       * @public
       * @ignore
       * @param {string} paymentMethodNonce The payment method nonce that references a vaulted payment method.
       * @param {callback} [callback] No data is returned if the operation is successful.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example
       * vaultManagerInstance.deletePaymentMethod('nonce-to-delete', function (err) {
       *   // handle err if it exists
       * });
       */


      VaultManager.prototype.deletePaymentMethod = function (paymentMethodNonce) {
        return this._createPromise.then(function (client) {
          var usesClientToken = client.getConfiguration().authorizationType === 'CLIENT_TOKEN';

          if (!usesClientToken) {
            return Promise.reject(new BraintreeError(errors.VAULT_MANAGER_DELETE_PAYMENT_METHOD_NONCE_REQUIRES_CLIENT_TOKEN));
          }

          return client.request({
            api: 'graphQLApi',
            data: {
              query: DELETE_PAYMENT_METHOD_MUTATION,
              variables: {
                input: {
                  singleUseTokenId: paymentMethodNonce
                }
              },
              operationName: 'DeletePaymentMethodFromSingleUseToken'
            }
          }).then(function () {
            analytics.sendEvent(client, 'vault-manager.delete-payment-method.succeeded'); // noop to prevent sending back the raw graphql data
          }).catch(function (error) {
            var originalError = error.details.originalError;
            var formattedError;
            analytics.sendEvent(client, 'vault-manager.delete-payment-method.failed');

            if (originalError[0] && originalError[0].extensions.errorClass === 'NOT_FOUND') {
              formattedError = new BraintreeError({
                type: errors.VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND.type,
                code: errors.VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND.code,
                message: 'A payment method for payment method nonce `' + paymentMethodNonce + '` could not be found.',
                details: {
                  originalError: originalError
                }
              });
            }

            if (!formattedError) {
              formattedError = new BraintreeError({
                type: errors.VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR.type,
                code: errors.VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR.code,
                message: 'An unknown error occured when attempting to delete the payment method assocaited with the payment method nonce `' + paymentMethodNonce + '`.',
                details: {
                  originalError: originalError
                }
              });
            }

            return Promise.reject(formattedError);
          });
        });
      };

      function formatPaymentMethodPayload(paymentMethod) {
        var formattedPaymentMethod = {
          nonce: paymentMethod.nonce,
          'default': paymentMethod.default,
          details: paymentMethod.details,
          hasSubscription: paymentMethod.hasSubscription,
          type: paymentMethod.type
        };

        if (paymentMethod.description) {
          formattedPaymentMethod.description = paymentMethod.description;
        }

        if (paymentMethod.binData) {
          formattedPaymentMethod.binData = paymentMethod.binData;
        }

        return formattedPaymentMethod;
      }
      /**
       * Cleanly tear down anything set up by {@link module:braintree-web/vault-manager.create|create}.
       * @public
       * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.
       * @example
       * vaultManagerInstance.teardown();
       * @example <caption>With callback</caption>
       * vaultManagerInstance.teardown(function () {
       *   // teardown is complete
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      VaultManager.prototype.teardown = function () {
        convertMethodsToError(this, methods(VaultManager.prototype));
        return Promise.resolve();
      };

      module.exports = wrapPromise.wrapPrototype(VaultManager);
    }, {
      "../lib/analytics": 93,
      "../lib/braintree-error": 98,
      "../lib/convert-methods-to-error": 100,
      "../lib/methods": 128,
      "../lib/promise": 130,
      "./errors": 151,
      "@braintree/wrap-promise": 50
    }],
    154: [function (require, module, exports) {
      "use strict";

      var __importDefault = this && this.__importDefault || function (mod) {
        return mod && mod.__esModule ? mod : {
          "default": mod
        };
      };

      var venmo_desktop_1 = __importDefault(require("./venmo-desktop"));

      module.exports = function createVenmoDesktop(options) {
        var instance = new venmo_desktop_1.default(options);
        return instance.initialize();
      };
    }, {
      "./venmo-desktop": 156
    }],
    155: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.VENMO_PAYMENT_CONTEXT_STATUS_QUERY = exports.LEGACY_VENMO_PAYMENT_CONTEXT_STATUS_QUERY = exports.UPDATE_PAYMENT_CONTEXT_QUERY = exports.LEGACY_UPDATE_PAYMENT_CONTEXT_QUERY = exports.CREATE_PAYMENT_CONTEXT_QUERY = exports.LEGACY_CREATE_PAYMENT_CONTEXT_QUERY = void 0;
      exports.LEGACY_CREATE_PAYMENT_CONTEXT_QUERY = "mutation CreateVenmoQRCodePaymentContext($input: CreateVenmoQRCodePaymentContextInput!) {\n  createVenmoQRCodePaymentContext(input: $input) {\n    clientMutationId\n    venmoQRCodePaymentContext {\n      id\n      merchantId\n      createdAt\n      expiresAt\n    }\n  }\n}";
      exports.CREATE_PAYMENT_CONTEXT_QUERY = "mutation CreateVenmoPaymentContext($input: CreateVenmoPaymentContextInput!) {\n  createVenmoPaymentContext(input: $input) {\n    clientMutationId\n    venmoPaymentContext {\n      id\n      merchantId\n      createdAt\n      expiresAt\n    }\n  }\n}"; // Used only by Braintree.js, not the venmo desktop module

      exports.LEGACY_UPDATE_PAYMENT_CONTEXT_QUERY = "mutation UpdateVenmoQRCodePaymentContext($input: UpdateVenmoQRCodePaymentContextInput!) {\n  updateVenmoQRCodePaymentContext(input: $input) {\n    clientMutationId\n  }\n}";
      exports.UPDATE_PAYMENT_CONTEXT_QUERY = "mutation UpdateVenmoPaymentContextStatus($input: UpdateVenmoPaymentContextStatusInput!) {\n  updateVenmoPaymentContextStatus(input: $input) {\n    clientMutationId\n  }\n}";
      exports.LEGACY_VENMO_PAYMENT_CONTEXT_STATUS_QUERY = "query PaymentContext($id: ID!) {\n  node(id: $id) {\n    ... on VenmoQRCodePaymentContext {\n      status\n      paymentMethodId\n      userName\n    }\n  }\n}";
      exports.VENMO_PAYMENT_CONTEXT_STATUS_QUERY = "query PaymentContext($id: ID!) {\n  node(id: $id) {\n    ... on VenmoPaymentContext {\n      status\n      paymentMethodId\n      userName\n      payerInfo {\n        firstName\n        lastName\n        phoneNumber\n        email\n        externalId\n        userName\n      }\n    }\n  }\n}";
    }, {}],
    156: [function (require, module, exports) {
      "use strict";

      var __assign = this && this.__assign || function () {
        __assign = Object.assign || function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];

            for (var p in s) {
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
          }

          return t;
        };

        return __assign.apply(this, arguments);
      };

      var __importDefault = this && this.__importDefault || function (mod) {
        return mod && mod.__esModule ? mod : {
          "default": mod
        };
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var framebus_1 = __importDefault(require("framebus"));

      var iframer_1 = __importDefault(require("@braintree/iframer"));

      var uuid_1 = __importDefault(require("@braintree/uuid"));

      var events_1 = require("../shared/events");

      var queries_1 = require("./queries");

      var VENMO_DESKTOP_POLLING_INTERVAL = 1000; // 1 second

      var VISUAL_DELAY_BEFORE_SIGNALLING_COMPLETION = 2000; // 2 seconds

      var VenmoDesktop =
      /** @class */
      function () {
        function VenmoDesktop(options) {
          this.isHidden = true;
          this.env = options.environment;
          this.id = uuid_1.default();
          this.profileId = options.profileId;
          this.displayName = options.displayName;
          this.paymentMethodUsage = options.paymentMethodUsage;
          this.shouldUseLegacyQRCodeMutation = !this.paymentMethodUsage;
          var frameUrl = options.url + "#" + this.env + "_" + this.id;
          this.bus = new framebus_1.default({
            channel: this.id,
            verifyDomain: options.verifyDomain
          });
          this.apiRequest = options.apiRequest;
          this.sendEvent = options.sendEvent;
          this.Promise = options.Promise;
          this.alertBox = document.createElement("div");
          this.alertBox.setAttribute("data-venmo-desktop-id", this.id);
          this.alertBox.setAttribute("role", "alert");
          this.alertBox.style.position = "fixed";
          this.alertBox.style.display = "none";
          this.alertBox.style.height = "1px";
          this.alertBox.style.width = "1px";
          this.alertBox.style.overflow = "hidden";
          this.alertBox.style.zIndex = "0";
          this.iframe = iframer_1.default({
            src: frameUrl,
            name: "venmo-desktop-iframe",
            style: {
              display: "none",
              position: "fixed",
              top: "0",
              bottom: "0",
              right: "0",
              left: "0",
              height: "100%",
              width: "100%",
              zIndex: "9999999"
            },
            title: "Venmo Desktop"
          });
        }

        VenmoDesktop.prototype.initialize = function () {
          var _this = this;

          return new this.Promise(function (resolve) {
            _this.bus.on(events_1.VENMO_DESKTOP_IFRAME_READY, function () {
              resolve(_this);
            });

            _this.bus.on(events_1.VENMO_DESKTOP_REQUEST_NEW_QR_CODE, function () {
              _this.sendEvent("venmo.tokenize.desktop.restarted-from-error-view");

              _this.startPolling();
            });

            document.body.appendChild(_this.iframe);
            document.body.appendChild(_this.alertBox);
          });
        };

        VenmoDesktop.prototype.launchDesktopFlow = function () {
          var _this = this;

          this.isHidden = false;
          var promise = new this.Promise(function (resolve, reject) {
            _this.launchDesktopPromiseRejectFunction = reject;

            var removeListeners = function removeListeners() {
              /* eslint-disable @typescript-eslint/no-use-before-define */
              _this.bus.off(events_1.VENMO_DESKTOP_CUSTOMER_CANCELED, customerCancelledHandler);

              _this.bus.off(events_1.VENMO_DESKTOP_AUTHORIZATION_COMPLETED, completedHandler);

              _this.bus.off(events_1.VENMO_DESKTOP_UNKNOWN_ERROR, unknownErrorHandler);
              /* eslint-enable @typescript-eslint/no-use-before-define */

            };

            var unknownErrorHandler = function unknownErrorHandler(err) {
              removeListeners();

              _this.sendEvent("venmo.tokenize.desktop.unknown-error");

              reject({
                allowUIToHandleError: false,
                reason: "UNKNOWN_ERROR",
                err: err
              });
            };

            var customerCancelledHandler = function customerCancelledHandler() {
              removeListeners();

              _this.updateVenmoDesktopPaymentContext("CANCELED");

              _this.sendEvent("venmo.tokenize.desktop.status-change.canceled-from-modal");

              reject({
                allowUIToHandleError: false,
                reason: "CUSTOMER_CANCELED"
              });
            };

            var completedHandler = function completedHandler(payload) {
              removeListeners();
              resolve(payload);
            };

            _this.bus.on(events_1.VENMO_DESKTOP_CUSTOMER_CANCELED, customerCancelledHandler);

            _this.bus.on(events_1.VENMO_DESKTOP_AUTHORIZATION_COMPLETED, completedHandler);

            _this.bus.on(events_1.VENMO_DESKTOP_UNKNOWN_ERROR, unknownErrorHandler);
          });
          this.iframe.style.display = "block";
          this.setAlert("Generating a QR code, get your Venmo app ready");
          this.iframe.focus();
          this.startPolling();
          return promise.then(function (result) {
            delete _this.venmoContextId;
            delete _this.launchDesktopPromiseRejectFunction;
            return result;
          }).catch(function (err) {
            delete _this.venmoContextId;
            delete _this.launchDesktopPromiseRejectFunction;
            return _this.Promise.reject(err);
          });
        };

        VenmoDesktop.prototype.triggerCompleted = function (result) {
          var _this = this;

          if (this.isHidden) {
            return;
          }

          setTimeout(function () {
            _this.bus.emit(events_1.VENMO_DESKTOP_AUTHORIZATION_COMPLETED, result);
          }, VISUAL_DELAY_BEFORE_SIGNALLING_COMPLETION);
        };

        VenmoDesktop.prototype.triggerRejected = function (err) {
          if (this.launchDesktopPromiseRejectFunction) {
            this.launchDesktopPromiseRejectFunction(err);
          }
        };

        VenmoDesktop.prototype.hideDesktopFlow = function () {
          this.setAlert("");
          this.iframe.style.display = "none";
          this.bus.emit(events_1.VENMO_DESKTOP_CLOSED_FROM_PARENT);
          this.isHidden = true;
        };

        VenmoDesktop.prototype.displayError = function (message) {
          if (this.isHidden) {
            return;
          }

          this.bus.emit(events_1.VENMO_DESKTOP_DISPLAY_ERROR, {
            message: message
          });
          this.setAlert(message);
        };

        VenmoDesktop.prototype.displayQRCode = function (id, merchantId) {
          if (this.isHidden) {
            return;
          }

          this.bus.emit(events_1.VENMO_DESKTOP_DISPLAY_QR_CODE, {
            id: id,
            merchantId: merchantId
          });
          this.setAlert("To scan the QR code, open your Venmo app");
        };

        VenmoDesktop.prototype.authorize = function () {
          if (this.isHidden) {
            return;
          }

          this.bus.emit(events_1.VENMO_DESKTOP_AUTHORIZE);
          this.setAlert("Venmo account authorized");
        };

        VenmoDesktop.prototype.authorizing = function () {
          if (this.isHidden) {
            return;
          }

          this.bus.emit(events_1.VENMO_DESKTOP_AUTHORIZING);
          this.setAlert("Authorize on your Venmo app");
        };

        VenmoDesktop.prototype.startPolling = function () {
          var _this = this;

          return this.createVenmoDesktopPaymentContext().then(function (result) {
            var expiresIn = new Date(result.expiresAt).getTime() - new Date(result.createdAt).getTime();
            var expiredTime = Date.now() + expiresIn;

            _this.displayQRCode(result.id, result.merchantId);

            return _this.pollForStatusChange(result.status, expiredTime);
          }).then(function (result) {
            if (!result) {
              return;
            } // since we are manually adding a prepended @ sign
            // we want to make sure that the username does not
            // start giving us the @ sign up front in the future


            var username = result.userName || "";
            username = "@" + username.replace("@", "");

            _this.triggerCompleted({
              paymentMethodNonce: result.paymentMethodId,
              username: username
            });
          }).catch(function (err) {
            if (err.allowUIToHandleError) {
              // noop here and let the UI handle the customer error
              return;
            }

            _this.sendEvent("venmo.tokenize.desktop.unhandled-error");

            _this.triggerRejected(err);
          });
        };

        VenmoDesktop.prototype.pollForStatusChange = function (status, expiredTime) {
          var _this = this;

          if (!this.venmoContextId) {
            return this.Promise.resolve();
          }

          if (Date.now() > expiredTime) {
            return this.updateVenmoDesktopPaymentContext("EXPIRED").then(function () {
              _this.displayError("Something went wrong");

              _this.sendEvent("venmo.tokenize.desktop.status-change.sdk-timeout");

              return _this.Promise.reject({
                allowUIToHandleError: true,
                reason: "TIMEOUT"
              });
            });
          }

          return this.lookupVenmoDesktopPaymentContext().then(function (response) {
            if (!_this.venmoContextId || !response) {
              return _this.Promise.resolve();
            }

            var newStatus = response.status;

            if (newStatus !== status) {
              status = newStatus;

              _this.sendEvent("venmo.tokenize.desktop.status-change." + status.toLowerCase());

              switch (status) {
                case "CREATED":
                  // noop, no need to do anything here
                  // should never be able to get to this point
                  // but we'll keep it in to enumerate the statuses
                  break;

                case "EXPIRED":
                case "FAILED":
                case "CANCELED":
                  var message = status === "CANCELED" ? "The authorization was canceled" : "Something went wrong";

                  _this.displayError(message); // these are all terminal states, so we end it here


                  return _this.Promise.reject({
                    allowUIToHandleError: true,
                    reason: status
                  });

                case "SCANNED":
                  _this.authorizing();

                  break;

                case "APPROVED":
                  _this.authorize();

                  return _this.Promise.resolve(response);

                default: // any other statuses are irrelevant to the polling
                // and can just be ignored

              }
            }

            return new _this.Promise(function (resolve, reject) {
              setTimeout(function () {
                _this.pollForStatusChange(status, expiredTime).then(resolve).catch(reject);
              }, VENMO_DESKTOP_POLLING_INTERVAL);
            });
          });
        };

        VenmoDesktop.prototype.teardown = function () {
          this.bus.teardown();

          if (this.iframe.parentNode) {
            this.iframe.parentNode.removeChild(this.iframe);
          }

          if (this.alertBox.parentNode) {
            this.alertBox.parentNode.removeChild(this.alertBox);
          }
        };

        VenmoDesktop.prototype.setAlert = function (message) {
          this.alertBox.style.display = message ? "block" : "none";
          this.alertBox.textContent = message;
        };

        VenmoDesktop.prototype.createPaymentContextFromGraphqlLegacyQRCodeMutation = function (intent) {
          return this.apiRequest(queries_1.LEGACY_CREATE_PAYMENT_CONTEXT_QUERY, {
            input: {
              environment: this.env,
              intent: intent
            }
          }).then(function (response) {
            return response.createVenmoQRCodePaymentContext.venmoQRCodePaymentContext;
          });
        };

        VenmoDesktop.prototype.createPaymentContextFromGraphQL = function (intent) {
          var input = {
            intent: intent,
            paymentMethodUsage: this.paymentMethodUsage,
            customerClient: "DESKTOP"
          };

          if (this.profileId) {
            input.merchantProfileId = this.profileId;
          }

          if (this.displayName) {
            input.displayName = this.displayName;
          }

          return this.apiRequest(queries_1.CREATE_PAYMENT_CONTEXT_QUERY, {
            input: input
          }).then(function (response) {
            return response.createVenmoPaymentContext.venmoPaymentContext;
          });
        };

        VenmoDesktop.prototype.createVenmoDesktopPaymentContext = function () {
          var _this = this;

          var contextPromise = this.shouldUseLegacyQRCodeMutation ? this.createPaymentContextFromGraphqlLegacyQRCodeMutation("PAY_FROM_APP") : this.createPaymentContextFromGraphQL("PAY_FROM_APP");
          return contextPromise.then(function (context) {
            _this.venmoContextId = context.id;
            var merchantId = _this.profileId || context.merchantId;
            return {
              id: context.id,
              status: context.status,
              merchantId: merchantId,
              createdAt: context.createdAt,
              expiresAt: context.expiresAt
            };
          });
        };

        VenmoDesktop.prototype.updateVenmoDesktopPaymentContext = function (status, additionalOptions) {
          if (additionalOptions === void 0) {
            additionalOptions = {};
          }

          if (!this.venmoContextId) {
            return this.Promise.resolve();
          }

          var data = {
            input: __assign({
              id: this.venmoContextId,
              status: status
            }, additionalOptions)
          };
          var query = this.shouldUseLegacyQRCodeMutation ? queries_1.LEGACY_UPDATE_PAYMENT_CONTEXT_QUERY : queries_1.UPDATE_PAYMENT_CONTEXT_QUERY;
          return this.apiRequest(query, data).then(function () {// noop so we can resolve without any data to match the type
          });
        };

        VenmoDesktop.prototype.lookupVenmoDesktopPaymentContext = function () {
          if (!this.venmoContextId) {
            return this.Promise.resolve();
          }

          var query = this.shouldUseLegacyQRCodeMutation ? queries_1.LEGACY_VENMO_PAYMENT_CONTEXT_STATUS_QUERY : queries_1.VENMO_PAYMENT_CONTEXT_STATUS_QUERY;
          return this.apiRequest(query, {
            id: this.venmoContextId
          }).then(function (response) {
            return response.node;
          });
        };

        return VenmoDesktop;
      }();

      exports.default = VenmoDesktop;
    }, {
      "../shared/events": 161,
      "./queries": 155,
      "@braintree/iframer": 42,
      "@braintree/uuid": 46,
      "framebus": 172
    }],
    157: [function (require, module, exports) {
      'use strict';
      /** @module braintree-web/venmo */

      var analytics = require('../lib/analytics');

      var basicComponentVerification = require('../lib/basic-component-verification');

      var createDeferredClient = require('../lib/create-deferred-client');

      var createAssetsUrl = require('../lib/create-assets-url');

      var errors = require('./shared/errors');

      var wrapPromise = require('@braintree/wrap-promise');

      var BraintreeError = require('../lib/braintree-error');

      var Venmo = require('./venmo');

      var Promise = require('../lib/promise');

      var supportsVenmo = require('./shared/supports-venmo');

      var VERSION = "3.83.0";
      /**
       * @static
       * @function create
       * @param {object} options Creation options:
       * @param {Client} [options.client] A {@link Client} instance.
       * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.
       * @param {boolean} [options.allowNewBrowserTab=true] This should be set to false if your payment flow requires returning to the same tab, e.g. single page applications. Doing so causes {@link Venmo#isBrowserSupported|isBrowserSupported} to return true only for mobile web browsers that support returning from the Venmo app to the same tab.
       * @param {boolean} [options.allowWebviews=true] This should be set to false if your payment flow does not occur from within a webview that you control. Doing so causes {@link Venmo#isBrowserSupported|isBrowserSupported} to return true only for mobile web browsers that are not webviews.
       * @param {boolean} [options.ignoreHistoryChanges=false] When the Venmo app returns to the website, it will modify the hash of the url to include data about the tokenization. By default, the SDK will put the state of the hash back to where it was before the change was made. Pass `true` to handle the hash change instead of the SDK.
       * @param {string} [options.profileId] The Venmo profile ID to be used during payment authorization. Customers will see the business name and logo associated with this Venmo profile, and it will show up in the Venmo app as a "Connected Merchant". Venmo profile IDs can be found in the Braintree Control Panel. Omitting this value will use the default Venmo profile.
       * @param {string} [options.deepLinkReturnUrl] An override for the URL that the Venmo iOS app opens to return from an app switch.
       * @param {boolean} [options.requireManualReturn=false] When `true`, the customer will have to manually switch back to the browser/webview that is presenting Venmo to complete the payment.
       * @param {boolean} [options.useRedirectForIOS=false] Normally, the Venmo flow is launched using `window.open` and the Venmo app intercepts that call and opens the Venmo app instead. If the customer does not have the Venmo app installed, it opens the Venmo website in a new window and instructs the customer to install the app.
       *
       * In iOS webviews and Safari View Controllers (a webview-like environment which is indistinguishable from Safari for JavaScript environments), this call to `window.open` will always fail to app switch to Venmo, resulting instead in a white screen. Because of this, an alternate approach is required to launch the Venmo flow.
       *
       * When `useRedirectForIOS` is `true` and the Venmo flow is started in an iOS environment, the Venmo flow will be started by setting `window.location.href` to the Venmo website (which will still be intercepted by the Venmo app and should be the same behavior as if `window.open` was called). However, if the customer does not have the Venmo app installed, the merchant page will instead be replaced with the Venmo website and the customer will need to use the browser's back button to return to the merchant's website. Ensure that your customer's checkout information will not be lost if they are navigated away from the website and return using the browser back button.
       *
       * Due to a bug in iOS's implementation of `window.open` in iOS webviews and Safari View Controllers, if `useRedirectForIOS` is not set to `true` and the flow is launched from an iOS webview or Safari View Controller, the customer will be presented with a blank screen, halting the flow and leaving the customer unable to return to the merchant's website. Setting `useRedirectForIOS` to `true` will allow the flow to continue, but the Venmo app will be unable to return back to the webview/Safari View Controller. It will instead open the merchant's site in a new window in the customer's browser, which means the merchant site must be able to process the Venmo payment. If the SDK is configured with `allowNewBrowserTab = false`, it is unlikely that the website is set up to process the Venmo payment from a new window.
       *
       * If processing the payment from a new window is not possible, use this flag in conjunction with `requireManualReturn` so that the customer may start the flow from a webview/Safari View Controller or their Safari browser and manually return to the place that originated the flow once the Venmo app has authorized the payment and instructed them to do so.
       * @param {string} [options.paymentMethodUsage] The intended usage for the Venmo payment method nonce. Possible options are:
       * * single_use - intended as a one time transaction
       * * multi_use - intended to be vaulted and used for multiple transactions
       * @param {string} [options.displayName] The business name that will be displayed in the Venmo app payment approval screen. Only applicable when used with `paymentMethodUsage` and used by merchants onboarded as PayFast channel partners.
       * @param {callback} [callback] The second argument, `data`, is the {@link Venmo} instance. If no callback is provided, `create` returns a promise that resolves with the {@link Venmo} instance.
       * @example
       * braintree.venmo.create({
       *   client: clientInstance
       * }).then(function (venmoInstance) {
       *   // venmoInstance is ready to be used.
       * }).catch(function (createErr) {
       *   console.error('Error creating Venmo instance', createErr);
       * });
       * @example <caption>Allow desktop flow to be used</caption>
       * braintree.venmo.create({
       *   client: clientInstance,
       * }).then(function (venmoInstance) {
       *   // venmoInstance is ready to be used.
       * }).catch(function (createErr) {
       *   console.error('Error creating Venmo instance', createErr);
       * });
       * @returns {(Promise|void)} Returns the Venmo instance.
       */

      function create(options) {
        var name = 'Venmo';
        return basicComponentVerification.verify({
          name: name,
          client: options.client,
          authorization: options.authorization
        }).then(function () {
          var createPromise, instance;

          if (options.profileId && typeof options.profileId !== 'string') {
            return Promise.reject(new BraintreeError(errors.VENMO_INVALID_PROFILE_ID));
          }

          if (options.deepLinkReturnUrl && typeof options.deepLinkReturnUrl !== 'string') {
            return Promise.reject(new BraintreeError(errors.VENMO_INVALID_DEEP_LINK_RETURN_URL));
          }

          createPromise = createDeferredClient.create({
            authorization: options.authorization,
            client: options.client,
            debug: options.debug,
            assetsUrl: createAssetsUrl.create(options.authorization),
            name: name
          }).then(function (client) {
            var configuration = client.getConfiguration();
            options.client = client;

            if (!configuration.gatewayConfiguration.payWithVenmo) {
              return Promise.reject(new BraintreeError(errors.VENMO_NOT_ENABLED));
            }

            return client;
          });
          options.createPromise = createPromise;
          instance = new Venmo(options);
          analytics.sendEvent(createPromise, 'venmo.initialized');
          return createPromise.then(function () {
            return instance;
          });
        });
      }
      /**
       * @static
       * @function isBrowserSupported
       * @param {object} [options] browser support options:
       * @param {boolean} [options.allowNewBrowserTab=true] This should be set to false if your payment flow requires returning to the same tab, e.g. single page applications.
       * @param {boolean} [options.allowWebviews=true] This should be set to false if your payment flow does not occur from within a webview that you control.
       * @example
       * if (braintree.venmo.isBrowserSupported()) {
       *   // set up Venmo
       * }
       * @example <caption>Explicitly require browser support returning to the same tab</caption>
       * if (braintree.venmo.isBrowserSupported({
       *   allowNewBrowserTab: false
       * })) {
       *   // set up Venmo
       * }
       * @example <caption>Explicitly set webviews as disallowed browsers</caption>
       * if (braintree.venmo.isBrowserSupported({
       *   allowWebviews: false
       * })) {
       *   // set up Venmo
       * }
       * @returns {boolean} Whether or not the browser supports Venmo.
       */


      function isBrowserSupported(options) {
        return supportsVenmo.isBrowserSupported(options);
      }

      module.exports = {
        create: wrapPromise(create),
        isBrowserSupported: isBrowserSupported,

        /**
         * @description The current version of the SDK, i.e. `1.32.1`.
         * @type {string}
         */
        VERSION: VERSION
      };
    }, {
      "../lib/analytics": 93,
      "../lib/basic-component-verification": 96,
      "../lib/braintree-error": 98,
      "../lib/create-assets-url": 102,
      "../lib/create-deferred-client": 104,
      "../lib/promise": 130,
      "./shared/errors": 160,
      "./shared/supports-venmo": 162,
      "./venmo": 163,
      "@braintree/wrap-promise": 50
    }],
    158: [function (require, module, exports) {
      'use strict';

      var isAndroid = require('@braintree/browser-detection/is-android');

      var isChrome = require('@braintree/browser-detection/is-chrome');

      var isIos = require('@braintree/browser-detection/is-ios');

      var isIosSafari = require('@braintree/browser-detection/is-ios-safari');

      var isIosWebview = require('@braintree/browser-detection/is-ios-webview');

      function isAndroidWebview() {
        return isAndroid() && window.navigator.userAgent.toLowerCase().indexOf('wv') > -1;
      }

      function doesNotSupportWindowOpenInIos() {
        if (!isIos()) {
          return false;
        }

        return isIosWebview() || !isIosSafari();
      }

      function isFacebookOwnedBrowserOnAndroid() {
        var ua = window.navigator.userAgent.toLowerCase(); // Huawei's Facebook useragent does not include Android

        if (ua.indexOf('huawei') > -1 && ua.indexOf('fban') > -1) {
          return true;
        }

        if (!isAndroid()) {
          return false;
        }

        return ua.indexOf('fb_iab') > -1 || ua.indexOf('instagram') > -1;
      }

      module.exports = {
        isAndroid: isAndroid,
        isAndroidWebview: isAndroidWebview,
        isChrome: isChrome,
        isIos: isIos,
        isIosSafari: isIosSafari,
        isIosWebview: isIosWebview,
        isFacebookOwnedBrowserOnAndroid: isFacebookOwnedBrowserOnAndroid,
        doesNotSupportWindowOpenInIos: doesNotSupportWindowOpenInIos
      };
    }, {
      "@braintree/browser-detection/is-android": 26,
      "@braintree/browser-detection/is-chrome": 28,
      "@braintree/browser-detection/is-ios": 37,
      "@braintree/browser-detection/is-ios-safari": 34,
      "@braintree/browser-detection/is-ios-webview": 35
    }],
    159: [function (require, module, exports) {
      'use strict';

      module.exports = {
        DOCUMENT_VISIBILITY_CHANGE_EVENT_DELAY: 500,
        DEFAULT_PROCESS_RESULTS_DELAY: 1000,
        VENMO_OPEN_URL: 'https://venmo.com/braintree/checkout'
      };
    }, {}],
    160: [function (require, module, exports) {
      'use strict';
      /**
       * @name BraintreeError.Venmo - Creation Error Codes
       * @description Errors that occur when [creating the Venmo component](./module-braintree-web_venmo.html#.create).
       * @property {MERCHANT} VENMO_NOT_ENABLED Occurs when Venmo is not enabled on the Braintree control panel.
       * @property {MERCHANT} VENMO_INVALID_PROFILE_ID Occurs when Venmo is initialized with a profile id, but it is invalid.
       * @property {UNKNOWN} VENMO_MOBILE_POLLING_SETUP_FAILED __Deprecated__ No longer returned. Use `VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED` instead.
       * @property {UNKNOWN} VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED Occurs when the request to set up a Venmo Payment Context object fails.
       */

      /**
       * @name BraintreeError.Venmo - tokenize Error Codes
       * @description Errors that occur when using the [`tokenize` method](./Venmo.html#tokenize).
       * @property {MERCHANT} VENMO_TOKENIZATION_REQUEST_ACTIVE Occurs when `tokenize` is called when the flow is already in progress.
       * @property {MERCHANT} VENMO_TOKENIZATION_REQUEST_NOT_ACTIVE Occurs when `cancelTokenization` is called when the flow is not in progress.
       * @property {UNKNOWN} VENMO_APP_FAILED Occurs when tokenization fails.
       * @property {CUSTOMER} VENMO_APP_CANCELED Occurs when customer cancels flow from the Venmo app.
       * @property {CUSTOMER} VENMO_CANCELED Occurs when customer cancels the flow or Venmo app is not available.
       * @property {CUSTOMER} VENMO_DESKTOP_CANCELED Occurs when customer cancels the Venmo Desktop flow by closing the modal.
       * @property {MERCHANT} VENMO_TOKENIZATION_CANCELED_BY_MERCHANT Occurs when `cancelTokenization` is called while tokenization is in progress.
       * @property {UNKNOWN} VENMO_DESKTOP_UNKNOWN_ERROR Occurs when an unknown error causes the Venmo Desktop flow to fail.
       * @property {UNKNOWN} VENMO_MOBILE_POLLING_TOKENIZATION_NETWORK_ERROR Occurs when an unknown network error causes the mobile polling process to fail.
       * @property {CUSTOMER} VENMO_MOBILE_POLLING_TOKENIZATION_EXPIRED Occurs when the polling has expired and the payment cannot be completed.
       * @property {CUSTOMER} VENMO_MOBILE_POLLING_TOKENIZATION_CANCELED Occurs when the polling operation is canceled by the customer.
       * @property {CUSTOMER} VENMO_MOBILE_POLLING_TOKENIZATION_TIMEOUT Occurs when customer takes too long to complete payment.
       * @property {UNKNOWN} VENMO_MOBILE_POLLING_TOKENIZATION_FAILED Occurs if there is an unknown error during the mobile polling process.
       */

      var BraintreeError = require('../../lib/braintree-error');

      module.exports = {
        VENMO_NOT_ENABLED: {
          type: BraintreeError.types.MERCHANT,
          code: 'VENMO_NOT_ENABLED',
          message: 'Venmo is not enabled for this merchant.'
        },
        VENMO_TOKENIZATION_REQUEST_ACTIVE: {
          type: BraintreeError.types.MERCHANT,
          code: 'VENMO_TOKENIZATION_REQUEST_ACTIVE',
          message: 'Another tokenization request is active.'
        },
        VENMO_TOKENIZATION_REQUEST_NOT_ACTIVE: {
          type: BraintreeError.types.MERCHANT,
          code: 'VENMO_TOKENIZATION_REQUEST_NOT_ACTIVE',
          message: 'No tokenization in progress.'
        },
        VENMO_APP_FAILED: {
          type: BraintreeError.types.UNKNOWN,
          code: 'VENMO_APP_FAILED',
          message: 'Venmo app encountered a problem.'
        },
        VENMO_APP_CANCELED: {
          type: BraintreeError.types.CUSTOMER,
          code: 'VENMO_APP_CANCELED',
          message: 'Venmo app authorization was canceled.'
        },
        VENMO_CANCELED: {
          type: BraintreeError.types.CUSTOMER,
          code: 'VENMO_CANCELED',
          message: 'User canceled Venmo authorization, or Venmo app is not available.'
        },
        VENMO_DESKTOP_CANCELED: {
          type: BraintreeError.types.CUSTOMER,
          code: 'VENMO_DESKTOP_CANCELED',
          message: 'User canceled Venmo authorization by closing the Venmo Desktop modal.'
        },
        VENMO_TOKENIZATION_CANCELED_BY_MERCHANT: {
          type: BraintreeError.types.MERCHANT,
          code: 'VENMO_TOKENIZATION_CANCELED_BY_MERCHANT',
          message: 'The Venmo tokenization was canceled by the merchant.'
        },
        VENMO_DESKTOP_UNKNOWN_ERROR: {
          type: BraintreeError.types.UNKNOWN,
          code: 'VENMO_DESKTOP_UNKNOWN_ERROR',
          message: 'Something went wrong with the Venmo Desktop flow.'
        },
        VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED: {
          type: BraintreeError.types.NETWORK,
          code: 'VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED',
          message: 'Something went wrong creating the Venmo Payment Context.'
        },
        VENMO_MOBILE_POLLING_TOKENIZATION_NETWORK_ERROR: {
          type: BraintreeError.types.UNKNOWN,
          code: 'VENMO_MOBILE_POLLING_TOKENIZATION_NETWORK_ERROR',
          message: 'Something went wrong during mobile polling.'
        },
        VENMO_MOBILE_POLLING_TOKENIZATION_EXPIRED: {
          type: BraintreeError.types.CUSTOMER,
          code: 'VENMO_MOBILE_POLLING_TOKENIZATION_EXPIRED',
          message: 'The Venmo authorization request is expired.'
        },
        VENMO_MOBILE_POLLING_TOKENIZATION_CANCELED: {
          type: BraintreeError.types.CUSTOMER,
          code: 'VENMO_MOBILE_POLLING_TOKENIZATION_CANCELED',
          message: 'The Venmo authorization was canceled'
        },
        VENMO_MOBILE_POLLING_TOKENIZATION_TIMEOUT: {
          type: BraintreeError.types.CUSTOMER,
          code: 'VENMO_MOBILE_POLLING_TOKENIZATION_TIMEOUT',
          message: 'Customer took too long to authorize Venmo payment.'
        },
        VENMO_MOBILE_POLLING_TOKENIZATION_FAILED: {
          type: BraintreeError.types.UNKNOWN,
          code: 'VENMO_MOBILE_POLLING_TOKENIZATION_FAILED',
          message: 'The Venmo authorization failed.'
        },
        VENMO_INVALID_PROFILE_ID: {
          type: BraintreeError.types.MERCHANT,
          code: 'VENMO_INVALID_PROFILE_ID',
          message: 'Venmo profile ID is invalid.'
        },
        VENMO_INVALID_DEEP_LINK_RETURN_URL: {
          type: BraintreeError.types.MERCHANT,
          code: 'VENMO_INVALID_DEEP_LINK_RETURN_URL',
          message: 'Venmo deep link return URL is invalid.'
        }
      };
    }, {
      "../../lib/braintree-error": 98
    }],
    161: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.VENMO_DESKTOP_UNKNOWN_ERROR = exports.VENMO_DESKTOP_REQUEST_NEW_QR_CODE = exports.VENMO_DESKTOP_CLOSED_FROM_PARENT = exports.VENMO_DESKTOP_IFRAME_READY = exports.VENMO_DESKTOP_DISPLAY_QR_CODE = exports.VENMO_DESKTOP_DISPLAY_ERROR = exports.VENMO_DESKTOP_CUSTOMER_CANCELED = exports.VENMO_DESKTOP_AUTHORIZATION_COMPLETED = exports.VENMO_DESKTOP_AUTHORIZING = exports.VENMO_DESKTOP_AUTHORIZE = exports.VENMO_DESKTOP_AUTHORIZATION_TIMED_OUT = void 0;
      exports.VENMO_DESKTOP_AUTHORIZATION_TIMED_OUT = "VENMO_DESKTOP_AUTHORIZATION_TIMED_OUT";
      exports.VENMO_DESKTOP_AUTHORIZE = "VENMO_DESKTOP_AUTHORIZE";
      exports.VENMO_DESKTOP_AUTHORIZING = "VENMO_DESKTOP_AUTHORIZING";
      exports.VENMO_DESKTOP_AUTHORIZATION_COMPLETED = "VENMO_DESKTOP_AUTHORIZATION_COMPLETED";
      exports.VENMO_DESKTOP_CUSTOMER_CANCELED = "VENMO_DESKTOP_CUSTOMER_CANCELED";
      exports.VENMO_DESKTOP_DISPLAY_ERROR = "VENMO_DESKTOP_DISPLAY_ERROR";
      exports.VENMO_DESKTOP_DISPLAY_QR_CODE = "VENMO_DESKTOP_DISPLAY_QR_CODE";
      exports.VENMO_DESKTOP_IFRAME_READY = "VENMO_DESKTOP_IFRAME_READY";
      exports.VENMO_DESKTOP_CLOSED_FROM_PARENT = "VENMO_DESKTOP_CLOSED_FROM_PARENT";
      exports.VENMO_DESKTOP_REQUEST_NEW_QR_CODE = "VENMO_DESKTOP_REQUEST_NEW_QR_CODE";
      exports.VENMO_DESKTOP_UNKNOWN_ERROR = "VENMO_DESKTOP_UNKNOWN_ERROR";
    }, {}],
    162: [function (require, module, exports) {
      'use strict';

      var browserDetection = require('./browser-detection');

      function isBrowserSupported(options) {
        var merchantAllowsReturningToNewBrowserTab, merchantAllowsWebviews, merchantAllowsDesktopBrowsers;
        var isAndroid = browserDetection.isAndroid();
        var isMobileDevice = isAndroid || browserDetection.isIos();
        var isAndroidChrome = isAndroid && browserDetection.isChrome();
        var isMobileDeviceThatSupportsReturnToSameTab = browserDetection.isIosSafari() || isAndroidChrome;
        options = options || {}; // NEXT_MAJOR_VERSION allowDesktop will default to true, but can be opted out

        merchantAllowsDesktopBrowsers = options.allowDesktop === true;
        merchantAllowsReturningToNewBrowserTab = options.hasOwnProperty('allowNewBrowserTab') ? options.allowNewBrowserTab : true; // NEXT_MAJOR_VERSION webviews are not supported, except for the case where
        // the merchant themselves is presenting venmo in a webview using the deep
        // link url to get back to their app. For the next major version, we should
        // just not have this option and instead require the merchant to determine
        // if the venmo button should be displayed when presenting it in the
        // merchant's app via a webview.

        merchantAllowsWebviews = options.hasOwnProperty('allowWebviews') ? options.allowWebviews : true;

        if (!merchantAllowsWebviews && (browserDetection.isAndroidWebview() || browserDetection.isIosWebview())) {
          return false;
        }

        if (!merchantAllowsReturningToNewBrowserTab) {
          if (isMobileDeviceThatSupportsReturnToSameTab) {
            return true;
          }

          return merchantAllowsDesktopBrowsers && !isMobileDevice;
        }

        if (browserDetection.isFacebookOwnedBrowserOnAndroid()) {
          return false;
        }

        if (!merchantAllowsDesktopBrowsers) {
          return isMobileDevice;
        }

        return true;
      }

      module.exports = {
        isBrowserSupported: isBrowserSupported
      };
    }, {
      "./browser-detection": 158
    }],
    163: [function (require, module, exports) {
      'use strict';

      var analytics = require('../lib/analytics');

      var isBrowserSupported = require('./shared/supports-venmo');

      var browserDetection = require('./shared/browser-detection');

      var constants = require('./shared/constants');

      var errors = require('./shared/errors');

      var querystring = require('../lib/querystring');

      var isVerifiedDomain = require('../lib/is-verified-domain');

      var methods = require('../lib/methods');

      var convertMethodsToError = require('../lib/convert-methods-to-error');

      var wrapPromise = require('@braintree/wrap-promise');

      var BraintreeError = require('../lib/braintree-error');

      var inIframe = require('../lib/in-iframe');

      var Promise = require('../lib/promise');

      var ExtendedPromise = require('@braintree/extended-promise'); // NEXT_MAJOR_VERSION the source code for this is actually in a
      // typescript repo called venmo-desktop, once the SDK is migrated
      // to typescript, we can move the TS files out of that separate
      // repo and into the web SDK properly


      var createVenmoDesktop = require('./external/');

      var graphqlQueries = require('./external/queries');

      var VERSION = "3.83.0";
      var DEFAULT_MOBILE_POLLING_INTERVAL = 250; // 1/4 second

      var DEFAULT_MOBILE_EXPIRING_THRESHOLD = 300000; // 5 minutes

      /**
       * Venmo tokenize payload.
       * @typedef {object} Venmo~tokenizePayload
       * @property {string} nonce The payment method nonce.
       * @property {string} type The payment method type, always `VenmoAccount`.
       * @property {object} details Additional Venmo account details.
       * @property {string} details.username The username of the Venmo account.
       */

      /**
       * @class
       * @param {object} options The Venmo {@link module:braintree-web/venmo.create create} options.
       * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/venmo.create|braintree-web.venmo.create} instead.</strong>
       * @classdesc This class represents a Venmo component produced by {@link module:braintree-web/venmo.create|braintree-web/venmo.create}. Instances of this class have methods for tokenizing Venmo payments.
       */

      function Venmo(options) {
        var self = this;
        this._createPromise = options.createPromise;
        this._allowNewBrowserTab = options.allowNewBrowserTab !== false;
        this._allowWebviews = options.allowWebviews !== false;
        this._allowDesktop = options.allowDesktop === true;
        this._requireManualReturn = options.requireManualReturn === true;
        this._useRedirectForIOS = options.useRedirectForIOS === true;
        this._profileId = options.profileId;
        this._displayName = options.displayName;
        this._deepLinkReturnUrl = options.deepLinkReturnUrl;
        this._ignoreHistoryChanges = options.ignoreHistoryChanges;
        this._paymentMethodUsage = (options.paymentMethodUsage || '').toUpperCase();
        this._shouldUseLegacyFlow = !this._paymentMethodUsage;
        this._useDesktopFlow = this._allowDesktop && this._isDesktop();
        this._cannotHaveReturnUrls = inIframe() || this._requireManualReturn;
        this._shouldCreateVenmoPaymentContext = this._cannotHaveReturnUrls || !this._shouldUseLegacyFlow;
        analytics.sendEvent(this._createPromise, 'venmo.desktop-flow.configured.' + String(Boolean(this._allowDesktop))); // if the url has a tokenization result, that indicates
        // that it cannot be the desktop flow or the manual return
        // flow. If it's the hash change with paymentMethodUsage
        // flow, we want to skip creating a new payment context, since
        // there is already a pending payment context waiting to be
        // processed. For the hash change flow without paymentMethodUsage,
        // no further actions are needed.

        if (this.hasTokenizationResult()) {
          analytics.sendEvent(this._createPromise, 'venmo.appswitch.return-in-new-tab');
        } else if (this._useDesktopFlow) {
          this._createPromise = this._createPromise.then(function (client) {
            var config = client.getConfiguration().gatewayConfiguration;
            return createVenmoDesktop({
              url: config.assetsUrl + '/web/' + VERSION + '/html/venmo-desktop-frame.html',
              environment: config.environment === 'production' ? 'PRODUCTION' : 'SANDBOX',
              profileId: self._profileId || config.payWithVenmo.merchantId,
              paymentMethodUsage: self._paymentMethodUsage,
              displayName: self._displayName,
              Promise: Promise,
              apiRequest: function apiRequest(query, data) {
                return client.request({
                  api: 'graphQLApi',
                  data: {
                    query: query,
                    variables: data
                  }
                }).then(function (response) {
                  return response.data;
                });
              },
              sendEvent: function sendEvent(eventName) {
                analytics.sendEvent(self._createPromise, eventName);
              },
              verifyDomain: isVerifiedDomain
            }).then(function (venmoDesktopInstance) {
              self._venmoDesktopInstance = venmoDesktopInstance;
              analytics.sendEvent(self._createPromise, 'venmo.desktop-flow.presented');
              return client;
            }).catch(function () {
              analytics.sendEvent(self._createPromise, 'venmo.desktop-flow.setup-failed');
              self._useDesktopFlow = false;
              return client;
            });
          });
        } else if (this._shouldCreateVenmoPaymentContext) {
          // these variables are only relevant for the manual return flow
          // and they are only set to make testing easier (so they can
          // be overwritten with smaller values in the tests)
          this._mobilePollingInterval = DEFAULT_MOBILE_POLLING_INTERVAL;
          this._mobilePollingExpiresThreshold = DEFAULT_MOBILE_EXPIRING_THRESHOLD;
          this._createPromise = this._createPromise.then(function (client) {
            var analyticsCategory = self._cannotHaveReturnUrls ? 'manual-return' : 'mobile-payment-context';
            var config = client.getConfiguration().gatewayConfiguration;
            self._mobilePollingContextEnvironment = config.environment.toUpperCase();
            return self._createVenmoPaymentContext(client).then(function () {
              analytics.sendEvent(self._createPromise, 'venmo.' + analyticsCategory + '.presented');
              return client;
            }).catch(function (err) {
              analytics.sendEvent(self._createPromise, 'venmo.' + analyticsCategory + '.setup-failed');
              return Promise.reject(new BraintreeError({
                type: errors.VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED.type,
                code: errors.VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED.code,
                message: errors.VENMO_MOBILE_PAYMENT_CONTEXT_SETUP_FAILED.message,
                details: {
                  originalError: err
                }
              }));
            });
          });
        }
      }

      Venmo.prototype._createVenmoPaymentContext = function (client, cancelIfTokenizationInProgress) {
        var self = this;
        var promise;

        if (!this._shouldCreateVenmoPaymentContext) {
          return Promise.resolve();
        }

        if (this._shouldUseLegacyFlow) {
          promise = client.request({
            api: 'graphQLApi',
            data: {
              query: graphqlQueries.LEGACY_CREATE_PAYMENT_CONTEXT_QUERY,
              variables: {
                input: {
                  environment: this._mobilePollingContextEnvironment,
                  intent: 'PAY_FROM_APP'
                }
              }
            }
          }).then(function (response) {
            return response.data.createVenmoQRCodePaymentContext.venmoQRCodePaymentContext;
          });
        } else {
          promise = client.request({
            api: 'graphQLApi',
            data: {
              query: graphqlQueries.CREATE_PAYMENT_CONTEXT_QUERY,
              variables: {
                input: {
                  paymentMethodUsage: this._paymentMethodUsage,
                  intent: 'CONTINUE',
                  customerClient: 'MOBILE_WEB',
                  displayName: this._displayName
                }
              }
            }
          }).then(function (response) {
            return response.data.createVenmoPaymentContext.venmoPaymentContext;
          });
        }

        return promise.then(function (context) {
          var expiredTime = new Date(context.expiresAt) - new Date(context.createdAt);
          var refreshIn = expiredTime * 0.6666; // prevents multiple setTimeouts from firing from separate calls
          // to create a payment context by canceling the previous one
          // if there is a pending call

          clearTimeout(self._refreshPaymentContextTimeout);
          self._refreshPaymentContextTimeout = setTimeout(function () {
            if (self._tokenizationInProgress) {
              return;
            }

            self._createVenmoPaymentContext(client, true);
          }, refreshIn);

          if (cancelIfTokenizationInProgress && self._tokenizationInProgress) {
            return;
          }

          self._venmoPaymentContextStatus = context.status;
          self._venmoPaymentContextId = context.id;
        });
      };

      Venmo.prototype.appSwitch = function (url) {
        if (this._deepLinkReturnUrl) {
          if (isIosWebviewInDeepLinkReturnUrlFlow()) {
            analytics.sendEvent(this._createPromise, 'venmo.appswitch.start.ios-webview'); // Deep link URLs do not launch iOS apps from a webview when using window.open or PopupBridge.open.

            window.location.href = url;
          } else if (window.popupBridge && typeof window.popupBridge.open === 'function') {
            analytics.sendEvent(this._createPromise, 'venmo.appswitch.start.popup-bridge');
            window.popupBridge.open(url);
          } else {
            analytics.sendEvent(this._createPromise, 'venmo.appswitch.start.webview');
            window.open(url);
          }
        } else {
          analytics.sendEvent(this._createPromise, 'venmo.appswitch.start.browser');

          if (browserDetection.doesNotSupportWindowOpenInIos() || this._shouldUseRedirectStrategy()) {
            window.location.href = url;
          } else {
            window.open(url);
          }
        }
      };

      Venmo.prototype.getUrl = function () {
        return this._createPromise.then(function (client) {
          var configuration = client.getConfiguration();
          var params = {};
          var currentUrl = this._deepLinkReturnUrl || window.location.href.replace(window.location.hash, '');
          var venmoConfiguration = configuration.gatewayConfiguration.payWithVenmo;
          var analyticsMetadata = configuration.analyticsMetadata;
          var accessToken = venmoConfiguration.accessToken;
          var braintreeData = {
            _meta: {
              version: analyticsMetadata.sdkVersion,
              integration: analyticsMetadata.integration,
              platform: analyticsMetadata.platform,
              sessionId: analyticsMetadata.sessionId
            }
          };
          currentUrl = currentUrl.replace(/#*$/, '');
          /* eslint-disable camelcase */

          if (this._venmoPaymentContextId) {
            if (this._shouldUseLegacyFlow) {
              // NEXT_MAJOR_VERSION stop adding the context id to the access token.
              // the context id is placed here for backwards compatiblity
              // with versions of the venmo app that did not support
              // pulling the resource id off of the query params
              accessToken += '|pcid:' + this._venmoPaymentContextId;
            } else {
              params.resource_id = this._venmoPaymentContextId;
            }
          }

          if (this._shouldIncludeReturnUrls()) {
            params['x-success'] = currentUrl + '#venmoSuccess=1';
            params['x-cancel'] = currentUrl + '#venmoCancel=1';
            params['x-error'] = currentUrl + '#venmoError=1';
          } else {
            params['x-success'] = 'NOOP';
            params['x-cancel'] = 'NOOP';
            params['x-error'] = 'NOOP';
          }

          params.ua = window.navigator.userAgent;
          params.braintree_merchant_id = this._profileId || venmoConfiguration.merchantId;
          params.braintree_access_token = accessToken;
          params.braintree_environment = venmoConfiguration.environment;
          params.braintree_sdk_data = btoa(JSON.stringify(braintreeData));
          /* eslint-enable camelcase */

          return constants.VENMO_OPEN_URL + '?' + querystring.stringify(params);
        }.bind(this));
      };
      /**
       * Returns a boolean indicating whether the current browser supports Venmo as a payment method.
       *
       * If `options.allowNewBrowserTab` is false when calling {@link module:braintree-web/venmo.create|venmo.create}, this method will return true only for browsers known to support returning from the Venmo app to the same browser tab. Currently, this is limited to iOS Safari and Android Chrome.
       * If `options.allowWebviews` is false when calling {@link module:braintree-web/venmo.create|venmo.create}, this method will return true only for mobile browsers that are not webviews.
       * @public
       * @returns {boolean} True if the current browser is supported, false if not.
       */


      Venmo.prototype.isBrowserSupported = function () {
        return isBrowserSupported.isBrowserSupported({
          allowNewBrowserTab: this._allowNewBrowserTab,
          allowWebviews: this._allowWebviews,
          allowDesktop: this._allowDesktop
        });
      };
      /**
       * Returns a boolean indicating whether a Venmo tokenization result is ready to be processed immediately.
       *
       * This method should be called after initialization to see if the result of Venmo authorization is available. If it returns true, call {@link Venmo#tokenize|tokenize} immediately to process the results.
       *
       * @public
       * @returns {boolean} True if the results of Venmo payment authorization are available and ready to process.
       */


      Venmo.prototype.hasTokenizationResult = function () {
        return this._hasTokenizationResult();
      }; // a private version that lets us pass in a custom hash
      // when listening on a hashchange event


      Venmo.prototype._hasTokenizationResult = function (hash) {
        var params = getFragmentParameters(hash);
        return typeof (params.venmoSuccess || params.venmoError || params.venmoCancel) !== 'undefined';
      };

      Venmo.prototype._shouldIncludeReturnUrls = function () {
        // when a deep link return url is passed, we should always
        // respect it and include the return urls so the venmo app
        // can app switch back to it
        if (this._deepLinkReturnUrl) {
          return true;
        } // when the sdk is initialized within an iframe, it's
        // impossible to return back to the correct place automatically
        // without also setting a deepLinkReturnUrl. When the return
        // urls are omitted, the Venmo app prompts the user to return
        // manually.


        return !this._cannotHaveReturnUrls;
      };

      Venmo.prototype._isDesktop = function () {
        return !(browserDetection.isIos() || browserDetection.isAndroid());
      };
      /**
       * Launches the Venmo flow and returns a nonce payload.
       *
       * If {@link Venmo#hasTokenizationResult|hasTokenizationResult} returns true, calling tokenize will immediately process and return the results without initiating the Venmo payment authorization flow.
       *
       * Only one Venmo flow can be active at a time. One way to achieve this is to disable your Venmo button while the flow is open.
       * @public
       * @param {object} [options] Options for tokenization.
       * @param {number} [options.processResultsDelay=500] The amount of time in milliseconds to delay processing the results. In most cases, this value should be left as the default.
       * @param {callback} [callback] The second argument, <code>data</code>, is a {@link Venmo~tokenizePayload|tokenizePayload}. If no callback is provided, the method will return a Promise that resolves with a {@link Venmo~tokenizePayload|tokenizePayload}.
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example
       * button.addEventListener('click', function () {
       *   // Disable the button so that we don't attempt to open multiple popups.
       *   button.setAttribute('disabled', 'disabled');
       *
       *   // Because tokenize opens a new window, this must be called
       *   // as a result of a user action, such as a button click.
       *   venmoInstance.tokenize().then(function (payload) {
       *     // Submit payload.nonce to your server
       *     // Use payload.username to get the Venmo username and display any UI
       *   }).catch(function (tokenizeError) {
       *     // Handle flow errors or premature flow closure
       *     switch (tokenizeErr.code) {
       *       case 'VENMO_APP_CANCELED':
       *         console.log('User canceled Venmo flow.');
       *         break;
       *       case 'VENMO_CANCELED':
       *         console.log('User canceled Venmo, or Venmo app is not available.');
       *         break;
       *       default:
       *         console.error('Error!', tokenizeErr);
       *     }
       *   }).then(function () {
       *     button.removeAttribute('disabled');
       *   });
       * });
       */


      Venmo.prototype.tokenize = function (options) {
        var self = this;
        var tokenizationPromise;
        options = options || {};

        if (this._tokenizationInProgress === true) {
          return Promise.reject(new BraintreeError(errors.VENMO_TOKENIZATION_REQUEST_ACTIVE));
        }

        this._tokenizationInProgress = true;

        if (this._useDesktopFlow) {
          // for the desktop flow, we create a venmo payment
          // context and then present a qr code modal to the
          // customer and they will open up their venmo app
          // and scan it and approve the purchase on their
          // mobile device. The sdk will start polling
          // in order to determine when the status of the
          // payment context has updated and then pass the
          // resulting nonce back to the merchant.
          tokenizationPromise = this._tokenizeForDesktop(options);
        } else if (this._cannotHaveReturnUrls) {
          // in the manual return strategy, we create the payment
          // context on initialization, then continually poll once
          // the app switch begins until we get a response indiciating
          // the payment context was approved by the customer on the
          // Venmo app. The payment context response also includes a
          // nonce. There are 2 cases where we use the manual return
          // strategy:
          // 1. the sdk is instantiated in an iframe, because
          //    the venmo app is unable to redirect automatically
          //    when that is the case so we rely on the customer
          //    to do a manual redirect and continunally poll for
          //    updates on the payment context to get the nonce
          // 2. same deal for when `requireManualReturn` is configured
          tokenizationPromise = this._tokenizeForMobileWithManualReturn();
        } else {
          // the default mobile flow is to app switch to the
          // venmo app, and then have the venmo app switch
          // back to the page with the venmo nonce details
          // encoded into the hash portion of the url. If
          // `paymentMethodUsage` is provided when instantiating
          // the sdk, we also create a payment context and pass
          // the resource id to the Venmo app during the app switch.
          // Once we get a succesful return, we ping the payment
          // context query to get any additional data needed
          // to send back to the merchant.
          tokenizationPromise = this._tokenizeForMobileWithHashChangeListeners(options);
        }

        return tokenizationPromise.then(function (payload) {
          return self._createPromise.then(function (client) {
            return self._createVenmoPaymentContext(client);
          }).then(function () {
            self._tokenizationInProgress = false;
            return formatTokenizePayload(payload);
          });
        }).catch(function (err) {
          return self._createPromise.then(function (client) {
            return self._createVenmoPaymentContext(client);
          }).then(function () {
            self._tokenizationInProgress = false;
            return Promise.reject(err);
          });
        });
      };
      /**
       * Cancels the venmo tokenization process
       *
       * @public
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       * @example
       * venmoTokenizeButton.addEventListener('click', function () {
       *   venmoInstance.tokenize().then(function (payload) {
       *     // handle payload
       *   }).catch(function (err) {
       *     if (err.code === 'VENMO_TOKENIZATION_CANCELED_BY_MERCHANT') {
       *       // tokenization was canceled by calling cancelTokenization
       *     }
       *   });
       * });
       *
       * venmoCancelButton.addEventListener('click', function () {
       *   // Hide the button when the venmo flow is not in progress
       *   venmoCancelButton.style.display = "none";
       *
       *   venmoInstance.cancelTokenization().then(function () {
       *     // done canceling the flow
       *   }).catch(function (err) {
       *     // should only get here if there is no tokenization in progress
       *   });
       * });
       */


      Venmo.prototype.cancelTokenization = function () {
        if (!this._tokenizationInProgress) {
          return Promise.reject(new BraintreeError(errors.VENMO_TOKENIZATION_REQUEST_NOT_ACTIVE));
        }

        this._removeVisibilityEventListener(); // important to reject the tokenization promise first
        // so the tokenize method rejects with this error
        // rather than a customer canceled error in the mobile
        // polling and desktop flows


        if (this._tokenizePromise) {
          this._tokenizePromise.reject(new BraintreeError(errors.VENMO_TOKENIZATION_CANCELED_BY_MERCHANT));
        }

        return Promise.all([this._cancelMobilePaymentContext(), this._cancelVenmoDesktopContext()]);
      };

      Venmo.prototype._queryPaymentContextStatus = function (id) {
        var self = this;
        return this._createPromise.then(function (client) {
          var query = self._shouldUseLegacyFlow ? graphqlQueries.LEGACY_VENMO_PAYMENT_CONTEXT_STATUS_QUERY : graphqlQueries.VENMO_PAYMENT_CONTEXT_STATUS_QUERY;
          return client.request({
            api: 'graphQLApi',
            data: {
              query: query,
              variables: {
                id: id
              }
            }
          });
        }).then(function (response) {
          return response.data.node;
        });
      };

      Venmo.prototype._pollForStatusChange = function () {
        var self = this;

        if (Date.now() > self._mobilePollingContextExpiresIn) {
          return Promise.reject(new BraintreeError(errors.VENMO_MOBILE_POLLING_TOKENIZATION_TIMEOUT));
        }

        return this._queryPaymentContextStatus(this._venmoPaymentContextId).catch(function (networkError) {
          return Promise.reject(new BraintreeError({
            type: errors.VENMO_MOBILE_POLLING_TOKENIZATION_NETWORK_ERROR.type,
            code: errors.VENMO_MOBILE_POLLING_TOKENIZATION_NETWORK_ERROR.code,
            message: errors.VENMO_MOBILE_POLLING_TOKENIZATION_NETWORK_ERROR.message,
            details: {
              originalError: networkError
            }
          }));
        }).then(function (node) {
          var newStatus = node.status;

          if (newStatus !== self._venmoPaymentContextStatus) {
            self._venmoPaymentContextStatus = newStatus;
            analytics.sendEvent(self._createPromise, 'venmo.tokenize.manual-return.status-change.' + newStatus.toLowerCase());

            switch (newStatus) {
              case 'EXPIRED':
              case 'FAILED':
              case 'CANCELED':
                return Promise.reject(new BraintreeError(errors['VENMO_MOBILE_POLLING_TOKENIZATION_' + newStatus]));

              case 'APPROVED':
                return Promise.resolve(node);

              case 'CREATED':
              case 'SCANNED':
              default: // any other statuses are irrelevant to the polling
              // and can just be ignored

            }
          }

          return new Promise(function (resolve, reject) {
            setTimeout(function () {
              self._pollForStatusChange().then(resolve).catch(reject);
            }, self._mobilePollingInterval);
          });
        });
      };

      Venmo.prototype._tokenizeForMobileWithManualReturn = function () {
        var self = this;
        analytics.sendEvent(this._createPromise, 'venmo.tokenize.manual-return.start');
        this._mobilePollingContextExpiresIn = Date.now() + this._mobilePollingExpiresThreshold;
        this._tokenizePromise = new ExtendedPromise();

        this._pollForStatusChange().then(function (payload) {
          analytics.sendEvent(self._createPromise, 'venmo.tokenize.manual-return.success');

          self._tokenizePromise.resolve({
            paymentMethodNonce: payload.paymentMethodId,
            username: payload.userName,
            payerInfo: payload.payerInfo
          });
        }).catch(function (err) {
          analytics.sendEvent(self._createPromise, 'venmo.tokenize.manual-return.failure');

          self._tokenizePromise.reject(err);
        });

        return this.getUrl().then(function (url) {
          self.appSwitch(url);
          return self._tokenizePromise;
        });
      };

      Venmo.prototype._shouldUseRedirectStrategy = function () {
        if (!browserDetection.isIos()) {
          return false;
        }

        return this._useRedirectForIOS;
      };

      Venmo.prototype._tokenizeForMobileWithHashChangeListeners = function (options) {
        var self = this;
        var resultProcessingInProgress, visibilityChangeListenerTimeout;

        if (this.hasTokenizationResult()) {
          return this.processResultsFromHash();
        }

        analytics.sendEvent(this._createPromise, 'venmo.tokenize.mobile.start');
        this._tokenizePromise = new ExtendedPromise();
        this._previousHash = window.location.hash;

        function completeFlow(hash) {
          var error;
          self.processResultsFromHash(hash).catch(function (err) {
            error = err;
          }).then(function (res) {
            if (!self._ignoreHistoryChanges && window.location.hash !== self._previousHash) {
              window.location.hash = self._previousHash;
            }

            self._removeVisibilityEventListener();

            if (error) {
              self._tokenizePromise.reject(error);
            } else {
              self._tokenizePromise.resolve(res);
            }

            delete self._tokenizePromise;
          });
        } // The Venmo SDK app switches back with the results of the
        // tokenization encoded in the hash


        this._onHashChangeListener = function (e) {
          var hash = e.newURL.split('#')[1];

          if (!self._hasTokenizationResult(hash)) {
            return;
          }

          resultProcessingInProgress = true;
          clearTimeout(visibilityChangeListenerTimeout);
          completeFlow(hash);
        };

        window.addEventListener('hashchange', this._onHashChangeListener, false); // Subscribe to document visibility change events to detect when app switch
        // has returned. Acts as a fallback for the hashchange listener and catches
        // the cancel case via manual app switch back

        this._visibilityChangeListener = function () {
          var delay = options.processResultsDelay || constants.DEFAULT_PROCESS_RESULTS_DELAY;

          if (!window.document.hidden) {
            if (!resultProcessingInProgress) {
              visibilityChangeListenerTimeout = setTimeout(completeFlow, delay);
            }
          }
        };

        return this.getUrl().then(function (url) {
          self.appSwitch(url); // Add a brief delay to ignore visibility change events that occur right before app switch

          setTimeout(function () {
            window.document.addEventListener(documentVisibilityChangeEventName(), self._visibilityChangeListener);
          }, constants.DOCUMENT_VISIBILITY_CHANGE_EVENT_DELAY);
          return self._tokenizePromise;
        });
      };

      Venmo.prototype._tokenizeForDesktop = function () {
        var self = this;
        analytics.sendEvent(this._createPromise, 'venmo.tokenize.desktop.start');
        this._tokenizePromise = new ExtendedPromise();

        this._createPromise.then(function () {
          return self._venmoDesktopInstance.launchDesktopFlow();
        }).then(function (payload) {
          self._venmoDesktopInstance.hideDesktopFlow();

          analytics.sendEvent(self._createPromise, 'venmo.tokenize.desktop.success');

          self._tokenizePromise.resolve(payload);
        }).catch(function (err) {
          analytics.sendEvent(self._createPromise, 'venmo.tokenize.desktop.failure');

          if (self._venmoDesktopInstance) {
            self._venmoDesktopInstance.hideDesktopFlow();
          }

          if (err && err.reason === 'CUSTOMER_CANCELED') {
            self._tokenizePromise.reject(new BraintreeError(errors.VENMO_DESKTOP_CANCELED));

            return;
          }

          self._tokenizePromise.reject(new BraintreeError({
            type: errors.VENMO_DESKTOP_UNKNOWN_ERROR.type,
            code: errors.VENMO_DESKTOP_UNKNOWN_ERROR.code,
            message: errors.VENMO_DESKTOP_UNKNOWN_ERROR.message,
            details: {
              originalError: err
            }
          }));
        });

        return this._tokenizePromise;
      }; // TODO remove this once initial testing is done


      Venmo.prototype._updateVenmoDesktopPaymentContext = function (status, options) {
        return this._venmoDesktopInstance.updateVenmoDesktopPaymentContext(status, options);
      };

      Venmo.prototype._cancelMobilePaymentContext = function () {
        var self = this;
        return this._createPromise.then(function (client) {
          var query;

          if (self._venmoPaymentContextId) {
            query = self._shouldUseLegacyFlow ? graphqlQueries.LEGACY_UPDATE_PAYMENT_CONTEXT_QUERY : graphqlQueries.UPDATE_PAYMENT_CONTEXT_QUERY;
            return client.request({
              api: 'graphQLApi',
              data: {
                query: query,
                variables: {
                  input: {
                    id: self._venmoPaymentContextId,
                    status: 'CANCELED'
                  }
                }
              }
            });
          }

          return Promise.resolve();
        });
      };

      Venmo.prototype._cancelVenmoDesktopContext = function () {
        var self = this;
        return this._createPromise.then(function () {
          if (self._venmoDesktopInstance) {
            self._venmoDesktopInstance.updateVenmoDesktopPaymentContext('CANCELED');
          }

          return Promise.resolve();
        });
      };
      /**
       * Cleanly tear down anything set up by {@link module:braintree-web/venmo.create|create}.
       * @public
       * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.
       * @example
       * venmoInstance.teardown();
       * @example <caption>With callback</caption>
       * venmoInstance.teardown(function () {
       *   // teardown is complete
       * });
       * @returns {(Promise|void)} Returns a promise if no callback is provided.
       */


      Venmo.prototype.teardown = function () {
        var self = this;

        this._removeVisibilityEventListener();

        return this._createPromise.then(function () {
          if (self._venmoDesktopInstance) {
            self._venmoDesktopInstance.teardown();
          }

          clearTimeout(self._refreshPaymentContextTimeout);

          self._cancelMobilePaymentContext();

          convertMethodsToError(this, methods(Venmo.prototype));
        }.bind(this));
      };

      Venmo.prototype._removeVisibilityEventListener = function () {
        window.removeEventListener('hashchange', this._onHashChangeListener);
        window.document.removeEventListener(documentVisibilityChangeEventName(), this._visibilityChangeListener);
        delete this._visibilityChangeListener;
        delete this._onHashChangeListener;
      };

      Venmo.prototype.processResultsFromHash = function (hash) {
        var self = this;
        var params = getFragmentParameters(hash);
        return new Promise(function (resolve, reject) {
          if (params.venmoSuccess) {
            analytics.sendEvent(self._createPromise, 'venmo.appswitch.handle.success');

            if (params.resource_id && !self._shouldUseLegacyFlow) {
              self._queryPaymentContextStatus(params.resource_id).then(function (result) {
                if (result.status !== 'APPROVED') {
                  analytics.sendEvent(self._createPromise, 'venmo.process-results.unexpected-payment-context-status.' + result.status.toLowerCase());
                  resolve(params);
                  return;
                }

                resolve({
                  paymentMethodNonce: result.paymentMethodId,
                  username: result.userName,
                  payerInfo: result.payerInfo
                });
              }).catch(function () {
                analytics.sendEvent(self._createPromise, 'venmo.process-results.payment-context-status-query-failed');
                resolve(params);
              });
            } else {
              resolve(params);
            }
          } else if (params.venmoError) {
            analytics.sendEvent(self._createPromise, 'venmo.appswitch.handle.error');
            reject(new BraintreeError({
              type: errors.VENMO_APP_FAILED.type,
              code: errors.VENMO_APP_FAILED.code,
              message: errors.VENMO_APP_FAILED.message,
              details: {
                originalError: {
                  message: decodeURIComponent(params.errorMessage),
                  code: params.errorCode
                }
              }
            }));
          } else if (params.venmoCancel) {
            analytics.sendEvent(self._createPromise, 'venmo.appswitch.handle.cancel');
            reject(new BraintreeError(errors.VENMO_APP_CANCELED));
          } else {
            // User has either manually switched back to browser, or app is not available for app switch
            analytics.sendEvent(self._createPromise, 'venmo.appswitch.cancel-or-unavailable');
            reject(new BraintreeError(errors.VENMO_CANCELED));
          }

          self._clearFragmentParameters();
        });
      };

      Venmo.prototype._clearFragmentParameters = function () {
        if (this._ignoreHistoryChanges) {
          return;
        }

        if (typeof window.history.replaceState === 'function' && window.location.hash) {
          history.pushState({}, '', window.location.href.slice(0, window.location.href.indexOf('#')));
        }
      };

      function getFragmentParameters(hash) {
        var keyValuesArray = (hash || window.location.hash.substring(1)).split('&');
        return keyValuesArray.reduce(function (toReturn, keyValue) {
          var parts = keyValue.split('='); // some Single Page Apps may pre-pend a / to the first value
          // in the hash, assuming it's a route in their app
          // instead of information from Venmo, this removes all
          // non-alphanumeric characters from the keys in the params

          var key = decodeURIComponent(parts[0]).replace(/\W/g, '');
          var value = decodeURIComponent(parts[1]);
          toReturn[key] = value;
          return toReturn;
        }, {});
      }

      function formatUserName(username) {
        username = username || ''; // NEXT_MAJOR_VERSION the web sdks have a prepended @ sign
        // but the ios and android ones do not. This should be standardized

        return '@' + username.replace('@', '');
      }

      function formatTokenizePayload(payload) {
        var formattedPayload = {
          nonce: payload.paymentMethodNonce,
          type: 'VenmoAccount',
          details: {
            username: formatUserName(payload.username)
          }
        };

        if (payload.payerInfo) {
          formattedPayload.details.payerInfo = payload.payerInfo;
          formattedPayload.details.payerInfo.userName = formatUserName(payload.payerInfo.userName);
        }

        return formattedPayload;
      } // From https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API


      function documentVisibilityChangeEventName() {
        var visibilityChange;

        if (typeof window.document.hidden !== 'undefined') {
          // Opera 12.10 and Firefox 18 and later support
          visibilityChange = 'visibilitychange';
        } else if (typeof window.document.msHidden !== 'undefined') {
          visibilityChange = 'msvisibilitychange';
        } else if (typeof window.document.webkitHidden !== 'undefined') {
          visibilityChange = 'webkitvisibilitychange';
        }

        return visibilityChange;
      }

      function isIosWebviewInDeepLinkReturnUrlFlow() {
        // we know it's a webview because this flow only gets
        // used when checking the deep link flow
        // test the platform here to get around custom useragents
        return window.navigator.platform && /iPhone|iPad|iPod/.test(window.navigator.platform);
      }

      module.exports = wrapPromise.wrapPrototype(Venmo);
    }, {
      "../lib/analytics": 93,
      "../lib/braintree-error": 98,
      "../lib/convert-methods-to-error": 100,
      "../lib/in-iframe": 123,
      "../lib/is-verified-domain": 126,
      "../lib/methods": 128,
      "../lib/promise": 130,
      "../lib/querystring": 131,
      "./external/": 154,
      "./external/queries": 155,
      "./shared/browser-detection": 158,
      "./shared/constants": 159,
      "./shared/errors": 160,
      "./shared/supports-venmo": 162,
      "@braintree/extended-promise": 41,
      "@braintree/wrap-promise": 50
    }],
    164: [function (require, module, exports) {
      "use strict";

      var __assign = this && this.__assign || function () {
        __assign = Object.assign || function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];

            for (var p in s) {
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
          }

          return t;
        };

        return __assign.apply(this, arguments);
      };

      var cardTypes = require("./lib/card-types");

      var add_matching_cards_to_results_1 = require("./lib/add-matching-cards-to-results");

      var is_valid_input_type_1 = require("./lib/is-valid-input-type");

      var find_best_match_1 = require("./lib/find-best-match");

      var clone_1 = require("./lib/clone");

      var customCards = {};
      var cardNames = {
        VISA: "visa",
        MASTERCARD: "mastercard",
        AMERICAN_EXPRESS: "american-express",
        DINERS_CLUB: "diners-club",
        DISCOVER: "discover",
        JCB: "jcb",
        UNIONPAY: "unionpay",
        MAESTRO: "maestro",
        ELO: "elo",
        MIR: "mir",
        HIPER: "hiper",
        HIPERCARD: "hipercard"
      };
      var ORIGINAL_TEST_ORDER = [cardNames.VISA, cardNames.MASTERCARD, cardNames.AMERICAN_EXPRESS, cardNames.DINERS_CLUB, cardNames.DISCOVER, cardNames.JCB, cardNames.UNIONPAY, cardNames.MAESTRO, cardNames.ELO, cardNames.MIR, cardNames.HIPER, cardNames.HIPERCARD];
      var testOrder = clone_1.clone(ORIGINAL_TEST_ORDER);

      function findType(cardType) {
        return customCards[cardType] || cardTypes[cardType];
      }

      function getAllCardTypes() {
        return testOrder.map(function (cardType) {
          return clone_1.clone(findType(cardType));
        });
      }

      function getCardPosition(name, ignoreErrorForNotExisting) {
        if (ignoreErrorForNotExisting === void 0) {
          ignoreErrorForNotExisting = false;
        }

        var position = testOrder.indexOf(name);

        if (!ignoreErrorForNotExisting && position === -1) {
          throw new Error('"' + name + '" is not a supported card type.');
        }

        return position;
      }

      function creditCardType(cardNumber) {
        var results = [];

        if (!is_valid_input_type_1.isValidInputType(cardNumber)) {
          return results;
        }

        if (cardNumber.length === 0) {
          return getAllCardTypes();
        }

        testOrder.forEach(function (cardType) {
          var cardConfiguration = findType(cardType);
          add_matching_cards_to_results_1.addMatchingCardsToResults(cardNumber, cardConfiguration, results);
        });
        var bestMatch = find_best_match_1.findBestMatch(results);

        if (bestMatch) {
          return [bestMatch];
        }

        return results;
      }

      creditCardType.getTypeInfo = function (cardType) {
        return clone_1.clone(findType(cardType));
      };

      creditCardType.removeCard = function (name) {
        var position = getCardPosition(name);
        testOrder.splice(position, 1);
      };

      creditCardType.addCard = function (config) {
        var existingCardPosition = getCardPosition(config.type, true);
        customCards[config.type] = config;

        if (existingCardPosition === -1) {
          testOrder.push(config.type);
        }
      };

      creditCardType.updateCard = function (cardType, updates) {
        var originalObject = customCards[cardType] || cardTypes[cardType];

        if (!originalObject) {
          throw new Error("\"" + cardType + "\" is not a recognized type. Use `addCard` instead.'");
        }

        if (updates.type && originalObject.type !== updates.type) {
          throw new Error("Cannot overwrite type parameter.");
        }

        var clonedCard = clone_1.clone(originalObject);
        clonedCard = __assign(__assign({}, clonedCard), updates);
        customCards[clonedCard.type] = clonedCard;
      };

      creditCardType.changeOrder = function (name, position) {
        var currentPosition = getCardPosition(name);
        testOrder.splice(currentPosition, 1);
        testOrder.splice(position, 0, name);
      };

      creditCardType.resetModifications = function () {
        testOrder = clone_1.clone(ORIGINAL_TEST_ORDER);
        customCards = {};
      };

      creditCardType.types = cardNames;
      module.exports = creditCardType;
    }, {
      "./lib/add-matching-cards-to-results": 165,
      "./lib/card-types": 166,
      "./lib/clone": 167,
      "./lib/find-best-match": 168,
      "./lib/is-valid-input-type": 169
    }],
    165: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.addMatchingCardsToResults = void 0;

      var clone_1 = require("./clone");

      var matches_1 = require("./matches");

      function addMatchingCardsToResults(cardNumber, cardConfiguration, results) {
        var i, patternLength;

        for (i = 0; i < cardConfiguration.patterns.length; i++) {
          var pattern = cardConfiguration.patterns[i];

          if (!matches_1.matches(cardNumber, pattern)) {
            continue;
          }

          var clonedCardConfiguration = clone_1.clone(cardConfiguration);

          if (Array.isArray(pattern)) {
            patternLength = String(pattern[0]).length;
          } else {
            patternLength = String(pattern).length;
          }

          if (cardNumber.length >= patternLength) {
            clonedCardConfiguration.matchStrength = patternLength;
          }

          results.push(clonedCardConfiguration);
          break;
        }
      }

      exports.addMatchingCardsToResults = addMatchingCardsToResults;
    }, {
      "./clone": 167,
      "./matches": 170
    }],
    166: [function (require, module, exports) {
      "use strict";

      var cardTypes = {
        visa: {
          niceType: "Visa",
          type: "visa",
          patterns: [4],
          gaps: [4, 8, 12],
          lengths: [16, 18, 19],
          code: {
            name: "CVV",
            size: 3
          }
        },
        mastercard: {
          niceType: "Mastercard",
          type: "mastercard",
          patterns: [[51, 55], [2221, 2229], [223, 229], [23, 26], [270, 271], 2720],
          gaps: [4, 8, 12],
          lengths: [16],
          code: {
            name: "CVC",
            size: 3
          }
        },
        "american-express": {
          niceType: "American Express",
          type: "american-express",
          patterns: [34, 37],
          gaps: [4, 10],
          lengths: [15],
          code: {
            name: "CID",
            size: 4
          }
        },
        "diners-club": {
          niceType: "Diners Club",
          type: "diners-club",
          patterns: [[300, 305], 36, 38, 39],
          gaps: [4, 10],
          lengths: [14, 16, 19],
          code: {
            name: "CVV",
            size: 3
          }
        },
        discover: {
          niceType: "Discover",
          type: "discover",
          patterns: [6011, [644, 649], 65],
          gaps: [4, 8, 12],
          lengths: [16, 19],
          code: {
            name: "CID",
            size: 3
          }
        },
        jcb: {
          niceType: "JCB",
          type: "jcb",
          patterns: [2131, 1800, [3528, 3589]],
          gaps: [4, 8, 12],
          lengths: [16, 17, 18, 19],
          code: {
            name: "CVV",
            size: 3
          }
        },
        unionpay: {
          niceType: "UnionPay",
          type: "unionpay",
          patterns: [620, [624, 626], [62100, 62182], [62184, 62187], [62185, 62197], [62200, 62205], [622010, 622999], 622018, [622019, 622999], [62207, 62209], [622126, 622925], [623, 626], 6270, 6272, 6276, [627700, 627779], [627781, 627799], [6282, 6289], 6291, 6292, 810, [8110, 8131], [8132, 8151], [8152, 8163], [8164, 8171]],
          gaps: [4, 8, 12],
          lengths: [14, 15, 16, 17, 18, 19],
          code: {
            name: "CVN",
            size: 3
          }
        },
        maestro: {
          niceType: "Maestro",
          type: "maestro",
          patterns: [493698, [500000, 504174], [504176, 506698], [506779, 508999], [56, 59], 63, 67, 6],
          gaps: [4, 8, 12],
          lengths: [12, 13, 14, 15, 16, 17, 18, 19],
          code: {
            name: "CVC",
            size: 3
          }
        },
        elo: {
          niceType: "Elo",
          type: "elo",
          patterns: [401178, 401179, 438935, 457631, 457632, 431274, 451416, 457393, 504175, [506699, 506778], [509000, 509999], 627780, 636297, 636368, [650031, 650033], [650035, 650051], [650405, 650439], [650485, 650538], [650541, 650598], [650700, 650718], [650720, 650727], [650901, 650978], [651652, 651679], [655000, 655019], [655021, 655058]],
          gaps: [4, 8, 12],
          lengths: [16],
          code: {
            name: "CVE",
            size: 3
          }
        },
        mir: {
          niceType: "Mir",
          type: "mir",
          patterns: [[2200, 2204]],
          gaps: [4, 8, 12],
          lengths: [16, 17, 18, 19],
          code: {
            name: "CVP2",
            size: 3
          }
        },
        hiper: {
          niceType: "Hiper",
          type: "hiper",
          patterns: [637095, 63737423, 63743358, 637568, 637599, 637609, 637612],
          gaps: [4, 8, 12],
          lengths: [16],
          code: {
            name: "CVC",
            size: 3
          }
        },
        hipercard: {
          niceType: "Hipercard",
          type: "hipercard",
          patterns: [606282],
          gaps: [4, 8, 12],
          lengths: [16],
          code: {
            name: "CVC",
            size: 3
          }
        }
      };
      module.exports = cardTypes;
    }, {}],
    167: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.clone = void 0;

      function clone(originalObject) {
        if (!originalObject) {
          return null;
        }

        return JSON.parse(JSON.stringify(originalObject));
      }

      exports.clone = clone;
    }, {}],
    168: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.findBestMatch = void 0;

      function hasEnoughResultsToDetermineBestMatch(results) {
        var numberOfResultsWithMaxStrengthProperty = results.filter(function (result) {
          return result.matchStrength;
        }).length;
        /*
         * if all possible results have a maxStrength property that means the card
         * number is sufficiently long enough to determine conclusively what the card
         * type is
         * */

        return numberOfResultsWithMaxStrengthProperty > 0 && numberOfResultsWithMaxStrengthProperty === results.length;
      }

      function findBestMatch(results) {
        if (!hasEnoughResultsToDetermineBestMatch(results)) {
          return null;
        }

        return results.reduce(function (bestMatch, result) {
          if (!bestMatch) {
            return result;
          }
          /*
           * If the current best match pattern is less specific than this result, set
           * the result as the new best match
           * */


          if (Number(bestMatch.matchStrength) < Number(result.matchStrength)) {
            return result;
          }

          return bestMatch;
        });
      }

      exports.findBestMatch = findBestMatch;
    }, {}],
    169: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isValidInputType = void 0;

      function isValidInputType(cardNumber) {
        return typeof cardNumber === "string" || cardNumber instanceof String;
      }

      exports.isValidInputType = isValidInputType;
    }, {}],
    170: [function (require, module, exports) {
      "use strict";
      /*
       * Adapted from https://github.com/polvo-labs/card-type/blob/aaab11f80fa1939bccc8f24905a06ae3cd864356/src/cardType.js#L37-L42
       * */

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.matches = void 0;

      function matchesRange(cardNumber, min, max) {
        var maxLengthToCheck = String(min).length;
        var substr = cardNumber.substr(0, maxLengthToCheck);
        var integerRepresentationOfCardNumber = parseInt(substr, 10);
        min = parseInt(String(min).substr(0, substr.length), 10);
        max = parseInt(String(max).substr(0, substr.length), 10);
        return integerRepresentationOfCardNumber >= min && integerRepresentationOfCardNumber <= max;
      }

      function matchesPattern(cardNumber, pattern) {
        pattern = String(pattern);
        return pattern.substring(0, cardNumber.length) === cardNumber.substring(0, pattern.length);
      }

      function matches(cardNumber, pattern) {
        if (Array.isArray(pattern)) {
          return matchesRange(cardNumber, pattern[0], pattern[1]);
        }

        return matchesPattern(cardNumber, pattern);
      }

      exports.matches = matches;
    }, {}],
    171: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Framebus = void 0;

      var is_not_string_1 = require("./lib/is-not-string");

      var subscription_args_invalid_1 = require("./lib/subscription-args-invalid");

      var broadcast_1 = require("./lib/broadcast");

      var package_payload_1 = require("./lib/package-payload");

      var constants_1 = require("./lib/constants");

      var DefaultPromise = typeof window !== "undefined" && window.Promise;

      var Framebus =
      /** @class */
      function () {
        function Framebus(options) {
          if (options === void 0) {
            options = {};
          }

          this.origin = options.origin || "*";
          this.channel = options.channel || "";
          this.verifyDomain = options.verifyDomain;
          this.isDestroyed = false;
          this.listeners = [];
        }

        Framebus.setPromise = function (PromiseGlobal) {
          Framebus.Promise = PromiseGlobal;
        };

        Framebus.target = function (options) {
          return new Framebus(options);
        };

        Framebus.prototype.include = function (childWindow) {
          if (childWindow == null) {
            return false;
          }

          if (childWindow.Window == null) {
            return false;
          }

          if (childWindow.constructor !== childWindow.Window) {
            return false;
          }

          constants_1.childWindows.push(childWindow);
          return true;
        };

        Framebus.prototype.target = function (options) {
          return Framebus.target(options);
        };

        Framebus.prototype.emit = function (eventName, data, reply) {
          if (this.isDestroyed) {
            return false;
          }

          var origin = this.origin;
          eventName = this.namespaceEvent(eventName);

          if (is_not_string_1.isntString(eventName)) {
            return false;
          }

          if (is_not_string_1.isntString(origin)) {
            return false;
          }

          if (typeof data === "function") {
            reply = data;
            data = undefined; // eslint-disable-line no-undefined
          }

          var payload = package_payload_1.packagePayload(eventName, origin, data, reply);

          if (!payload) {
            return false;
          }

          broadcast_1.broadcast(window.top || window.self, payload, origin);
          return true;
        };

        Framebus.prototype.emitAsPromise = function (eventName, data) {
          var _this = this;

          return new Framebus.Promise(function (resolve, reject) {
            var didAttachListener = _this.emit(eventName, data, function (payload) {
              resolve(payload);
            });

            if (!didAttachListener) {
              reject(new Error("Listener not added for \"" + eventName + "\""));
            }
          });
        };

        Framebus.prototype.on = function (eventName, originalHandler) {
          if (this.isDestroyed) {
            return false;
          } // eslint-disable-next-line @typescript-eslint/no-this-alias


          var self = this;
          var origin = this.origin;
          var handler = originalHandler;
          eventName = this.namespaceEvent(eventName);

          if (subscription_args_invalid_1.subscriptionArgsInvalid(eventName, handler, origin)) {
            return false;
          }

          if (this.verifyDomain) {
            /* eslint-disable no-invalid-this, @typescript-eslint/ban-ts-comment */
            handler = function handler() {
              var args = [];

              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              } // @ts-ignore


              if (self.checkOrigin(this && this.origin)) {
                originalHandler.apply(void 0, args);
              }
            };
            /* eslint-enable no-invalid-this, @typescript-eslint/ban-ts-comment */

          }

          this.listeners.push({
            eventName: eventName,
            handler: handler,
            originalHandler: originalHandler
          });
          constants_1.subscribers[origin] = constants_1.subscribers[origin] || {};
          constants_1.subscribers[origin][eventName] = constants_1.subscribers[origin][eventName] || [];
          constants_1.subscribers[origin][eventName].push(handler);
          return true;
        };

        Framebus.prototype.off = function (eventName, originalHandler) {
          var handler = originalHandler;

          if (this.isDestroyed) {
            return false;
          }

          if (this.verifyDomain) {
            for (var i = 0; i < this.listeners.length; i++) {
              var listener = this.listeners[i];

              if (listener.originalHandler === originalHandler) {
                handler = listener.handler;
              }
            }
          }

          eventName = this.namespaceEvent(eventName);
          var origin = this.origin;

          if (subscription_args_invalid_1.subscriptionArgsInvalid(eventName, handler, origin)) {
            return false;
          }

          var subscriberList = constants_1.subscribers[origin] && constants_1.subscribers[origin][eventName];

          if (!subscriberList) {
            return false;
          }

          for (var i = 0; i < subscriberList.length; i++) {
            if (subscriberList[i] === handler) {
              subscriberList.splice(i, 1);
              return true;
            }
          }

          return false;
        };

        Framebus.prototype.teardown = function () {
          if (this.isDestroyed) {
            return;
          }

          this.isDestroyed = true;

          for (var i = 0; i < this.listeners.length; i++) {
            var listener = this.listeners[i];
            this.off(listener.eventName, listener.handler);
          }

          this.listeners.length = 0;
        };

        Framebus.prototype.checkOrigin = function (postMessageOrigin) {
          var merchantHost;
          var a = document.createElement("a");
          a.href = location.href;

          if (a.protocol === "https:") {
            merchantHost = a.host.replace(/:443$/, "");
          } else if (a.protocol === "http:") {
            merchantHost = a.host.replace(/:80$/, "");
          } else {
            merchantHost = a.host;
          }

          var merchantOrigin = a.protocol + "//" + merchantHost;

          if (merchantOrigin === postMessageOrigin) {
            return true;
          }

          if (this.verifyDomain) {
            return this.verifyDomain(postMessageOrigin);
          }

          return true;
        };

        Framebus.prototype.namespaceEvent = function (eventName) {
          if (!this.channel) {
            return eventName;
          }

          return this.channel + ":" + eventName;
        };

        Framebus.Promise = DefaultPromise;
        return Framebus;
      }();

      exports.Framebus = Framebus;
    }, {
      "./lib/broadcast": 175,
      "./lib/constants": 176,
      "./lib/is-not-string": 179,
      "./lib/package-payload": 181,
      "./lib/subscription-args-invalid": 183
    }],
    172: [function (require, module, exports) {
      "use strict";

      var attach_1 = require("./lib/attach");

      var framebus_1 = require("./framebus");

      attach_1.attach();
      module.exports = framebus_1.Framebus;
    }, {
      "./framebus": 171,
      "./lib/attach": 173
    }],
    173: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.detach = exports.attach = void 0;

      var message_1 = require("./message");

      var isAttached = false;

      function attach() {
        if (isAttached || typeof window === "undefined") {
          return;
        }

        isAttached = true;
        window.addEventListener("message", message_1.onmessage, false);
      }

      exports.attach = attach; // removeIf(production)

      function detach() {
        isAttached = false;
        window.removeEventListener("message", message_1.onmessage, false);
      }

      exports.detach = detach; // endRemoveIf(production)
    }, {
      "./message": 180
    }],
    174: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.broadcastToChildWindows = void 0;

      var broadcast_1 = require("./broadcast");

      var constants_1 = require("./constants");

      function broadcastToChildWindows(payload, origin, source) {
        for (var i = constants_1.childWindows.length - 1; i >= 0; i--) {
          var childWindow = constants_1.childWindows[i];

          if (childWindow.closed) {
            constants_1.childWindows.splice(i, 1);
          } else if (source !== childWindow) {
            broadcast_1.broadcast(childWindow.top, payload, origin);
          }
        }
      }

      exports.broadcastToChildWindows = broadcastToChildWindows;
    }, {
      "./broadcast": 175,
      "./constants": 176
    }],
    175: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.broadcast = void 0;

      var has_opener_1 = require("./has-opener");

      function broadcast(frame, payload, origin) {
        var i = 0;
        var frameToBroadcastTo;

        try {
          frame.postMessage(payload, origin);

          if (has_opener_1.hasOpener(frame) && frame.opener.top !== window.top) {
            broadcast(frame.opener.top, payload, origin);
          } // previously, our max value was frame.frames.length
          // but frames.length inherits from window.length
          // which can be overwritten if a developer does
          // `var length = value;` outside of a function
          // scope, it'll prevent us from looping through
          // all the frames. With this, we loop through
          // until there are no longer any frames
          // eslint-disable-next-line no-cond-assign


          while (frameToBroadcastTo = frame.frames[i]) {
            broadcast(frameToBroadcastTo, payload, origin);
            i++;
          }
        } catch (_) {
          /* ignored */
        }
      }

      exports.broadcast = broadcast;
    }, {
      "./has-opener": 178
    }],
    176: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.subscribers = exports.childWindows = exports.prefix = void 0;
      exports.prefix = "/*framebus*/";
      exports.childWindows = [];
      exports.subscribers = {};
    }, {}],
    177: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.dispatch = void 0;

      var constants_1 = require("./constants");

      function dispatch(origin, event, data, reply, e) {
        if (!constants_1.subscribers[origin]) {
          return;
        }

        if (!constants_1.subscribers[origin][event]) {
          return;
        }

        var args = [];

        if (data) {
          args.push(data);
        }

        if (reply) {
          args.push(reply);
        }

        for (var i = 0; i < constants_1.subscribers[origin][event].length; i++) {
          constants_1.subscribers[origin][event][i].apply(e, args);
        }
      }

      exports.dispatch = dispatch;
    }, {
      "./constants": 176
    }],
    178: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.hasOpener = void 0;

      function hasOpener(frame) {
        if (frame.top !== frame) {
          return false;
        }

        if (frame.opener == null) {
          return false;
        }

        if (frame.opener === frame) {
          return false;
        }

        if (frame.opener.closed === true) {
          return false;
        }

        return true;
      }

      exports.hasOpener = hasOpener;
    }, {}],
    179: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isntString = void 0;

      function isntString(str) {
        return typeof str !== "string";
      }

      exports.isntString = isntString;
    }, {}],
    180: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.onmessage = void 0;

      var is_not_string_1 = require("./is-not-string");

      var unpack_payload_1 = require("./unpack-payload");

      var dispatch_1 = require("./dispatch");

      var broadcast_to_child_windows_1 = require("./broadcast-to-child-windows");

      function onmessage(e) {
        if (is_not_string_1.isntString(e.data)) {
          return;
        }

        var payload = unpack_payload_1.unpackPayload(e);

        if (!payload) {
          return;
        }

        var data = payload.eventData;
        var reply = payload.reply;
        dispatch_1.dispatch("*", payload.event, data, reply, e);
        dispatch_1.dispatch(e.origin, payload.event, data, reply, e);
        broadcast_to_child_windows_1.broadcastToChildWindows(e.data, payload.origin, e.source);
      }

      exports.onmessage = onmessage;
    }, {
      "./broadcast-to-child-windows": 174,
      "./dispatch": 177,
      "./is-not-string": 179,
      "./unpack-payload": 184
    }],
    181: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.packagePayload = void 0;

      var subscribe_replier_1 = require("./subscribe-replier");

      var constants_1 = require("./constants");

      function packagePayload(event, origin, data, reply) {
        var packaged;
        var payload = {
          event: event,
          origin: origin
        };

        if (typeof reply === "function") {
          payload.reply = subscribe_replier_1.subscribeReplier(reply, origin);
        }

        payload.eventData = data;

        try {
          packaged = constants_1.prefix + JSON.stringify(payload);
        } catch (e) {
          throw new Error("Could not stringify event: " + e.message);
        }

        return packaged;
      }

      exports.packagePayload = packagePayload;
    }, {
      "./constants": 176,
      "./subscribe-replier": 182
    }],
    182: [function (require, module, exports) {
      "use strict";

      var __importDefault = this && this.__importDefault || function (mod) {
        return mod && mod.__esModule ? mod : {
          "default": mod
        };
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.subscribeReplier = void 0;

      var framebus_1 = require("../framebus");

      var uuid_1 = __importDefault(require("@braintree/uuid"));

      function subscribeReplier(fn, origin) {
        var uuid = uuid_1.default();

        function replier(data, replyOriginHandler) {
          fn(data, replyOriginHandler);
          framebus_1.Framebus.target({
            origin: origin
          }).off(uuid, replier);
        }

        framebus_1.Framebus.target({
          origin: origin
        }).on(uuid, replier);
        return uuid;
      }

      exports.subscribeReplier = subscribeReplier;
    }, {
      "../framebus": 171,
      "@braintree/uuid": 46
    }],
    183: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.subscriptionArgsInvalid = void 0;

      var is_not_string_1 = require("./is-not-string");

      function subscriptionArgsInvalid(event, fn, origin) {
        if (is_not_string_1.isntString(event)) {
          return true;
        }

        if (typeof fn !== "function") {
          return true;
        }

        return is_not_string_1.isntString(origin);
      }

      exports.subscriptionArgsInvalid = subscriptionArgsInvalid;
    }, {
      "./is-not-string": 179
    }],
    184: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.unpackPayload = void 0;

      var constants_1 = require("./constants");

      var package_payload_1 = require("./package-payload");

      function unpackPayload(e) {
        var payload;

        if (e.data.slice(0, constants_1.prefix.length) !== constants_1.prefix) {
          return false;
        }

        try {
          payload = JSON.parse(e.data.slice(constants_1.prefix.length));
        } catch (err) {
          return false;
        }

        if (payload.reply) {
          var replyOrigin_1 = e.origin;
          var replySource_1 = e.source;
          var replyEvent_1 = payload.reply;

          payload.reply = function reply(replyData) {
            if (!replySource_1) {
              return;
            }

            var replyPayload = package_payload_1.packagePayload(replyEvent_1, replyOrigin_1, replyData);

            if (!replyPayload) {
              return;
            }

            replySource_1.postMessage(replyPayload, replyOrigin_1);
          };
        }

        return payload;
      }

      exports.unpackPayload = unpackPayload;
    }, {
      "./constants": 176,
      "./package-payload": 181
    }],
    185: [function (require, module, exports) {
      // shim for using process in browser
      var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }

      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }

      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }

        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();

      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
        } // if setTimeout wasn't available but was latter defined


        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }

      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
        } // if clearTimeout wasn't available but was latter defined


        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }
      }

      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }

        draining = false;

        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }

        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }

        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;

        while (len) {
          currentQueue = queue;
          queue = [];

          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }

          queueIndex = -1;
          len = queue.length;
        }

        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);

        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }

        queue.push(new Item(fun, args));

        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      }; // v8 likes predictible objects


      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }

      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };

      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = ''; // empty string to avoid regexp issues

      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) {
        return [];
      };

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () {
        return '/';
      };

      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };

      process.umask = function () {
        return 0;
      };
    }, {}],
    186: [function (require, module, exports) {
      (function (setImmediate) {
        (function () {
          'use strict';
          /**
           * @this {Promise}
           */

          function finallyConstructor(callback) {
            var constructor = this.constructor;
            return this.then(function (value) {
              // @ts-ignore
              return constructor.resolve(callback()).then(function () {
                return value;
              });
            }, function (reason) {
              // @ts-ignore
              return constructor.resolve(callback()).then(function () {
                // @ts-ignore
                return constructor.reject(reason);
              });
            });
          }

          function allSettled(arr) {
            var P = this;
            return new P(function (resolve, reject) {
              if (!(arr && typeof arr.length !== 'undefined')) {
                return reject(new TypeError(_typeof(arr) + ' ' + arr + ' is not iterable(cannot read property Symbol(Symbol.iterator))'));
              }

              var args = Array.prototype.slice.call(arr);
              if (args.length === 0) return resolve([]);
              var remaining = args.length;

              function res(i, val) {
                if (val && (_typeof(val) === 'object' || typeof val === 'function')) {
                  var then = val.then;

                  if (typeof then === 'function') {
                    then.call(val, function (val) {
                      res(i, val);
                    }, function (e) {
                      args[i] = {
                        status: 'rejected',
                        reason: e
                      };

                      if (--remaining === 0) {
                        resolve(args);
                      }
                    });
                    return;
                  }
                }

                args[i] = {
                  status: 'fulfilled',
                  value: val
                };

                if (--remaining === 0) {
                  resolve(args);
                }
              }

              for (var i = 0; i < args.length; i++) {
                res(i, args[i]);
              }
            });
          } // Store setTimeout reference so promise-polyfill will be unaffected by
          // other code modifying setTimeout (like sinon.useFakeTimers())


          var setTimeoutFunc = setTimeout; // @ts-ignore

          var setImmediateFunc = typeof setImmediate !== 'undefined' ? setImmediate : null;

          function isArray(x) {
            return Boolean(x && typeof x.length !== 'undefined');
          }

          function noop() {} // Polyfill for Function.prototype.bind


          function bind(fn, thisArg) {
            return function () {
              fn.apply(thisArg, arguments);
            };
          }
          /**
           * @constructor
           * @param {Function} fn
           */


          function Promise(fn) {
            if (!(this instanceof Promise)) throw new TypeError('Promises must be constructed via new');
            if (typeof fn !== 'function') throw new TypeError('not a function');
            /** @type {!number} */

            this._state = 0;
            /** @type {!boolean} */

            this._handled = false;
            /** @type {Promise|undefined} */

            this._value = undefined;
            /** @type {!Array<!Function>} */

            this._deferreds = [];
            doResolve(fn, this);
          }

          function handle(self, deferred) {
            while (self._state === 3) {
              self = self._value;
            }

            if (self._state === 0) {
              self._deferreds.push(deferred);

              return;
            }

            self._handled = true;

            Promise._immediateFn(function () {
              var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;

              if (cb === null) {
                (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
                return;
              }

              var ret;

              try {
                ret = cb(self._value);
              } catch (e) {
                reject(deferred.promise, e);
                return;
              }

              resolve(deferred.promise, ret);
            });
          }

          function resolve(self, newValue) {
            try {
              // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
              if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');

              if (newValue && (_typeof(newValue) === 'object' || typeof newValue === 'function')) {
                var then = newValue.then;

                if (newValue instanceof Promise) {
                  self._state = 3;
                  self._value = newValue;
                  finale(self);
                  return;
                } else if (typeof then === 'function') {
                  doResolve(bind(then, newValue), self);
                  return;
                }
              }

              self._state = 1;
              self._value = newValue;
              finale(self);
            } catch (e) {
              reject(self, e);
            }
          }

          function reject(self, newValue) {
            self._state = 2;
            self._value = newValue;
            finale(self);
          }

          function finale(self) {
            if (self._state === 2 && self._deferreds.length === 0) {
              Promise._immediateFn(function () {
                if (!self._handled) {
                  Promise._unhandledRejectionFn(self._value);
                }
              });
            }

            for (var i = 0, len = self._deferreds.length; i < len; i++) {
              handle(self, self._deferreds[i]);
            }

            self._deferreds = null;
          }
          /**
           * @constructor
           */


          function Handler(onFulfilled, onRejected, promise) {
            this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
            this.onRejected = typeof onRejected === 'function' ? onRejected : null;
            this.promise = promise;
          }
          /**
           * Take a potentially misbehaving resolver function and make sure
           * onFulfilled and onRejected are only called once.
           *
           * Makes no guarantees about asynchrony.
           */


          function doResolve(fn, self) {
            var done = false;

            try {
              fn(function (value) {
                if (done) return;
                done = true;
                resolve(self, value);
              }, function (reason) {
                if (done) return;
                done = true;
                reject(self, reason);
              });
            } catch (ex) {
              if (done) return;
              done = true;
              reject(self, ex);
            }
          }

          Promise.prototype['catch'] = function (onRejected) {
            return this.then(null, onRejected);
          };

          Promise.prototype.then = function (onFulfilled, onRejected) {
            // @ts-ignore
            var prom = new this.constructor(noop);
            handle(this, new Handler(onFulfilled, onRejected, prom));
            return prom;
          };

          Promise.prototype['finally'] = finallyConstructor;

          Promise.all = function (arr) {
            return new Promise(function (resolve, reject) {
              if (!isArray(arr)) {
                return reject(new TypeError('Promise.all accepts an array'));
              }

              var args = Array.prototype.slice.call(arr);
              if (args.length === 0) return resolve([]);
              var remaining = args.length;

              function res(i, val) {
                try {
                  if (val && (_typeof(val) === 'object' || typeof val === 'function')) {
                    var then = val.then;

                    if (typeof then === 'function') {
                      then.call(val, function (val) {
                        res(i, val);
                      }, reject);
                      return;
                    }
                  }

                  args[i] = val;

                  if (--remaining === 0) {
                    resolve(args);
                  }
                } catch (ex) {
                  reject(ex);
                }
              }

              for (var i = 0; i < args.length; i++) {
                res(i, args[i]);
              }
            });
          };

          Promise.allSettled = allSettled;

          Promise.resolve = function (value) {
            if (value && _typeof(value) === 'object' && value.constructor === Promise) {
              return value;
            }

            return new Promise(function (resolve) {
              resolve(value);
            });
          };

          Promise.reject = function (value) {
            return new Promise(function (resolve, reject) {
              reject(value);
            });
          };

          Promise.race = function (arr) {
            return new Promise(function (resolve, reject) {
              if (!isArray(arr)) {
                return reject(new TypeError('Promise.race accepts an array'));
              }

              for (var i = 0, len = arr.length; i < len; i++) {
                Promise.resolve(arr[i]).then(resolve, reject);
              }
            });
          }; // Use polyfill for setImmediate for performance gains


          Promise._immediateFn = // @ts-ignore
          typeof setImmediateFunc === 'function' && function (fn) {
            // @ts-ignore
            setImmediateFunc(fn);
          } || function (fn) {
            setTimeoutFunc(fn, 0);
          };

          Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
            if (typeof console !== 'undefined' && console) {
              console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
            }
          };

          module.exports = Promise;
        }).call(this);
      }).call(this, require("timers").setImmediate);
    }, {
      "timers": 190
    }],
    187: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.isIos = exports.isIE9 = exports.isSamsungBrowser = exports.isAndroidChrome = exports.isKitKatWebview = void 0; // server side rendering check

      var UA = typeof window !== "undefined" && window.navigator && window.navigator.userAgent; // TODO remove this when browser detection is converted to typescript

      /* eslint-disable @typescript-eslint/ban-ts-comment */
      // @ts-ignore

      var isAndroid = require("@braintree/browser-detection/is-android"); // @ts-ignore


      var isChromeOs = require("@braintree/browser-detection/is-chrome-os"); // @ts-ignore


      var isChrome = require("@braintree/browser-detection/is-chrome"); // @ts-ignore


      var isIos = require("@braintree/browser-detection/is-ios");

      exports.isIos = isIos; // @ts-ignore

      var isIE9 = require("@braintree/browser-detection/is-ie9");

      exports.isIE9 = isIE9;
      /* eslint-enable @typescript-eslint/ban-ts-comment */
      // Old Android Webviews used specific versions of Chrome with 0.0.0 as their version suffix
      // https://developer.chrome.com/multidevice/user-agent#webview_user_agent

      var KITKAT_WEBVIEW_REGEX = /Version\/\d\.\d* Chrome\/\d*\.0\.0\.0/;

      function isOldSamsungBrowserOrSamsungWebview(ua) {
        return !isChrome(ua) && ua.indexOf("Samsung") > -1;
      }

      function isKitKatWebview(ua) {
        if (ua === void 0) {
          ua = UA;
        }

        return isAndroid(ua) && KITKAT_WEBVIEW_REGEX.test(ua);
      }

      exports.isKitKatWebview = isKitKatWebview;

      function isAndroidChrome(ua) {
        if (ua === void 0) {
          ua = UA;
        }

        return (isAndroid(ua) || isChromeOs(ua)) && isChrome(ua);
      }

      exports.isAndroidChrome = isAndroidChrome;

      function isSamsungBrowser(ua) {
        if (ua === void 0) {
          ua = UA;
        }

        return /SamsungBrowser/.test(ua) || isOldSamsungBrowserOrSamsungWebview(ua);
      }

      exports.isSamsungBrowser = isSamsungBrowser;
    }, {
      "@braintree/browser-detection/is-android": 26,
      "@braintree/browser-detection/is-chrome": 28,
      "@braintree/browser-detection/is-chrome-os": 27,
      "@braintree/browser-detection/is-ie9": 33,
      "@braintree/browser-detection/is-ios": 37
    }],
    188: [function (require, module, exports) {
      "use strict";

      var device_1 = require("./lib/device");

      module.exports = function supportsInputFormatting() {
        // Digits get dropped in samsung browser
        return !device_1.isSamsungBrowser();
      };
    }, {
      "./lib/device": 187
    }],
    189: [function (require, module, exports) {
      module.exports = require("./dist/supports-input-formatting");
    }, {
      "./dist/supports-input-formatting": 188
    }],
    190: [function (require, module, exports) {
      (function (setImmediate, clearImmediate) {
        (function () {
          var nextTick = require('process/browser.js').nextTick;

          var apply = Function.prototype.apply;
          var slice = Array.prototype.slice;
          var immediateIds = {};
          var nextImmediateId = 0; // DOM APIs, for completeness

          exports.setTimeout = function () {
            return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
          };

          exports.setInterval = function () {
            return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
          };

          exports.clearTimeout = exports.clearInterval = function (timeout) {
            timeout.close();
          };

          function Timeout(id, clearFn) {
            this._id = id;
            this._clearFn = clearFn;
          }

          Timeout.prototype.unref = Timeout.prototype.ref = function () {};

          Timeout.prototype.close = function () {
            this._clearFn.call(window, this._id);
          }; // Does not start the time, just sets up the members needed.


          exports.enroll = function (item, msecs) {
            clearTimeout(item._idleTimeoutId);
            item._idleTimeout = msecs;
          };

          exports.unenroll = function (item) {
            clearTimeout(item._idleTimeoutId);
            item._idleTimeout = -1;
          };

          exports._unrefActive = exports.active = function (item) {
            clearTimeout(item._idleTimeoutId);
            var msecs = item._idleTimeout;

            if (msecs >= 0) {
              item._idleTimeoutId = setTimeout(function onTimeout() {
                if (item._onTimeout) item._onTimeout();
              }, msecs);
            }
          }; // That's not how node.js implements it but the exposed api is the same.


          exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function (fn) {
            var id = nextImmediateId++;
            var args = arguments.length < 2 ? false : slice.call(arguments, 1);
            immediateIds[id] = true;
            nextTick(function onNextTick() {
              if (immediateIds[id]) {
                // fn.call() is faster so we optimize for the common use-case
                // @see http://jsperf.com/call-apply-segu
                if (args) {
                  fn.apply(null, args);
                } else {
                  fn.call(null);
                } // Prevent ids from leaking


                exports.clearImmediate(id);
              }
            });
            return id;
          };
          exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function (id) {
            delete immediateIds[id];
          };
        }).call(this);
      }).call(this, require("timers").setImmediate, require("timers").clearImmediate);
    }, {
      "process/browser.js": 185,
      "timers": 190
    }],
    191: [function (require, module, exports) {
      'use strict';

      module.exports = {
        paymentOptionIDs: {
          card: 'card',
          paypal: 'paypal',
          paypalCredit: 'paypalCredit',
          applePay: 'applePay',
          venmo: 'venmo',
          googlePay: 'googlePay'
        },
        paymentMethodTypes: {
          card: 'CreditCard',
          paypal: 'PayPalAccount',
          paypalCredit: 'PayPalAccount',
          applePay: 'ApplePayCard',
          venmo: 'VenmoAccount',
          googlePay: 'AndroidPayCard'
        },
        analyticsKinds: {
          CreditCard: 'card',
          PayPalAccount: 'paypal',
          ApplePayCard: 'applepay',
          VenmoAccount: 'venmo',
          AndroidPayCard: 'googlepay'
        },
        paymentMethodCardTypes: {
          Visa: 'visa',
          MasterCard: 'master-card',
          'American Express': 'american-express',
          'Diners Club': 'diners-club',
          Discover: 'discover',
          JCB: 'jcb',
          UnionPay: 'unionpay',
          Maestro: 'maestro'
        },
        configurationCardTypes: {
          visa: 'Visa',
          'master-card': 'MasterCard',
          'american-express': 'American Express',
          'diners-club': 'Discover',
          discover: 'Discover',
          jcb: 'JCB',
          unionpay: 'UnionPay',
          maestro: 'Maestro'
        },
        dependencySetupStates: {
          DONE: 'done',
          FAILED: 'failed',
          INITIALIZING: 'initializing',
          NOT_ENABLED: 'not-enabled'
        },
        errors: {
          NO_PAYMENT_METHOD_ERROR: 'No payment method is available.',
          DEVELOPER_MISCONFIGURATION_MESSAGE: 'Developer Error: Something went wrong. Check the console for details.'
        },
        ANALYTICS_REQUEST_TIMEOUT_MS: 2000,
        ANALYTICS_PREFIX: 'web.dropin.',
        CHANGE_ACTIVE_PAYMENT_METHOD_TIMEOUT: 200,
        CHECKOUT_JS_SOURCE: 'https://www.paypalobjects.com/api/checkout.min.js',
        GOOGLE_PAYMENT_SOURCE: 'https://pay.google.com/gp/p/js/pay.js',
        INTEGRATION: 'dropin2',
        PAYPAL_CHECKOUT_SCRIPT_ID: 'braintree-dropin-paypal-checkout-script',
        GOOGLE_PAYMENT_SCRIPT_ID: 'braintree-dropin-google-payment-script',
        DATA_COLLECTOR_SCRIPT_ID: 'braintree-dropin-data-collector-script',
        STYLESHEET_ID: 'braintree-dropin-stylesheet'
      };
    }, {}],
    192: [function (require, module, exports) {
      'use strict';

      var analytics = require('./lib/analytics');

      var DropinError = require('./lib/dropin-error');

      var EventEmitter = require('@braintree/event-emitter');

      var constants = require('./constants');

      var paymentMethodTypes = constants.paymentMethodTypes;
      var paymentOptionIDs = constants.paymentOptionIDs;
      var dependencySetupStates = constants.dependencySetupStates;

      var isGuestCheckout = require('./lib/is-guest-checkout');

      var Promise = require('./lib/promise');

      var paymentSheetViews = require('./views/payment-sheet-views');

      var vaultManager = require('braintree-web/vault-manager');

      var paymentOptionsViewID = require('./views/payment-options-view').ID;

      var VAULTED_PAYMENT_METHOD_TYPES_THAT_SHOULD_BE_HIDDEN = [paymentMethodTypes.applePay, paymentMethodTypes.googlePay, paymentMethodTypes.venmo];
      var DEFAULT_PAYMENT_OPTION_PRIORITY = [paymentOptionIDs.card, paymentOptionIDs.paypal, paymentOptionIDs.paypalCredit, paymentOptionIDs.venmo, paymentOptionIDs.applePay, paymentOptionIDs.googlePay];
      var NON_PAYMENT_OPTION_DEPENDENCIES = ['threeDSecure', 'dataCollector'];
      var ASYNC_DEPENDENCIES = DEFAULT_PAYMENT_OPTION_PRIORITY.concat(NON_PAYMENT_OPTION_DEPENDENCIES);
      var DEPENDENCY_READY_CHECK_INTERVAL = 200;

      function DropinModel(options) {
        this.rootNode = options.container;
        this.componentID = options.componentID;
        this.merchantConfiguration = options.merchantConfiguration;
        this.isGuestCheckout = isGuestCheckout(options.client);
        this.dependencyStates = ASYNC_DEPENDENCIES.reduce(function (total, dependencyKey) {
          if (this._shouldIncludeDependency(dependencyKey)) {
            total[dependencyKey] = dependencySetupStates.INITIALIZING;
          }

          return total;
        }.bind(this), {});
        this.failedDependencies = {};
        this._options = options;
        this._setupComplete = false;

        while (this.rootNode.parentNode) {
          this.rootNode = this.rootNode.parentNode;
        }

        this.isInShadowDom = this.rootNode.toString() === '[object ShadowRoot]';
        EventEmitter.call(this);
      }

      EventEmitter.createChild(DropinModel);

      DropinModel.prototype.initialize = function () {
        var dep;
        var self = this;
        var dependencyReadyInterval = setInterval(function () {
          for (dep in self.dependencyStates) {
            if (self.dependencyStates[dep] === dependencySetupStates.INITIALIZING) {
              return;
            }
          }

          clearInterval(dependencyReadyInterval);

          self._emit('asyncDependenciesReady');
        }, DEPENDENCY_READY_CHECK_INTERVAL);
        return vaultManager.create({
          client: self._options.client
        }).then(function (vaultManagerInstance) {
          self._vaultManager = vaultManagerInstance;
          return self._getSupportedPaymentOptions(self._options);
        }).then(function (paymentOptions) {
          self.supportedPaymentOptions = paymentOptions;
          return self.getVaultedPaymentMethods();
        }).then(function (paymentMethods) {
          self._paymentMethods = paymentMethods;
          self._paymentMethodIsRequestable = self._paymentMethods.length > 0;
        });
      };

      DropinModel.prototype.confirmDropinReady = function () {
        this._setupComplete = true;
      };

      DropinModel.prototype.isPaymentMethodRequestable = function () {
        return Boolean(this._paymentMethodIsRequestable);
      };

      DropinModel.prototype.addPaymentMethod = function (paymentMethod) {
        this._paymentMethods.push(paymentMethod);

        this._emit('addPaymentMethod', paymentMethod);

        this.changeActivePaymentMethod(paymentMethod);
      };

      DropinModel.prototype.removePaymentMethod = function (paymentMethod) {
        var paymentMethodLocation = this._paymentMethods.indexOf(paymentMethod);

        if (paymentMethodLocation === -1) {
          return;
        }

        this._paymentMethods.splice(paymentMethodLocation, 1);

        this._emit('removePaymentMethod', paymentMethod);
      };

      DropinModel.prototype.refreshPaymentMethods = function () {
        var self = this;
        return self.getVaultedPaymentMethods().then(function (paymentMethods) {
          self._paymentMethods = paymentMethods;

          self._emit('refreshPaymentMethods');
        });
      };

      DropinModel.prototype.changeActivePaymentMethod = function (paymentMethod) {
        this._activePaymentMethod = paymentMethod;

        this._emit('changeActivePaymentMethod', paymentMethod);
      };

      DropinModel.prototype.changeActiveView = function (paymentViewID) {
        var previousViewId = this._activePaymentViewId;
        this._activePaymentViewId = paymentViewID;

        this._emit('changeActiveView', {
          previousViewId: previousViewId,
          newViewId: paymentViewID
        });
      };

      DropinModel.prototype.removeActivePaymentMethod = function () {
        this._activePaymentMethod = null;

        this._emit('removeActivePaymentMethod');

        this.setPaymentMethodRequestable({
          isRequestable: false
        });
      };

      DropinModel.prototype.selectPaymentOption = function (paymentViewID) {
        this._emit('paymentOptionSelected', {
          paymentOption: paymentViewID
        });
      };

      DropinModel.prototype.enableEditMode = function () {
        analytics.sendEvent(this._options.client, 'manager.appeared');
        this._isInEditMode = true;

        this._emit('enableEditMode');
      };

      DropinModel.prototype.disableEditMode = function () {
        this._isInEditMode = false;

        this._emit('disableEditMode');
      };

      DropinModel.prototype.isInEditMode = function () {
        return Boolean(this._isInEditMode);
      };

      DropinModel.prototype.confirmPaymentMethodDeletion = function (paymentMethod) {
        this._paymentMethodWaitingToBeDeleted = paymentMethod;

        this._emit('confirmPaymentMethodDeletion', paymentMethod);
      };

      DropinModel.prototype._shouldIncludeDependency = function (key) {
        if (key === 'card') {
          // card is turned on by default unless the merchant explicitly
          // passes a value of `false` or omits it from a custom
          // `paymentOptionPriority` array
          if (this.merchantConfiguration.card === false) {
            return false;
          }
        } else if (!this.merchantConfiguration[key]) {
          // if the merchant does not have the non-card dependency
          // configured, do not include the dependency
          return false;
        }

        if (NON_PAYMENT_OPTION_DEPENDENCIES.indexOf(key) > -1) {
          // if the dependency is not a payment option (3DS, data collector)
          // include it since the merchant configured Drop-in for it
          return true;
        }

        if (this.merchantConfiguration.paymentOptionPriority) {
          // if the merchant passed a custom `paymentOptionPriority` array,
          // only include the dependency if it was configured _and_
          // included in the array
          return this.merchantConfiguration.paymentOptionPriority.indexOf(key) > -1;
        } // otherwise, include it if it is a valid payment option


        return DEFAULT_PAYMENT_OPTION_PRIORITY.indexOf(key) > -1;
      };

      DropinModel.prototype._shouldEmitRequestableEvent = function (options) {
        var requestableStateHasNotChanged = this.isPaymentMethodRequestable() === options.isRequestable;
        var nonce = options.selectedPaymentMethod && options.selectedPaymentMethod.nonce;
        var nonceHasNotChanged = nonce === this._paymentMethodRequestableNonce;

        if (!this._setupComplete) {
          // don't emit event until after Drop-in is fully set up
          // fixes issues with lazy loading of imports where event
          // should not be emitted
          // https://github.com/braintree/braintree-web-drop-in/issues/511
          return false;
        }

        if (requestableStateHasNotChanged && (!options.isRequestable || nonceHasNotChanged)) {
          return false;
        }

        return true;
      };

      DropinModel.prototype.setPaymentMethodRequestable = function (options) {
        var shouldEmitEvent = this._shouldEmitRequestableEvent(options);

        var paymentMethodRequestableResponse = {
          paymentMethodIsSelected: Boolean(options.selectedPaymentMethod),
          type: options.type
        };
        this._paymentMethodIsRequestable = options.isRequestable;

        if (options.isRequestable) {
          this._paymentMethodRequestableNonce = options.selectedPaymentMethod && options.selectedPaymentMethod.nonce;
        } else {
          delete this._paymentMethodRequestableNonce;
        }

        if (!shouldEmitEvent) {
          return;
        }

        if (options.isRequestable) {
          this._emit('paymentMethodRequestable', paymentMethodRequestableResponse);
        } else {
          this._emit('noPaymentMethodRequestable');
        }
      };

      DropinModel.prototype.getPaymentMethods = function () {
        // we want to return a copy of the Array
        // so we can loop through it in dropin.updateConfiguration
        // while calling model.removePaymentMethod
        // which updates the original array
        return this._paymentMethods.slice();
      };

      DropinModel.prototype.getActivePaymentMethod = function () {
        return this._activePaymentMethod;
      };

      DropinModel.prototype.hasPaymentMethods = function () {
        return this.getPaymentMethods().length > 0;
      };

      DropinModel.prototype.getInitialViewId = function () {
        if (this.supportedPaymentOptions.length > 1) {
          return paymentOptionsViewID;
        }

        return this.supportedPaymentOptions[0];
      };

      DropinModel.prototype.getActivePaymentViewId = function () {
        return this._activePaymentViewId;
      };

      DropinModel.prototype.reportAppSwitchPayload = function (payload) {
        this.appSwitchPayload = payload;
      };

      DropinModel.prototype.reportAppSwitchError = function (sheetId, error) {
        this.appSwitchError = {
          id: sheetId,
          error: error
        };
      };

      DropinModel.prototype.hasAtLeastOneAvailablePaymentOption = function () {
        var self = this;
        var i;

        for (i = 0; i < this.supportedPaymentOptions.length; i++) {
          if (self.dependencyStates[this.supportedPaymentOptions[i]] === dependencySetupStates.DONE) {
            return true;
          }
        }

        return false;
      };

      DropinModel.prototype.asyncDependencyReady = function (key) {
        this.dependencyStates[key] = dependencySetupStates.DONE;
      };

      DropinModel.prototype.asyncDependencyFailed = function (options) {
        if (this.failedDependencies.hasOwnProperty(options.view)) {
          return;
        }

        this.failedDependencies[options.view] = options.error;
        this.dependencyStates[options.view] = dependencySetupStates.FAILED;
      };

      DropinModel.prototype.cancelInitialization = function (error) {
        this._emit('cancelInitialization', error);
      };

      DropinModel.prototype.reportError = function (error) {
        this._emit('errorOccurred', error);
      };

      DropinModel.prototype.clearError = function () {
        this._emit('errorCleared');
      };

      DropinModel.prototype.preventUserAction = function () {
        this._emit('preventUserAction');
      };

      DropinModel.prototype.allowUserAction = function () {
        this._emit('allowUserAction');
      };

      DropinModel.prototype.deleteVaultedPaymentMethod = function () {
        var self = this;
        var promise = Promise.resolve();
        var error;

        this._emit('startVaultedPaymentMethodDeletion');

        if (!self.isGuestCheckout) {
          promise = this._vaultManager.deletePaymentMethod(this._paymentMethodWaitingToBeDeleted.nonce).catch(function (err) {
            error = err;
          });
        }

        return promise.then(function () {
          delete self._paymentMethodWaitingToBeDeleted;
          return self.refreshPaymentMethods();
        }).then(function () {
          self.disableEditMode();

          self._emit('finishVaultedPaymentMethodDeletion', error);
        });
      };

      DropinModel.prototype.cancelDeleteVaultedPaymentMethod = function () {
        this._emit('cancelVaultedPaymentMethodDeletion');

        delete this._paymentMethodWaitingToBeDeleted;
      };

      DropinModel.prototype.getVaultedPaymentMethods = function () {
        var self = this;

        if (self.isGuestCheckout) {
          return Promise.resolve([]);
        }

        return self._vaultManager.fetchPaymentMethods({
          defaultFirst: this.merchantConfiguration.showDefaultPaymentMethodFirst !== false
        }).then(function (paymentMethods) {
          return self._getSupportedPaymentMethods(paymentMethods).map(function (paymentMethod) {
            paymentMethod.vaulted = true;
            return paymentMethod;
          });
        }).catch(function () {
          return Promise.resolve([]);
        });
      };

      DropinModel.prototype._getSupportedPaymentMethods = function (paymentMethods) {
        var supportedPaymentMethods = this.supportedPaymentOptions.reduce(function (array, key) {
          var paymentMethodType = paymentMethodTypes[key];

          if (canShowVaultedPaymentMethodType(paymentMethodType)) {
            array.push(paymentMethodType);
          }

          return array;
        }, []);
        return paymentMethods.filter(function (paymentMethod) {
          return supportedPaymentMethods.indexOf(paymentMethod.type) > -1;
        });
      };

      DropinModel.prototype._getSupportedPaymentOptions = function (options) {
        var self = this;
        var paymentOptionPriority = options.merchantConfiguration.paymentOptionPriority || DEFAULT_PAYMENT_OPTION_PRIORITY;
        var promises;

        if (!(paymentOptionPriority instanceof Array)) {
          throw new DropinError('paymentOptionPriority must be an array.');
        } // Remove duplicates


        paymentOptionPriority = paymentOptionPriority.filter(function (item, pos) {
          return paymentOptionPriority.indexOf(item) === pos;
        });
        promises = paymentOptionPriority.map(function (paymentOption) {
          return getPaymentOption(paymentOption, options).then(function (result) {
            if (!result.success) {
              self.dependencyStates[result.id] = dependencySetupStates.NOT_ENABLED;
            }

            return result;
          });
        });
        return Promise.all(promises).then(function (result) {
          result = result.filter(function (item) {
            return item.success;
          });

          if (result.length === 0) {
            return Promise.reject(new DropinError('No valid payment options available.'));
          }

          return result.map(function (item) {
            return item.id;
          });
        });
      };

      function getPaymentOption(paymentOption, options) {
        return isPaymentOptionEnabled(paymentOption, options).then(function (success) {
          return {
            success: success,
            id: paymentOptionIDs[paymentOption]
          };
        });
      }

      function isPaymentOptionEnabled(paymentOption, options) {
        var SheetView = paymentSheetViews[paymentOptionIDs[paymentOption]];

        if (!SheetView) {
          return Promise.reject(new DropinError('paymentOptionPriority: Invalid payment option specified.'));
        }

        return SheetView.isEnabled({
          client: options.client,
          merchantConfiguration: options.merchantConfiguration
        }).catch(function (error) {
          console.error(SheetView.ID + ' view errored when checking if it was supported.'); // eslint-disable-line no-console

          console.error(error); // eslint-disable-line no-console

          return Promise.resolve(false);
        });
      }

      function canShowVaultedPaymentMethodType(paymentMethodType) {
        return paymentMethodType && VAULTED_PAYMENT_METHOD_TYPES_THAT_SHOULD_BE_HIDDEN.indexOf(paymentMethodType) === -1;
      }

      module.exports = DropinModel;
    }, {
      "./constants": 191,
      "./lib/analytics": 196,
      "./lib/dropin-error": 201,
      "./lib/is-guest-checkout": 203,
      "./lib/promise": 208,
      "./views/payment-options-view": 254,
      "./views/payment-sheet-views": 259,
      "@braintree/event-emitter": 40,
      "braintree-web/vault-manager": 152
    }],
    193: [function (require, module, exports) {
      'use strict';

      var assign = require('./lib/assign').assign;

      var analytics = require('./lib/analytics');

      var classList = require('@braintree/class-list');

      var constants = require('./constants');

      var DropinError = require('./lib/dropin-error');

      var DropinModel = require('./dropin-model');

      var EventEmitter = require('@braintree/event-emitter');

      var assets = require('@braintree/asset-loader');

      var MainView = require('./views/main-view');

      var paymentMethodsViewID = require('./views/payment-methods-view').ID;

      var paymentOptionIDs = constants.paymentOptionIDs;

      var translations = require('./translations').translations;

      var isUtf8 = require('./lib/is-utf-8');

      var uuid = require('@braintree/uuid');

      var Promise = require('./lib/promise');

      var sanitizeHtml = require('./lib/sanitize-html');

      var DataCollector = require('./lib/data-collector');

      var ThreeDSecure = require('./lib/three-d-secure');

      var wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;

      var mainHTML = "<div class=\"braintree-dropin\">\n  <div data-braintree-id=\"methods-label\" class=\"braintree-heading\">&nbsp;</div>\n  <div data-braintree-id=\"methods-edit\" class=\"braintree-hidden braintree-heading\" role=\"button\" tabindex=\"0\">{{edit}}</div>\n  <div data-braintree-id=\"choose-a-way-to-pay\" class=\"braintree-heading\">{{chooseAWayToPay}}</div>\n  <div class=\"braintree-placeholder\">&nbsp;</div>\n\n  <div data-braintree-id=\"upper-container\" class=\"braintree-upper-container\">\n    <div data-braintree-id=\"loading-container\" class=\"braintree-loader__container\">\n      <div data-braintree-id=\"loading-indicator\" class=\"braintree-loader__indicator\">\n        <svg width=\"14\" height=\"16\" class=\"braintree-loader__lock\">\n          <use xlink:href=\"#iconLockLoader\"></use>\n        </svg>\n      </div>\n    </div>\n\n    <div data-braintree-id=\"delete-confirmation\" class=\"braintree-delete-confirmation braintree-sheet\">\n      <div data-braintree-id=\"delete-confirmation__message\"></div>\n      <div class=\"braintree-delete-confirmation__button-container\">\n        <div tabindex=\"0\" role=\"button\" data-braintree-id=\"delete-confirmation__no\" class=\"braintree-delete-confirmation__button\">{{deleteCancelButton}}</div>\n        <div tabindex=\"0\" role=\"button\" data-braintree-id=\"delete-confirmation__yes\" class=\"braintree-delete-confirmation__button\">{{deleteConfirmationButton}}</div>\n      </div>\n    </div>\n\n    <div data-braintree-id=\"methods\" class=\"braintree-methods braintree-methods-initial\">\n      <div data-braintree-id=\"methods-container\"></div>\n    </div>\n\n    <div data-braintree-id=\"options\" class=\"braintree-test-class braintree-options braintree-options-initial\">\n      <div data-braintree-id=\"payment-options-container\" class=\"braintree-options-list\"></div>\n    </div>\n\n    <div data-braintree-id=\"sheet-container\" class=\"braintree-sheet__container\">\n      <div data-braintree-id=\"paypal\" class=\"braintree-paypal braintree-sheet\">\n        <div data-braintree-id=\"paypal-sheet-header\" class=\"braintree-sheet__header\">\n          <div class=\"braintree-sheet__header-label\">\n            <div class=\"braintree-sheet__logo--header\">\n              <svg width=\"40\" height=\"24\">\n                <use xlink:href=\"#logoPayPal\"></use>\n              </svg>\n            </div>\n            <div class=\"braintree-sheet__label\">{{PayPal}}</div>\n          </div>\n        </div>\n        <div class=\"braintree-sheet__content braintree-sheet__content--button\">\n          <div data-braintree-id=\"paypal-button\" class=\"braintree-sheet__button--paypal\"></div>\n        </div>\n      </div>\n      <div data-braintree-id=\"paypalCredit\" class=\"braintree-paypalCredit braintree-sheet\">\n        <div data-braintree-id=\"paypal-credit-sheet-header\" class=\"braintree-sheet__header\">\n          <div class=\"braintree-sheet__header-label\">\n            <div class=\"braintree-sheet__logo--header\">\n              <svg width=\"40\" height=\"24\">\n                <use xlink:href=\"#logoPayPalCredit\"></use>\n              </svg>\n            </div>\n            <div class=\"braintree-sheet__label\">{{PayPal Credit}}</div>\n          </div>\n        </div>\n        <div class=\"braintree-sheet__content braintree-sheet__content--button\">\n          <div data-braintree-id=\"paypal-credit-button\" class=\"braintree-sheet__button--paypal\"></div>\n        </div>\n      </div>\n      <div data-braintree-id=\"applePay\" class=\"braintree-applePay braintree-sheet\">\n        <div data-braintree-id=\"apple-pay-sheet-header\" class=\"braintree-sheet__header\">\n          <div class=\"braintree-sheet__header-label\">\n            <div class=\"braintree-sheet__logo--header\">\n              <svg height=\"24\" width=\"40\">\n              <use xlink:href=\"#logoApplePay\"></use>\n              </svg>\n            </div>\n            <div class=\"braintree-sheet__label\">{{Apple Pay}}</div>\n          </div>\n        </div>\n        <div class=\"braintree-sheet__content braintree-sheet__content--button\">\n          <div data-braintree-id=\"apple-pay-button\" class=\"braintree-sheet__button--apple-pay apple-pay-button\"></div>\n        </div>\n      </div>\n      <div data-braintree-id=\"googlePay\" class=\"braintree-googlePay braintree-sheet\">\n        <div data-braintree-id=\"google-pay-sheet-header\" class=\"braintree-sheet__header\">\n          <div class=\"braintree-sheet__header-label\">\n            <div class=\"braintree-sheet__logo--header\">\n              <svg height=\"24\" width=\"40\">\n              <use xlink:href=\"#logoGooglePay\"></use>\n              </svg>\n            </div>\n            <div class=\"braintree-sheet__label\">{{Google Pay}}</div>\n          </div>\n        </div>\n        <div class=\"braintree-sheet__content braintree-sheet__content--button\">\n          <div data-braintree-id=\"google-pay-button\"></div>\n        </div>\n      </div>\n      <div data-braintree-id=\"venmo\" class=\"braintree-venmo braintree-sheet\">\n        <div data-braintree-id=\"venmo-sheet-header\" class=\"braintree-sheet__header\">\n          <div class=\"braintree-sheet__header-label\">\n            <div class=\"braintree-sheet__logo--header\">\n              <svg height=\"24\" width=\"40\">\n              <use xlink:href=\"#logoVenmo\"></use>\n              </svg>\n            </div>\n            <div class=\"braintree-sheet__label\">{{Venmo}}</div>\n          </div>\n        </div>\n        <div class=\"braintree-sheet__content braintree-sheet__content--button\">\n          <svg data-braintree-id=\"venmo-button\" class=\"braintree-sheet__button--venmo\">\n            <use xlink:href=\"#buttonVenmo\"></use>\n          </svg>\n        </div>\n      </div>\n      <div data-braintree-id=\"card\" class=\"braintree-card braintree-form braintree-sheet\">\n        <div data-braintree-id=\"card-sheet-header\" class=\"braintree-sheet__header\">\n          <div class=\"braintree-sheet__header-label\">\n            <div class=\"braintree-sheet__logo--header\">\n              <svg width=\"40\" height=\"24\" class=\"braintree-icon--bordered\">\n                <use xlink:href=\"#iconCardFront\"></use>\n              </svg>\n            </div>\n            <div class=\"braintree-sheet__text\">{{payWithCard}}</div>\n          </div>\n          <div data-braintree-id=\"card-view-icons\" class=\"braintree-sheet__icons\"></div>\n        </div>\n        <div class=\"braintree-sheet__content braintree-sheet__content--form\">\n          <div data-braintree-id=\"cardholder-name-field-group\" class=\"braintree-form__field-group\">\n            <label for=\"braintree__card-view-input__cardholder-name\">\n              <div class=\"braintree-form__label\">{{cardholderNameLabel}}</div>\n              <div class=\"braintree-form__field\">\n                <div class=\"braintree-form-cardholder-name braintree-form__hosted-field\"></div>\n                <div class=\"braintree-form__icon-container\">\n                  <div class=\"braintree-form__icon braintree-form__field-error-icon\">\n                    <svg width=\"24\" height=\"24\">\n                      <use xlink:href=\"#iconError\"></use>\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            </label>\n            <div data-braintree-id=\"cardholder-name-field-error\" class=\"braintree-form__field-error\"></div>\n          </div>\n          <div data-braintree-id=\"number-field-group\" class=\"braintree-form__field-group\">\n            <label>\n              <div class=\"braintree-form__label\">{{cardNumberLabel}}</div>\n              <div class=\"braintree-form__field\">\n                <div class=\"braintree-form-number braintree-form__hosted-field\"></div>\n                <div class=\"braintree-form__icon-container\">\n                  <div data-braintree-id=\"card-number-icon\" class=\"braintree-form__icon braintree-form__field-secondary-icon\">\n                    <svg width=\"40\" height=\"24\" class=\"braintree-icon--bordered\">\n                    <use data-braintree-id=\"card-number-icon-svg\" xlink:href=\"#iconCardFront\"></use>\n                    </svg>\n                  </div>\n                  <div class=\"braintree-form__icon braintree-form__field-error-icon\">\n                    <svg width=\"24\" height=\"24\">\n                      <use xlink:href=\"#iconError\"></use>\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            </label>\n            <div data-braintree-id=\"number-field-error\" class=\"braintree-form__field-error\"></div>\n          </div>\n\n          <div class=\"braintree-form__flexible-fields\">\n            <div data-braintree-id=\"expiration-date-field-group\" class=\"braintree-form__field-group\">\n              <label>\n                <div class=\"braintree-form__label\">{{expirationDateLabel}}\n                  <span class=\"braintree-form__descriptor\">{{expirationDateLabelSubheading}}</span>\n                </div>\n                <div class=\"braintree-form__field\">\n                  <div class=\"braintree-form__hosted-field braintree-form-expiration\"></div>\n                  <div class=\"braintree-form__icon-container\">\n                    <div class=\"braintree-form__icon braintree-form__field-error-icon\">\n                      <svg width=\"24\" height=\"24\">\n                        <use xlink:href=\"#iconError\"></use>\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n              </label>\n              <div data-braintree-id=\"expiration-date-field-error\" class=\"braintree-form__field-error\"></div>\n            </div>\n\n\n            <div data-braintree-id=\"cvv-field-group\" class=\"braintree-form__field-group\">\n              <label>\n                <div class=\"braintree-form__label\">{{cvvLabel}}\n                  <span data-braintree-id=\"cvv-label-descriptor\" class=\"braintree-form__descriptor\">{{cvvThreeDigitLabelSubheading}}</span>\n                </div>\n                <div class=\"braintree-form__field\">\n                  <div class=\"braintree-form__hosted-field braintree-form-cvv\"></div>\n                  <div class=\"braintree-form__icon-container\">\n                    <div data-braintree-id=\"cvv-icon\" class=\"braintree-form__icon braintree-form__field-secondary-icon\">\n                      <svg width=\"40\" height=\"24\" class=\"braintree-icon--bordered\">\n                      <use data-braintree-id=\"cvv-icon-svg\" xlink:href=\"#iconCVVBack\"></use>\n                      </svg>\n                    </div>\n                    <div class=\"braintree-form__icon braintree-form__field-error-icon\">\n                      <svg width=\"24\" height=\"24\">\n                        <use xlink:href=\"#iconError\"></use>\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n              </label>\n              <div data-braintree-id=\"cvv-field-error\" class=\"braintree-form__field-error\"></div>\n            </div>\n\n            <div data-braintree-id=\"postal-code-field-group\" class=\"braintree-form__field-group\">\n              <label>\n                <div class=\"braintree-form__label\">{{postalCodeLabel}}</div>\n                <div class=\"braintree-form__field\">\n                  <div class=\"braintree-form__hosted-field braintree-form-postal-code\"></div>\n                  <div class=\"braintree-form__icon-container\">\n                    <div class=\"braintree-form__icon braintree-form__field-error-icon\">\n                      <svg width=\"24\" height=\"24\">\n                        <use xlink:href=\"#iconError\"></use>\n                      </svg>\n                    </div>\n                  </div>\n                </div>\n              </label>\n              <div data-braintree-id=\"postal-code-field-error\" class=\"braintree-form__field-error\"></div>\n            </div>\n          </div>\n\n          <div data-braintree-id=\"save-card-field-group\" class=\"braintree-form__field-group braintree-hidden\">\n            <label>\n              <div class=\"braintree-form__field braintree-form__checkbox\">\n                <input type=\"checkbox\" data-braintree-id=\"save-card-input\" checked />\n              </div>\n              <div class=\"braintree-form__label\">{{saveCardLabel}}</div>\n            </label>\n          </div>\n        </div>\n      </div>\n\n      <div data-braintree-id=\"sheet-error\" class=\"braintree-sheet__error\">\n        <div class=\"braintree-form__icon braintree-sheet__error-icon\">\n          <svg width=\"24\" height=\"24\">\n            <use xlink:href=\"#iconError\"></use>\n          </svg>\n        </div>\n        <div data-braintree-id=\"sheet-error-text\" class=\"braintree-sheet__error-text\"></div>\n      </div>\n    </div>\n  </div>\n\n  <div data-braintree-id=\"lower-container\" class=\"braintree-test-class braintree-options braintree-hidden\">\n    <div data-braintree-id=\"other-ways-to-pay\" class=\"braintree-heading\">{{otherWaysToPay}}</div>\n  </div>\n\n  <div data-braintree-id=\"toggle\" class=\"braintree-large-button braintree-toggle braintree-hidden\" tabindex=\"0\" role=\"button\">\n    <span>{{chooseAnotherWayToPay}}</span>\n  </div>\n</div>\n<div data-braintree-id=\"disable-wrapper\" class=\"braintree-dropin__disabled braintree-hidden\"></div>\n";
      var svgHTML = "<svg data-braintree-id=\"svgs\" style=\"display: none\">\n  <defs>\n    <symbol id=\"icon-visa\" viewBox=\"0 0 40 24\">\n      <title>Visa</title>\n      <path d=\"M0 1.927C0 .863.892 0 1.992 0h36.016C39.108 0 40 .863 40 1.927v20.146C40 23.137 39.108 24 38.008 24H1.992C.892 24 0 23.137 0 22.073V1.927z\" style=\"fill: #FFF\" />\n      <path d=\"M0 22.033C0 23.12.892 24 1.992 24h36.016c1.1 0 1.992-.88 1.992-1.967V20.08H0v1.953z\" style=\"fill: #F8B600\" />\n      <path d=\"M0 3.92h40V1.967C40 .88 39.108 0 38.008 0H1.992C.892 0 0 .88 0 1.967V3.92zM19.596 7.885l-2.11 9.478H14.93l2.11-9.478h2.554zm10.743 6.12l1.343-3.56.773 3.56H30.34zm2.85 3.358h2.36l-2.063-9.478H31.31c-.492 0-.905.274-1.088.695l-3.832 8.783h2.682l.532-1.415h3.276l.31 1.415zm-6.667-3.094c.01-2.502-3.6-2.64-3.577-3.76.008-.338.345-.7 1.083-.793.365-.045 1.373-.08 2.517.425l.448-2.01c-.615-.214-1.405-.42-2.39-.42-2.523 0-4.3 1.288-4.313 3.133-.016 1.364 1.268 2.125 2.234 2.58.996.464 1.33.762 1.325 1.177-.006.636-.793.918-1.526.928-1.285.02-2.03-.333-2.623-.6l-.462 2.08c.598.262 1.7.49 2.84.502 2.682 0 4.437-1.273 4.445-3.243zM15.948 7.884l-4.138 9.478h-2.7L7.076 9.8c-.123-.466-.23-.637-.606-.834-.615-.32-1.63-.62-2.52-.806l.06-.275h4.345c.554 0 1.052.354 1.178.966l1.076 5.486 2.655-6.45h2.683z\" style=\"fill: #1A1F71\" />\n    </symbol>\n\n    <symbol id=\"icon-master-card\" viewBox=\"0 0 40 24\">\n      <title>MasterCard</title>\n      <path d=\"M0 1.927C0 .863.892 0 1.992 0h36.016C39.108 0 40 .863 40 1.927v20.146C40 23.137 39.108 24 38.008 24H1.992C.892 24 0 23.137 0 22.073V1.927z\" style=\"fill: #FFF\" />\n      <path d=\"M11.085 22.2v-1.36c0-.522-.318-.863-.864-.863-.272 0-.568.09-.773.386-.16-.25-.386-.386-.727-.386-.228 0-.455.068-.637.318v-.272h-.478V22.2h.478v-1.202c0-.386.204-.567.523-.567.318 0 .478.205.478.568V22.2h.477v-1.202c0-.386.23-.567.524-.567.32 0 .478.205.478.568V22.2h.523zm7.075-2.177h-.774v-.658h-.478v.658h-.432v.43h.432v.998c0 .5.205.795.75.795.206 0 .433-.068.592-.16l-.136-.407c-.136.09-.296.114-.41.114-.227 0-.318-.137-.318-.363v-.976h.774v-.43zm4.048-.046c-.273 0-.454.136-.568.318v-.272h-.478V22.2h.478v-1.225c0-.363.16-.567.455-.567.09 0 .204.023.295.046l.137-.454c-.09-.023-.228-.023-.32-.023zm-6.118.227c-.228-.16-.546-.227-.888-.227-.546 0-.91.272-.91.703 0 .363.274.567.75.635l.23.023c.25.045.385.113.385.227 0 .16-.182.272-.5.272-.32 0-.57-.113-.728-.227l-.228.363c.25.18.59.272.932.272.637 0 1-.295 1-.703 0-.385-.295-.59-.75-.658l-.227-.022c-.205-.023-.364-.068-.364-.204 0-.16.16-.25.41-.25.272 0 .545.114.682.182l.205-.386zm12.692-.227c-.273 0-.455.136-.568.318v-.272h-.478V22.2h.478v-1.225c0-.363.16-.567.455-.567.09 0 .203.023.294.046L29.1 20c-.09-.023-.227-.023-.318-.023zm-6.096 1.134c0 .66.455 1.135 1.16 1.135.32 0 .546-.068.774-.25l-.228-.385c-.182.136-.364.204-.57.204-.385 0-.658-.272-.658-.703 0-.407.273-.68.66-.702.204 0 .386.068.568.204l.228-.385c-.228-.182-.455-.25-.774-.25-.705 0-1.16.477-1.16 1.134zm4.413 0v-1.087h-.48v.272c-.158-.204-.385-.318-.68-.318-.615 0-1.093.477-1.093 1.134 0 .66.478 1.135 1.092 1.135.317 0 .545-.113.68-.317v.272h.48v-1.09zm-1.753 0c0-.384.25-.702.66-.702.387 0 .66.295.66.703 0 .387-.273.704-.66.704-.41-.022-.66-.317-.66-.703zm-5.71-1.133c-.636 0-1.09.454-1.09 1.134 0 .682.454 1.135 1.114 1.135.32 0 .638-.09.888-.295l-.228-.34c-.18.136-.41.227-.636.227-.296 0-.592-.136-.66-.522h1.615v-.18c.022-.704-.388-1.158-1.002-1.158zm0 .41c.297 0 .502.18.547.52h-1.137c.045-.295.25-.52.59-.52zm11.852.724v-1.95h-.48v1.135c-.158-.204-.385-.318-.68-.318-.615 0-1.093.477-1.093 1.134 0 .66.478 1.135 1.092 1.135.318 0 .545-.113.68-.317v.272h.48v-1.09zm-1.752 0c0-.384.25-.702.66-.702.386 0 .66.295.66.703 0 .387-.274.704-.66.704-.41-.022-.66-.317-.66-.703zm-15.97 0v-1.087h-.476v.272c-.16-.204-.387-.318-.683-.318-.615 0-1.093.477-1.093 1.134 0 .66.478 1.135 1.092 1.135.318 0 .545-.113.682-.317v.272h.477v-1.09zm-1.773 0c0-.384.25-.702.66-.702.386 0 .66.295.66.703 0 .387-.274.704-.66.704-.41-.022-.66-.317-.66-.703z\" style=\"fill: #000\" />\n      <path style=\"fill: #FF5F00\" d=\"M23.095 3.49H15.93v12.836h7.165\" />\n      <path d=\"M16.382 9.91c0-2.61 1.23-4.922 3.117-6.42-1.39-1.087-3.14-1.745-5.05-1.745-4.528 0-8.19 3.65-8.19 8.164 0 4.51 3.662 8.162 8.19 8.162 1.91 0 3.66-.657 5.05-1.746-1.89-1.474-3.118-3.81-3.118-6.417z\" style=\"fill: #EB001B\" />\n      <path d=\"M32.76 9.91c0 4.51-3.664 8.162-8.19 8.162-1.91 0-3.662-.657-5.05-1.746 1.91-1.496 3.116-3.81 3.116-6.417 0-2.61-1.228-4.922-3.116-6.42 1.388-1.087 3.14-1.745 5.05-1.745 4.526 0 8.19 3.674 8.19 8.164z\" style=\"fill: #F79E1B\" />\n    </symbol>\n\n    <symbol id=\"icon-unionpay\" viewBox=\"0 0 40 24\">\n      <title>Union Pay</title>\n      <path d=\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\" style=\"fill: #FFF\" />\n      <path d=\"M9.877 2h8.126c1.135 0 1.84.93 1.575 2.077l-3.783 16.35c-.267 1.142-1.403 2.073-2.538 2.073H5.13c-1.134 0-1.84-.93-1.574-2.073L7.34 4.076C7.607 2.93 8.74 2 9.878 2z\" style=\"fill: #E21836\" />\n      <path d=\"M17.325 2h9.345c1.134 0 .623.93.356 2.077l-3.783 16.35c-.265 1.142-.182 2.073-1.32 2.073H12.58c-1.137 0-1.84-.93-1.574-2.073l3.783-16.35C15.056 2.93 16.19 2 17.324 2z\" style=\"fill: #00447B\" />\n      <path d=\"M26.3 2h8.126c1.136 0 1.84.93 1.575 2.077l-3.782 16.35c-.266 1.142-1.402 2.073-2.54 2.073h-8.122c-1.137 0-1.842-.93-1.574-2.073l3.78-16.35C24.03 2.93 25.166 2 26.303 2z\" style=\"fill: #007B84\" />\n      <path d=\"M27.633 14.072l-.99 3.3h.266l-.208.68h-.266l-.062.212h-.942l.064-.21H23.58l.193-.632h.194l1.005-3.35.2-.676h.962l-.1.34s.255-.184.498-.248c.242-.064 1.636-.088 1.636-.088l-.206.672h-.33zm-1.695 0l-.254.843s.285-.13.44-.172c.16-.04.395-.057.395-.057l.182-.614h-.764zm-.38 1.262l-.263.877s.29-.15.447-.196c.157-.037.396-.066.396-.066l.185-.614h-.766zm-.614 2.046h.767l.222-.74h-.765l-.223.74z\" style=\"fill: #FEFEFE\" />\n      <path d=\"M28.055 13.4h1.027l.01.385c-.005.065.05.096.17.096h.208l-.19.637h-.555c-.48.035-.662-.172-.65-.406l-.02-.71zM28.193 16.415h-.978l.167-.566H28.5l.16-.517h-1.104l.19-.638h3.072l-.193.638h-1.03l-.16.516h1.032l-.17.565H29.18l-.2.24h.454l.11.712c.013.07.014.116.036.147.023.026.158.038.238.038h.137l-.21.694h-.348c-.054 0-.133-.004-.243-.01-.105-.008-.18-.07-.25-.105-.064-.03-.16-.11-.182-.24l-.11-.712-.507.7c-.162.222-.38.39-.748.39h-.712l.186-.62h.273c.078 0 .15-.03.2-.056.052-.023.098-.05.15-.126l.74-1.05zM17.478 14.867h2.59l-.19.622H18.84l-.16.53h1.06l-.194.64h-1.06l-.256.863c-.03.095.25.108.353.108l.53-.072-.212.71h-1.193c-.096 0-.168-.013-.272-.037-.1-.023-.145-.07-.19-.138-.043-.07-.11-.128-.064-.278l.343-1.143h-.588l.195-.65h.592l.156-.53h-.588l.188-.623zM19.223 13.75h1.063l-.194.65H18.64l-.157.136c-.067.066-.09.038-.18.087-.08.04-.254.123-.477.123h-.466l.19-.625h.14c.118 0 .198-.01.238-.036.046-.03.098-.096.157-.203l.267-.487h1.057l-.187.356zM20.74 13.4h.905l-.132.46s.286-.23.487-.313c.2-.075.65-.143.65-.143l1.464-.007-.498 1.672c-.085.286-.183.472-.244.555-.055.087-.12.16-.248.23-.124.066-.236.104-.34.115-.096.007-.244.01-.45.012h-1.41l-.4 1.324c-.037.13-.055.194-.03.23.02.03.068.066.135.066l.62-.06-.21.726h-.698c-.22 0-.383-.004-.495-.013-.108-.01-.22 0-.295-.058-.065-.058-.164-.133-.162-.21.007-.073.037-.192.082-.356l1.268-4.23zm1.922 1.69h-1.484l-.09.3h1.283c.152-.018.184.004.196-.003l.096-.297zm-1.402-.272s.29-.266.786-.353c.112-.022.82-.015.82-.015l.106-.357h-1.496l-.216.725z\" style=\"fill: #FEFEFE\" />\n      <path d=\"M23.382 16.1l-.084.402c-.036.125-.067.22-.16.302-.1.084-.216.172-.488.172l-.502.02-.004.455c-.006.13.028.117.048.138.024.022.045.032.067.04l.157-.008.48-.028-.198.663h-.552c-.385 0-.67-.008-.765-.084-.092-.057-.105-.132-.103-.26l.035-1.77h.88l-.013.362h.212c.072 0 .12-.007.15-.026.027-.02.047-.048.06-.093l.087-.282h.692zM10.84 7.222c-.032.143-.596 2.763-.598 2.764-.12.53-.21.91-.508 1.152-.172.14-.37.21-.6.21-.37 0-.587-.185-.624-.537l-.007-.12.113-.712s.593-2.388.7-2.703c.002-.017.005-.026.007-.035-1.152.01-1.357 0-1.37-.018-.007.024-.037.173-.037.173l-.605 2.688-.05.23-.1.746c0 .22.042.4.13.553.275.485 1.06.557 1.504.557.573 0 1.11-.123 1.47-.345.63-.375.797-.962.944-1.48l.067-.267s.61-2.48.716-2.803c.003-.017.006-.026.01-.035-.835.01-1.08 0-1.16-.018zM14.21 12.144c-.407-.006-.55-.006-1.03.018l-.018-.036c.042-.182.087-.363.127-.548l.06-.25c.086-.39.173-.843.184-.98.007-.084.036-.29-.2-.29-.1 0-.203.048-.307.096-.058.207-.174.79-.23 1.055-.118.558-.126.62-.178.897l-.036.037c-.42-.006-.566-.006-1.05.018l-.024-.04c.08-.332.162-.668.24-.998.203-.9.25-1.245.307-1.702l.04-.028c.47-.067.585-.08 1.097-.185l.043.047-.077.287c.086-.052.168-.104.257-.15.242-.12.51-.155.658-.155.223 0 .468.062.57.323.098.232.034.52-.094 1.084l-.066.287c-.13.627-.152.743-.225 1.174l-.05.036zM15.87 12.144c-.245 0-.405-.006-.56 0-.153 0-.303.008-.532.018l-.013-.02-.015-.02c.062-.238.097-.322.128-.406.03-.084.06-.17.115-.41.072-.315.116-.535.147-.728.033-.187.052-.346.075-.53l.02-.014.02-.018c.244-.036.4-.057.56-.082.16-.024.32-.055.574-.103l.008.023.008.022c-.047.195-.094.39-.14.588-.047.197-.094.392-.137.587-.093.414-.13.57-.152.68-.02.105-.026.163-.063.377l-.022.02-.023.017zM19.542 10.728c.143-.633.033-.928-.108-1.11-.213-.273-.59-.36-.978-.36-.235 0-.793.023-1.23.43-.312.29-.458.687-.546 1.066-.088.387-.19 1.086.447 1.344.198.085.48.108.662.108.466 0 .945-.13 1.304-.513.278-.312.405-.775.448-.965zm-1.07-.046c-.02.106-.113.503-.24.673-.086.123-.19.198-.305.198-.033 0-.235 0-.238-.3-.003-.15.027-.304.063-.47.108-.478.236-.88.56-.88.255 0 .27.298.16.78zM29.536 12.187c-.493-.004-.635-.004-1.09.015l-.03-.037c.124-.472.248-.943.358-1.42.142-.62.175-.882.223-1.244l.037-.03c.49-.07.625-.09 1.135-.186l.015.044c-.093.388-.186.777-.275 1.166-.19.816-.258 1.23-.33 1.658l-.044.035z\" style=\"fill: #FEFEFE\" />\n      <path d=\"M29.77 10.784c.144-.63-.432-.056-.525-.264-.14-.323-.052-.98-.62-1.2-.22-.085-.732.025-1.17.428-.31.29-.458.683-.544 1.062-.088.38-.19 1.078.444 1.328.2.085.384.11.567.103.638-.034 1.124-1.002 1.483-1.386.277-.303.326.115.368-.07zm-.974-.047c-.024.1-.117.503-.244.67-.083.117-.283.192-.397.192-.032 0-.232 0-.24-.3 0-.146.03-.3.067-.467.11-.47.235-.87.56-.87.254 0 .363.293.254.774zM22.332 12.144c-.41-.006-.55-.006-1.03.018l-.018-.036c.04-.182.087-.363.13-.548l.057-.25c.09-.39.176-.843.186-.98.008-.084.036-.29-.198-.29-.1 0-.203.048-.308.096-.057.207-.175.79-.232 1.055-.115.558-.124.62-.176.897l-.035.037c-.42-.006-.566-.006-1.05.018l-.022-.04.238-.998c.203-.9.25-1.245.307-1.702l.038-.028c.472-.067.587-.08 1.098-.185l.04.047-.073.287c.084-.052.17-.104.257-.15.24-.12.51-.155.655-.155.224 0 .47.062.575.323.095.232.03.52-.098 1.084l-.065.287c-.133.627-.154.743-.225 1.174l-.05.036zM26.32 8.756c-.07.326-.282.603-.554.736-.225.114-.498.123-.78.123h-.183l.013-.074.336-1.468.01-.076.007-.058.132.015.71.062c.275.105.388.38.31.74zM25.88 7.22l-.34.003c-.883.01-1.238.006-1.383-.012l-.037.182-.315 1.478-.793 3.288c.77-.01 1.088-.01 1.22.004l.21-1.024s.153-.644.163-.667c0 0 .047-.066.096-.092h.07c.665 0 1.417 0 2.005-.437.4-.298.675-.74.797-1.274.03-.132.054-.29.054-.446 0-.205-.04-.41-.16-.568-.3-.423-.896-.43-1.588-.433zM33.572 9.28l-.04-.043c-.502.1-.594.118-1.058.18l-.034.034-.005.023-.003-.007c-.345.803-.334.63-.615 1.26-.003-.03-.003-.048-.004-.077l-.07-1.37-.044-.043c-.53.1-.542.118-1.03.18l-.04.034-.006.056.003.007c.06.315.047.244.108.738.03.244.065.49.093.73.05.4.077.6.134 1.21-.328.55-.408.757-.722 1.238l.017.044c.478-.018.587-.018.94-.018l.08-.088c.265-.578 2.295-4.085 2.295-4.085zM16.318 9.62c.27-.19.304-.45.076-.586-.23-.137-.634-.094-.906.095-.273.186-.304.45-.075.586.228.134.633.094.905-.096z\" style=\"fill: #FEFEFE\" />\n      <path d=\"M31.238 13.415l-.397.684c-.124.232-.357.407-.728.41l-.632-.01.184-.618h.124c.064 0 .11-.004.148-.022.03-.01.054-.035.08-.072l.233-.373h.988z\" style=\"fill: #FEFEFE\" />\n    </symbol>\n\n    <symbol id=\"icon-american-express\" viewBox=\"0 0 40 24\">\n      <title>American Express</title>\n      <path d=\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\" style=\"fill: #FFF\" />\n      <path style=\"fill: #1478BE\" d=\"M6.26 12.32h2.313L7.415 9.66M27.353 9.977h-3.738v1.23h3.666v1.384h-3.675v1.385h3.821v1.005c.623-.77 1.33-1.466 2.025-2.235l.707-.77c-.934-1.004-1.87-2.08-2.804-3.075v1.077z\" />\n      <path d=\"M38.25 7h-5.605l-1.328 1.4L30.072 7H16.984l-1.017 2.416L14.877 7h-9.58L1.25 16.5h4.826l.623-1.556h1.4l.623 1.556H29.99l1.327-1.483 1.328 1.483h5.605l-4.36-4.667L38.25 7zm-17.685 8.1h-1.557V9.883L16.673 15.1h-1.33L13.01 9.883l-.084 5.217H9.73l-.623-1.556h-3.27L5.132 15.1H3.42l2.884-6.772h2.42l2.645 6.233V8.33h2.646l2.107 4.51 1.868-4.51h2.575V15.1zm14.727 0h-2.024l-2.024-2.26-2.023 2.26H22.06V8.328H29.53l1.795 2.177 2.024-2.177h2.025L32.26 11.75l3.032 3.35z\" style=\"fill: #1478BE\" />\n    </symbol>\n\n    <symbol id=\"icon-jcb\" viewBox=\"0 0 40 24\">\n      <title>JCB</title>\n      <path d=\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\" style=\"fill: #FFF\" />\n      <path d=\"M33.273 2.01h.013v17.062c-.004 1.078-.513 2.103-1.372 2.746-.63.47-1.366.67-2.14.67-.437 0-4.833.026-4.855 0-.01-.01 0-.07 0-.082v-6.82c0-.04.004-.064.033-.064h5.253c.867 0 1.344-.257 1.692-.61.44-.448.574-1.162.294-1.732-.24-.488-.736-.78-1.244-.913-.158-.04-.32-.068-.483-.083-.01 0-.064 0-.07-.006-.03-.034.023-.04.038-.046.102-.033.215-.042.32-.073.532-.164.993-.547 1.137-1.105.15-.577-.05-1.194-.524-1.552-.34-.257-.768-.376-1.187-.413-.43-.038-4.774-.022-5.21-.022-.072 0-.05-.02-.05-.09V5.63c0-.31.01-.616.073-.92.126-.592.41-1.144.815-1.59.558-.615 1.337-1.01 2.16-1.093.478-.048 4.89-.017 5.305-.017zm-4.06 8.616c.06.272-.01.567-.204.77-.173.176-.407.25-.648.253-.195.003-1.725 0-1.788 0l.003-1.645c.012-.027.02-.018.06-.018.097 0 1.713-.004 1.823.005.232.02.45.12.598.306.076.096.128.208.155.328zm-2.636 2.038h1.944c.242.002.47.063.652.228.226.204.327.515.283.815-.04.263-.194.5-.422.634-.187.112-.39.125-.6.125h-1.857v-1.8z\" style=\"fill: #53B230\" />\n      <path d=\"M6.574 13.89c-.06-.03-.06-.018-.07-.06-.006-.026-.005-8.365.003-8.558.04-.95.487-1.857 1.21-2.47.517-.434 1.16-.71 1.83-.778.396-.04.803-.018 1.2-.018.69 0 4.11-.013 4.12 0 .008.008.002 16.758 0 17.074-.003.956-.403 1.878-1.105 2.523-.506.465-1.15.77-1.83.86-.41.056-5.02.032-5.363.032-.066 0-.054.013-.066-.024-.01-.025 0-7 0-7.17.66.178 1.35.28 2.03.348.662.067 1.33.093 1.993.062.93-.044 1.947-.192 2.712-.762.32-.238.574-.553.73-.922.148-.353.2-.736.2-1.117 0-.348.006-3.93-.016-3.942-.023-.014-2.885-.015-2.9.012-.012.022 0 3.87 0 3.95-.003.47-.16.933-.514 1.252-.468.42-1.11.47-1.707.423-.687-.055-1.357-.245-1.993-.508-.157-.065-.312-.135-.466-.208z\" style=\"fill: #006CB9\" />\n      <path d=\"M15.95 9.835c-.025.02-.05.04-.072.06V6.05c0-.295-.012-.594.01-.888.12-1.593 1.373-2.923 2.944-3.126.382-.05 5.397-.042 5.41-.026.01.01 0 .062 0 .074v16.957c0 1.304-.725 2.52-1.89 3.1-.504.25-1.045.35-1.605.35-.322 0-4.757.015-4.834 0-.05-.01-.023.01-.035-.02-.007-.022 0-6.548 0-7.44v-.422c.554.48 1.256.75 1.96.908.536.12 1.084.176 1.63.196.537.02 1.076.01 1.61-.037.546-.05 1.088-.136 1.625-.244.137-.028.274-.057.41-.09.033-.006.17-.017.187-.044.013-.02 0-.097 0-.12v-1.324c-.582.292-1.19.525-1.83.652-.778.155-1.64.198-2.385-.123-.752-.326-1.2-1.024-1.274-1.837-.076-.837.173-1.716.883-2.212.736-.513 1.7-.517 2.553-.38.634.1 1.245.305 1.825.58.078.037.154.075.23.113V9.322c0-.02.013-.1 0-.118-.02-.028-.152-.038-.188-.046-.066-.016-.133-.03-.2-.045C22.38 9 21.84 8.908 21.3 8.85c-.533-.06-1.068-.077-1.603-.066-.542.01-1.086.054-1.62.154-.662.125-1.32.337-1.883.716-.085.056-.167.117-.245.18z\" style=\"fill: #E20138\" />\n    </symbol>\n\n    <symbol id=\"icon-discover\" viewBox=\"0 0 40 24\">\n      <title>Discover</title>\n      <path d=\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\" style=\"fill: #FFF\" />\n      <path d=\"M38.995 11.75S27.522 20.1 6.5 23.5h31.495c.552 0 1-.448 1-1V11.75z\" style=\"fill: #F48024\" />\n      <path d=\"M5.332 11.758c-.338.305-.776.438-1.47.438h-.29V8.55h.29c.694 0 1.115.124 1.47.446.37.33.595.844.595 1.372 0 .53-.224 1.06-.595 1.39zM4.077 7.615H2.5v5.515h1.57c.833 0 1.435-.197 1.963-.637.63-.52 1-1.305 1-2.116 0-1.628-1.214-2.762-2.956-2.762zM7.53 13.13h1.074V7.616H7.53M11.227 9.732c-.645-.24-.834-.397-.834-.695 0-.347.338-.61.8-.61.322 0 .587.132.867.446l.562-.737c-.462-.405-1.015-.612-1.618-.612-.975 0-1.718.678-1.718 1.58 0 .76.346 1.15 1.355 1.513.42.148.635.247.743.314.215.14.322.34.322.57 0 .448-.354.78-.834.78-.51 0-.924-.258-1.17-.736l-.695.67c.495.726 1.09 1.05 1.907 1.05 1.116 0 1.9-.745 1.9-1.812 0-.876-.363-1.273-1.585-1.72zM13.15 10.377c0 1.62 1.27 2.877 2.907 2.877.462 0 .858-.09 1.347-.32v-1.267c-.43.43-.81.604-1.297.604-1.082 0-1.85-.785-1.85-1.9 0-1.06.792-1.895 1.8-1.895.512 0 .9.183 1.347.62V7.83c-.472-.24-.86-.34-1.322-.34-1.627 0-2.932 1.283-2.932 2.887zM25.922 11.32l-1.468-3.705H23.28l2.337 5.656h.578l2.38-5.655H27.41M29.06 13.13h3.046v-.934h-1.973v-1.488h1.9v-.934h-1.9V8.55h1.973v-.935H29.06M34.207 10.154h-.314v-1.67h.33c.67 0 1.034.28 1.034.818 0 .554-.364.852-1.05.852zm2.155-.91c0-1.033-.71-1.628-1.95-1.628H32.82v5.514h1.073v-2.215h.14l1.487 2.215h1.32l-1.733-2.323c.81-.165 1.255-.72 1.255-1.563z\" style=\"fill: #221F20\" />\n      <path d=\"M23.6 10.377c0 1.62-1.31 2.93-2.927 2.93-1.617.002-2.928-1.31-2.928-2.93s1.31-2.932 2.928-2.932c1.618 0 2.928 1.312 2.928 2.932z\" style=\"fill: #F48024\" />\n    </symbol>\n\n    <symbol id=\"icon-diners-club\" viewBox=\"0 0 40 24\">\n      <title>Diners Club</title>\n      <path d=\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\" style=\"fill: #FFF\" />\n      <path d=\"M9.02 11.83c0-5.456 4.54-9.88 10.14-9.88 5.6 0 10.139 4.424 10.139 9.88-.002 5.456-4.54 9.88-10.14 9.88-5.6 0-10.14-4.424-10.14-9.88z\" style=\"fill: #FEFEFE\" />\n      <path style=\"fill: #FFF\" d=\"M32.522 22H8.5V1.5h24.022\" />\n      <path d=\"M25.02 11.732c-.003-2.534-1.607-4.695-3.868-5.55v11.102c2.26-.857 3.865-3.017 3.87-5.552zm-8.182 5.55V6.18c-2.26.86-3.86 3.017-3.867 5.55.007 2.533 1.61 4.69 3.868 5.55zm2.158-14.934c-5.25.002-9.503 4.202-9.504 9.384 0 5.182 4.254 9.38 9.504 9.382 5.25 0 9.504-4.2 9.505-9.382 0-5.182-4.254-9.382-9.504-9.384zM18.973 22C13.228 22.027 8.5 17.432 8.5 11.84 8.5 5.726 13.228 1.5 18.973 1.5h2.692c5.677 0 10.857 4.225 10.857 10.34 0 5.59-5.18 10.16-10.857 10.16h-2.692z\" style=\"fill: #004A97\" />\n    </symbol>\n\n    <symbol id=\"icon-maestro\" viewBox=\"0 0 40 24\">\n      <title>Maestro</title>\n      <path d=\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\" style=\"fill: #FFF\" />\n      <path d=\"M14.67 22.39V21c.022-.465-.303-.86-.767-.882h-.116c-.3-.023-.603.14-.788.394-.164-.255-.442-.417-.743-.394-.256-.023-.51.116-.65.324v-.278h-.487v2.203h.487v-1.183c-.046-.278.162-.533.44-.58h.094c.325 0 .488.21.488.58v1.23h.487v-1.23c-.047-.278.162-.556.44-.58h.093c.325 0 .487.21.487.58v1.23l.534-.024zm2.712-1.09v-1.113h-.487v.28c-.162-.21-.417-.326-.695-.326-.65 0-1.16.51-1.16 1.16 0 .65.51 1.16 1.16 1.16.278 0 .533-.117.695-.325v.278h.487V21.3zm-1.786 0c.024-.37.348-.65.72-.626.37.023.65.348.626.72-.023.347-.302.625-.673.625-.372 0-.674-.28-.674-.65-.023-.047-.023-.047 0-.07zm12.085-1.16c.163 0 .325.024.465.094.14.046.278.14.37.255.117.115.186.23.256.37.117.3.117.626 0 .927-.046.14-.138.255-.254.37-.116.117-.232.186-.37.256-.303.116-.65.116-.952 0-.14-.046-.28-.14-.37-.255-.118-.116-.187-.232-.257-.37-.116-.302-.116-.627 0-.928.047-.14.14-.255.256-.37.115-.117.23-.187.37-.256.163-.07.325-.116.488-.093zm0 .465c-.092 0-.185.023-.278.046-.092.024-.162.094-.232.14-.07.07-.116.14-.14.232-.068.185-.068.394 0 .58.024.092.094.162.14.23.07.07.14.117.232.14.186.07.37.07.557 0 .092-.023.16-.092.23-.14.07-.068.117-.138.14-.23.07-.186.07-.395 0-.58-.023-.093-.093-.162-.14-.232-.07-.07-.138-.116-.23-.14-.094-.045-.187-.07-.28-.045zm-7.677.695c0-.695-.44-1.16-1.043-1.16-.65 0-1.16.534-1.137 1.183.023.65.534 1.16 1.183 1.136.325 0 .65-.093.905-.302l-.23-.348c-.187.14-.42.232-.65.232-.326.023-.627-.21-.673-.533h1.646v-.21zm-1.646-.21c.023-.3.278-.532.58-.532.3 0 .556.232.556.533h-1.136zm3.664-.346c-.207-.116-.44-.186-.695-.186-.255 0-.417.093-.417.255 0 .163.162.186.37.21l.233.022c.488.07.766.278.766.672 0 .395-.37.72-1.02.72-.348 0-.673-.094-.95-.28l.23-.37c.21.162.465.232.743.232.324 0 .51-.094.51-.28 0-.115-.117-.185-.395-.23l-.232-.024c-.487-.07-.765-.302-.765-.65 0-.44.37-.718.927-.718.325 0 .627.07.905.232l-.21.394zm2.32-.116h-.788v.997c0 .23.07.37.325.37.14 0 .3-.046.417-.115l.14.417c-.186.116-.395.162-.604.162-.58 0-.765-.302-.765-.812v-1.02h-.44v-.44h.44v-.673h.487v.672h.79v.44zm1.67-.51c.117 0 .233.023.35.07l-.14.463c-.093-.045-.21-.045-.302-.045-.325 0-.464.208-.464.58v1.25h-.487v-2.2h.487v.277c.116-.255.325-.37.557-.394z\" style=\"fill: #000\" />\n      <path style=\"fill: #7673C0\" d=\"M23.64 3.287h-7.305V16.41h7.306\" />\n      <path d=\"M16.8 9.848c0-2.55 1.183-4.985 3.2-6.56C16.384.435 11.12 1.06 8.29 4.7 5.435 8.32 6.06 13.58 9.703 16.41c3.038 2.387 7.283 2.387 10.32 0-2.04-1.578-3.223-3.99-3.223-6.562z\" style=\"fill: #EB001B\" />\n      <path d=\"M33.5 9.848c0 4.613-3.735 8.346-8.35 8.346-1.88 0-3.69-.626-5.15-1.785 3.618-2.83 4.245-8.092 1.415-11.71-.418-.532-.882-.996-1.415-1.413C23.618.437 28.883 1.06 31.736 4.7 32.873 6.163 33.5 7.994 33.5 9.85z\" style=\"fill: #00A1DF\" />\n    </symbol>\n\n    <symbol id=\"logoPayPal\" viewBox=\"0 0 48 29\">\n      <title>PayPal Logo</title>\n      <path d=\"M46 29H2c-1.1 0-2-.87-2-1.932V1.934C0 .87.9 0 2 0h44c1.1 0 2 .87 2 1.934v25.134C48 28.13 47.1 29 46 29z\" fill-opacity=\"0\" style=\"fill: #FFF\" />\n      <path d=\"M31.216 16.4c.394-.7.69-1.5.886-2.4.196-.8.196-1.6.1-2.2-.1-.7-.396-1.2-.79-1.7-.195-.3-.59-.5-.885-.7.1-.8.1-1.5 0-2.1-.1-.6-.394-1.1-.886-1.6-.885-1-2.56-1.6-4.922-1.6h-6.4c-.492 0-.787.3-.886.8l-2.658 17.2c0 .2 0 .3.1.4.097.1.294.2.393.2h4.036l-.295 1.8c0 .1 0 .3.1.4.098.1.195.2.393.2h3.35c.393 0 .688-.3.786-.7v-.2l.59-4.1v-.2c.1-.4.395-.7.788-.7h.59c1.675 0 3.152-.4 4.137-1.1.59-.5 1.083-1 1.478-1.7h-.002z\" style=\"fill: #263B80\" />\n      <path d=\"M21.364 9.4c0-.3.196-.5.492-.6.098-.1.196-.1.394-.1h5.02c.592 0 1.183 0 1.675.1.1 0 .295.1.394.1.098 0 .294.1.393.1.1 0 .1 0 .197.102.295.1.492.2.69.3.295-1.6 0-2.7-.887-3.8-.985-1.1-2.658-1.6-4.923-1.6h-6.4c-.49 0-.885.3-.885.8l-2.758 17.3c-.098.3.197.6.59.6h3.94l.985-6.4 1.083-6.9z\" style=\"fill: #263B80\" />\n      <path d=\"M30.523 9.4c0 .1 0 .3-.098.4-.887 4.4-3.742 5.9-7.484 5.9h-1.87c-.492 0-.787.3-.886.8l-.985 6.2-.296 1.8c0 .3.196.6.492.6h3.348c.394 0 .69-.3.787-.7v-.2l.592-4.1v-.2c.1-.4.394-.7.787-.7h.69c3.248 0 5.808-1.3 6.497-5.2.296-1.6.197-3-.69-3.9-.196-.3-.49-.5-.885-.7z\" style=\"fill: #159BD7\" />\n      <path d=\"M29.635 9c-.098 0-.295-.1-.394-.1-.098 0-.294-.1-.393-.1-.492-.102-1.083-.102-1.673-.102h-5.022c-.1 0-.197 0-.394.1-.198.1-.394.3-.492.6l-1.083 6.9v.2c.1-.5.492-.8.886-.8h1.87c3.742 0 6.598-1.5 7.484-5.9 0-.1 0-.3.098-.4-.196-.1-.492-.2-.69-.3 0-.1-.098-.1-.196-.1z\" style=\"fill: #232C65\" />\n    </symbol>\n\n    <symbol id=\"logoPayPalCredit\" viewBox=\"0 0 48 29\">\n      <title>PayPal Credit Logo</title>\n      <path d=\"M46 29H2c-1.1 0-2-.87-2-1.932V1.934C0 .87.9 0 2 0h44c1.1 0 2 .87 2 1.934v25.134C48 28.13 47.1 29 46 29z\" fill-opacity=\"0\" style=\"fill: #FFF\" fill-rule=\"nonzero\" />\n      <path d=\"M27.44 21.6h.518c1.377 0 2.67-.754 2.953-2.484.248-1.588-.658-2.482-2.14-2.482h-.38c-.093 0-.172.067-.187.16l-.763 4.805zm-1.254-6.646c.024-.158.16-.273.32-.273h2.993c2.47 0 4.2 1.942 3.81 4.436-.4 2.495-2.752 4.436-5.21 4.436h-3.05c-.116 0-.205-.104-.187-.218l1.323-8.38zM22.308 16.907l-.192 1.21h2.38c.116 0 .204.103.186.217l-.23 1.462c-.023.157-.16.273-.318.273h-2.048c-.16 0-.294.114-.32.27l-.203 1.26h2.52c.117 0 .205.102.187.217l-.228 1.46c-.025.16-.16.275-.32.275h-4.55c-.116 0-.204-.104-.186-.218l1.322-8.38c.025-.158.16-.273.32-.273h4.55c.116 0 .205.104.187.22l-.23 1.46c-.024.158-.16.274-.32.274H22.63c-.16 0-.295.115-.32.273M35.325 23.552h-1.81c-.115 0-.203-.104-.185-.218l1.322-8.38c.025-.158.16-.273.32-.273h1.81c.115 0 .203.104.185.22l-1.322 8.38c-.025.156-.16.272-.32.272M14.397 18.657h.224c.754 0 1.62-.14 1.777-1.106.158-.963-.345-1.102-1.15-1.104h-.326c-.097 0-.18.07-.197.168l-.326 2.043zm3.96 4.895h-2.37c-.102 0-.194-.058-.238-.15l-1.565-3.262h-.023l-.506 3.19c-.02.128-.13.222-.26.222h-1.86c-.116 0-.205-.104-.187-.218l1.33-8.432c.02-.128.13-.22.26-.22h3.222c1.753 0 2.953.834 2.66 2.728-.2 1.224-1.048 2.283-2.342 2.506l2.037 3.35c.076.125-.014.286-.16.286zM40.216 23.552h-1.808c-.116 0-.205-.104-.187-.218l1.06-6.7h-1.684c-.116 0-.205-.104-.187-.218l.228-1.462c.025-.157.16-.273.32-.273h5.62c.116 0 .205.104.186.22l-.228 1.46c-.025.158-.16.274-.32.274h-1.63l-1.05 6.645c-.025.156-.16.272-.32.272M11.467 17.202c-.027.164-.228.223-.345.104-.395-.405-.975-.62-1.6-.62-1.41 0-2.526 1.083-2.75 2.458-.21 1.4.588 2.41 2.022 2.41.592 0 1.22-.225 1.74-.6.144-.105.34.02.313.194l-.328 2.03c-.02.12-.108.22-.226.254-.702.207-1.24.355-1.9.355-3.823 0-4.435-3.266-4.238-4.655.553-3.894 3.712-4.786 5.65-4.678.623.034 1.182.117 1.73.323.177.067.282.25.252.436l-.32 1.99\" style=\"fill: #21306F\" />\n      <path d=\"M23.184 7.67c-.11.717-.657.717-1.186.717h-.302l.212-1.34c.013-.08.082-.14.164-.14h.138c.36 0 .702 0 .877.206.105.123.137.305.097.557zm-.23-1.87h-1.998c-.137 0-.253.098-.274.233l-.808 5.123c-.016.1.062.192.165.192h1.024c.095 0 .177-.07.192-.164l.23-1.452c.02-.135.136-.235.273-.235h.63c1.317 0 2.076-.636 2.275-1.898.09-.553.003-.987-.255-1.29-.284-.334-.788-.51-1.456-.51z\" style=\"fill: #0093C7\" />\n      <path d=\"M8.936 7.67c-.11.717-.656.717-1.186.717h-.302l.212-1.34c.013-.08.082-.14.164-.14h.138c.36 0 .702 0 .877.206.104.123.136.305.096.557zm-.23-1.87H6.708c-.136 0-.253.098-.274.233l-.808 5.123c-.016.1.062.192.165.192h.955c.136 0 .252-.1.274-.234l.217-1.382c.02-.135.137-.235.274-.235h.633c1.316 0 2.075-.636 2.274-1.898.09-.553.003-.987-.255-1.29-.284-.334-.788-.51-1.456-.51zM13.343 9.51c-.092.545-.526.912-1.08.912-.277 0-.5-.09-.642-.258-.14-.168-.193-.406-.148-.672.086-.542.527-.92 1.072-.92.27 0 .492.09.637.26.148.172.205.412.163.677zm1.334-1.863h-.957c-.082 0-.152.06-.164.14l-.042.268-.067-.097c-.208-.3-.67-.4-1.13-.4-1.057 0-1.96.8-2.135 1.923-.092.56.038 1.097.356 1.47.29.344.708.487 1.204.487.852 0 1.325-.548 1.325-.548l-.043.265c-.016.1.062.193.164.193h.862c.136 0 .253-.1.274-.234l.517-3.275c.017-.102-.06-.193-.163-.193z\" style=\"fill: #21306F\" />\n      <path d=\"M27.59 9.51c-.09.545-.525.912-1.078.912-.278 0-.5-.09-.643-.258-.142-.168-.195-.406-.15-.672.086-.542.526-.92 1.07-.92.273 0 .494.09.64.26.146.172.203.412.16.677zm1.334-1.863h-.956c-.082 0-.152.06-.164.14l-.043.268-.065-.097c-.208-.3-.67-.4-1.13-.4-1.057 0-1.96.8-2.136 1.923-.092.56.038 1.097.355 1.47.292.344.71.487 1.205.487.852 0 1.325-.548 1.325-.548l-.043.265c-.016.1.062.193.164.193h.862c.136 0 .253-.1.274-.234l.517-3.275c.015-.102-.063-.193-.166-.193z\" style=\"fill: #0093C7\" />\n      <path d=\"M19.77 7.647h-.96c-.092 0-.178.045-.23.122L17.254 9.72l-.562-1.877c-.035-.118-.143-.198-.266-.198h-.945c-.113 0-.194.112-.157.22l1.06 3.108-.997 1.404c-.078.11 0 .262.136.262h.96c.092 0 .177-.044.23-.12l3.196-4.614c.077-.11-.002-.26-.137-.26\" style=\"fill: #21306F\" />\n      <path d=\"M30.052 5.94l-.82 5.216c-.016.1.062.192.165.192h.824c.138 0 .254-.1.275-.234l.81-5.122c.015-.1-.064-.193-.166-.193h-.924c-.082 0-.15.06-.164.14\" style=\"fill: #0093C7\" />\n    </symbol>\n\n    <symbol id=\"iconCardFront\" viewBox=\"0 0 48 29\">\n      <title>Generic Card</title>\n      <path d=\"M46.177 29H1.823C.9 29 0 28.13 0 27.187V1.813C0 .87.9 0 1.823 0h44.354C47.1 0 48 .87 48 1.813v25.375C48 28.13 47.1 29 46.177 29z\" style=\"fill: #FFF\" />\n      <path d=\"M4.8 9.14c0-.427.57-.973 1.067-.973h7.466c.496 0 1.067.546 1.067.972v3.888c0 .425-.57.972-1.067.972H5.867c-.496 0-1.067-.547-1.067-.972v-3.89z\" style=\"fill: #828282\" />\n      <rect style=\"fill: #828282\" x=\"10.8\" y=\"22.167\" width=\"3.6\" height=\"2.333\" rx=\"1.167\" />\n      <rect style=\"fill: #828282\" x=\"4.8\" y=\"22.167\" width=\"3.6\" height=\"2.333\" rx=\"1.167\" />\n      <path d=\"M6.55 16.333h34.9c.966 0 1.75.784 1.75 1.75 0 .967-.784 1.75-1.75 1.75H6.55c-.966 0-1.75-.783-1.75-1.75 0-.966.784-1.75 1.75-1.75z\" style=\"fill: #828282\" />\n      <ellipse style=\"fill: #828282\" cx=\"40.2\" cy=\"6.417\" rx=\"3\" ry=\"2.917\" />\n    </symbol>\n\n    <symbol id=\"iconCVVBack\" viewBox=\"0 0 40 24\">\n      <title>CVV Back</title>\n      <path d=\"M38.48 24H1.52C.75 24 0 23.28 0 22.5v-21C0 .72.75 0 1.52 0h36.96C39.25 0 40 .72 40 1.5v21c0 .78-.75 1.5-1.52 1.5z\" style=\"fill: #FFF\"/>\n      <path style=\"fill: #828282\" d=\"M0 5h40v4H0z\" />\n      <path d=\"M20 13.772v5.456c0 .423.37.772.82.772h13.36c.45 0 .82-.35.82-.772v-5.456c0-.423-.37-.772-.82-.772H20.82c-.45 0-.82.35-.82.772zm-1-.142c0-.9.76-1.63 1.68-1.63h13.64c.928 0 1.68.737 1.68 1.63v5.74c0 .9-.76 1.63-1.68 1.63H20.68c-.928 0-1.68-.737-1.68-1.63v-5.74z\" style=\"fill: #000\" fill-rule=\"nonzero\" />\n      <circle style=\"fill: #828282\" cx=\"23.5\" cy=\"16.5\" r=\"1.5\" />\n      <circle style=\"fill: #828282\" cx=\"27.5\" cy=\"16.5\" r=\"1.5\" />\n      <circle style=\"fill: #828282\" cx=\"31.5\" cy=\"16.5\" r=\"1.5\" />\n    </symbol>\n\n    <symbol id=\"iconCVVFront\" viewBox=\"0 0 40 24\">\n      <title>CVV Front</title>\n      <path d=\"M38.48 24H1.52C.75 24 0 23.28 0 22.5v-21C0 .72.75 0 1.52 0h36.96C39.25 0 40 .72 40 1.5v21c0 .78-.75 1.5-1.52 1.5z\" style=\"fill: #FFF\" />\n      <path d=\"M16 5.772v5.456c0 .423.366.772.81.772h17.38c.444 0 .81-.348.81-.772V5.772C35 5.35 34.634 5 34.19 5H16.81c-.444 0-.81.348-.81.772zm-1-.142c0-.9.75-1.63 1.66-1.63h17.68c.917 0 1.66.737 1.66 1.63v5.74c0 .9-.75 1.63-1.66 1.63H16.66c-.917 0-1.66-.737-1.66-1.63V5.63z\" style=\"fill: #000\" fill-rule=\"nonzero\" />\n      <circle style=\"fill: #828282\" cx=\"19.5\" cy=\"8.5\" r=\"1.5\" />\n      <circle style=\"fill: #828282\" cx=\"27.5\" cy=\"8.5\" r=\"1.5\" />\n      <circle style=\"fill: #828282\" cx=\"23.5\" cy=\"8.5\" r=\"1.5\" />\n      <circle style=\"fill: #828282\" cx=\"31.5\" cy=\"8.5\" r=\"1.5\" />\n      <path d=\"M4 7.833C4 7.47 4.476 7 4.89 7h6.22c.414 0 .89.47.89.833v3.334c0 .364-.476.833-.89.833H4.89c-.414 0-.89-.47-.89-.833V7.833zM4 18.5c0-.828.668-1.5 1.5-1.5h29c.828 0 1.5.666 1.5 1.5 0 .828-.668 1.5-1.5 1.5h-29c-.828 0-1.5-.666-1.5-1.5z\" style=\"fill: #828282\" />\n    </symbol>\n\n    <symbol id=\"iconCheck\" viewBox=\"0 0 42 32\">\n      <title>Check</title>\n      <path class=\"path1\" d=\"M14.379 29.76L39.741 3.415 36.194.001l-21.815 22.79-10.86-11.17L0 15.064z\" />\n    </symbol>\n\n    <symbol id=\"iconX\" viewBox=\"0 0 32 32\">\n      <title>X</title>\n      <path d=\"M29 3.54L25.46 0 14.5 10.97 3.54 0.01 0 3.54 10.96 14.5 0.01 25.46 3.54 28.99 14.5 18.04 25.46 29 28.99 25.46 18.03 14.5 29 3.54z\"/>\n    </symbol>\n\n    <symbol id=\"iconLockLoader\" viewBox=\"0 0 28 32\">\n      <title>Lock Loader</title>\n      <path d=\"M6 10V8c0-4.422 3.582-8 8-8 4.41 0 8 3.582 8 8v2h-4V7.995C18 5.79 16.205 4 14 4c-2.21 0-4 1.792-4 3.995V10H6zM.997 14c-.55 0-.997.445-.997.993v16.014c0 .548.44.993.997.993h26.006c.55 0 .997-.445.997-.993V14.993c0-.548-.44-.993-.997-.993H.997z\" />\n    </symbol>\n\n    <symbol id=\"iconError\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n      <path d=\"M0 0h24v24H0z\" style=\"fill: none\" />\n      <path d=\"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\" />\n    </symbol>\n\n    <symbol id=\"logoApplePay\" viewBox=\"0 0 165.52 105.97\" width=\"24\">\n      <title>Apple Pay Logo</title>\n      <defs>\n      <style>\n        .cls-1{fill:#231f20;}.cls-2{fill:#fff;}\n      </style>\n      </defs>\n      <path id=\"_Path_\" data-name=\"&lt;Path&gt;\" class=\"cls-1\" d=\"M150.7 0h-139a20.78 20.78 0 0 0-3.12.3 10.51 10.51 0 0 0-3 1 9.94 9.94 0 0 0-4.31 4.32 10.46 10.46 0 0 0-1 3A20.65 20.65 0 0 0 0 11.7v82.57a20.64 20.64 0 0 0 .3 3.11 10.46 10.46 0 0 0 1 3 9.94 9.94 0 0 0 4.35 4.35 10.47 10.47 0 0 0 3 1 20.94 20.94 0 0 0 3.11.27h142.06a21 21 0 0 0 3.11-.27 10.48 10.48 0 0 0 3-1 9.94 9.94 0 0 0 4.35-4.35 10.4 10.4 0 0 0 1-3 20.63 20.63 0 0 0 .27-3.11V11.69a20.64 20.64 0 0 0-.27-3.11 10.4 10.4 0 0 0-1-3 9.94 9.94 0 0 0-4.35-4.35 10.52 10.52 0 0 0-3-1 20.84 20.84 0 0 0-3.1-.23h-1.43z\"/>\n      <path id=\"_Path_2\" data-name=\"&lt;Path&gt;\" class=\"cls-2\" d=\"M150.7 3.53h3.03a17.66 17.66 0 0 1 2.58.22 7 7 0 0 1 2 .65 6.41 6.41 0 0 1 2.8 2.81 6.88 6.88 0 0 1 .64 2 17.56 17.56 0 0 1 .22 2.58v82.38a17.54 17.54 0 0 1-.22 2.59 6.85 6.85 0 0 1-.64 2 6.41 6.41 0 0 1-2.81 2.81 6.92 6.92 0 0 1-2 .65 18 18 0 0 1-2.57.22H11.79a18 18 0 0 1-2.58-.22 6.94 6.94 0 0 1-2-.65 6.41 6.41 0 0 1-2.8-2.8 6.93 6.93 0 0 1-.65-2 17.47 17.47 0 0 1-.22-2.58v-82.4a17.49 17.49 0 0 1 .22-2.59 6.92 6.92 0 0 1 .65-2 6.41 6.41 0 0 1 2.8-2.8 7 7 0 0 1 2-.65 17.63 17.63 0 0 1 2.58-.22H150.7\"/>\n      <g id=\"_Group_\" data-name=\"&lt;Group&gt;\">\n      <g id=\"_Group_2\" data-name=\"&lt;Group&gt;\">\n      <path id=\"_Path_3\" data-name=\"&lt;Path&gt;\" class=\"cls-1\" d=\"M43.51 35.77a9.15 9.15 0 0 0 2.1-6.52 9.07 9.07 0 0 0-6 3.11 8.56 8.56 0 0 0-2.16 6.27 7.57 7.57 0 0 0 6.06-2.86\"/>\n      <path id=\"_Path_4\" data-name=\"&lt;Path&gt;\" class=\"cls-1\" d=\"M45.59 39.08c-3.35-.2-6.2 1.9-7.79 1.9s-4-1.8-6.7-1.75a9.87 9.87 0 0 0-8.4 5.1c-3.6 6.2-.95 15.4 2.55 20.45 1.7 2.5 3.75 5.25 6.45 5.15s3.55-1.65 6.65-1.65 4 1.65 6.7 1.6 4.55-2.5 6.25-5a22.2 22.2 0 0 0 2.8-5.75 9.08 9.08 0 0 1-5.45-8.25A9.26 9.26 0 0 1 53 43.13a9.57 9.57 0 0 0-7.45-4\"/>\n      </g>\n      <g id=\"_Group_3\" data-name=\"&lt;Group&gt;\">\n      <path id=\"_Compound_Path_\" data-name=\"&lt;Compound Path&gt;\" class=\"cls-1\" d=\"M79 32.11c7.28 0 12.35 5 12.35 12.32S86.15 56.8 78.79 56.8h-8.06v12.82h-5.82V32.11zm-8.27 19.81h6.68c5.07 0 8-2.73 8-7.46S82.48 37 77.44 37h-6.71z\"/>\n      <path id=\"_Compound_Path_2\" data-name=\"&lt;Compound Path&gt;\" class=\"cls-1\" d=\"M92.76 61.85c0-4.81 3.67-7.56 10.42-8l7.25-.44v-2.06c0-3-2-4.7-5.56-4.7-2.94 0-5.07 1.51-5.51 3.82h-5.24c.16-4.86 4.73-8.4 10.92-8.4 6.65 0 11 3.48 11 8.89v18.66h-5.38v-4.5h-.13a9.59 9.59 0 0 1-8.58 4.78c-5.42 0-9.19-3.22-9.19-8.05zm17.68-2.42v-2.11l-6.47.42c-3.64.23-5.54 1.59-5.54 4s2 3.77 5.07 3.77c3.95-.05 6.94-2.57 6.94-6.08z\"/>\n      <path id=\"_Compound_Path_3\" data-name=\"&lt;Compound Path&gt;\" class=\"cls-1\" d=\"M121 79.65v-4.5a17.14 17.14 0 0 0 1.72.1c2.57 0 4-1.09 4.91-3.9l.52-1.66-9.88-27.29h6.08l6.86 22.15h.13l6.86-22.15h5.93l-10.21 28.67c-2.34 6.58-5 8.73-10.68 8.73a15.93 15.93 0 0 1-2.24-.15z\"/>\n      </g>\n      </g>\n    </symbol>\n    <symbol id=\"logoGooglePay\" viewbox=\"0 0 752 400\" >\n      <g>\n        <title>Google Pay Mark</title>\n        <path d=\"m552.7,0l-352,0c-110,0 -200,90 -200,200l0,0c0,110 90,200 200,200l352,0c110,0 200,-90 200,-200l0,0c0,-110 -90,-200 -200,-200z\" fill=\"#FFFFFF\" id=\"Base_1_\"/>\n        <path d=\"m552.7,16.2c24.7,0 48.7,4.9 71.3,14.5c21.9,9.3 41.5,22.6 58.5,39.5c16.9,16.9 30.2,36.6 39.5,58.5c9.6,22.6 14.5,46.6 14.5,71.3s-4.9,48.7 -14.5,71.3c-9.3,21.9 -22.6,41.5 -39.5,58.5c-16.9,16.9 -36.6,30.2 -58.5,39.5c-22.6,9.6 -46.6,14.5 -71.3,14.5l-352,0c-24.7,0 -48.7,-4.9 -71.3,-14.5c-21.9,-9.3 -41.5,-22.6 -58.5,-39.5c-16.9,-16.9 -30.2,-36.6 -39.5,-58.5c-9.6,-22.6 -14.5,-46.6 -14.5,-71.3s4.9,-48.7 14.5,-71.3c9.3,-21.9 22.6,-41.5 39.5,-58.5c16.9,-16.9 36.6,-30.2 58.5,-39.5c22.6,-9.6 46.6,-14.5 71.3,-14.5l352,0m0,-16.2l-352,0c-110,0 -200,90 -200,200l0,0c0,110 90,200 200,200l352,0c110,0 200,-90 200,-200l0,0c0,-110 -90,-200 -200,-200l0,0z\" fill=\"#3C4043\" id=\"Outline\"/>\n        <g id=\"G_Pay_Lockup_1_\">\n         <g id=\"Pay_Typeface_3_\">\n          <path d=\"m359.3,214.2l0,60.5l-19.2,0l0,-149.4l50.9,0c12.9,0 23.9,4.3 32.9,12.9c9.2,8.6 13.8,19.1 13.8,31.5c0,12.7 -4.6,23.2 -13.8,31.7c-8.9,8.5 -19.9,12.7 -32.9,12.7l-31.7,0l0,0.1zm0,-70.5l0,52.1l32.1,0c7.6,0 14,-2.6 19,-7.7c5.1,-5.1 7.7,-11.3 7.7,-18.3c0,-6.9 -2.6,-13 -7.7,-18.1c-5,-5.3 -11.3,-7.9 -19,-7.9l-32.1,0l0,-0.1z\" fill=\"#3C4043\" id=\"Letter_p_3_\"/>\n          <path d=\"m487.9,169.1c14.2,0 25.4,3.8 33.6,11.4c8.2,7.6 12.3,18 12.3,31.2l0,63l-18.3,0l0,-14.2l-0.8,0c-7.9,11.7 -18.5,17.5 -31.7,17.5c-11.3,0 -20.7,-3.3 -28.3,-10s-11.4,-15 -11.4,-25c0,-10.6 4,-19 12,-25.2c8,-6.3 18.7,-9.4 32,-9.4c11.4,0 20.8,2.1 28.1,6.3l0,-4.4c0,-6.7 -2.6,-12.3 -7.9,-17c-5.3,-4.7 -11.5,-7 -18.6,-7c-10.7,0 -19.2,4.5 -25.4,13.6l-16.9,-10.6c9.3,-13.5 23.1,-20.2 41.3,-20.2zm-24.8,74.2c0,5 2.1,9.2 6.4,12.5c4.2,3.3 9.2,5 14.9,5c8.1,0 15.3,-3 21.6,-9s9.5,-13 9.5,-21.1c-6,-4.7 -14.3,-7.1 -25,-7.1c-7.8,0 -14.3,1.9 -19.5,5.6c-5.3,3.9 -7.9,8.6 -7.9,14.1z\" fill=\"#3C4043\" id=\"Letter_a_3_\"/>\n          <path d=\"m638.2,172.4l-64,147.2l-19.8,0l23.8,-51.5l-42.2,-95.7l20.9,0l30.4,73.4l0.4,0l29.6,-73.4l20.9,0z\" fill=\"#3C4043\" id=\"Letter_y_3_\"/>\n         </g>\n         <g id=\"G_Mark_1_\">\n          <path d=\"m282.93,202c0,-6.26 -0.56,-12.25 -1.6,-18.01l-80.48,0l0,33l46.35,0.01c-1.88,10.98 -7.93,20.34 -17.2,26.58l0,21.41l27.59,0c16.11,-14.91 25.34,-36.95 25.34,-62.99z\" fill=\"#4285F4\" id=\"Blue_500\"/>\n          <path d=\"m230.01,243.58c-7.68,5.18 -17.57,8.21 -29.14,8.21c-22.35,0 -41.31,-15.06 -48.1,-35.36l-28.46,0l0,22.08c14.1,27.98 43.08,47.18 76.56,47.18c23.14,0 42.58,-7.61 56.73,-20.71l-27.59,-21.4z\" fill=\"#34A853\" id=\"Green_500_1_\"/>\n          <path d=\"m150.09,200.05c0,-5.7 0.95,-11.21 2.68,-16.39l0,-22.08l-28.46,0c-5.83,11.57 -9.11,24.63 -9.11,38.47s3.29,26.9 9.11,38.47l28.46,-22.08c-1.73,-5.18 -2.68,-10.69 -2.68,-16.39z\" fill=\"#FABB05\" id=\"Yellow_500_1_\"/>\n          <path d=\"m200.87,148.3c12.63,0 23.94,4.35 32.87,12.85l24.45,-24.43c-14.85,-13.83 -34.21,-22.32 -57.32,-22.32c-33.47,0 -62.46,19.2 -76.56,47.18l28.46,22.08c6.79,-20.3 25.75,-35.36 48.1,-35.36z\" fill=\"#E94235\" id=\"Red_500\"/>\n         </g>\n        </g>\n       </g>\n    </symbol>\n\n    <symbol id=\"logoVenmo\" viewBox=\"0 0 48 32\">\n      <title>Venmo</title>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <rect fill=\"#3D95CE\" width=\"47.4074074\" height=\"31.6049383\" rx=\"3.16049383\"/>\n        <path d=\"M33.1851852,10.1131555 C33.1851852,14.8373944 29.2425262,20.9745161 26.0425868,25.2839506 L18.7337285,25.2839506 L15.8024691,7.35534396 L22.202175,6.73384536 L23.7519727,19.4912014 C25.2000422,17.0781163 26.9870326,13.2859484 26.9870326,10.7005 C26.9870326,9.28531656 26.7500128,8.32139205 26.3796046,7.52770719 L32.207522,6.32098765 C32.8813847,7.45939896 33.1851852,8.63196439 33.1851852,10.1131555 Z\" fill=\"#FFF\"/>\n      </g>\n    </symbol>\n    <symbol id=\"buttonVenmo\" viewBox=\"0 0 295 42\">\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <rect fill=\"#3D95CE\" width=\"295\" height=\"42\" rx=\"3\"/>\n        <path d=\"M11.3250791 0C11.7902741.780434316 12 1.58428287 12 2.59970884 12 5.838396 9.27822123 10.0456806 7.06917212 13L2.02356829 13 0 .709099732 4.41797878.283033306 5.48786751 9.02879887C6.48752911 7.3745159 7.72116169 4.77480706 7.72116169 3.00236102 7.72116169 2.03218642 7.55753727 1.37137098 7.30182933.827262801L11.3250791 0 11.3250791 0zM17.5051689 5.68512193C18.333931 5.68512193 20.4203856 5.28483546 20.4203856 4.03281548 20.4203856 3.43161451 20.0177536 3.13172102 19.5432882 3.13172102 18.7131868 3.13172102 17.6238766 4.18269796 17.5051689 5.68512193L17.5051689 5.68512193zM17.4102028 8.1647385C17.4102028 9.69351403 18.2153451 10.293301 19.2827401 10.293301 20.4451012 10.293301 21.5580312 9.99340752 23.0045601 9.21725797L22.4597224 13.1234575C21.440541 13.649203 19.8521716 14 18.310433 14 14.3996547 14 13 11.49596 13 8.36552446 13 4.30815704 15.2767521 0 19.9706358 0 22.554932 0 24 1.52864698 24 3.65720949 24.0002435 7.08869546 19.8287953 8.13992948 17.4102028 8.1647385L17.4102028 8.1647385zM37 2.84753211C37 3.32189757 36.9261179 4.00994664 36.8526108 4.45959542L35.4649774 12.9998782 30.9621694 12.9998782 32.2279161 5.1711436C32.2519185 4.95879931 32.3256755 4.53131032 32.3256755 4.29412759 32.3256755 3.72466988 31.9603904 3.5825794 31.5212232 3.5825794 30.9379171 3.5825794 30.3532359 3.84326124 29.9638234 4.03356751L28.5281854 13 24 13 26.0686989.213683657 29.9878258.213683657 30.0374555 1.23425123C30.9620444.641294408 32.1795365 3.90379019e-8 33.9069526 3.90379019e-8 36.1955476-.000243475057 37 1.1387937 37 2.84753211L37 2.84753211zM51.2981937 1.39967969C52.6582977.49918987 53.9425913 0 55.7133897 0 58.1518468 0 59 1.13900518 59 2.84769558 59 3.32204771 58.9223438 4.01007745 58.8448195 4.4597136L57.3830637 12.9997565 52.6328518 12.9997565 53.9932194 5.00577861C54.0182698 4.792101 54.0708756 4.53142648 54.0708756 4.36608506 54.0708756 3.72493046 53.6854953 3.58272222 53.2224587 3.58272222 52.6325881 3.58272222 52.0429812 3.81989829 51.6052587 4.03369766L50.0914245 12.9998782 45.3423992 12.9998782 46.7027668 5.00590037C46.7278172 4.79222275 46.7788409 4.53154824 46.7788409 4.36620681 46.7788409 3.72505221 46.3933287 3.58284398 45.9318743 3.58284398 45.3153711 3.58284398 44.7000546 3.84351849 44.2893602 4.03381941L42.7740757 13 38 13 40.1814929.214042876 44.2643098.214042876 44.3925941 1.28145692C45.3423992.641763367 46.6253743.000487014507 48.3452809.000487014507 49.8344603 0 50.8094476.593061916 51.2981937 1.39967969L51.2981937 1.39967969zM67.5285327 5.39061542C67.5285327 4.29258876 67.2694573 3.54396333 66.4936812 3.54396333 64.7759775 3.54396333 64.4232531 6.76273249 64.4232531 8.4093242 64.4232531 9.65848482 64.7530184 10.4315735 65.5285529 10.4315735 67.1521242 10.4315735 67.5285327 7.03707905 67.5285327 5.39061542L67.5285327 5.39061542zM60 8.21054461C60 3.96893154 62.1170713 0 66.988027 0 70.6583423 0 72 2.29633967 72 5.46592624 72 9.65835674 69.905767 14 64.9173573 14 61.2233579 14 60 11.4294418 60 8.21054461L60 8.21054461z\" transform=\"translate(112 14)\" fill=\"#FFF\"/>\n      </g>\n    </symbol>\n\n    <symbol id=\"iconClose\" width=\"21\" height=\"21\" viewBox=\"0 0 21 21\" overflow=\"visible\">\n      <path d=\"M16 5.414L14.586 4 10 8.586 5.414 4 4 5.414 8.586 10 4 14.586 5.414 16 10 11.414 14.586 16 16 14.586 11.414 10\"/>\n    </symbol>\n  </defs>\n</svg>\n";
      var PASS_THROUGH_EVENTS = ['changeActiveView', 'paymentMethodRequestable', 'noPaymentMethodRequestable', 'paymentOptionSelected', // Card View Events
      'card:binAvailable', 'card:blur', 'card:cardTypeChange', 'card:empty', 'card:focus', 'card:inputSubmitRequest', 'card:notEmpty', 'card:validityChange', // 3DS Events
      '3ds:customer-canceled', '3ds:authentication-modal-render', '3ds:authentication-modal-close'];
      var UPDATABLE_CONFIGURATION_OPTIONS = [paymentOptionIDs.paypal, paymentOptionIDs.paypalCredit, paymentOptionIDs.applePay, paymentOptionIDs.googlePay, 'threeDSecure'];
      var UPDATABLE_CONFIGURATION_OPTIONS_THAT_REQUIRE_UNVAULTED_PAYMENT_METHODS_TO_BE_REMOVED = [paymentOptionIDs.paypal, paymentOptionIDs.paypalCredit, paymentOptionIDs.applePay, paymentOptionIDs.googlePay];
      var HAS_RAW_PAYMENT_DATA = {};
      var VERSION = '1.32.1';
      HAS_RAW_PAYMENT_DATA[constants.paymentMethodTypes.googlePay] = true;
      HAS_RAW_PAYMENT_DATA[constants.paymentMethodTypes.applePay] = true;
      /**
       * @typedef {object} Dropin~cardPaymentMethodPayload
       * @property {string} nonce The payment method nonce, used by your server to charge the card.
       * @property {object} details Additional account details. See a full list of details in the [Hosted Fields client reference](http://braintree.github.io/braintree-web/3.83.0/HostedFields.html#~tokenizePayload).
       * @property {string} description A human-readable description.
       * @property {string} type The payment method type, always `CreditCard` when the method requested is a card.
       * @property {object} binData Information about the card based on the bin. Documented {@link Dropin~binData|here}.
       * @property {?boolean} vaulted If present and true, indicates that the payment method refers to a vaulted payment method.
       * @property {?string} deviceData If data collector is configured, the device data property to be used when making a transaction.
       * @property {?boolean} liabilityShifted If 3D Secure is configured, whether or not liability did shift.
       * @property {?boolean} liabilityShiftPossible If 3D Secure is configured, whether or not liability shift is possible.
       * @property {?object} threeDSecureInfo If 3D Secure is configured, the `threeDSecureInfo` documented in the [Three D Secure client reference](http://braintree.github.io/braintree-web/3.83.0/ThreeDSecure.html#~verifyPayload)
       */

      /**
       * @typedef {object} Dropin~paypalPaymentMethodPayload
       * @property {string} nonce The payment method nonce, used by your server to charge the PayPal account.
       * @property {?boolean} vaulted If present and true, indicates that the payment method refers to a vaulted payment method.
       * @property {object} details Additional PayPal account details. See a full list of details in the [PayPal client reference](http://braintree.github.io/braintree-web/3.83.0/PayPalCheckout.html#~tokenizePayload).
       * @property {string} type The payment method type, always `PayPalAccount` when the method requested is a PayPal account.
       * @property {?string} deviceData If data collector is configured, the device data property to be used when making a transaction.
       */

      /**
       * @typedef {object} Dropin~applePayPaymentMethodPayload
       * @property {string} nonce The payment method nonce, used by your server to charge the Apple Pay provided card.
       * @property {?boolean} vaulted If present and true, indicates that the payment method refers to a vaulted payment method.
       * @property {string} details.cardType Type of card, ex: Visa, Mastercard.
       * @property {string} details.cardHolderName The name of the card holder.
       * @property {string} details.dpanLastTwo Last two digits of card number.
       * @property {external:ApplePayPayment} details.rawPaymentData The raw response back from the Apple Pay flow, which includes billing/shipping address, phone and email if passed in as required parameters.
       * @property {string} description A human-readable description.
       * @property {string} type The payment method type, always `ApplePayCard` when the method requested is an Apple Pay provided card.
       * @property {object} binData Information about the card based on the bin. Documented {@link Dropin~binData|here}.
       * @property {?string} deviceData If data collector is configured, the device data property to be used when making a transaction.
       */

      /**
       * @typedef {object} ApplePayPayment An [Apple Pay Payment object](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypayment).
       * @external ApplePayPayment
       * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypayment ApplePayPayment}
       */

      /**
       * @typedef {object} Dropin~venmoPaymentMethodPayload
       * @property {string} nonce The payment method nonce, used by your server to charge the Venmo account.
       * @property {?boolean} vaulted If present and true, indicates that the payment method refers to a vaulted payment method.
       * @property {string} details.username The Venmo username.
       * @property {string} type The payment method type, always `VenmoAccount` when the method requested is a Venmo account.
       * @property {?string} deviceData If data collector is configured, the device data property to be used when making a transaction.
       */

      /**
       * @typedef {object} Dropin~googlePayPaymentMethodPayload
       * @property {string} nonce The payment method nonce, used by your server to charge the Google Pay card.
       * @property {?boolean} vaulted If present and true, indicates that the payment method refers to a vaulted payment method.
       * @property {string} details.cardType Type of card, ex: Visa, Mastercard.
       * @property {string} details.lastFour The last 4 digits of the card.
       * @property {string} details.lastTwo The last 2 digits of the card.
       * @property {boolean} details.isNetworkTokenized True if the card is network tokenized. A network tokenized card is a generated virtual card with a device-specific account number (DPAN) that is used in place of the underlying source card.
       * @property {string} details.bin First six digits of card number.
       * @property {external:GooglePayPaymentData} details.rawPaymentData The raw response back from the Google Pay flow, which includes shipping address, phone and email if passed in as required parameters.
       * @property {string} type The payment method type, always `AndroidPayCard` when the method requested is a Google Pay Card.
       * @property {object} binData Information about the card based on the bin. Documented {@link Dropin~binData|here}.
       * @property {?string} deviceData If data collector is configured, the device data property to be used when making a transaction.
       */

      /**
       * @typedef {object} GooglePayPaymentData A [Google Pay Payment Data object](https://developers.google.com/pay/api/web/object-reference#PaymentData).
       * @external GooglePayPaymentData
       * @see {@link https://developers.google.com/pay/api/web/object-reference#PaymentData PaymentData}
       */

      /**
       * @typedef {object} Dropin~binData Information about the card based on the bin.
       * @property {string} commercial Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} countryOfIssuance The country of issuance.
       * @property {string} debit Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} durbinRegulated Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} healthcare Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} issuingBank The issuing bank.
       * @property {string} payroll Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} prepaid Possible values: 'Yes', 'No', 'Unknown'.
       * @property {string} productId The product id.
       */

      /**
       * @name Dropin#on
       * @function
       * @param {string} event The name of the event to which you are subscribing.
       * @param {function} handler A callback to handle the event.
       * @description Subscribes a handler function to a named event. `event` should be one of the following:
       *
       *  * [`changeActiveView`](#event:changeActiveView)
       *  * [`paymentMethodRequestable`](#event:paymentMethodRequestable)
       *  * [`noPaymentMethodRequestable`](#event:noPaymentMethodRequestable)
       *  * [`paymentOptionSelected`](#event:paymentOptionSelected)
       *
       *  _Card View Specific Events_
       *  * [`card:binAvailable`](#event:card:binAvailable)
       *  * [`card:blur`](#event:card:blur)
       *  * [`card:cardTypeChange`](#event:card:cardTypeChange)
       *  * [`card:empty`](#event:card:empty)
       *  * [`card:focus`](#event:card:focus)
       *  * [`card:inputSubmitRequest`](#event:card:inputSubmitRequest)
       *  * [`card:notEmpty`](#event:card:notEmpty)
       *  * [`card:validityChange`](#event:card:validityChange)
       *
       *  _3DS Specific Events_
       *  * [`3ds:customer-canceled`](#event:3ds:customer-canceled)
       *  * [`3ds:authentication-modal-render`](#event:3ds:authentication-modal-render)
       *  * [`3ds:authentication-modal-close`](#event:3ds:authentication-modal-close)
       * @returns {void}
       * @example
       * <caption>Dynamically enable or disable your submit button based on whether or not the payment method is requestable</caption>
       * var submitButton = document.querySelector('#submit-button');
       *
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container'
       * }, function (err, dropinInstance) {
       *   submitButton.addEventListener('click', function () {
       *     dropinInstance.requestPaymentMethod(function (err, payload) {
       *       // Send payload.nonce to your server.
       *     });
       *   });
       *
       *   if (dropinInstance.isPaymentMethodRequestable()) {
       *     // This will be true if you generated the client token
       *     // with a customer ID and there is a saved payment method
       *     // available to tokenize with that customer.
       *     submitButton.removeAttribute('disabled');
       *   }
       *
       *   dropinInstance.on('paymentMethodRequestable', function (event) {
       *     console.log(event.type); // The type of Payment Method, e.g 'CreditCard', 'PayPalAccount'.
       *     console.log(event.paymentMethodIsSelected); // true if a customer has selected a payment method when paymentMethodRequestable fires
       *
       *     submitButton.removeAttribute('disabled');
       *   });
       *
       *   dropinInstance.on('noPaymentMethodRequestable', function () {
       *     submitButton.setAttribute('disabled', true);
       *   });
       * });
       *
       * @example
       * <caption>Automatically submit nonce to server as soon as it becomes available</caption>
       * var submitButton = document.querySelector('#submit-button');
       *
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container'
       * }, function (err, dropinInstance) {
       *   function sendNonceToServer() {
       *     dropinInstance.requestPaymentMethod(function (err, payload) {
       *       if (err) {
       *         // handle errors
       *       }
       *
       *       // send payload.nonce to your server
       *     });
       *   }
       *
       *   // allows us to still request the payment method manually, such as
       *   // when filling out a credit card form
       *   submitButton.addEventListener('click', sendNonceToServer);
       *
       *   dropinInstance.on('paymentMethodRequestable', function (event) {
       *     // if the nonce is already available (via PayPal authentication
       *     // or by using a stored payment method), we can request the
       *     // nonce right away. Otherwise, we wait for the customer to
       *     // request the nonce by pressing the submit button once they
       *     // are finished entering their credit card details. This is
       *     // particularly important if your credit card form includes a
       *     // postal code input. The `paymentMethodRequestable` event
       *     // could fire before the customer has finished entering their
       *     // postal code. (International postal codes can be as few as 3
       *     // characters in length)
       *     if (event.paymentMethodIsSelected) {
       *       sendNonceToServer();
       *     }
       *   });
       * });
       * @example
       * <caption>Listen for when the customer navigates to different views in Drop-in</caption>
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container'
       * }, function (err, dropinInstance) {
       *   dropinInstance.on('changeActiveView', function (event) {
       *     // fires when the view changes, such as going from the
       *     // credit card view to the saved payment methods view
       *     event.oldActivePaymentViewId; // card
       *     event.newActivePaymentViewId; // methods
       *   });
       * });
       * @example
       * <caption>Listen on various events from the card view</caption>
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container'
       * }, function (err, dropinInstance) {
       *   dropinInstance.on('card:focus', function (event) {
       *     // a card field was focussed
       *   });
       *   dropinInstance.on('card:blur', function (event) {
       *     // a card field was blurred
       *   });
       *   dropinInstance.on('card:validityChange', function (event) {
       *     // the card form went from invalid to valid or valid to invalid
       *   });
       * });
       */

      /**
       * @name Dropin#off
       * @function
       * @param {string} event The name of the event to which you are unsubscribing.
       * @param {function} handler A callback to unsubscribe from the event.
       * @description Unsubscribes a handler function to a named event.
       * @returns {void}
       * @example
       * <caption>Subscribe and then unsubscribe from event</caption>
       * var callback = function (event) {
       *   // do something
       * };
       * dropinInstance.on('paymentMethodRequestable', callback);
       *
       * // later on
       * dropinInstance.off('paymentMethodRequestable', callback);
       */

      /**
       * This event is emitted when the payment method available in Drop-in changes. This includes when the state of Drop-in transitions from having no payment method available to having a payment method available and when the kind of payment method available changes. This event is not fired if there is no payment method available on initialization. To check if there is a payment method requestable on initialization, use {@link Dropin#isPaymentMethodRequestable|`isPaymentMethodRequestable`}.
       * @event Dropin#paymentMethodRequestable
       * @type {Dropin~paymentMethodRequestablePayload}
       */

      /**
       * @typedef {object} Dropin~paymentMethodRequestablePayload
       * @description The event payload sent from {@link Dropin#on|`on`} with the {@link Dropin#event:paymentMethodRequestable|`paymentMethodRequestable`} event.
       * @property {string} type The type of payment method that is requestable. Either `CreditCard` or `PayPalAccount`.
       * @property {boolean} paymentMethodIsSelected A property to determine if a payment method is currently selected when the payment method becomes requestable.
       *
       * This will be `true` any time a payment method is visibly selected in the Drop-in UI, such as when PayPal authentication completes or a stored payment method is selected.
       *
       * This will be `false` when {@link Dropin#requestPaymentMethod|`requestPaymentMethod`} can be called, but a payment method is not currently selected. For instance, when a card form has been filled in with valid values, but has not been submitted to be converted into a payment method nonce.
       */

      /**
       * This event is emitted when there is no payment method available in Drop-in. This event is not fired if there is no payment method available on initialization. To check if there is a payment method requestable on initialization, use {@link Dropin#isPaymentMethodRequestable|`isPaymentMethodRequestable`}. No payload is available in the callback for this event.
       * @event Dropin#noPaymentMethodRequestable
       */

      /**
       * This event is emitted when the customer selects a new payment option type (e.g. PayPal, PayPal Credit, credit card). This event is not emitted when the user changes between existing saved payment methods. Only relevant when accepting multiple payment options.
       * @event Dropin#paymentOptionSelected
       * @type {Dropin~paymentOptionSelectedPayload}
       */

      /**
       * This event is emitted when the Drop-in view changes what is presented as the active view.
       * @event Dropin#changeActiveView
       * @type {Dropin~changeActiveView}
       */

      /**
       * @typedef {object} Dropin~changeActiveView
       * @description The event payload sent from {@link Dropin#on|`on`} with the {@link Dropin#event:changeActiveView|`changeActiveView`} event.
       * @property {string} previousViewId The id for the previously active view. Possible values are:
       * * `card` - The credit card form view
       * * `paypal` - The PayPal view
       * * `payapCredit` - The PayPal Credit view
       * * `venmo` - The Venmo View
       * * `googlePay` - The Google Pay view
       * * `applePay` - The Apple Pay view
       * * `methods` - The view presenting the available payment methods (already vaulted or tokenized payment methods)
       * * `options` - The view presenting the available payment options (where the customer chooses what payment method option to use). Note, if both the methods view and the options view are presented at the same time, `methods` will be shown as the view id.
       * * `delete-confirmation` - The view where the customer confirms they would like to delete their saved payment method.
       * @property {string} newViewId The id for the new active view. The possible values are the same as `previousViewId`.
       */

      /**
       * The underlying [hosted fields `binAvailable` event](http://braintree.github.io/braintree-web/3.83.0/HostedFields.html#event:binAvailable).
       * @event Dropin#card:binAvailable
       * @type {Dropin~card:binAvailable}
       */

      /**
       * The underlying [hosted fields `blur` event](http://braintree.github.io/braintree-web/3.83.0/HostedFields.html#event:blur).
       * @event Dropin#card:blur
       * @type {Dropin~card:blur}
       */

      /**
       * The underlying [hosted fields `cardTypeChange` event](http://braintree.github.io/braintree-web/3.83.0/HostedFields.html#event:cardTypeChange).
       * @event Dropin#card:cardTypeChange
       * @type {Dropin~card:cardTypeChange}
       */

      /**
       * The underlying [hosted fields `empty` event](http://braintree.github.io/braintree-web/3.83.0/HostedFields.html#event:empty).
       * @event Dropin#card:empty
       * @type {Dropin~card:empty}
       */

      /**
       * The underlying [hosted fields `focus` event](http://braintree.github.io/braintree-web/3.83.0/HostedFields.html#event:focus).
       * @event Dropin#card:focus
       * @type {Dropin~card:focus}
       */

      /**
       * The underlying [hosted fields `inputSubmitRequest` event](http://braintree.github.io/braintree-web/3.83.0/HostedFields.html#event:inputSubmitRequest).
       * @event Dropin#card:inputSubmitRequest
       * @type {Dropin~card:inputSubmitRequest}
       */

      /**
       * The underlying [hosted fields `notEmpty` event](http://braintree.github.io/braintree-web/3.83.0/HostedFields.html#event:notEmpty).
       * @event Dropin#card:notEmpty
       * @type {Dropin~card:notEmpty}
       */

      /**
       * The underlying [hosted fields `validityChange` event](http://braintree.github.io/braintree-web/3.83.0/HostedFields.html#event:validityChange).
       * @event Dropin#card:validityChange
       * @type {Dropin~card:validityChange}
       */

      /**
       * The underlying [3D Secure `customer-canceled` event](http://braintree.github.io/braintree-web/3.83.0/ThreeDSecure.html#event:customer-canceled).
       * @event Dropin#3ds:customer-canceled
       * @type {Dropin~3ds:customer-canceled}
       */

      /**
       * The underlying [3D Secure `authentication-modal-render` event](http://braintree.github.io/braintree-web/3.83.0/ThreeDSecure.html#event:authentication-modal-render).
       * @event Dropin#3ds:authentication-modal-render
       * @type {Dropin~3ds:authentication-modal-render}
       */

      /**
       * The underlying [3D Secure `authentication-modal-close` event](http://braintree.github.io/braintree-web/3.83.0/ThreeDSecure.html#event:authentication-modal-close).
       * @event Dropin#3ds:authentication-modal-close
       * @type {Dropin~3ds:authentication-modal-close}
       */

      /**
       * @typedef {object} Dropin~paymentOptionSelectedPayload
       * @description The event payload sent from {@link Dropin#on|`on`} with the {@link Dropin#event:paymentOptionSelected|`paymentOptionSelected`} event.
       * @property {string} paymentOption The payment option view selected. Either `card`, `paypal`, or `paypalCredit`.
       */

      /**
       * @class
       * @param {object} options For create options, see {@link module:braintree-web-drop-in|dropin.create}.
       * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web-drop-in|dropin.create} instead.</strong>
       * @classdesc This class represents a Drop-in component, that will create a pre-made UI for accepting cards and PayPal on your page. Instances of this class have methods for requesting a payment method and subscribing to events. For more information, see the [Drop-in guide](https://developers.braintreepayments.com/guides/drop-in/javascript/v3) in the Braintree Developer Docs. To be used in conjunction with the [Braintree Server SDKs](https://developers.braintreepayments.com/start/hello-server/).
       */

      function Dropin(options) {
        this._client = options.client;
        this._componentID = uuid();
        this._dropinWrapper = document.createElement('div');
        this._dropinWrapper.id = 'braintree--dropin__' + this._componentID;

        this._dropinWrapper.setAttribute('data-braintree-id', 'wrapper');

        this._dropinWrapper.style.display = 'none';
        this._dropinWrapper.className = 'braintree-loading';
        this._merchantConfiguration = options.merchantConfiguration;
        EventEmitter.call(this);
      }

      EventEmitter.createChild(Dropin);

      Dropin.prototype._initialize = function (callback) {
        var localizedStrings, localizedHTML;
        var self = this;
        var container = self._merchantConfiguration.container || self._merchantConfiguration.selector;

        if (!container) {
          analytics.sendEvent(self._client, 'configuration-error');
          callback(new DropinError('options.container is required.'));
          return;
        } else if (self._merchantConfiguration.container && self._merchantConfiguration.selector) {
          analytics.sendEvent(self._client, 'configuration-error');
          callback(new DropinError('Must only have one options.selector or options.container.'));
          return;
        }

        if (typeof container === 'string') {
          container = document.querySelector(container);
        }

        if (!container || container.nodeType !== 1) {
          analytics.sendEvent(self._client, 'configuration-error');
          callback(new DropinError('options.selector or options.container must reference a valid DOM node.'));
          return;
        }

        if (container.innerHTML.trim()) {
          analytics.sendEvent(self._client, 'configuration-error');
          callback(new DropinError('options.selector or options.container must reference an empty DOM node.'));
          return;
        } // Backfill with `en`


        self._strings = assign({}, translations.en);

        if (self._merchantConfiguration.locale) {
          localizedStrings = translations[self._merchantConfiguration.locale] || translations[self._merchantConfiguration.locale.split('_')[0]]; // Fill `strings` with `localizedStrings` that may exist

          self._strings = assign(self._strings, localizedStrings);
        }

        if (!isUtf8()) {
          // non-utf-8 encodings often don't support the bullet character
          self._strings.endingIn = self._strings.endingIn.replace(/•/g, '*');
        }

        if (self._merchantConfiguration.translations) {
          Object.keys(self._merchantConfiguration.translations).forEach(function (key) {
            self._strings[key] = sanitizeHtml(self._merchantConfiguration.translations[key]);
          });
        }

        localizedHTML = Object.keys(self._strings).reduce(function (result, stringKey) {
          var stringValue = self._strings[stringKey];
          return result.replace(RegExp('{{' + stringKey + '}}', 'g'), stringValue);
        }, mainHTML);
        self._dropinWrapper.innerHTML = svgHTML + localizedHTML;
        container.appendChild(self._dropinWrapper);
        self._model = new DropinModel({
          client: self._client,
          container: container,
          componentID: self._componentID,
          merchantConfiguration: self._merchantConfiguration
        });

        self._injectStylesheet();

        self._model.initialize().then(function () {
          self._model.on('cancelInitialization', function (err) {
            self._dropinWrapper.innerHTML = '';
            analytics.sendEvent(self._client, 'load-error');
            callback(err);
          });

          self._model.on('asyncDependenciesReady', function () {
            if (self._model.hasAtLeastOneAvailablePaymentOption()) {
              analytics.sendEvent(self._client, 'appeared');

              self._disableErroredPaymentMethods();

              self._handleAppSwitch();

              self._model.confirmDropinReady();

              callback(null, self);
            } else {
              self._model.cancelInitialization(new DropinError('All payment options failed to load.'));
            }
          });

          PASS_THROUGH_EVENTS.forEach(function (eventName) {
            self._model.on(eventName, function (event) {
              self._emit(eventName, event);
            });
          });
          return self._setUpDependenciesAndViews();
        }).catch(function (err) {
          self.teardown().then(function () {
            callback(err);
          });
        });
      };
      /**
       * Modify your configuration initially set in {@link module:braintree-web-drop-in|`dropin.create`}.
       *
       * If `updateConfiguration` is called after a user completes the PayPal authorization flow, any PayPal accounts not stored in the Vault record will be removed.
       * @public
       * @param {string} property The top-level property to update. Either `paypal`, `paypalCredit`, `applePay`, or `googlePay`.
       * @param {string} key The key of the property to update, such as `amount` or `currency`.
       * @param {any} value The value of the property to update. Must be the type of the property specified in {@link module:braintree-web-drop-in|`dropin.create`}.
       * @returns {void}
       * @example
       * dropinInstance.updateConfiguration('paypal', 'amount', '10.00');
       */


      Dropin.prototype.updateConfiguration = function (property, key, value) {
        var view;

        if (UPDATABLE_CONFIGURATION_OPTIONS.indexOf(property) === -1) {
          return;
        }

        if (property === 'threeDSecure') {
          if (this._threeDSecure) {
            this._threeDSecure.updateConfiguration(key, value);
          }

          return;
        }

        view = this._mainView.getView(property);

        if (!view) {
          return;
        }

        view.updateConfiguration(key, value);

        if (UPDATABLE_CONFIGURATION_OPTIONS_THAT_REQUIRE_UNVAULTED_PAYMENT_METHODS_TO_BE_REMOVED.indexOf(property) === -1) {
          return;
        }

        this._removeUnvaultedPaymentMethods(function (paymentMethod) {
          return paymentMethod.type === constants.paymentMethodTypes[property];
        });

        this._navigateToInitialView();
      };
      /**
       * Get a list of the available payment methods presented to the user. This is useful for knowing if a paricular payment option was presented to a customer that is browser dependant such as Apple Pay, Google Pay and Venmo. Returns an array of strings. Possible values:
       * * `applePay`
       * * `card`
       * * `googlePay`
       * * `paypalCredit`
       * * `paypal`
       * * `venmo`
       *
       * @public
       * @returns {string[]} An array of possible payment options.
       * @example
       * var paymentOptions = dropinInstance.getAvailablePaymentOptions(); // ['card', 'venmo', 'paypal']
       *
       * if (paymentOptions.includes('venmo')) {
       *   // special logic for when venmo is displayed
       * }
       */


      Dropin.prototype.getAvailablePaymentOptions = function () {
        return this._model.supportedPaymentOptions;
      };
      /**
       * Removes the currently selected payment method and returns the customer to the payment options view. Does not remove vaulted payment methods.
       * @public
       * @returns {void}
       * @example
       * dropinInstance.requestPaymentMethod(function (requestPaymentMethodError, payload) {
       *   if (requestPaymentMethodError) {
       *     // handle errors
       *     return;
       *   }
       *
       *   functionToSendNonceToServer(payload.nonce, function (transactionError, response) {
       *     if (transactionError) {
       *       // transaction sale with selected payment method failed
       *       // clear the selected payment method and add a message
       *       // to the checkout page about the failure
       *       dropinInstance.clearSelectedPaymentMethod();
       *       divForErrorMessages.textContent = 'my error message about entering a different payment method.';
       *     } else {
       *       // redirect to success page
       *     }
       *   });
       * });
       */


      Dropin.prototype.clearSelectedPaymentMethod = function () {
        this._removeUnvaultedPaymentMethods();

        this._model.removeActivePaymentMethod();

        if (this._model.getPaymentMethods().length === 0) {
          this._navigateToInitialView();

          return;
        }

        this._mainView.showLoadingIndicator();

        this._model.refreshPaymentMethods().then(function () {
          this._navigateToInitialView();

          this._mainView.hideLoadingIndicator();
        }.bind(this));
      };

      Dropin.prototype._setUpDataCollector = function () {
        var self = this;
        var config = assign({}, self._merchantConfiguration.dataCollector, {
          client: self._client
        });
        this._dataCollector = new DataCollector(config);

        this._dataCollector.initialize().then(function () {
          self._model.asyncDependencyReady('dataCollector');
        }).catch(function (err) {
          self._model.cancelInitialization(new DropinError({
            message: 'Data Collector failed to set up.',
            braintreeWebError: err
          }));
        });
      };

      Dropin.prototype._setUpThreeDSecure = function () {
        var self = this;
        this._threeDSecure = new ThreeDSecure(this._client, this._model);

        this._threeDSecure.initialize().then(function () {
          self._model.asyncDependencyReady('threeDSecure');
        }).catch(function (err) {
          self._model.cancelInitialization(new DropinError({
            message: '3D Secure failed to set up.',
            braintreeWebError: err
          }));
        });
      };

      Dropin.prototype._setUpDependenciesAndViews = function () {
        if (this._merchantConfiguration.dataCollector) {
          this._setUpDataCollector();
        }

        if (this._merchantConfiguration.threeDSecure) {
          this._setUpThreeDSecure();
        }

        this._mainView = new MainView({
          client: this._client,
          element: this._dropinWrapper,
          model: this._model,
          strings: this._strings
        });
      };

      Dropin.prototype._removeUnvaultedPaymentMethods = function (filter) {
        filter = filter || function () {
          return true;
        };

        this._model.getPaymentMethods().forEach(function (paymentMethod) {
          if (filter(paymentMethod) && !paymentMethod.vaulted) {
            this._model.removePaymentMethod(paymentMethod);
          }
        }.bind(this));
      };

      Dropin.prototype._navigateToInitialView = function () {
        var isOnMethodsView = this._mainView.primaryView.ID === paymentMethodsViewID;

        if (!isOnMethodsView) {
          return;
        }

        if (this._model.hasPaymentMethods()) {
          return;
        }

        this._mainView.setPrimaryView(this._model.getInitialViewId());
      };

      Dropin.prototype._supportsPaymentOption = function (paymentOption) {
        return this._model.supportedPaymentOptions.indexOf(paymentOption) !== -1;
      };

      Dropin.prototype._disableErroredPaymentMethods = function () {
        var paymentMethodOptionsElements;
        var failedDependencies = Object.keys(this._model.failedDependencies);

        if (failedDependencies.length === 0) {
          return;
        }

        paymentMethodOptionsElements = this._mainView.getOptionsElements();
        failedDependencies.forEach(function (paymentMethodId) {
          var element = paymentMethodOptionsElements[paymentMethodId];
          var div = element.div;
          var clickHandler = element.clickHandler;
          var error = this._model.failedDependencies[paymentMethodId];
          var errorMessageDiv = div.querySelector('.braintree-option__disabled-message');
          classList.add(div, 'braintree-disabled');
          div.removeEventListener('click', clickHandler);
          errorMessageDiv.innerHTML = constants.errors.DEVELOPER_MISCONFIGURATION_MESSAGE;
          console.error(error); // eslint-disable-line no-console
        }.bind(this));
      };

      Dropin.prototype._sendVaultedPaymentMethodAppearAnalyticsEvents = function () {
        var i, type;
        var typesThatSentAnEvent = {};
        var paymentMethods = this._model._paymentMethods;

        for (i = 0; i < paymentMethods.length; i++) {
          type = paymentMethods[i].type;

          if (type in typesThatSentAnEvent) {
            // prevents us from sending the analytic multiple times
            // for the same payment method type
            continue;
          }

          typesThatSentAnEvent[type] = true;
          analytics.sendEvent(this._client, 'vaulted-' + constants.analyticsKinds[type] + '.appear');
        }
      };

      Dropin.prototype._handleAppSwitch = function () {
        if (this._model.appSwitchError) {
          this._mainView.setPrimaryView(this._model.appSwitchError.id);

          this._model.reportError(this._model.appSwitchError.error);
        } else if (this._model.appSwitchPayload) {
          this._model.addPaymentMethod(this._model.appSwitchPayload);
        } else {
          this._sendVaultedPaymentMethodAppearAnalyticsEvents();
        }
      };
      /**
       * Requests a payment method object which includes the payment method nonce used by by the [Braintree Server SDKs](https://developers.braintreepayments.com/start/hello-server/).
       *
       * If a payment method is not available, an error will appear in the UI. When a callback is used, an error will be passed to it. If no callback is used, the returned Promise will be rejected with an error.
       * @public
       * @param {object} [options] All options for requesting a payment method.
       * @param {object} [options.threeDSecure] Any of the options in the [Braintree 3D Secure client reference](https://braintree.github.io/braintree-web/3.83.0/ThreeDSecure.html#verifyCard) except for `nonce`, `bin`, and `onLookupComplete`. If `amount` is provided, it will override the value of `amount` in the [3D Secure create options](module-braintree-web-drop-in.html#~threeDSecureOptions). The more options provided, the more likely the customer will not need to answer a 3DS challenge. When 3DS is enabled, both credit cards and non-network tokenized Google Pay cards will perform verfication. The recommended fields for achieving a 3DS v2 verification are:
       * * `email`
       * * `mobilePhoneNumber`
       * * `billingAddress`
       *
       * For an example of verifying 3D Secure within Drop-in, [check out this codepen](https://codepen.io/braintree/pen/KjWqGx).
       * @param {callback} [callback] May be used as the only parameter in requestPaymentMethod if no `options` are provided. The first argument will be an error if no payment method is available and will otherwise be null. The second argument will be an object containing a payment method nonce; either a {@link Dropin~cardPaymentMethodPayload|cardPaymentMethodPayload}, a {@link Dropin~paypalPaymentMethodPayload|paypalPaymentMethodPayload}, a {@link Dropin~venmoPaymentMethodPayload|venmoPaymentMethodPayload}, a {@link Dropin~googlePayPaymentMethodPayload|googlePayPaymentMethodPayload} or an {@link Dropin~applePayPaymentMethodPayload|applePayPaymentMethodPayload}. If no callback is provided, `requestPaymentMethod` will return a promise.
       * @returns {(void|Promise)} Returns a promise if no callback is provided.
       * @example <caption>Requesting a payment method</caption>
       * var form = document.querySelector('#my-form');
       * var hiddenNonceInput = document.querySelector('#my-nonce-input');
       *
       * form.addEventListener('submit', function (event) {
       *  event.preventDefault();
       *
       *  dropinInstance.requestPaymentMethod(function (err, payload) {
       *    if (err) {
       *      // handle error
       *      return;
       *    }
       *    hiddenNonceInput.value = payload.nonce;
       *    form.submit();
       *  });
       * });
       * @example <caption>Requesting a payment method with data collector</caption>
       * var form = document.querySelector('#my-form');
       * var hiddenNonceInput = document.querySelector('#my-nonce-input');
       * var hiddenDeviceDataInput = document.querySelector('#my-device-data-input');
       *
       * form.addEventListener('submit', function (event) {
       *  event.preventDefault();
       *
       *  dropinInstance.requestPaymentMethod(function (err, payload) {
       *    if (err) {
       *      // handle error
       *      return;
       *    }
       *    hiddenNonceInput.value = payload.nonce;
       *    hiddenDeviceDataInput.value = payload.deviceData;
       *    form.submit();
       *  });
       * });
       *
       * @example <caption>Requesting a payment method with 3D Secure</caption>
       * var form = document.querySelector('#my-form');
       * var hiddenNonceInput = document.querySelector('#my-nonce-input');
       *
       * form.addEventListener('submit', function (event) {
       *  event.preventDefault();
       *
       *  dropinInstance.requestPaymentMethod(function (err, payload) {
       *    if (err) {
       *      // Handle error
       *      return;
       *    }
       *
       *    if (payload.liabilityShifted || (payload.type !== 'CreditCard' && payload.type !== 'AndroidPayCard')) {
       *      hiddenNonceInput.value = payload.nonce;
       *      form.submit();
       *    } else {
       *      // Decide if you will force the user to enter a different payment method
       *      // if liability was not shifted
       *      dropinInstance.clearSelectedPaymentMethod();
       *    }
       *  });
       * });
       */


      Dropin.prototype.requestPaymentMethod = function (options) {
        // NEXT_MAJOR_VERSION
        // what should happen when this method is called while a payment
        // method is already being requested? Should it error? Should
        // they both resolve with the payload from the original request?
        // this is only important because when doing 3ds, multiple
        // requests in quick succession can get you into a state
        // where it errors because the 3ds verification is called twice
        var self = this;
        options = options || {};
        return this._mainView.requestPaymentMethod().then(function (payload) {
          if (self._shouldPerformThreeDSecureVerification(payload)) {
            self._mainView.showLoadingIndicator();

            return self._threeDSecure.verify(payload, options.threeDSecure).then(function (newPayload) {
              payload.nonce = newPayload.nonce;
              payload.liabilityShifted = newPayload.liabilityShifted;
              payload.liabilityShiftPossible = newPayload.liabilityShiftPossible;
              payload.threeDSecureInfo = newPayload.threeDSecureInfo;

              self._mainView.hideLoadingIndicator();

              return payload;
            }).catch(function (err) {
              self.clearSelectedPaymentMethod();
              return self._model.refreshPaymentMethods().then(function () {
                self._mainView.hideLoadingIndicator();

                return Promise.reject(new DropinError({
                  message: 'Something went wrong during 3D Secure authentication. Please try again.',
                  braintreeWebError: err
                }));
              });
            });
          }

          return payload;
        }).then(function (payload) {
          if (self._dataCollector) {
            payload.deviceData = self._dataCollector.getDeviceData();
          }

          return payload;
        }).then(function (payload) {
          return formatPaymentMethodPayload(payload);
        });
      };

      Dropin.prototype._shouldPerformThreeDSecureVerification = function (payload) {
        if (!this._threeDSecure) {
          return false;
        }

        if (payload.liabilityShifted != null) {
          return false;
        }

        if (payload.type === constants.paymentMethodTypes.card) {
          return true;
        }

        if (payload.type === constants.paymentMethodTypes.googlePay && payload.details.isNetworkTokenized === false) {
          return true;
        }

        return false;
      };

      Dropin.prototype._removeStylesheet = function () {
        var stylesheet = document.getElementById(constants.STYLESHEET_ID);

        if (stylesheet) {
          stylesheet.parentNode.removeChild(stylesheet);
        }
      };

      Dropin.prototype._injectStylesheet = function () {
        var assetsUrl;
        var loadStylesheetOptions = {
          id: constants.STYLESHEET_ID
        };

        if (document.getElementById(constants.STYLESHEET_ID)) {
          return;
        }

        assetsUrl = this._client.getConfiguration().gatewayConfiguration.assetsUrl;
        loadStylesheetOptions.href = assetsUrl + '/web/dropin/' + VERSION + '/css/dropin.css';

        if (this._model.isInShadowDom) {
          // if Drop-in is in the shadow DOM, put the
          // style sheet in the shadow DOM node instead of
          // in the head of the document
          loadStylesheetOptions.container = this._model.rootNode;
        }

        assets.loadStylesheet(loadStylesheetOptions);
      };
      /**
       * Cleanly remove anything set up by {@link module:braintree-web-drop-in|dropin.create}. This may be be useful in a single-page app.
       * @public
       * @param {callback} [callback] Called on completion, containing an error if one occurred. No data is returned if teardown completes successfully. If no callback is provided, `teardown` will return a promise.
       * @returns {(void|Promise)} Returns a promise if no callback is provided.
       */


      Dropin.prototype.teardown = function () {
        var teardownError;
        var promise = Promise.resolve();
        var self = this;

        this._removeStylesheet();

        if (this._mainView) {
          promise.then(function () {
            return self._mainView.teardown().catch(function (err) {
              teardownError = err;
            });
          });
        }

        if (this._dataCollector) {
          promise.then(function () {
            return this._dataCollector.teardown().catch(function (error) {
              teardownError = new DropinError({
                message: 'Drop-in errored tearing down Data Collector.',
                braintreeWebError: error
              });
            });
          }.bind(this));
        }

        if (this._threeDSecure) {
          promise.then(function () {
            return this._threeDSecure.teardown().catch(function (error) {
              teardownError = new DropinError({
                message: 'Drop-in errored tearing down 3D Secure.',
                braintreeWebError: error
              });
            });
          }.bind(this));
        }

        return promise.then(function () {
          return self._removeDropinWrapper();
        }).then(function () {
          if (teardownError) {
            return Promise.reject(teardownError);
          }

          return Promise.resolve();
        });
      };
      /**
       * Returns a boolean indicating if a payment method is available through {@link Dropin#requestPaymentMethod|requestPaymentMethod}. Particularly useful for detecting if using a client token with a customer ID to show vaulted payment methods.
       * @public
       * @returns {Boolean} True if a payment method is available, otherwise false.
       */


      Dropin.prototype.isPaymentMethodRequestable = function () {
        return this._model.isPaymentMethodRequestable();
      };

      Dropin.prototype._removeDropinWrapper = function () {
        this._dropinWrapper.parentNode.removeChild(this._dropinWrapper);

        return Promise.resolve();
      };

      function formatPaymentMethodPayload(paymentMethod) {
        var formattedPaymentMethod = {
          nonce: paymentMethod.nonce,
          details: paymentMethod.details,
          type: paymentMethod.type
        };

        if (paymentMethod.vaulted != null) {
          formattedPaymentMethod.vaulted = paymentMethod.vaulted;
        }

        if (paymentMethod.type === constants.paymentMethodTypes.card) {
          formattedPaymentMethod.description = paymentMethod.description;
        }

        if (paymentMethod.type in HAS_RAW_PAYMENT_DATA) {
          formattedPaymentMethod.details.rawPaymentData = paymentMethod.rawPaymentData;
        }

        if (typeof paymentMethod.liabilityShiftPossible === 'boolean') {
          formattedPaymentMethod.liabilityShifted = paymentMethod.liabilityShifted;
          formattedPaymentMethod.liabilityShiftPossible = paymentMethod.liabilityShiftPossible;
        }

        if (paymentMethod.threeDSecureInfo) {
          formattedPaymentMethod.threeDSecureInfo = paymentMethod.threeDSecureInfo;
        }

        if (paymentMethod.deviceData) {
          formattedPaymentMethod.deviceData = paymentMethod.deviceData;
        }

        if (paymentMethod.binData) {
          formattedPaymentMethod.binData = paymentMethod.binData;
        }

        return formattedPaymentMethod;
      }

      module.exports = wrapPrototype(Dropin);
    }, {
      "./constants": 191,
      "./dropin-model": 192,
      "./lib/analytics": 196,
      "./lib/assign": 197,
      "./lib/data-collector": 200,
      "./lib/dropin-error": 201,
      "./lib/is-utf-8": 205,
      "./lib/promise": 208,
      "./lib/sanitize-html": 209,
      "./lib/three-d-secure": 211,
      "./translations": 232,
      "./views/main-view": 251,
      "./views/payment-methods-view": 253,
      "@braintree/asset-loader": 1,
      "@braintree/class-list": 39,
      "@braintree/event-emitter": 40,
      "@braintree/uuid": 46,
      "@braintree/wrap-promise": 50
    }],
    194: [function (require, module, exports) {
      'use strict';
      /**
       * @module braintree-web-drop-in
       * @description There are two ways to integrate Drop-in into your page: a script tag integration and a JavaScript integration using [`dropin.create`](#.create).
       *
       * The script tag integration is the fastest way to integrate. All you need to do is add the Drop-in script inside your form element where you want Drop-in to appear and include a `data-braintree-dropin-authorization` property with your [tokenization key](https://developers.braintreepayments.com/guides/authorization/tokenization-key/javascript/v3) or [client token](https://developers.braintreepayments.com/guides/authorization/client-token).
       *
       * When your form is submitted, Drop-in will intercept the form submission and attempt to tokenize the payment method. If the tokenization is successful, it will insert the payment method nonce into a hidden input with the name `payment_method_nonce` and then submit your form. If the tokenization is unsuccessful, a relevant error will be shown in the UI.
       *
       * If you have data collector enabled, the device data will be injected into a hidden input with the name `device_data` before form submission.
       *
       * Specify creation options as data attributes in your script tag, as shown in the examples below. The following configuration properties may be set:
       *
       * * `data-locale`
       * * `data-card.cardholder-name.required`
       * * `data-payment-option-priority`
       * * `data-data-collector.kount`
       * * `data-data-collector.paypal`
       * * `data-paypal.amount`
       * * `data-paypal.currency`
       * * `data-paypal.flow`
       * * `data-paypal-credit.amount`
       * * `data-paypal-credit.currency`
       * * `data-paypal-credit.flow`
       *
       * For more control and customization, use [`dropin.create` instead](#.create).
       *
       * See our [demo app](../../script-tag-integration.html) for an example of using our script tag integration.
       *
       * @example
       * <caption>A full example accepting only cards</caption>
       * <!DOCTYPE html>
       * <html lang="en">
       *   <head>
       *     <meta charset="utf-8">
       *     <title>Checkout</title>
       *   </head>
       *   <body>
       *     <form id="payment-form" action="/" method="post">
       *       <script src="https://js.braintreegateway.com/web/dropin/1.32.1/js/dropin.min.js"
       *        data-braintree-dropin-authorization="CLIENT_AUTHORIZATION"
       *       ></script>
       *       <input type="submit" value="Purchase"></input>
       *     </form>
       *   </body>
       * </html>
       *
       * @example
       * <caption>A full example accepting cards, PayPal, and PayPal credit</caption>
       * <!DOCTYPE html>
       * <html lang="en">
       *   <head>
       *     <meta charset="utf-8">
       *     <title>Checkout</title>
       *   </head>
       *   <body>
       *     <form id="payment-form" action="/" method="post">
       *       <script src="https://js.braintreegateway.com/web/dropin/1.32.1/js/dropin.min.js"
       *        data-braintree-dropin-authorization="CLIENT_AUTHORIZATION"
       *        data-paypal.flow="checkout"
       *        data-paypal.amount="10.00"
       *        data-paypal.currency="USD"
       *        data-paypal-credit.flow="vault"
       *       ></script>
       *       <input type="submit" value="Purchase"></input>
       *     </form>
       *   </body>
       * </html>
       *
       * @example
       * <caption>Specifying a locale and payment option priority</caption>
       * <form id="payment-form" action="/" method="post">
       *   <script src="https://js.braintreegateway.com/web/dropin/1.32.1/js/dropin.min.js"
       *    data-braintree-dropin-authorization="CLIENT_AUTHORIZATION"
       *    data-locale="de_DE"
       *    data-payment-option-priority='["paypal","card", "paypalCredit"]'
       *    data-paypal.flow="checkout"
       *    data-paypal.amount="10.00"
       *    data-paypal.currency="USD"
       *    data-paypal-credit.flow="vault"
       *   ></script>
       *   <input type="submit" value="Purchase"></input>
       * </form>
       *
       * @example
       * <caption>Including an optional cardholder name field in card form</caption>
       * <form id="payment-form" action="/" method="post">
       *   <script src="https://js.braintreegateway.com/web/dropin/1.32.1/js/dropin.min.js"
       *    data-braintree-dropin-authorization="CLIENT_AUTHORIZATION"
       *    data-card.cardholder-name.required="false"
       *   ></script>
       *   <input type="submit" value="Purchase"></input>
       * </form>
       *
       * @example
       * <caption>Including a required cardholder name field in card form</caption>
       * <form id="payment-form" action="/" method="post">
       *   <script src="https://js.braintreegateway.com/web/dropin/1.32.1/js/dropin.min.js"
       *    data-braintree-dropin-authorization="CLIENT_AUTHORIZATION"
       *    data-card.cardholder-name.required="true"
       *   ></script>
       *   <input type="submit" value="Purchase"></input>
       * </form>
       */

      var Dropin = require('./dropin');

      var client = require('braintree-web/client');

      var createFromScriptTag = require('./lib/create-from-script-tag');

      var constants = require('./constants');

      var analytics = require('./lib/analytics');

      var DropinError = require('./lib/dropin-error');

      var Promise = require('./lib/promise');

      var wrapPromise = require('@braintree/wrap-promise');

      var VERSION = '1.32.1';
      /**
       * @typedef {object} cardCreateOptions The configuration options for cards. Internally, Drop-in uses [Hosted Fields](http://braintree.github.io/braintree-web/3.83.0/module-braintree-web_hosted-fields.html) to render the card form. The `overrides.fields` and `overrides.styles` allow the Hosted Fields to be customized.
       *
       * @param {(boolean|object)} [cardholderName] Will enable a cardholder name field above the card number field. If set to an object, you can specify whether or not the field is required. If set to a `true`, it will default the field to being present, but not required.
       * @param {boolean} [cardholderName.required=false] When true, the cardholder name field will be required to request the payment method nonce.
       * @param {object} [overrides.fields] The Hosted Fields [`fields` options](http://braintree.github.io/braintree-web/3.83.0/module-braintree-web_hosted-fields.html#~fieldOptions). Only `number`, `cvv`, `expirationDate` and `postalCode` can be configured. Each is a [Hosted Fields `field` object](http://braintree.github.io/braintree-web/3.83.0/module-braintree-web_hosted-fields.html#~field). `selector` cannot be modified.
       * @param {object} [overrides.styles] The Hosted Fields [`styles` options](http://braintree.github.io/braintree-web/3.83.0/module-braintree-web_hosted-fields.html#~styleOptions). These can be used to add custom styles to the Hosted Fields iframes. To style the rest of Drop-in, [review the documentation for customizing Drop-in](https://developers.braintreepayments.com/guides/drop-in/customization/javascript/v3#customize-your-ui).
       * @param {boolean} [clearFieldsAfterTokenization=true] When false, the card form will not clear the card data when the customer returns to the card view after a successful tokenization.
       * @param {object} [vault] Configuration for vaulting credit cards. Only applies when using a [client token with a customer id](https://developers.braintreepayments.com/reference/request/client-token/generate/#customer_id).
       * @param {boolean} [vault.allowVaultCardOverride=false] When true, the card form will include an option to let the customer decide not to vault the credit card they enter.
       * @param {boolean} [vault.vaultCard=true] Whether or not to vault the card upon tokenization. When set to `false` with `allowVaultCardOverride` set to `false`, then cards will not be vaulted.
       */

      /**
       * @typedef {object} dataCollectorOptions The configuration options for Data Collector. Requires [advanced fraud protection](https://developers.braintreepayments.com/guides/advanced-fraud-tools/client-side/javascript/v3) to be enabled in the Braintree gateway. If using Kount, contact our [support team](https://developers.braintreepayments.com/forms/contact) to configure your Kount ID. The device data will be included on the {@link Dropin#requestPaymentMethod|requestPaymentMethod payload}.
       *
       * @param {boolean} [kount] If true, Kount fraud data collection is enabled.
       */

      /**
       * @typedef {object} threeDSecureOptions Configuration options to pass when creating the 3D Secure module used in Drop-in. `amount` for 3D Secure verification can be passed here, but it's recomended that it and all other 3D Secure verification options be passed to the {@link Dropin#requestPaymentMethod|requestPaymentMethod options} instead. Any `cardinalSDKConfig` options must be passed here when creating Drop-in.
       *
       * @param {options} cardinalSDKConfig A configuration object to adjust the configuration for the underlying Cardinal SDK (Braintree's 3D Secure provider). See [`cardinalSDKConfig` options](http://braintree.github.io/braintree-web/3.83.0/module-braintree-web_three-d-secure.html#.create) for all options.
       * @param {string} amount __Deprecated__ The amount to verify with 3D Secure. Set amount in the {@link Dropin#requestPaymentMethod|requestPaymentMethod options} instead.
       */

      /** @typedef {object} paypalCreateOptions The configuration options for PayPal and PayPalCredit. For a full list of options see the [PayPal Checkout client reference options](http://braintree.github.io/braintree-web/3.83.0/PayPalCheckout.html#createPayment).
       *
       * @param {string} flow Either `checkout` for a one-time [Checkout with PayPal](https://developers.braintreepayments.com/guides/paypal/checkout-with-paypal/javascript/v3) flow or `vault` for a [Vault flow](https://developers.braintreepayments.com/guides/paypal/vault/javascript/v3). Required when using PayPal or PayPal Credit.
       * @param {(string|number)} [amount] The amount of the transaction. Required when using the Checkout flow.
       * @param {string} [currency] The currency code of the amount, such as `USD`. Required when using the Checkout flow.
       * @param {object} [buttonStyle] The style object to apply to the PayPal button. Button customization includes color, shape, size, and label. The options [found here](https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/customize-button/#button-styles) are available.
       * @param {boolean} [commit] The user action to show on the PayPal review page. If true, a `Pay Now` button will be shown. If false, a `Continue` button will be shown.
       * @param {object} [vault] Configuration for vaulting PayPal accounts. Only applies when using a [client token with a customer id](https://developers.braintreepayments.com/reference/request/client-token/generate/#customer_id).
       * @param {boolean} [vault.vaultPayPal=true] Whether or not to vault the PayPal account upon tokenization.
       */

      /** @typedef {object} applePayCreateOptions The configuration options for Apple Pay.
       *
       * @param {string} [buttonStyle=black] Configures the Apple Pay button style. Valid values are `black`, `white`, `white-outline`.
       * @param {string} displayName The canonical name for your store. Use a non-localized name. This parameter should be a utf-8 string that is a maximum of 128 characters. The system may display this name to the user.
       * @param {number} [applePaySessionVersion=2] The [version of the `ApplePaySession`](https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_on_the_web_version_history) to use. It's recommended to use the lowest version that contains all the features you need for your checkout to maximize compatibility.
       * @param {external:ApplePayPaymentRequest} paymentRequest The payment request details to apply on top of those from Braintree.
       */

      /** @typedef {object} googlePayCreateOptions The configuration options for Google Pay. Additional options from the few listed here are available, many have default values applied based on the settings found in the Braintree Gateway. For more information, see [Google's Documentation](https://developers.google.com/pay/api/web/object-reference#request-objects).
       *
       * @param {string} merchantId The ID provided by Google for processing transactions in production. Not necessary for testing in sandbox.
       * @param {string} [googlePayVersion=1] The version of the Google Pay API to use. Defaults to 1, but 2 can be passed in.
       * @param {external:GooglePayTransactionInfo} transactionInfo The transaction details necessary for processing the payment.
       * @param {external:GooglePayButtonOptions} [button] The button options for configuring the look of the Google Pay button. The `onClick` property cannot be overwritten.
       */

      /**
       * @typedef {object} ApplePayPaymentRequest An [Apple Pay Payment Request object](https://developer.apple.com/reference/applepayjs/1916082-applepay_js_data_types/paymentrequest).
       * @external ApplePayPaymentRequest
       * @see {@link https://developer.apple.com/reference/applepayjs/1916082-applepay_js_data_types/paymentrequest PaymentRequest}
       */

      /**
       * @typedef {object} GooglePayTransactionInfo A [Google Pay TransactionInfo object](https://developers.google.com/pay/api/web/object-reference#TransactionInfo).
       * @external GooglePayTransactionInfo
       * @see {@link https://developers.google.com/pay/api/web/object-reference#TransactionInfo TransactionInfo}
       */

      /**
       * @typedef {object} GooglePayButtonOptions A [Google Pay ButtonOptions object](https://developers.google.com/pay/api/web/reference/object#ButtonOptions).
       * @external GooglePayButtonOptions
       * @see {@link https://developers.google.com/pay/api/web/reference/object#ButtonOptions ButtonOptions}
       */

      /** @typedef {(object|boolean)} venmoCreateOptions The configuration options for Venmo. If `true` is passed instead of a configuration object, the default settings listed will be used.
       *
       * @param {boolean} [allowNewBrowserTab=true] If false, it restricts supported browsers to those that can app switch to the Venmo app without opening a new tab.
       */

      /**
       * @static
       * @function create
       * @description This function is the entry point for `braintree.dropin`. It is used for creating {@link Dropin} instances.
       * @param {object} options Object containing all {@link Dropin} options:
       * @param {string} options.authorization A [tokenization key](https://developers.braintreepayments.com/guides/authorization/tokenization-key/javascript/v3) or a [client token](https://developers.braintreepayments.com/guides/authorization/client-token). If authorization is a client token created with a [customer ID](https://developers.braintreepayments.com/guides/drop-in/javascript/v3#customer-id), Drop-in will render saved payment methods and automatically store any newly-added payment methods in their Vault record.
       * @param {(string|HTMLElement)} options.container A reference to an empty element, such as a `<div>`, where Drop-in will be included on your page or the selector for the empty element. e.g. `#dropin-container`.
       * @param {string} options.selector Deprecated: Now an alias for `options.container`.
       * @param {string} [options.locale=`en_US`] Use this option to change the language, links, and terminology used throughout Drop-in. Supported locales include:
       * `ar_EG`,
       * `cs_CZ`,
       * `da_DK`,
       * `de_DE`,
       * `el_GR`,
       * `en_AU`,
       * `en_GB`,
       * `en_IN`,
       * `en_US`,
       * `es_ES`,
       * `es_XC`,
       * `fi_FI`,
       * `fr_CA`,
       * `fr_FR`,
       * `fr_XC`,
       * `he_IL`,
       * `hu_HU`,
       * `id_ID`,
       * `it_IT`,
       * `ja_JP`,
       * `ko_KR`,
       * `nl_NL`,
       * `no_NO`,
       * `pl_PL`,
       * `pt_BR`,
       * `pt_PT`,
       * `ru_RU`,
       * `sk_SK`,
       * `sv_SE`,
       * `th_TH`,
       * `zh_CN`,
       * `zh_HK`,
       * `zh_TW`,
       * `zh_XC`.
       *
       * @param {object} [options.translations] To use your own translations, pass an object with the strings you wish to replace. This object must use the same structure as the object used internally for supported translations, which can be found [here](https://github.com/braintree/braintree-web-drop-in/blob/main/src/translations/en_US.js). Any strings that are not included will be those from the provided `locale` or `en_US` if no `locale` is provided. See below for an example of creating Drop-in with custom translations.
       * @param {array} [options.paymentOptionPriority] Use this option to indicate the order in which enabled payment options should appear when multiple payment options are enabled. By default, payment options will appear in this order: `['card', 'paypal', 'paypalCredit', 'venmo', 'applePay', 'googlePay']`. Payment options omitted from this array will not be offered to the customer.
       *
       * @param {(boolean|object)} [options.card] The configuration options for cards. See [`cardCreateOptions`](#~cardCreateOptions) for all `card` options. If this option is omitted, cards will still appear as a payment option. To remove cards, pass `false` for the value.
       * @param {object} [options.paypal] The configuration options for PayPal. To include a PayPal option in your Drop-in integration, include the `paypal` parameter and [enable PayPal in the Braintree Control Panel](https://developers.braintreepayments.com/guides/paypal/testing-go-live/#go-live). To test in Sandbox, you will need to [link a PayPal sandbox test account to your Braintree sandbox account](https://developers.braintreepayments.com/guides/paypal/testing-go-live/#linked-paypal-testing).
       *
       * Some of the PayPal configuration options are listed [here](#~paypalCreateOptions), but for a full list see the [PayPal Checkout client reference options](http://braintree.github.io/braintree-web/3.83.0/PayPalCheckout.html#createPayment).
       *
       * PayPal is not [supported in Internet Explorer versions lower than 11](https://developer.paypal.com/docs/checkout/reference/faq/#which-browsers-does-paypal-checkout-support).
       *
       * @param {object} [options.paypalCredit] The configuration options for PayPal Credit. To include a PayPal Credit option in your Drop-in integration, include the `paypalCredit` parameter and [enable PayPal in the Braintree Control Panel](https://developers.braintreepayments.com/guides/paypal/testing-go-live/#go-live).
       *
       * Some of the PayPal Credit configuration options are listed [here](#~paypalCreateOptions), but for a full list see the [PayPal Checkout client reference options](http://braintree.github.io/braintree-web/3.83.0/PayPalCheckout.html#createPayment). For more information on PayPal Credit, see the [Braintree Developer Docs](https://developers.braintreepayments.com/guides/paypal/paypal-credit/javascript/v3).
       *
       * PayPal Credit is not [supported in Internet Explorer versions lower than 11](https://developer.paypal.com/docs/checkout/reference/faq/#which-browsers-does-paypal-checkout-support).
       *
       * @param {(object|boolean)} [options.venmo] The configuration options for Pay with Venmo. To include a Venmo option in your Drop-in integration, include the `venmo` parameter and [follow the documentation for setting up Venmo in the Braintree control panel](https://articles.braintreepayments.com/guides/payment-methods/venmo#setup). If a user's browser does not support Venmo, the Venmo option will not be rendered.
       *
       * See [`venmoCreateOptions`](#~venmoCreateOptions) for `venmo` options.
       *
       * @param {object} [options.applePay] The configuration options for Apple Pay. To include an Apple Pay option in your Drop-in integration, include the `applePay` parameter and [enable Apple Pay in the Braintree Control Panel](https://developers.braintreepayments.com/guides/apple-pay/configuration/javascript/v3). If a user's browser does not support Apple Pay, the Apple Pay option will not be rendered. See [Apple's documentation](https://support.apple.com/en-us/HT201469) for browser and device support.
       *
       * See [`applePayCreateOptions`](#~applePayCreateOptions) for `applePay` options.
       *
       * @param {object} [options.googlePay] The configuration options for Google Pay. To include a Google Pay option in your Drop-in integration, include the `googlePay` parameter and [enable Google Pay in the Braintree Control Panel](https://developers.braintreepayments.com/guides/google-pay/configuration/javascript/v3). If a user's browser does not support Google Pay, the Google Pay option will not be rendered. See [Google's documentation](https://developers.google.com/pay/api/web/test-and-deploy) for browser and device support.
       *
       * See [`googlePayCreateOptions`](#~googlePayCreateOptions) for `googlePay` options.
       *
       * @param {object|boolean} [options.dataCollector] If `true` is passed, Drop-in will be configured to collect data for use with Advanced Fraud Protection. If collecting data via Kount, pass a [`dataCollectorOptions` object](#~dataCollectorOptions) with `kount: true` instead. If Data Collector is configured and fails to load, Drop-in creation will fail.
       *
       * @param {(boolean|object)} [options.threeDSecure] When `true` is passed, the 3D Secure module will be created with a default configuration. See [`threeDSecureOptions`](#~threeDSecureOptions) for additional create options. If 3D Secure is configured and fails to load, Drop-in creation will fail.
       *
       * @param {boolean} [options.vaultManager=false] Whether or not to allow a customer to delete saved payment methods when used with a [client token with a customer id](https://developers.braintreepayments.com/reference/request/client-token/generate/#customer_id). *Note:* Deleting a payment method from Drop-in will permanently delete the payment method, so this option is not recommended for merchants using Braintree's recurring billing system. This feature is not supported in Internet Explorer 9.
       *
       * @param {boolean} [options.preselectVaultedPaymentMethod=true] Whether or not to initialize Drop-in with a vaulted payment method pre-selected. Only applicable when using a [client token with a customer id](https://developers.braintreepayments.com/reference/request/client-token/generate/#customer_id) and a customer with saved payment methods.
       *
       * @param {boolean} [options.showDefaultPaymentMethodFirst=true] When `true` or left out, the customer's default payment method will be displayed first in the list of vaulted payment methods. When `false`, the Braintree API will determine which payment method to display first, typically the latest payment method added to the customer. Only applicable when using a [client token with a customer id](https://developers.braintreepayments.com/reference/request/client-token/generate/#customer_id) and a customer with saved payment methods.
       *
       * @param {function} [callback] The second argument, `data`, is the {@link Dropin} instance. Returns a promise if no callback is provided.
       * @returns {(void|Promise)} Returns a promise if no callback is provided.
       * @example
       * <caption>A full example of accepting credit cards with callback API</caption>
       * <!DOCTYPE html>
       * <html lang="en">
       *   <head>
       *     <meta charset="utf-8">
       *     <title>Checkout</title>
       *   </head>
       *   <body>
       *     <div id="dropin-container"></div>
       *     <button id="submit-button">Purchase</button>
       *
       *     <script src="https://js.braintreegateway.com/web/dropin/1.32.1/js/dropin.min.js"></script>
       *
       *     <script>
       *       var submitButton = document.querySelector('#submit-button');
       *
       *       braintree.dropin.create({
       *         authorization: 'CLIENT_AUTHORIZATION',
       *         container: '#dropin-container'
       *       }, function (err, dropinInstance) {
       *         if (err) {
       *           // Handle any errors that might've occurred when creating Drop-in
       *           console.error(err);
       *           return;
       *         }
       *         submitButton.addEventListener('click', function () {
       *           dropinInstance.requestPaymentMethod(function (err, payload) {
       *             if (err) {
       *               // Handle errors in requesting payment method
       *             }
       *
       *             // Send payload.nonce to your server
       *           });
       *         });
       *       });
       *     </script>
       *   </body>
       * </html>
       * @example
       * <caption>A full example of accepting credit cards with promise API</caption>
       * <!DOCTYPE html>
       * <html lang="en">
       *   <head>
       *     <meta charset="utf-8">
       *     <title>Checkout</title>
       *   </head>
       *   <body>
       *     <div id="dropin-container"></div>
       *     <button id="submit-button">Purchase</button>
       *
       *     <script src="https://js.braintreegateway.com/web/dropin/1.32.1/js/dropin.min.js"></script>
       *
       *     <script>
       *       var submitButton = document.querySelector('#submit-button');
       *
       *       braintree.dropin.create({
       *         authorization: 'CLIENT_AUTHORIZATION',
       *         container: '#dropin-container'
       *       }).then(function (dropinInstance) {
       *         submitButton.addEventListener('click', function () {
       *           dropinInstance.requestPaymentMethod().then(function (payload) {
       *             // Send payload.nonce to your server
       *           }).catch(function (err) {
       *             // Handle errors in requesting payment method
       *           });
       *         });
       *       }).catch(function (err) {
       *         // Handle any errors that might've occurred when creating Drop-in
       *         console.error(err);
       *       });
       *     </script>
       *   </body>
       * </html>
       * @example
       * <caption>Setting up a Drop-in instance to accept credit cards, PayPal, PayPal Credit, Venmo, and Apple Pay</caption>
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container',
       *   applePay: {
       *     displayName: 'Merchant Name',
       *     paymentRequest: {
         *     label: 'Localized Name',
       *       total: '10.00'
       *     }
       *   },
       *   paypal: {
       *     flow: 'checkout',
       *     amount: '10.00',
       *     currency: 'USD'
       *   },
       *  paypalCredit: {
       *    flow: 'checkout',
       *    amount: '10.00',
       *    currency: 'USD'
       *   },
       *   venmo: true
       * }, function (err, dropinInstance) {
       *   // Set up a handler to request a payment method and
       *   // submit the payment method nonce to your server
       * });
       * @example
       * <caption>Setting up a Drop-in instance to accept Venmo with restricted browser support</caption>
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container',
       *   venmo: {
       *     allowNewBrowserTab: false
       *   }
       * }, function (err, dropinInstance) {
       *   // Set up a handler to request a payment method and
       *   // submit the payment method nonce to your server
       * });
       *
       * @example
       * <caption>Submitting the payment method nonce to the server using a form</caption>
       * <!DOCTYPE html>
       * <html lang="en">
       *   <head>
       *     <meta charset="utf-8">
       *     <title>Checkout</title>
       *   </head>
       *   <body>
       *     <form id="payment-form" action="/" method="post">
       *       <div id="dropin-container"></div>
       *       <input type="submit" value="Purchase"></input>
       *       <input type="hidden" id="nonce" name="payment_method_nonce"></input>
       *     </form>
       *
       *     <script src="https://js.braintreegateway.com/web/dropin/1.32.1/js/dropin.min.js"></script>
       *
       *     <script>
       *       var form = document.querySelector('#payment-form');
       *       var nonceInput = document.querySelector('#nonce');
       *
       *       braintree.dropin.create({
       *         authorization: 'CLIENT_AUTHORIZATION',
       *         container: '#dropin-container'
       *       }, function (err, dropinInstance) {
       *         if (err) {
       *           // Handle any errors that might've occurred when creating Drop-in
       *           console.error(err);
       *           return;
       *         }
       *         form.addEventListener('submit', function (event) {
       *           event.preventDefault();
       *
       *           dropinInstance.requestPaymentMethod(function (err, payload) {
       *             if (err) {
       *               // Handle errors in requesting payment method
       *               return;
       *             }
       *
       *             // Send payload.nonce to your server
       *             nonceInput.value = payload.nonce;
       *             form.submit();
       *           });
       *         });
       *       });
       *     </script>
       *   </body>
       * </html>
       *
       * @example
       * <caption>Use your own translations</caption>
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container',
       *   translations: {
       *     payingWith: 'You are paying with {{paymentSource}}',
       *     chooseAnotherWayToPay: 'My custom chooseAnotherWayToPay string',
       *     // Any other custom translation strings
       *   }
       * }, callback);
       *
       * @example
       * <caption>Customizing Drop-in with card form overrides</caption>
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container',
       *   card: {
       *     overrides: {
       *       fields: {
       *         number: {
       *           placeholder: '1111 1111 1111 1111' // Update the number field placeholder
       *         },
       *         postalCode: {
       *           minlength: 5 // Set the minimum length of the postal code field
       *         },
       *         cvv: null // Remove the CVV field from your form
       *       },
       *       styles: {
       *         input: {
       *           'font-size': '18px' // Change the font size for all inputs
       *         },
       *         ':focus': {
       *           color: 'red' // Change the focus color to red for all inputs
       *         }
       *       }
       *     }
       *   }
       * }, callback);
       *
       * @example
       * <caption>Mask Card Inputs</caption>
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container',
       *   card: {
       *     overrides: {
       *       fields: {
       *         number: {
       *           maskInput: {
       *             showLastFour: true
       *           }
       *         },
       *         cvv: {
       *           maskInput: true
       *         }
       *       }
       *     }
       *   }
       * }, callback);
       *
       * @example
       * <caption>Including a cardholder name field</caption>
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container',
       *   card: {
       *     cardholderName: true
       *   }
       * }, callback);
       *
       * @example
       * <caption>Including a required cardholder name field</caption>
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container',
       *   card: {
       *     cardholderName: {
       *       required: true
       *     }
       *   }
       * }, callback);
       *
       * @example
       * <caption>Enabling 3D Secure</caption>
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container',
       *   threeDSecure: true
       * }, function (err, dropinInstance) {
       *   // setup payment button
       *   btn.addEventListener('click', function (e) {
       *     e.preventDefault();
       *
       *     dropinInstance.requestPaymentMethod(|
       *       threeDSecure: {
       *         amount: '100.00',
       *         billingAddress: {
       *           givenName: 'Jill', // ASCII-printable characters required, else will throw a validation error
       *           surname: 'Doe', // ASCII-printable characters required, else will throw a validation error
       *           phoneNumber: '8101234567',
       *           streetAddress: '555 Smith St.',
       *           extendedAddress: '#5',
       *           locality: 'Oakland',
       *           region: 'CA',
       *           postalCode: '12345',
       *           countryCodeAlpha2: 'US'
       *         },
       *         // additional 3ds params
       *       }
       *     }, function (err, payload) {
       *       // inspect payload.liablityShifted
       *       // send payload.nonce to server
       *     });
       *   });
       * });
       *
       * @example
       * <caption>Enabled Vault Manager</caption>
       * braintree.dropin.create({
       *   authorization: 'CLIENT_AUTHORIZATION',
       *   container: '#dropin-container',
       *   vaultManager: true
       * }, callback);
       */

      function create(options) {
        if (!options.authorization) {
          return Promise.reject(new DropinError('options.authorization is required.'));
        }

        return client.create({
          authorization: options.authorization
        }).catch(function (err) {
          return Promise.reject(new DropinError({
            message: 'There was an error creating Drop-in.',
            braintreeWebError: err
          }));
        }).then(function (clientInstance) {
          clientInstance = setAnalyticsIntegration(clientInstance);

          if (clientInstance.getConfiguration().authorizationType === 'TOKENIZATION_KEY') {
            analytics.sendEvent(clientInstance, 'started.tokenization-key');
          } else {
            analytics.sendEvent(clientInstance, 'started.client-token');
          }

          return new Promise(function (resolve, reject) {
            new Dropin({
              merchantConfiguration: options,
              client: clientInstance
            })._initialize(function (err, instance) {
              if (err) {
                reject(err);
                return;
              }

              resolve(instance);
            });
          });
        });
      }

      function setAnalyticsIntegration(clientInstance) {
        var configuration = clientInstance.getConfiguration();
        configuration.analyticsMetadata.integration = constants.INTEGRATION;
        configuration.analyticsMetadata.integrationType = constants.INTEGRATION;
        configuration.analyticsMetadata.dropinVersion = VERSION;

        clientInstance.getConfiguration = function () {
          return configuration;
        };

        return clientInstance;
      } // we check for document's existence to support server side rendering


      createFromScriptTag(create, typeof document !== 'undefined' && document.querySelector('script[data-braintree-dropin-authorization]'));
      module.exports = {
        create: wrapPromise(create),

        /**
         * @description The current version of Drop-in, i.e. `1.32.1`.
         * @type {string}
         */
        VERSION: VERSION
      };
    }, {
      "./constants": 191,
      "./dropin": 193,
      "./lib/analytics": 196,
      "./lib/create-from-script-tag": 199,
      "./lib/dropin-error": 201,
      "./lib/promise": 208,
      "@braintree/wrap-promise": 50,
      "braintree-web/client": 59
    }],
    195: [function (require, module, exports) {
      'use strict';

      function addSelectionEventHandler(element, func) {
        element.addEventListener('click', func);
        element.addEventListener('keyup', function (event) {
          if (event.keyCode === 13) {
            func();
          }
        });
      }

      module.exports = addSelectionEventHandler;
    }, {}],
    196: [function (require, module, exports) {
      'use strict';

      var atob = require('./polyfill').atob;

      var constants = require('../constants');

      var braintreeClientVersion = require('braintree-web/client').VERSION;

      function _millisToSeconds(millis) {
        return Math.floor(millis / 1000);
      }

      function sendAnalyticsEvent(client, kind, callback) {
        var configuration = client.getConfiguration();
        var analyticsRequest = client._request;

        var timestamp = _millisToSeconds(Date.now());

        var url = configuration.gatewayConfiguration.analytics.url;
        var data = {
          analytics: [{
            kind: constants.ANALYTICS_PREFIX + kind,
            timestamp: timestamp
          }],
          _meta: configuration.analyticsMetadata,
          braintreeLibraryVersion: braintreeClientVersion
        };

        if (configuration.authorizationType === 'TOKENIZATION_KEY') {
          data.tokenizationKey = configuration.authorization;
        } else {
          data.authorizationFingerprint = JSON.parse(atob(configuration.authorization)).authorizationFingerprint;
        }

        analyticsRequest({
          url: url,
          method: 'post',
          data: data,
          timeout: constants.ANALYTICS_REQUEST_TIMEOUT_MS
        }, callback);
      }

      module.exports = {
        sendEvent: sendAnalyticsEvent
      };
    }, {
      "../constants": 191,
      "./polyfill": 207,
      "braintree-web/client": 59
    }],
    197: [function (require, module, exports) {
      arguments[4][95][0].apply(exports, arguments);
    }, {
      "dup": 95
    }],
    198: [function (require, module, exports) {
      'use strict';

      var isIe9 = require('@braintree/browser-detection/is-ie9');

      var isIe10 = require('@braintree/browser-detection/is-ie10');

      module.exports = {
        isIe9: isIe9,
        isIe10: isIe10
      };
    }, {
      "@braintree/browser-detection/is-ie10": 32,
      "@braintree/browser-detection/is-ie9": 33
    }],
    199: [function (require, module, exports) {
      'use strict';

      var analytics = require('./analytics');

      var find = require('./find-parent-form');

      var uuid = require('@braintree/uuid');

      var DropinError = require('./dropin-error');

      var kebabCaseToCamelCase = require('./kebab-case-to-camel-case');

      var WHITELISTED_DATA_ATTRIBUTES = ['locale', 'payment-option-priority', 'data-collector.kount', 'data-collector.paypal', // camelcase version was accidentally used initially.
      // we add the kebab case version to match the docs, but
      // we retain the camelcase version for backwards compatibility
      'card.cardholderName', 'card.cardholderName.required', 'card.cardholder-name', 'card.cardholder-name.required', 'paypal.amount', 'paypal.currency', 'paypal.flow', 'paypal.landing-page-type', 'paypal-credit.amount', 'paypal-credit.currency', 'paypal-credit.flow', 'paypal-credit.landing-page-type'];

      function injectHiddenInput(name, value, form) {
        var input = form.querySelector('[name="' + name + '"]');

        if (!input) {
          input = document.createElement('input');
          input.type = 'hidden';
          input.name = name;
          form.appendChild(input);
        }

        input.value = value;
      }

      function addCompositeKeyValuePairToObject(obj, key, value) {
        var decomposedKeys = key.split('.');
        var topLevelKey = kebabCaseToCamelCase(decomposedKeys[0]);

        if (decomposedKeys.length === 1) {
          obj[topLevelKey] = deserialize(value);
        } else {
          obj[topLevelKey] = obj[topLevelKey] || {};
          addCompositeKeyValuePairToObject(obj[topLevelKey], decomposedKeys.slice(1).join('.'), value);
        }
      }

      function deserialize(value) {
        try {
          return JSON.parse(value);
        } catch (e) {
          return value;
        }
      }

      function createFromScriptTag(createFunction, scriptTag) {
        var authorization, container, createOptions, form;

        if (!scriptTag) {
          return;
        }

        authorization = scriptTag.getAttribute('data-braintree-dropin-authorization');

        if (!authorization) {
          throw new DropinError('Authorization not found in data-braintree-dropin-authorization attribute');
        }

        container = document.createElement('div');
        container.id = 'braintree-dropin-' + uuid();
        form = find.findParentForm(scriptTag);

        if (!form) {
          throw new DropinError('No form found for script tag integration.');
        }

        form.addEventListener('submit', function (event) {
          event.preventDefault();
        });
        scriptTag.parentNode.insertBefore(container, scriptTag);
        createOptions = {
          authorization: authorization,
          container: container
        };
        WHITELISTED_DATA_ATTRIBUTES.forEach(function (compositeKey) {
          var value = scriptTag.getAttribute('data-' + compositeKey);

          if (value == null) {
            return;
          }

          addCompositeKeyValuePairToObject(createOptions, compositeKey, value);
        });
        createFunction(createOptions).then(function (instance) {
          analytics.sendEvent(instance._client, 'integration-type.script-tag');
          form.addEventListener('submit', function () {
            instance.requestPaymentMethod(function (requestPaymentError, payload) {
              if (requestPaymentError) {
                return;
              }

              injectHiddenInput('payment_method_nonce', payload.nonce, form);

              if (payload.deviceData) {
                injectHiddenInput('device_data', payload.deviceData, form);
              }

              form.submit();
            });
          });
        });
      }

      module.exports = createFromScriptTag;
    }, {
      "./analytics": 196,
      "./dropin-error": 201,
      "./find-parent-form": 202,
      "./kebab-case-to-camel-case": 206,
      "@braintree/uuid": 46
    }],
    200: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var constants = require('../constants');

          var analytics = require('./analytics');

          var assets = require('@braintree/asset-loader');

          var Promise = require('./promise');

          function DataCollector(config) {
            this._config = config;
          }

          DataCollector.prototype.initialize = function () {
            var self = this;
            return Promise.resolve().then(function () {
              var braintreeWebVersion;

              if (global.braintree && global.braintree.dataCollector) {
                return Promise.resolve();
              }

              braintreeWebVersion = self._config.client.getVersion();
              return assets.loadScript({
                src: 'https://js.braintreegateway.com/web/' + braintreeWebVersion + '/js/data-collector.min.js',
                id: constants.DATA_COLLECTOR_SCRIPT_ID
              });
            }).then(function () {
              return global.braintree.dataCollector.create(self._config);
            }).then(function (instance) {
              self._instance = instance;
            }).catch(function (err) {
              analytics.sendEvent(self._config.client, 'data-collector.setup-failed'); // log the Data Collector setup error
              // but do not prevent Drop-in from loading

              self.log(err);
            });
          };

          DataCollector.prototype.log = function (message) {
            console.log(message); // eslint-disable-line no-console
          };

          DataCollector.prototype.getDeviceData = function () {
            if (!this._instance) {
              return '';
            }

            return this._instance.deviceData;
          };

          DataCollector.prototype.teardown = function () {
            if (!this._instance) {
              return Promise.resolve();
            }

            return this._instance.teardown();
          };

          module.exports = DataCollector;
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../constants": 191,
      "./analytics": 196,
      "./promise": 208,
      "@braintree/asset-loader": 1
    }],
    201: [function (require, module, exports) {
      'use strict';

      function isBraintreeWebError(err) {
        return err.name === 'BraintreeError';
      }

      function DropinError(err) {
        this.name = 'DropinError';

        if (typeof err === 'string') {
          this.message = err;
        } else {
          this.message = err.message;
        }

        if (isBraintreeWebError(err)) {
          this._braintreeWebError = err;
        } else {
          this._braintreeWebError = err.braintreeWebError;
        }
      }

      DropinError.prototype = Object.create(Error.prototype);
      DropinError.prototype.constructor = DropinError;
      module.exports = DropinError;
    }, {}],
    202: [function (require, module, exports) {
      'use strict';

      function findParentForm(element) {
        var parentNode = element.parentNode;

        if (!parentNode || parentNode.nodeName === 'FORM') {
          return parentNode;
        }

        return findParentForm(parentNode);
      }

      module.exports = {
        findParentForm: findParentForm
      };
    }, {}],
    203: [function (require, module, exports) {
      'use strict';

      var atob = require('./polyfill').atob;

      module.exports = function (client) {
        var authorizationFingerprint;
        var configuration = client.getConfiguration();

        if (configuration.authorizationType !== 'TOKENIZATION_KEY') {
          authorizationFingerprint = JSON.parse(atob(configuration.authorization)).authorizationFingerprint;
          return !authorizationFingerprint || authorizationFingerprint.indexOf('customer_id=') === -1;
        }

        return true;
      };
    }, {
      "./polyfill": 207
    }],
    204: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          function isHTTPS() {
            return global.location.protocol === 'https:';
          }

          module.exports = {
            isHTTPS: isHTTPS
          };
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    205: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          module.exports = function (win) {
            win = win || global;
            return Boolean(win.document.characterSet && win.document.characterSet.toLowerCase() === 'utf-8');
          };
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    206: [function (require, module, exports) {
      'use strict';

      function kebabCaseToCamelCase(kebab) {
        var parts = kebab.split('-');
        var first = parts.shift();
        var capitalizedParts = parts.map(function (part) {
          return part.charAt(0).toUpperCase() + part.substring(1);
        });
        return [first].concat(capitalizedParts).join('');
      }

      module.exports = kebabCaseToCamelCase;
    }, {}],
    207: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';
          /* eslint-disable no-mixed-operators */

          var atobNormalized = typeof global.atob === 'function' ? global.atob : atob;

          function atob(base64String) {
            var a, b, c, b1, b2, b3, b4, i;
            var base64Matcher = new RegExp('^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})([=]{1,2})?$');
            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
            var result = '';

            if (!base64Matcher.test(base64String)) {
              throw new Error('Non base64 encoded input passed to window.atob polyfill');
            }

            i = 0;

            do {
              b1 = characters.indexOf(base64String.charAt(i++));
              b2 = characters.indexOf(base64String.charAt(i++));
              b3 = characters.indexOf(base64String.charAt(i++));
              b4 = characters.indexOf(base64String.charAt(i++));
              a = (b1 & 0x3F) << 2 | b2 >> 4 & 0x3;
              b = (b2 & 0xF) << 4 | b3 >> 2 & 0xF;
              c = (b3 & 0x3) << 6 | b4 & 0x3F;
              result += String.fromCharCode(a) + (b ? String.fromCharCode(b) : '') + (c ? String.fromCharCode(c) : '');
            } while (i < base64String.length);

            return result;
          }

          module.exports = {
            atob: function atob(base64String) {
              return atobNormalized.call(global, base64String);
            },
            _atob: atob
          };
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    208: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var Promise = global.Promise || require('promise-polyfill');

          module.exports = Promise;
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "promise-polyfill": 186
    }],
    209: [function (require, module, exports) {
      'use strict';

      module.exports = function (string) {
        if (typeof string !== 'string') {
          return '';
        }

        return string.replace(/</g, '&lt;').replace(/>/g, '&gt;');
      };
    }, {}],
    210: [function (require, module, exports) {
      'use strict';

      module.exports = function () {
        var el = document.createElement('div');
        var prop = 'flex-basis: 1px';
        var prefixes = ['-webkit-', '-moz-', '-ms-', '-o-', ''];
        prefixes.forEach(function (prefix) {
          el.style.cssText += prefix + prop;
        });
        return Boolean(el.style.length);
      };
    }, {}],
    211: [function (require, module, exports) {
      'use strict';

      var assign = require('./assign').assign;

      var threeDSecure = require('braintree-web/three-d-secure');

      var DEFAULT_ACS_WINDOW_SIZE = '03';
      var PASSTHROUGH_EVENTS = ['customer-canceled', 'authentication-modal-render', 'authentication-modal-close'];

      function ThreeDSecure(client, model) {
        this._client = client;
        this._model = model;
        this._config = assign({}, model.merchantConfiguration.threeDSecure);
      }

      ThreeDSecure.prototype.initialize = function () {
        var self = this;
        var options = {
          client: this._client,
          version: 2
        };

        if (this._config.cardinalSDKConfig) {
          options.cardinalSDKConfig = this._config.cardinalSDKConfig;
        }

        return threeDSecure.create(options).then(function (instance) {
          self._instance = instance;
          PASSTHROUGH_EVENTS.forEach(function (eventName) {
            self._instance.on(eventName, function (event) {
              self._model._emit('3ds:' + eventName, event);
            });
          });
        });
      };

      ThreeDSecure.prototype.verify = function (payload, merchantProvidedData) {
        var verifyOptions = assign({
          amount: this._config.amount
        }, merchantProvidedData, {
          nonce: payload.nonce,
          bin: payload.details.bin,
          // TODO in the future, we will allow
          // merchants to pass in a custom
          // onLookupComplete hook
          onLookupComplete: function onLookupComplete(data, next) {
            next();
          }
        });
        verifyOptions.additionalInformation = verifyOptions.additionalInformation || {};
        verifyOptions.additionalInformation.acsWindowSize = verifyOptions.additionalInformation.acsWindowSize || DEFAULT_ACS_WINDOW_SIZE;
        return this._instance.verifyCard(verifyOptions);
      };

      ThreeDSecure.prototype.updateConfiguration = function (key, value) {
        this._config[key] = value;
      };

      ThreeDSecure.prototype.teardown = function () {
        return this._instance.teardown();
      };

      module.exports = ThreeDSecure;
    }, {
      "./assign": 197,
      "braintree-web/three-d-secure": 147
    }],
    212: [function (require, module, exports) {
      'use strict';

      var browserDetection = require('./browser-detection');

      function isHidden(element) {
        if (!element) {
          // no parentNode, so nothing containing the element is hidden
          return false;
        }

        if (element.style.display === 'none') {
          return true;
        }

        return isHidden(element.parentNode);
      }

      function onTransitionEnd(element, propertyName, callback) {
        if (browserDetection.isIe9() || isHidden(element)) {
          callback();
          return;
        }

        function transitionEventListener(event) {
          if (event.propertyName === propertyName) {
            element.removeEventListener('transitionend', transitionEventListener);
            callback();
          }
        }

        element.addEventListener('transitionend', transitionEventListener);
      }

      module.exports = {
        onTransitionEnd: onTransitionEnd
      };
    }, {
      "./browser-detection": 198
    }],
    213: [function (require, module, exports) {
      'use strict';

      var Promise = require('./promise');

      function delay(time) {
        time = time || 0;
        return new Promise(function (resolve) {
          window.setTimeout(resolve, time);
        });
      }

      module.exports = {
        delay: delay
      };
    }, {
      "./promise": 208
    }],
    214: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "الدفع باستخدام {{paymentSource}}",
        "chooseAnotherWayToPay": "اختر طريقة دفع أخرى",
        "chooseAWayToPay": "اختر طريقة الدفع",
        "otherWaysToPay": "طرق أخرى للدفع",
        "edit": "تحرير",
        "doneEditing": "تم",
        "editPaymentMethods": "تحرير طرق الدفع",
        "CreditCardDeleteConfirmationMessage": "هل تريد حذف البطاقة ({{secondaryIdentifier}}) التي تنتهي بالرقم {{identifier}}؟",
        "PayPalAccountDeleteConfirmationMessage": "هل تريد حذف حساب {{identifier}} على PayPal؟",
        "VenmoAccountDeleteConfirmationMessage": "هل تريد فعلاً حذف حساب Venmo الذي يحمل اسم المستخدم {{identifier}}؟",
        "genericDeleteConfirmationMessage": "هل تريد فعلاً حذف طريقة الدفع هذه؟",
        "deleteCancelButton": "إلغاء",
        "deleteConfirmationButton": "حذف",
        "fieldEmptyForCvv": "يرجى إدخال رمز حماية البطاقة.",
        "fieldEmptyForExpirationDate": "يرجى إدخال تاريخ انتهاء الصلاحية.",
        "fieldEmptyForCardholderName": "يرجى إدخال اسم صاحب البطاقة.",
        "fieldTooLongForCardholderName": "يجب أن يقل اسم صاحب البطاقة عن 256 حرفاً.",
        "fieldEmptyForNumber": "يرجى إدخال رقم.",
        "fieldEmptyForPostalCode": "يرجى إدخال الرمز البريدي.",
        "fieldInvalidForCardholderName": "اسم حامل البطاقة غير صحيح.",
        "fieldInvalidForCvv": "رمز الحماية هذا غير صحيح.",
        "fieldInvalidForExpirationDate": "تاريخ انتهاء الصلاحية هذا غير صحيح.",
        "fieldInvalidForNumber": "رقم هذه البطاقة غير صحيح.",
        "fieldInvalidForPostalCode": "الرمز البريدي هذا غير صحيح.",
        "genericError": "وقع خطأ ما من جانبنا.",
        "hostedFieldsTokenizationFailOnDuplicateError": "هذه البطاقة الائتمانية موجودة حالياً كطريقة دفع محفوظة.",
        "hostedFieldsFailedTokenizationError": "يرجى مراجعة بياناتك وإعادة المحاولة.",
        "hostedFieldsFieldsInvalidError": "يرجى مراجعة بياناتك وإعادة المحاولة.",
        "hostedFieldsTokenizationNetworkErrorError": "خطأ في الشبكة. يرجى إعادة المحاولة.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "فشلت مصادقة بطاقة الائتمان. يرجى مراجعة بياناتك وإعادة المحاولة.",
        "paypalButtonMustBeUsed": "استخدم زر PayPal لاستئناف الدفع.",
        "paypalAccountTokenizationFailedError": "وقع خطأ أثناء إضافة حساب PayPal. يرجى إعادة المحاولة.",
        "paypalFlowFailedError": "وقع خطأ أثناء الاتصال بـ PayPal. يرجى إعادة المحاولة.",
        "paypalTokenizationRequestActiveError": "تفويض الدفع عبر PayPal قيد التنفيذ.",
        "venmoCanceledError": "وقع خطأ ما. تأكد أن أحدث إصدار من تطبيق Venmo مثبت في جهازك وأن متصفحك يدعم التبديل إلى Venmo.",
        "vaultManagerPaymentMethodDeletionError": "فشل حذف طريقة الدفع. أعد المحاولة.",
        "venmoAppFailedError": "تطبيق Venmo غير موجود في جهازك.",
        "unsupportedCardTypeError": "نوع هذه البطاقة غير مدعوم. يرجى استخدام بطاقة أخرى.",
        "applePayTokenizationError": "وقع خطأ في الشبكة أثناء معالجة الدفع عبر Apple Pay. يرجى إعادة المحاولة.",
        "applePayActiveCardError": "إضافة بطاقة مدعومة إلى محفظة Apple Pay.",
        "cardholderNameLabel": "اسم صاحب البطاقة",
        "cardNumberLabel": "رقم البطاقة",
        "cvvLabel": "رمز حماية البطاقة",
        "cvvThreeDigitLabelSubheading": "(3 أرقام)",
        "cvvFourDigitLabelSubheading": "(4 أرقام)",
        "cardholderNamePlaceholder": "اسم صاحب البطاقة",
        "expirationDateLabel": "تاريخ انتهاء الصلاحية",
        "expirationDateLabelSubheading": "(MM/YY)",
        "expirationDatePlaceholder": "MM/YY",
        "postalCodeLabel": "الرمز البريدي",
        "saveCardLabel": "حفظ البطاقة",
        "payWithCard": "الدفع باستخدام بطاقة",
        "endingIn": "التي تنتهي بالرقم {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "بطاقة",
        "PayPal": "Paypal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    215: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Způsob platby: {{paymentSource}}",
        "chooseAnotherWayToPay": "Vybrat jiný způsob platby",
        "chooseAWayToPay": "Vybrat způsob platby",
        "otherWaysToPay": "Jiné způsoby platby",
        "edit": "Upravit",
        "doneEditing": "Hotovo",
        "editPaymentMethods": "Upravit způsoby platby",
        "CreditCardDeleteConfirmationMessage": "Chcete kartu {{secondaryIdentifier}} s koncovým číslem {{identifier}} odstranit?",
        "PayPalAccountDeleteConfirmationMessage": "Chcete účet {{identifier}} ve službě PayPal odstranit?",
        "VenmoAccountDeleteConfirmationMessage": "Opravdu chcete účet Venmo s uživatelským jménem {{identifier}} odstranit?",
        "genericDeleteConfirmationMessage": "Opravdu chcete tento způsob platby odstranit?",
        "deleteCancelButton": "Zrušit",
        "deleteConfirmationButton": "Odstranit",
        "fieldEmptyForCvv": "Vyplňte kód CVV.",
        "fieldEmptyForExpirationDate": "Vyplňte datum vypršení platnosti.",
        "fieldEmptyForCardholderName": "Vyplňte jméno držitele karty.",
        "fieldTooLongForCardholderName": "Jméno držitele karty musí obsahovat méně než 256 znaků.",
        "fieldEmptyForNumber": "Vyplňte číslo.",
        "fieldEmptyForPostalCode": "Vyplňte PSČ.",
        "fieldInvalidForCardholderName": "Toto jméno držitele karty není platné.",
        "fieldInvalidForCvv": "Tento bezpečnostní kód není platný.",
        "fieldInvalidForExpirationDate": "Toto datum vypršení platnosti není platné.",
        "fieldInvalidForNumber": "Toto číslo karty není platné.",
        "fieldInvalidForPostalCode": "Toto PSČ není platné.",
        "genericError": "Došlo k chybě na naší straně.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Tato kreditní karta je již jako způsob platby uložena.",
        "hostedFieldsFailedTokenizationError": "Zkontrolujte zadané údaje a zkuste to znovu.",
        "hostedFieldsFieldsInvalidError": "Zkontrolujte zadané údaje a zkuste to znovu.",
        "hostedFieldsTokenizationNetworkErrorError": "Došlo k chybě sítě. Zkuste to znovu.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Ověření kreditní karty se nezdařilo. Zkontrolujte zadané údaje a zkuste to znovu.",
        "paypalButtonMustBeUsed": "Chcete-li přejít k platbě, použijte tlačítko PayPal.",
        "paypalAccountTokenizationFailedError": "Při přidávání účtu PayPal došlo k chybě. Zkuste to znovu.",
        "paypalFlowFailedError": "Při připojování ke službě PayPal došlo k chybě. Zkuste to znovu.",
        "paypalTokenizationRequestActiveError": "Autorizace platby přes PayPal již probíhá.",
        "venmoCanceledError": "Došlo k chybě. Zkontrolujte, zda máte v zařízení nainstalovanou nejnovější verzi aplikace Venmo a zda prohlížeč přechod na aplikaci Venmo podporuje.",
        "vaultManagerPaymentMethodDeletionError": "Způsob platby se nepodařilo odstranit. Zkuste to znovu.",
        "venmoAppFailedError": "Aplikaci Venmo se ve vašem zařízení nepodařilo najít.",
        "unsupportedCardTypeError": "Tento typ karty není podporován. Vyzkoušejte jinou kartu.",
        "applePayTokenizationError": "Při zpracování platby přes Apple Pay došlo k chybě sítě. Zkuste to znovu.",
        "applePayActiveCardError": "Přidejte si podporovanou kartu do peněženky Apple Pay.",
        "cardholderNameLabel": "Jméno držitele karty",
        "cardNumberLabel": "Číslo karty",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 číslice)",
        "cvvFourDigitLabelSubheading": "(4 číslice)",
        "cardholderNamePlaceholder": "Jméno držitele karty",
        "expirationDateLabel": "Datum vypršení platnosti",
        "expirationDateLabelSubheading": "(MM/RR)",
        "expirationDatePlaceholder": "MM/RR",
        "postalCodeLabel": "PSČ",
        "saveCardLabel": "Uložit kartu",
        "payWithCard": "Zaplatit kartou",
        "endingIn": "Koncové číslo: {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Karta",
        "PayPal": "Společnost PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    216: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Betaler med {{paymentSource}}",
        "chooseAnotherWayToPay": "Vælg en anden betalingsmetode",
        "chooseAWayToPay": "Vælg, hvordan du vil betale",
        "otherWaysToPay": "Andre betalingsmetoder",
        "edit": "Rediger",
        "doneEditing": "Udført",
        "editPaymentMethods": "Rediger betalingsmetoder",
        "CreditCardDeleteConfirmationMessage": "Vil du slette {{secondaryIdentifier}}-kortet, der slutter på {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Vil du slette PayPal-kontoen {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Er du sikker på, at du vil slette Venmo-kontoen med brugernavnet {{identifier}}?",
        "genericDeleteConfirmationMessage": "Er du sikker på, at du vil slette denne betalingsmetode?",
        "deleteCancelButton": "Annuller",
        "deleteConfirmationButton": "Slet",
        "fieldEmptyForCvv": "Du skal angive kontrolcifrene.",
        "fieldEmptyForExpirationDate": "Du skal angive udløbsdatoen.",
        "fieldEmptyForCardholderName": "Du skal angive kortindehaverens navn.",
        "fieldTooLongForCardholderName": "Kortejerens navn skal være mindre end 256 tegn.",
        "fieldEmptyForNumber": "Du skal angive et nummer.",
        "fieldEmptyForPostalCode": "Du skal angive et postnummer.",
        "fieldInvalidForCardholderName": "Kortindehaverens navn er ugyldigt.",
        "fieldInvalidForCvv": "Sikkerhedskoden er ugyldig.",
        "fieldInvalidForExpirationDate": "Udløbsdatoen er ugyldig.",
        "fieldInvalidForNumber": "Kortnummeret er ugyldigt.",
        "fieldInvalidForPostalCode": "Postnummeret er ugyldigt.",
        "genericError": "Der opstod en fejl.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Dette betalingskort er allerede en gemt betalingsmetode.",
        "hostedFieldsFailedTokenizationError": "Tjek oplysningerne, og prøv igen.",
        "hostedFieldsFieldsInvalidError": "Tjek oplysningerne, og prøv igen.",
        "hostedFieldsTokenizationNetworkErrorError": "Netværksfejl. Prøv igen.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Betalingskortet blev ikke bekræftet. Tjek oplysningerne, og prøv igen.",
        "paypalButtonMustBeUsed": "Brug PayPal-knappen for at fortsætte med din betaling.",
        "paypalAccountTokenizationFailedError": "PayPal-kontoen blev ikke tilføjet. Prøv igen.",
        "paypalFlowFailedError": "Der kunne ikke oprettes forbindelse til PayPal. Prøv igen.",
        "paypalTokenizationRequestActiveError": "PayPal-betalingen er i gang med at blive autoriseret.",
        "venmoCanceledError": "Der opstod en fejl. Sørg for, at du har den seneste version af Venmo-appen installeret på din enhed, og at din browser understøtter skift til Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Vi kunne ikke slette betalingsmetoden. Prøv igen.",
        "venmoAppFailedError": "Venmo-appen blev ikke fundet på din enhed.",
        "unsupportedCardTypeError": "Korttypen understøttes ikke. Prøv et andet kort.",
        "applePayTokenizationError": "Der opstod en netværksfejl under behandlingen af betalingen med Apple Pay. Prøv igen.",
        "applePayActiveCardError": "Knyt et understøttet kort til din Apple Pay-e-pung.",
        "cardholderNameLabel": "Kortindehaverens navn",
        "cardNumberLabel": "Kortnummer",
        "cvvLabel": "Kontrolcifre",
        "cvvThreeDigitLabelSubheading": "(3 cifre)",
        "cvvFourDigitLabelSubheading": "(4 cifre)",
        "cardholderNamePlaceholder": "Kortindehaverens navn",
        "expirationDateLabel": "Udløbsdato",
        "expirationDateLabelSubheading": "(MM/ÅÅ)",
        "expirationDatePlaceholder": "MM/ÅÅ",
        "postalCodeLabel": "Postnummer",
        "saveCardLabel": "Gem kort",
        "payWithCard": "Betal med kort",
        "endingIn": "Der slutter på {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Kort",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    217: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Zahlen mit {{paymentSource}}",
        "chooseAnotherWayToPay": "Andere Zahlungsmethode wählen",
        "chooseAWayToPay": "Wie möchten Sie bezahlen?",
        "otherWaysToPay": "Andere Zahlungsmethoden",
        "edit": "Bearbeiten",
        "doneEditing": "Fertig",
        "editPaymentMethods": "Zahlungsquellen bearbeiten",
        "CreditCardDeleteConfirmationMessage": "{{secondaryIdentifier}} Karte mit den Endziffern {{identifier}} löschen?",
        "PayPalAccountDeleteConfirmationMessage": "PayPal-Konto {{identifier}} löschen?",
        "VenmoAccountDeleteConfirmationMessage": "Wollen Sie das Venmo-Konto mit dem Benutzernamen {{identifier}} wirklich löschen?",
        "genericDeleteConfirmationMessage": "Wollen Sie diese Zahlungsquelle wirklich löschen?",
        "deleteCancelButton": "Abbrechen",
        "deleteConfirmationButton": "Löschen",
        "fieldEmptyForCvv": "Geben Sie die Kartenprüfnummer ein.",
        "fieldEmptyForExpirationDate": "Geben Sie das Ablaufdatum ein.",
        "fieldEmptyForCardholderName": "Geben Sie den Namen des Karteninhabers ein.",
        "fieldTooLongForCardholderName": "Der Name des Karteninhabers darf 255 Zeichen nicht übersteigen.",
        "fieldEmptyForNumber": "Geben Sie die Nummer ein.",
        "fieldEmptyForPostalCode": "Geben Sie die PLZ ein.",
        "fieldInvalidForCardholderName": "Der Name des Karteninhabers ist nicht gültig.",
        "fieldInvalidForCvv": "Die Kartenprüfnummer ist ungültig.",
        "fieldInvalidForExpirationDate": "Das Ablaufdatum ist ungültig.",
        "fieldInvalidForNumber": "Die Kreditkartennummer ist ungültig.",
        "fieldInvalidForPostalCode": "Die PLZ ist ungültig.",
        "genericError": "Bei uns ist ein Problem aufgetreten.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Diese Kreditkarte ist bereits als gespeicherte Zahlungsmethode vorhanden.",
        "hostedFieldsFailedTokenizationError": "Überprüfen Sie Ihre Eingabe und versuchen Sie es erneut.",
        "hostedFieldsFieldsInvalidError": "Überprüfen Sie Ihre Eingabe und versuchen Sie es erneut.",
        "hostedFieldsTokenizationNetworkErrorError": "Netzwerkfehler. Versuchen Sie es erneut.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Überprüfung der Karte fehlgeschlagen. Überprüfen Sie Ihre Eingabe und versuchen Sie es erneut.",
        "paypalButtonMustBeUsed": "Verwenden Sie den PayPal-Button, um mit der Zahlung fortfahren.",
        "paypalAccountTokenizationFailedError": "Beim Hinzufügen des PayPal-Kontos ist ein Problem aufgetreten. Versuchen Sie es erneut.",
        "paypalFlowFailedError": "Beim Verbinden mit PayPal ist ein Problem aufgetreten. Versuchen Sie es erneut.",
        "paypalTokenizationRequestActiveError": "Die PayPal-Zahlung wird bereits autorisiert.",
        "venmoCanceledError": "Etwas ist schief gelaufen. Vergewissern Sie sich, dass Sie die neueste Version der Venmo-App auf Ihrem Gerät installiert haben und Ihr Browser den Wechsel zu Venmo unterstützt.",
        "vaultManagerPaymentMethodDeletionError": "Die Zahlungsquelle konnte nicht gelöscht werden. Versuchen Sie es erneut.",
        "venmoAppFailedError": "Die Venmo-App wurde auf Ihrem Gerät nicht gefunden.",
        "unsupportedCardTypeError": "Dieser Kreditkartentyp wird nicht unterstützt. Versuchen Sie es mit einer anderen Karte.",
        "applePayTokenizationError": "Netzwerkfehler bei der Zahlungsabwicklung mit Apple Pay. Versuchen Sie es erneut.",
        "applePayActiveCardError": "Fügen Sie der Apple-Pay-Börse eine unterstützte Kreditkarte hinzu.",
        "cardholderNameLabel": "Name des Karteninhabers",
        "cardNumberLabel": "Kartennummer",
        "cvvLabel": "Prüfnr.",
        "cvvThreeDigitLabelSubheading": "(3-stellig)",
        "cvvFourDigitLabelSubheading": "(4-stellig)",
        "cardholderNamePlaceholder": "Name des Karteninhabers",
        "expirationDateLabel": "Gültig bis",
        "expirationDateLabelSubheading": "(MM/JJ)",
        "expirationDatePlaceholder": "MM/JJ",
        "postalCodeLabel": "PLZ",
        "saveCardLabel": "Karte speichern",
        "payWithCard": "Mit Kreditkarte zahlen",
        "endingIn": "Mit den Endziffern {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Kreditkarte",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    218: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Πληρωμή μέσω {{paymentSource}}",
        "chooseAnotherWayToPay": "Επιλέξτε έναν άλλον τρόπο πληρωμής",
        "chooseAWayToPay": "Επιλογή τρόπου πληρωμής",
        "otherWaysToPay": "Άλλοι τρόποι πληρωμής",
        "edit": "Επεξεργασία",
        "doneEditing": "Τέλος",
        "editPaymentMethods": "Επεξεργασία μεθόδων πληρωμής",
        "CreditCardDeleteConfirmationMessage": "Διαγραφή κάρτας {{secondaryIdentifier}} που λήγει σε {{identifier}};",
        "PayPalAccountDeleteConfirmationMessage": "Διαγραφή λογαριασμού PayPal {{identifier}};",
        "VenmoAccountDeleteConfirmationMessage": "Θέλετε σίγουρα να διαγράψετε τον λογαριασμό Venmo με το όνομα χρήστη {{identifier}};",
        "genericDeleteConfirmationMessage": "Θέλετε σίγουρα να διαγράψετε αυτήν τη μέθοδο πληρωμής;",
        "deleteCancelButton": "Ακύρωση",
        "deleteConfirmationButton": "Διαγραφή",
        "fieldEmptyForCvv": "Συμπληρώστε έναν CVV.",
        "fieldEmptyForExpirationDate": "Συμπληρώστε ημερομηνία λήξης.",
        "fieldEmptyForCardholderName": "Συμπληρώστε το όνομα ενός κατόχου κάρτας.",
        "fieldTooLongForCardholderName": "Το όνομα του κατόχου της κάρτας πρέπει να περιέχει λιγότερους από 256 χαρακτήρες.",
        "fieldEmptyForNumber": "Συμπληρώστε έναν αριθμό.",
        "fieldEmptyForPostalCode": "Συμπληρώστε έναν ταχυδρομικό κώδικα.",
        "fieldInvalidForCardholderName": "Αυτό το όνομα κατόχου κάρτας δεν είναι έγκυρο.",
        "fieldInvalidForCvv": "Αυτός ο κωδικός ασφαλείας δεν είναι έγκυρος.",
        "fieldInvalidForExpirationDate": "Αυτή η ημερομηνία λήξης δεν είναι έγκυρη.",
        "fieldInvalidForNumber": "Αυτός ο αριθμός κάρτας δεν είναι έγκυρος.",
        "fieldInvalidForPostalCode": "Αυτός ο ταχυδρομικός κώδικας δεν είναι έγκυρος.",
        "genericError": "Προέκυψε ένα πρόβλημα στο σύστημά μας.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Αυτή η πιστωτική κάρτα υπάρχει ήδη ως αποθηκευμένη μέθοδος πληρωμής.",
        "hostedFieldsFailedTokenizationError": "Ελέγξτε τα στοιχεία σας και δοκιμάστε ξανά.",
        "hostedFieldsFieldsInvalidError": "Ελέγξτε τα στοιχεία σας και δοκιμάστε ξανά.",
        "hostedFieldsTokenizationNetworkErrorError": "Σφάλμα δικτύου. Δοκιμάστε ξανά.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Η επαλήθευση της πιστωτικής κάρτας απέτυχε. Ελέγξτε τα στοιχεία σας και δοκιμάστε ξανά.",
        "paypalButtonMustBeUsed": "Χρησιμοποιήστε το κουμπί PayPal για να συνεχίσετε με την πληρωμή.",
        "paypalAccountTokenizationFailedError": "Προέκυψε κάποιο πρόβλημα με την προσθήκη του λογαριασμού PayPal. Δοκιμάστε ξανά.",
        "paypalFlowFailedError": "Προέκυψε κάποιο πρόβλημα με τη σύνδεση στην PayPal. Δοκιμάστε ξανά.",
        "paypalTokenizationRequestActiveError": "Η εξουσιοδότηση πληρωμής PayPal βρίσκεται ήδη σε εξέλιξη.",
        "venmoCanceledError": "Προέκυψε πρόβλημα. Βεβαιωθείτε ότι έχετε την πιο πρόσφατη έκδοση της εφαρμογής Venmo εγκατεστημένη στη συσκευή σας και ότι το πρόγραμμα περιήγησής σας υποστηρίζει τη μετάβαση στη Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Η διαγραφή της μεθόδου πληρωμής είναι αδύνατη, δοκιμάστε ξανά.",
        "venmoAppFailedError": "Η εφαρμογή Venmo δεν βρέθηκε στη συσκευή σας.",
        "unsupportedCardTypeError": "Αυτός ο τύπος κάρτας δεν υποστηρίζεται. Δοκιμάστε άλλη κάρτα.",
        "applePayTokenizationError": "Προέκυψε σφάλμα δικτύου κατά την επεξεργασία της πληρωμής μέσω Apple Pay. Δοκιμάστε ξανά.",
        "applePayActiveCardError": "Προσθέστε μια υποστηριζόμενη κάρτα στο πορτοφόλι Apple Pay.",
        "cardholderNameLabel": "Όνομα κατόχου κάρτας",
        "cardNumberLabel": "Αριθμός κάρτας",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 ψηφία)",
        "cvvFourDigitLabelSubheading": "(4 ψηφία)",
        "cardholderNamePlaceholder": "Όνομα κατόχου κάρτας",
        "expirationDateLabel": "Ημερομηνία λήξης",
        "expirationDateLabelSubheading": "(ΜΜ/ΕΕ)",
        "expirationDatePlaceholder": "MM/ΕΕ",
        "postalCodeLabel": "Ταχυδρομικός κώδικας",
        "saveCardLabel": "Αποθήκευση κάρτας",
        "payWithCard": "Πληρωμή με κάρτα",
        "endingIn": "που λήγει σε {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Κάρτα",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    219: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Paying with {{paymentSource}}",
        "chooseAnotherWayToPay": "Choose another way to pay",
        "chooseAWayToPay": "Choose a way to pay",
        "otherWaysToPay": "Other ways to pay",
        "edit": "Edit",
        "doneEditing": "Done",
        "editPaymentMethods": "Edit payment methods",
        "CreditCardDeleteConfirmationMessage": "Delete {{secondaryIdentifier}} card ending in {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Delete PayPal account {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Are you sure you want to delete the Venmo account with username {{identifier}}?",
        "genericDeleteConfirmationMessage": "Are you sure you want to delete this payment method?",
        "deleteCancelButton": "Cancel",
        "deleteConfirmationButton": "Delete",
        "fieldEmptyForCvv": "Please fill out a CVV.",
        "fieldEmptyForExpirationDate": "Please fill out an expiry date.",
        "fieldEmptyForCardholderName": "Please fill out a cardholder name.",
        "fieldTooLongForCardholderName": "Cardholder name must be less than 256 characters.",
        "fieldEmptyForNumber": "Please fill out a number.",
        "fieldEmptyForPostalCode": "Please fill out a postcode.",
        "fieldInvalidForCardholderName": "This cardholder name isn't valid.",
        "fieldInvalidForCvv": "This security code is not valid.",
        "fieldInvalidForExpirationDate": "This expiry date is not valid.",
        "fieldInvalidForNumber": "This card number is not valid.",
        "fieldInvalidForPostalCode": "This postcode is not valid.",
        "genericError": "Something went wrong on our end.",
        "hostedFieldsTokenizationFailOnDuplicateError": "This credit card already exists as a saved payment method.",
        "hostedFieldsFailedTokenizationError": "Check your entries and try again.",
        "hostedFieldsFieldsInvalidError": "Check your entries and try again.",
        "hostedFieldsTokenizationNetworkErrorError": "Network error. Please try again.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Credit card verification failed. Check your entries and try again.",
        "paypalButtonMustBeUsed": "Use the PayPal button to continue with your payment.",
        "paypalAccountTokenizationFailedError": "Something went wrong while adding the PayPal account. Please try again.",
        "paypalFlowFailedError": "Something went wrong while connecting to PayPal. Please try again.",
        "paypalTokenizationRequestActiveError": "PayPal payment authorisation is already in progress.",
        "venmoCanceledError": "We're sorry, something seems to have gone wrong. Please ensure you have the most recent version of the Venmo app installed on your device and your browser supports switching to Venmo.",
        "vaultManagerPaymentMethodDeletionError": "We're sorry. We couldn't delete that payment method. Please try again.",
        "venmoAppFailedError": "The Venmo app wasn't found on your device.",
        "unsupportedCardTypeError": "This card type is not supported. Please try another card.",
        "applePayTokenizationError": "A network error occurred while processing the Apple Pay payment. Please try again.",
        "applePayActiveCardError": "Link a supported card to your Apple Pay Wallet.",
        "cardholderNameLabel": "Cardholder Name",
        "cardNumberLabel": "Card Number",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 digits)",
        "cvvFourDigitLabelSubheading": "(4 digits)",
        "cardholderNamePlaceholder": "Cardholder Name",
        "expirationDateLabel": "Expiry date",
        "expirationDateLabelSubheading": "(MM/YY)",
        "expirationDatePlaceholder": "MM/YY",
        "postalCodeLabel": "Postcode",
        "saveCardLabel": "Save card",
        "payWithCard": "Pay with credit or debit card",
        "endingIn": "Ending in {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Card",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    220: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Paying with {{paymentSource}}",
        "chooseAnotherWayToPay": "Choose another way to pay",
        "chooseAWayToPay": "Choose a way to pay",
        "otherWaysToPay": "Other ways to pay",
        "edit": "Edit",
        "doneEditing": "Done",
        "editPaymentMethods": "Edit funding sources",
        "CreditCardDeleteConfirmationMessage": "Delete {{secondaryIdentifier}} card ending in {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Delete PayPal account {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Are you sure you want to delete the Venmo account with username {{identifier}}?",
        "genericDeleteConfirmationMessage": "Are you sure you want to delete this funding source?",
        "deleteCancelButton": "Cancel",
        "deleteConfirmationButton": "Delete",
        "fieldEmptyForCvv": "Please fill in a CSC.",
        "fieldEmptyForExpirationDate": "Please fill in an expiry date.",
        "fieldEmptyForCardholderName": "Please fill in a cardholder name.",
        "fieldTooLongForCardholderName": "Cardholder name must be less than 256 characters.",
        "fieldEmptyForNumber": "Please fill in a number.",
        "fieldEmptyForPostalCode": "Please fill in a postcode.",
        "fieldInvalidForCardholderName": "This cardholder name isn't valid.",
        "fieldInvalidForCvv": "This security code is not valid.",
        "fieldInvalidForExpirationDate": "This expiry date is not valid.",
        "fieldInvalidForNumber": "This card number is not valid.",
        "fieldInvalidForPostalCode": "This postcode is not valid.",
        "genericError": "Something went wrong on our end.",
        "hostedFieldsTokenizationFailOnDuplicateError": "This credit card has already been added to your account as a funding source.",
        "hostedFieldsFailedTokenizationError": "Please check your information and try again.",
        "hostedFieldsFieldsInvalidError": "Please check your information and try again.",
        "hostedFieldsTokenizationNetworkErrorError": "Network error. Please try again.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Credit card verification failed. Please check your information and try again.",
        "paypalButtonMustBeUsed": "Use the PayPal button to continue with your payment.",
        "paypalAccountTokenizationFailedError": "Something went wrong while adding the PayPal account. Please try again.",
        "paypalFlowFailedError": "Something went wrong while connecting to PayPal. Please try again.",
        "paypalTokenizationRequestActiveError": "PayPal payment authorisation is already in progress.",
        "venmoCanceledError": "We're sorry, something seems to have gone wrong. Make sure you have the most recent version of the Venmo app installed on your device and your browser supports the switch to Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Unable to delete funding source, try again.",
        "venmoAppFailedError": "The Venmo app isn't on your device.",
        "unsupportedCardTypeError": "This card type is not supported. Please try another card.",
        "applePayTokenizationError": "A network error occurred while processing the Apple Pay payment. Please try again.",
        "applePayActiveCardError": "Add a supported card to your Apple Pay wallet.",
        "cardholderNameLabel": "Cardholder name",
        "cardNumberLabel": "Card number",
        "cvvLabel": "CSC",
        "cvvThreeDigitLabelSubheading": "(3 digits)",
        "cvvFourDigitLabelSubheading": "(4 digits)",
        "cardholderNamePlaceholder": "Cardholder name",
        "expirationDateLabel": "Expiry date",
        "expirationDateLabelSubheading": "(MM/YY)",
        "expirationDatePlaceholder": "MM/YY",
        "postalCodeLabel": "Postcode",
        "saveCardLabel": "Save card",
        "payWithCard": "Pay with card",
        "endingIn": "Ending in {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Card",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    221: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Paying with {{paymentSource}}",
        "chooseAnotherWayToPay": "Choose another way to pay",
        "chooseAWayToPay": "Choose a way to pay",
        "otherWaysToPay": "Other ways to pay",
        "edit": "Edit",
        "doneEditing": "Done",
        "editPaymentMethods": "Edit payment methods",
        "CreditCardDeleteConfirmationMessage": "Delete {{secondaryIdentifier}} card ending in {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Delete PayPal account {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Are you sure you want to delete the Venmo account with username {{identifier}}?",
        "genericDeleteConfirmationMessage": "Are you sure you want to delete this payment method?",
        "deleteCancelButton": "Cancel",
        "deleteConfirmationButton": "Delete",
        "fieldEmptyForCvv": "Please enter a CVV.",
        "fieldEmptyForExpirationDate": "Please enter an expiry date.",
        "fieldEmptyForCardholderName": "Please enter a cardholder name.",
        "fieldTooLongForCardholderName": "Cardholder name must have less than 256 characters.",
        "fieldEmptyForNumber": "Please enter a number.",
        "fieldEmptyForPostalCode": "Please enter a PIN code.",
        "fieldInvalidForCardholderName": "This cardholder name isn't valid.",
        "fieldInvalidForCvv": "This security code isn't valid.",
        "fieldInvalidForExpirationDate": "This expiration date isn't valid.",
        "fieldInvalidForNumber": "This card number isn't valid.",
        "fieldInvalidForPostalCode": "This PIN code isn't valid.",
        "genericError": "We're sorry, something seems to have gone wrong.",
        "hostedFieldsTokenizationFailOnDuplicateError": "This credit card already exists as a saved payment method.",
        "hostedFieldsFailedTokenizationError": "Please check your information and try again.",
        "hostedFieldsFieldsInvalidError": "Please check your information and try again.",
        "hostedFieldsTokenizationNetworkErrorError": "Network error. Please try again.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Credit card verification failed. Please check your information and try again.",
        "paypalButtonMustBeUsed": "Use the PayPal button to continue with your payment.",
        "paypalAccountTokenizationFailedError": "Something went wrong adding the PayPal account. Please try again.",
        "paypalFlowFailedError": "Something went wrong connecting to PayPal. Please try again.",
        "paypalTokenizationRequestActiveError": "PayPal payment authorisation is already in progress.",
        "venmoCanceledError": "We're sorry, something seems to have gone wrong. Please ensure you have the most recent version of the Venmo app installed on your device and your browser supports switching to Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Unable to delete payment method. Please try again.",
        "venmoAppFailedError": "The Venmo app couldn't be found on your device.",
        "unsupportedCardTypeError": "This card type isn't supported. Please try another card.",
        "applePayTokenizationError": "A network error occurred while processing the Apple Pay payment. Please try again.",
        "applePayActiveCardError": "Add a supported card to your Apple Pay wallet.",
        "cardholderNameLabel": "Cardholder name",
        "cardNumberLabel": "Card number",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 digits)",
        "cvvFourDigitLabelSubheading": "(4 digits)",
        "cardholderNamePlaceholder": "Cardholder name",
        "expirationDateLabel": "Expiry date",
        "expirationDateLabelSubheading": "(MM/YY)",
        "expirationDatePlaceholder": "MM/YY",
        "postalCodeLabel": "PIN code",
        "saveCardLabel": "Save card",
        "payWithCard": "Pay with card",
        "endingIn": "Ending in {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Card",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    222: [function (require, module, exports) {
      'use strict';

      module.exports = {
        payingWith: 'Paying with {{paymentSource}}',
        chooseAnotherWayToPay: 'Choose another way to pay',
        chooseAWayToPay: 'Choose a way to pay',
        otherWaysToPay: 'Other ways to pay',
        edit: 'Edit',
        doneEditing: 'Done',
        editPaymentMethods: 'Edit payment methods',
        CreditCardDeleteConfirmationMessage: 'Delete {{secondaryIdentifier}} card ending in {{identifier}}?',
        PayPalAccountDeleteConfirmationMessage: 'Delete PayPal account {{identifier}}?',
        VenmoAccountDeleteConfirmationMessage: 'Are you sure you want to delete Venmo account with username {{identifier}}?',
        genericDeleteConfirmationMessage: 'Are you sure you want to delete this payment method?',
        deleteCancelButton: 'Cancel',
        deleteConfirmationButton: 'Delete',
        // Errors
        fieldEmptyForCvv: 'Please fill out a CVV.',
        fieldEmptyForExpirationDate: 'Please fill out an expiration date.',
        fieldEmptyForCardholderName: 'Please fill out a cardholder name.',
        fieldEmptyForNumber: 'Please fill out a card number.',
        fieldEmptyForPostalCode: 'Please fill out a postal code.',
        fieldInvalidForCardholderName: 'This cardholder name is not valid.',
        fieldInvalidForCvv: 'This security code is not valid.',
        fieldInvalidForExpirationDate: 'This expiration date is not valid.',
        fieldInvalidForNumber: 'This card number is not valid.',
        fieldInvalidForPostalCode: 'This postal code is not valid.',
        fieldTooLongForCardholderName: 'Cardholder name must be less than 256 characters.',
        genericError: 'Something went wrong on our end.',
        hostedFieldsTokenizationFailOnDuplicateError: 'This credit card already exists as a saved payment method.',
        hostedFieldsFailedTokenizationError: 'Please check your information and try again.',
        hostedFieldsTokenizationCvvVerificationFailedError: 'Credit card verification failed. Please check your information and try again.',
        hostedFieldsTokenizationNetworkErrorError: 'Network error. Please try again.',
        hostedFieldsFieldsInvalidError: 'Please check your information and try again.',
        paypalButtonMustBeUsed: 'Use the PayPal button to continue with your payment.',
        paypalAccountTokenizationFailedError: 'Something went wrong adding the PayPal account. Please try again.',
        paypalFlowFailedError: 'Something went wrong connecting to PayPal. Please try again.',
        paypalTokenizationRequestActiveError: 'PayPal payment authorization is already in progress.',
        applePayTokenizationError: 'A network error occurred while processing the Apple Pay payment. Please try again.',
        applePayActiveCardError: 'Add a supported card to your Apple Pay wallet.',
        vaultManagerPaymentMethodDeletionError: 'Unable to delete payment method, try again.',
        venmoCanceledError: 'Something went wrong. Ensure you have the most recent version of the Venmo app installed on your device and your browser supports switching to Venmo.',
        venmoAppFailedError: 'The Venmo app could not be found on your device.',
        unsupportedCardTypeError: 'This card type is not supported. Please try another card.',
        // Card form
        cardholderNameLabel: 'Cardholder Name',
        cardNumberLabel: 'Card Number',
        cvvLabel: 'CVV',
        cvvThreeDigitLabelSubheading: '(3 digits)',
        cvvFourDigitLabelSubheading: '(4 digits)',
        expirationDateLabel: 'Expiration Date',
        expirationDateLabelSubheading: '(MM/YY)',
        cardholderNamePlaceholder: 'Cardholder Name',
        expirationDatePlaceholder: 'MM/YY',
        postalCodeLabel: 'Postal Code',
        saveCardLabel: 'Save card',
        payWithCard: 'Pay with card',
        // Payment Method descriptions
        endingIn: 'Ending in {{lastFourCardDigits}}',
        Card: 'Card',
        PayPal: 'PayPal',
        'PayPal Credit': 'PayPal Credit',
        'Apple Pay': 'Apple Pay',
        'Google Pay': 'Google Pay',
        'Venmo': 'Venmo',
        'American Express': 'American Express',
        Discover: 'Discover',
        'Diners Club': 'Diners Club',
        MasterCard: 'Mastercard',
        Visa: 'Visa',
        JCB: 'JCB',
        Maestro: 'Maestro',
        UnionPay: 'UnionPay'
      };
    }, {}],
    223: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Pago con {{paymentSource}}",
        "chooseAnotherWayToPay": "Selecciona otra forma de pago.",
        "chooseAWayToPay": "Selecciona una forma de pago.",
        "otherWaysToPay": "Otras formas de pago",
        "edit": "Modificar",
        "doneEditing": "Hecho",
        "editPaymentMethods": "Editar formas de pago",
        "CreditCardDeleteConfirmationMessage": "¿Quieres eliminar la tarjeta {{secondaryIdentifier}} que termina en {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "¿Quieres eliminar la cuenta PayPal {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "¿Seguro de que deseas eliminar la cuenta de Venmo con nombre de usuario {{identifier}}?",
        "genericDeleteConfirmationMessage": "¿Seguro que deseas eliminar esta forma de pago?",
        "deleteCancelButton": "Cancelar",
        "deleteConfirmationButton": "Eliminar",
        "fieldEmptyForCvv": "Escribe el código CVV.",
        "fieldEmptyForExpirationDate": "Escribe la fecha de vencimiento.",
        "fieldEmptyForCardholderName": "Escribe el nombre de un titular de la tarjeta.",
        "fieldTooLongForCardholderName": "El nombre del titular de la tarjeta debe tener menos de 256 caracteres.",
        "fieldEmptyForNumber": "Escribe un número.",
        "fieldEmptyForPostalCode": "Escribe el código postal.",
        "fieldInvalidForCardholderName": "El nombre del titular de la tarjeta no es válido.",
        "fieldInvalidForCvv": "Este código de seguridad no es válido.",
        "fieldInvalidForExpirationDate": "Esta fecha de vencimiento no es válida.",
        "fieldInvalidForNumber": "Este número de tarjeta no es válido.",
        "fieldInvalidForPostalCode": "Este código postal no es válido.",
        "genericError": "Hemos tenido algún problema.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Esta tarjeta de crédito ya existe como forma de pago guardada.",
        "hostedFieldsFailedTokenizationError": "Comprueba la información e inténtalo de nuevo.",
        "hostedFieldsFieldsInvalidError": "Comprueba la información e inténtalo de nuevo.",
        "hostedFieldsTokenizationNetworkErrorError": "Error de red. Inténtalo de nuevo.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Error de verificación de la tarjeta de crédito. Comprueba la información e inténtalo de nuevo.",
        "paypalButtonMustBeUsed": "Utiliza el botón de PayPal para continuar con el pago.",
        "paypalAccountTokenizationFailedError": "Se ha producido un error al vincular la cuenta PayPal. Inténtalo de nuevo.",
        "paypalFlowFailedError": "Se ha producido un error al conectarse a PayPal. Inténtalo de nuevo.",
        "paypalTokenizationRequestActiveError": "Ya hay una autorización de pago de PayPal en curso.",
        "venmoCanceledError": "Ha habido un problema. Asegúrate de que tienes la versión más reciente de la aplicación de Venmo instalada en tu dispositivo y de que tu navegador es compatible con cambiar a Venmo.",
        "vaultManagerPaymentMethodDeletionError": "No se ha podido eliminar la forma de pago. Inténtalo de nuevo.",
        "venmoAppFailedError": "No se ha encontrado la aplicación de Venmo en tu dispositivo.",
        "unsupportedCardTypeError": "No se admite este tipo de tarjeta. Prueba con otra tarjeta.",
        "applePayTokenizationError": "Se ha producido un error de red al procesar el pago con Apple Pay. Inténtalo de nuevo.",
        "applePayActiveCardError": "Añade una tarjeta admitida a tu Wallet de Apple Pay.",
        "cardholderNameLabel": "Nombre del titular de la tarjeta",
        "cardNumberLabel": "Número de tarjeta",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 dígitos)",
        "cvvFourDigitLabelSubheading": "(4 dígitos)",
        "cardholderNamePlaceholder": "Nombre del titular de la tarjeta",
        "expirationDateLabel": "Fecha de vencimiento",
        "expirationDateLabelSubheading": "(MM/AA)",
        "expirationDatePlaceholder": "MM/AA",
        "postalCodeLabel": "Código postal",
        "saveCardLabel": "Guardar tarjeta",
        "payWithCard": "Pagar con tarjeta",
        "endingIn": "Terminada en {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Tarjeta",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    224: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Pagando con {{paymentSource}}",
        "chooseAnotherWayToPay": "Elija otra forma de pago",
        "chooseAWayToPay": "Elija una forma de pago",
        "otherWaysToPay": "Otras formas de pago",
        "edit": "Editar",
        "doneEditing": "Listo",
        "editPaymentMethods": "Editar formas de pago",
        "CreditCardDeleteConfirmationMessage": "¿Desea eliminar la tarjeta {{secondaryIdentifier}} con terminación en {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "¿Desea eliminar la cuenta de PayPal {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "¿Seguro que desea eliminar la cuenta de Venmo con el nombre de usuario {{identifier}}?",
        "genericDeleteConfirmationMessage": "¿Seguro que desea eliminar esta forma de pago?",
        "deleteCancelButton": "Cancelar",
        "deleteConfirmationButton": "Eliminar",
        "fieldEmptyForCvv": "Ingrese un CVV.",
        "fieldEmptyForExpirationDate": "Complete una fecha de vencimiento.",
        "fieldEmptyForCardholderName": "Ingrese el nombre del titular de la tarjeta.",
        "fieldTooLongForCardholderName": "El nombre del titular de la tarjeta debe tener menos de 256 caracteres.",
        "fieldEmptyForNumber": "Ingrese un número.",
        "fieldEmptyForPostalCode": "Ingrese un código postal.",
        "fieldInvalidForCardholderName": "El nombre del titular de la tarjeta no es válido.",
        "fieldInvalidForCvv": "Este código de seguridad no es válido.",
        "fieldInvalidForExpirationDate": "Esta fecha de vencimiento no es válida.",
        "fieldInvalidForNumber": "Este número de tarjeta no es válido.",
        "fieldInvalidForPostalCode": "Este código postal no es válido.",
        "genericError": "Se ha producido un error.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Esta tarjeta de crédito ya existe como forma de pago guardada.",
        "hostedFieldsFailedTokenizationError": "Verifique su información e inténtelo de nuevo.",
        "hostedFieldsFieldsInvalidError": "Verifique su información e inténtelo de nuevo.",
        "hostedFieldsTokenizationNetworkErrorError": "Error de red. Inténtelo de nuevo.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "La verificación de la tarjeta de crédito falló. Revise su información e inténtelo de nuevo.",
        "paypalButtonMustBeUsed": "Utilice el botón de PayPal para continuar con su pago.",
        "paypalAccountTokenizationFailedError": "Se ha producido un error al agregar la cuenta de PayPal. Inténtelo de nuevo.",
        "paypalFlowFailedError": "Se ha producido un error al conectar con PayPal. Inténtelo de nuevo.",
        "paypalTokenizationRequestActiveError": "La autorización de pago de PayPal ya está en curso.",
        "venmoCanceledError": "Se ha producido un error. Asegúrese de que tiene la versión más reciente de la aplicación de Venmo instalada en su dispositivo y que su navegador admita el sitio web Venmo.",
        "vaultManagerPaymentMethodDeletionError": "No se pudo eliminar la forma de pago, inténtelo de nuevo.",
        "venmoAppFailedError": "No se pudo encontrar la aplicación de Venmo en su dispositivo.",
        "unsupportedCardTypeError": "Este tipo de tarjeta no es compatible. Inténtelo con otra tarjeta.",
        "applePayTokenizationError": "Se ha producido un error de red al procesar el pago de Apple Pay. Inténtelo de nuevo.",
        "applePayActiveCardError": "Agregue una tarjeta compatible a su cartera de Apple Pay.",
        "cardholderNameLabel": "Nombre del titular de la tarjeta",
        "cardNumberLabel": "Número de tarjeta",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 dígitos)",
        "cvvFourDigitLabelSubheading": "(4 dígitos)",
        "cardholderNamePlaceholder": "Nombre del titular de la tarjeta",
        "expirationDateLabel": "Fecha de vencimiento",
        "expirationDateLabelSubheading": "(MM/AA)",
        "expirationDatePlaceholder": "MM/AA",
        "postalCodeLabel": "Código postal",
        "saveCardLabel": "Guardar tarjeta",
        "payWithCard": "Pagar con tarjeta",
        "endingIn": "Con terminación en {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Tarjeta",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    225: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Maksutapa: {{paymentSource}}",
        "chooseAnotherWayToPay": "Valitse toinen maksutapa",
        "chooseAWayToPay": "Valitse maksutapa",
        "otherWaysToPay": "Muut maksutavat",
        "edit": "Muokkaa",
        "doneEditing": "Valmis",
        "editPaymentMethods": "Muokkaa maksutapoja",
        "CreditCardDeleteConfirmationMessage": "Haluatko poistaa {{secondaryIdentifier}}-kortin, jonka numero päättyy {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Haluatko poistaa PayPal-tilin {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Haluatko varmasti poistaa Venmo-tilin, jonka käyttäjätunnus on {{identifier}}?",
        "genericDeleteConfirmationMessage": "Haluatko varmasti poistaa tämän maksutavan?",
        "deleteCancelButton": "Peruuta",
        "deleteConfirmationButton": "Poista",
        "fieldEmptyForCvv": "Täytä CVV.",
        "fieldEmptyForExpirationDate": "Täytä voimassaolon päättymispäivämäärä.",
        "fieldEmptyForCardholderName": "Täytä kortinhaltijan nimi.",
        "fieldTooLongForCardholderName": "Kortin haltijan nimen on oltava alle 256 merkkiä.",
        "fieldEmptyForNumber": "Täytä numero.",
        "fieldEmptyForPostalCode": "Täytä postinumero.",
        "fieldInvalidForCardholderName": "Kortinhaltijan nimi ei ole kelvollinen.",
        "fieldInvalidForCvv": "Tämä turvakoodi ei ole kelvollinen.",
        "fieldInvalidForExpirationDate": "Tämä päättymispäivämäärä ei ole kelvollinen.",
        "fieldInvalidForNumber": "Tämä kortin numero ei ole kelvollinen.",
        "fieldInvalidForPostalCode": "Tämä postinumero ei ole kelvollinen.",
        "genericError": "Jokin meni pieleen meidän päässämme.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Tämä luottokortti on jo tallennettu maksutavaksi.",
        "hostedFieldsFailedTokenizationError": "Tarkista tiedot ja yritä uudelleen.",
        "hostedFieldsFieldsInvalidError": "Tarkista tiedot ja yritä uudelleen.",
        "hostedFieldsTokenizationNetworkErrorError": "Verkkovirhe. Yritä uudelleen.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Luottokortin varmennus epäonnistui. Tarkista tiedot ja yritä uudelleen.",
        "paypalButtonMustBeUsed": "Jatka maksua PayPal-painikkeen avulla.",
        "paypalAccountTokenizationFailedError": "Jotain meni pieleen PayPal-tiliä lisätessä. Yritä uudelleen.",
        "paypalFlowFailedError": "Jotain meni pieleen muodostettaessa yhteyttä PayPaliin. Yritä uudelleen.",
        "paypalTokenizationRequestActiveError": "PayPal-maksun valtuutus on jo meneillään.",
        "venmoCanceledError": "Jokin meni pieleen. Varmista, että laitteeseesi on asennettu Venmo-sovelluksen viimeisin versio, ja että selain tukee vaihtamista Venmoon.",
        "vaultManagerPaymentMethodDeletionError": "Maksutavan poistaminen ei onnistu, yritä uudelleen.",
        "venmoAppFailedError": "Venmo-sovellusta ei löytynyt laitteesta.",
        "unsupportedCardTypeError": "Tätä korttityyppiä ei tueta. Kokeile toista korttia.",
        "applePayTokenizationError": "Tapahtui verkkovirhe Apple Pay -maksun käsittelyssä. Yritä uudelleen.",
        "applePayActiveCardError": "Lisää tuettu kortti Apple Pay -lompakkoon.",
        "cardholderNameLabel": "Kortinhaltijan nimi",
        "cardNumberLabel": "Kortin numero",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(kolme numeroa)",
        "cvvFourDigitLabelSubheading": "(neljä numeroa)",
        "cardholderNamePlaceholder": "Kortinhaltijan nimi",
        "expirationDateLabel": "Päättymispäivämäärä",
        "expirationDateLabelSubheading": "(KK/VV)",
        "expirationDatePlaceholder": "KK/VV",
        "postalCodeLabel": "Postinumero",
        "saveCardLabel": "Tallenna kortti",
        "payWithCard": "Maksa kortilla",
        "endingIn": "Päättyy {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Kortti",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    226: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Payer avec {{paymentSource}}",
        "chooseAnotherWayToPay": "Choisir un autre mode de paiement",
        "chooseAWayToPay": "Choisir le mode de paiement",
        "otherWaysToPay": "Autres modes de paiement",
        "edit": "Modifier",
        "doneEditing": "Terminé",
        "editPaymentMethods": "Modifier les modes de paiement",
        "CreditCardDeleteConfirmationMessage": "Supprimer la carte {{secondaryIdentifier}} se terminant par {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Supprimer le compte PayPal {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Souhaitez-vous vraiment supprimer le compte Venmo avec le nom d’utilisateur {{identifier}}?",
        "genericDeleteConfirmationMessage": "Voulez-vous vraiment supprimer ce mode de paiement?",
        "deleteCancelButton": "Annuler",
        "deleteConfirmationButton": "Supprimer",
        "fieldEmptyForCvv": "Veuillez saisir un cryptogramme visuel.",
        "fieldEmptyForExpirationDate": "Veuillez saisir une date d'expiration.",
        "fieldEmptyForCardholderName": "Veuillez saisir un nom de titulaire de la carte.",
        "fieldTooLongForCardholderName": "Le nom du titulaire de la carte doit contenir moins de 256 caractères.",
        "fieldEmptyForNumber": "Veuillez saisir un numéro.",
        "fieldEmptyForPostalCode": "Veuillez saisir un code postal.",
        "fieldInvalidForCardholderName": "Le nom de ce titulaire de la carte n'est pas valide.",
        "fieldInvalidForCvv": "Ce cryptogramme visuel n'est pas valide.",
        "fieldInvalidForExpirationDate": "Cette date d'expiration n'est pas valide.",
        "fieldInvalidForNumber": "Ce numéro de carte n'est pas valide.",
        "fieldInvalidForPostalCode": "Ce code postal n'est pas valide.",
        "genericError": "Une erreur s'est produite de notre côté.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Cette carte de crédit existe déjà comme mode de paiement enregistré.",
        "hostedFieldsFailedTokenizationError": "Vérifiez vos informations, puis réessayez.",
        "hostedFieldsFieldsInvalidError": "Vérifiez vos informations, puis réessayez.",
        "hostedFieldsTokenizationNetworkErrorError": "Erreur réseau. Veuillez réessayer.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "La vérification de la carte de crédit a échoué. Vérifiez vos informations, puis réessayez.",
        "paypalButtonMustBeUsed": "Utilisez le bouton PayPal pour poursuivre votre paiement.",
        "paypalAccountTokenizationFailedError": "Une erreur s'est produite lors de l'enregistrement du compte PayPal. Veuillez réessayer.",
        "paypalFlowFailedError": "Une erreur s'est produite au cours de la connexion à PayPal. Veuillez réessayer.",
        "paypalTokenizationRequestActiveError": "L'autorisation de paiement PayPal est déjà en cours.",
        "venmoCanceledError": "Une erreur s'est produite. Assurez-vous que la version la plus récente de l'application Venmo est installée sur votre appareil et que votre navigateur prend Venmo en charge.",
        "vaultManagerPaymentMethodDeletionError": "Impossible de supprimer le mode de paiement, essayez de nouveau.",
        "venmoAppFailedError": "L'application Venmo est introuvable sur votre appareil.",
        "unsupportedCardTypeError": "Ce type de carte n'est pas pris en charge. Veuillez essayer une autre carte.",
        "applePayTokenizationError": "Une erreur de réseau s'est produite lors du traitement du paiement avec Apple Pay. Veuillez réessayer.",
        "applePayActiveCardError": "Ajoutez une carte prise en charge à Apple Pay.",
        "cardholderNameLabel": "Nom du titulaire de la carte",
        "cardNumberLabel": "Numéro de carte",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 chiffres)",
        "cvvFourDigitLabelSubheading": "(4 chiffres)",
        "cardholderNamePlaceholder": "Nom du titulaire de la carte",
        "expirationDateLabel": "Date d'expiration",
        "expirationDateLabelSubheading": "(MM/AA)",
        "expirationDatePlaceholder": "MM/AA",
        "postalCodeLabel": "Code postal",
        "saveCardLabel": "Enregistrer la carte",
        "payWithCard": "Payer par carte",
        "endingIn": "Se terminant par {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Carte",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    227: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Payer avec {{paymentSource}}",
        "chooseAnotherWayToPay": "Choisissez une autre façon de payer.",
        "chooseAWayToPay": "Choisissez comment payer.",
        "otherWaysToPay": "Autres façons de payer",
        "edit": "Modifier",
        "doneEditing": "Terminé",
        "editPaymentMethods": "Modifier les sources d'approvisionnement",
        "CreditCardDeleteConfirmationMessage": "Supprimer la carte {{secondaryIdentifier}} se terminant par {{identifier}} ?",
        "PayPalAccountDeleteConfirmationMessage": "Supprimer le compte PayPal {{identifier}} ?",
        "VenmoAccountDeleteConfirmationMessage": "Êtes-vous sûr de vouloir supprimer le compte Venmo avec le nom d'utilisateur {{identifier}} ?",
        "genericDeleteConfirmationMessage": "Êtes-vous sûr de vouloir supprimer cette source d'approvisionnement ?",
        "deleteCancelButton": "Annuler",
        "deleteConfirmationButton": "Supprimer",
        "fieldEmptyForCvv": "Entrez un cryptogramme visuel.",
        "fieldEmptyForExpirationDate": "Entrez une date d'expiration.",
        "fieldEmptyForCardholderName": "Entrez un nom du titulaire de la carte.",
        "fieldTooLongForCardholderName": "Le nom du titulaire de la carte doit contenir moins de 256 caractères.",
        "fieldEmptyForNumber": "Entrez un numéro.",
        "fieldEmptyForPostalCode": "Entrez un code postal.",
        "fieldInvalidForCardholderName": "Le nom de ce titulaire de la carte est incorrect.",
        "fieldInvalidForCvv": "Ce cryptogramme visuel n'est pas valide.",
        "fieldInvalidForExpirationDate": "Cette date d'expiration n'est pas valide.",
        "fieldInvalidForNumber": "Ce numéro de carte n'est pas valide.",
        "fieldInvalidForPostalCode": "Ce code postal n'est pas valide.",
        "genericError": "Une erreur est survenue.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Cette carte bancaire existe déjà comme mode de paiement enregistré.",
        "hostedFieldsFailedTokenizationError": "Vérifiez vos informations et réessayez.",
        "hostedFieldsFieldsInvalidError": "Vérifiez vos informations et réessayez.",
        "hostedFieldsTokenizationNetworkErrorError": "Erreur réseau. Réessayez.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Échec de vérification de la carte bancaire. Vérifiez vos informations et réessayez.",
        "paypalButtonMustBeUsed": "Utilisez le bouton PayPal pour poursuivre votre paiement.",
        "paypalAccountTokenizationFailedError": "Une erreur est survenue lors de l'ajout du compte PayPal. Réessayez.",
        "paypalFlowFailedError": "Une erreur est survenue lors de la connexion à PayPal. Réessayez.",
        "paypalTokenizationRequestActiveError": "L'autorisation de paiement PayPal est déjà en cours.",
        "venmoCanceledError": "Une erreur est survenue. Vérifiez que vous disposez de la dernière version de l'application Venmo sur votre appareil et que votre navigateur prend en charge la redirection vers Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Impossible de supprimer la source d'approvisionnement. Réessayez.",
        "venmoAppFailedError": "L'application Venmo est introuvable sur votre appareil.",
        "unsupportedCardTypeError": "Ce type de carte n'est pas pris en charge. Essayez une autre carte.",
        "applePayTokenizationError": "Une erreur réseau s'est produite lors du traitement du paiement Apple Pay. Réessayez.",
        "applePayActiveCardError": "Enregistrez une carte prise en charge sur Apple Pay.",
        "cardholderNameLabel": "Nom du titulaire de la carte",
        "cardNumberLabel": "Nº de carte",
        "cvvLabel": "Cryptogramme visuel",
        "cvvThreeDigitLabelSubheading": "(3 chiffres)",
        "cvvFourDigitLabelSubheading": "(4 chiffres)",
        "cardholderNamePlaceholder": "Nom du titulaire de la carte",
        "expirationDateLabel": "Date d'expiration",
        "expirationDateLabelSubheading": "(MM/AA)",
        "expirationDatePlaceholder": "MM/AA",
        "postalCodeLabel": "Code postal",
        "saveCardLabel": "Enregistrer une carte",
        "payWithCard": "Payer par carte",
        "endingIn": "Se terminant par {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Carte",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    228: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Payer avec {{paymentSource}}",
        "chooseAnotherWayToPay": "Choisir un autre mode de paiement",
        "chooseAWayToPay": "Choisir un mode de paiement",
        "otherWaysToPay": "Autres modes de paiement",
        "edit": "Modifier",
        "doneEditing": "Terminé",
        "editPaymentMethods": "Modifier les modes de paiement",
        "CreditCardDeleteConfirmationMessage": "Supprimer la carte {{secondaryIdentifier}} se terminant par {{identifier}} ?",
        "PayPalAccountDeleteConfirmationMessage": "Supprimer le compte PayPal {{identifier}} ?",
        "VenmoAccountDeleteConfirmationMessage": "Souhaitez-vous vraiment supprimer le compte Venmo associé au nom d'utilisateur {{identifier}}?",
        "genericDeleteConfirmationMessage": "Souhaitez-vous vraiment supprimer ce mode de paiement ?",
        "deleteCancelButton": "Annuler",
        "deleteConfirmationButton": "Supprimer",
        "fieldEmptyForCvv": "Saisissez un cryptogramme visuel.",
        "fieldEmptyForExpirationDate": "Indiquez une date d'expiration.",
        "fieldEmptyForCardholderName": "Saisissez le nom du titulaire de la carte.",
        "fieldTooLongForCardholderName": "Le nom du titulaire de la carte doit comporter moins de 256 caractères.",
        "fieldEmptyForNumber": "Indiquez un numéro.",
        "fieldEmptyForPostalCode": "Indiquez un code postal.",
        "fieldInvalidForCardholderName": "Le nom de ce titulaire de la carte est incorrect.",
        "fieldInvalidForCvv": "Ce cryptogramme visuel n'est pas valide.",
        "fieldInvalidForExpirationDate": "Cette date d'expiration n'est pas valide.",
        "fieldInvalidForNumber": "Ce numéro de carte n'est pas valide.",
        "fieldInvalidForPostalCode": "Ce code postal n'est pas valide.",
        "genericError": "Une erreur est survenue.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Cette carte bancaire existe déjà en tant que mode de paiement enregistré.",
        "hostedFieldsFailedTokenizationError": "Vérifiez les informations et réessayez.",
        "hostedFieldsFieldsInvalidError": "Vérifiez les informations et réessayez.",
        "hostedFieldsTokenizationNetworkErrorError": "Erreur réseau. Réessayez.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Échec de la vérification de carte bancaire. Vérifiez les informations et réessayez.",
        "paypalButtonMustBeUsed": "Utilisez le bouton PayPal pour poursuivre le paiement.",
        "paypalAccountTokenizationFailedError": "Un problème est survenu lors de l'ajout du compte PayPal. Réessayez.",
        "paypalFlowFailedError": "Une erreur est survenue lors de la connexion à PayPal. Réessayez.",
        "paypalTokenizationRequestActiveError": "L'autorisation de paiement PayPal est déjà en cours.",
        "venmoCanceledError": "Une erreur est survenue. Vérifiez que la dernière version de l'application Venmo est installée sur votre appareil et que votre navigateur prend en charge la redirection vers Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Impossible de supprimer le mode de paiement, réessayez.",
        "venmoAppFailedError": "Nous n'avons pas trouvé l'application Venmo sur votre appareil.",
        "unsupportedCardTypeError": "Ce type de carte n'est pas pris en charge. Essayez une autre carte.",
        "applePayTokenizationError": "Une erreur réseau s'est produite lors du traitement du paiement Apple Pay. Réessayez.",
        "applePayActiveCardError": "Ajoutez une carte prise en charge à votre portefeuille Apple Pay.",
        "cardholderNameLabel": "Nom du titulaire de la carte",
        "cardNumberLabel": "Numéro de carte",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 chiffres)",
        "cvvFourDigitLabelSubheading": "(4 chiffres)",
        "cardholderNamePlaceholder": "Nom du titulaire de la carte",
        "expirationDateLabel": "Date d'expiration",
        "expirationDateLabelSubheading": "(MM/AA)",
        "expirationDatePlaceholder": "MM/AA",
        "postalCodeLabel": "Code postal",
        "saveCardLabel": "Enregistrer la carte",
        "payWithCard": "Payer avec la carte",
        "endingIn": "Se terminant par {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Carte",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    229: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "שליחת תשלום באמצעות {{paymentSource}}",
        "chooseAnotherWayToPay": "עליך לבחור שיטת תשלום אחרת",
        "chooseAWayToPay": "עליך לבחור שיטת תשלום",
        "otherWaysToPay": "שיטות תשלום אחרות",
        "edit": "עריכה",
        "doneEditing": "סיום",
        "editPaymentMethods": "עריכת שיטות תשלום",
        "CreditCardDeleteConfirmationMessage": "ברצונך למחוק את כרטיס ה-{{secondaryIdentifier}} שמסתיים בספרות {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "ברצונך למחוק את חשבון ה-PayPal {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "האם אתה בטוח שברצונך למחוק את חשבון Venmo הרשום תחת שם המשתמש {{identifier}}?",
        "genericDeleteConfirmationMessage": "האם אתה בטוח שברצונך למחוק שיטת תשלום זו?",
        "deleteCancelButton": "ביטול",
        "deleteConfirmationButton": "מחיקה",
        "fieldEmptyForCvv": "עליך למלא את מספר האבטחה של כרטיס האשראי.",
        "fieldEmptyForExpirationDate": "עליך למלא את תאריך פקיעת התוקף.",
        "fieldEmptyForCardholderName": "עליך למלא את שם בעל הכרטיס.",
        "fieldTooLongForCardholderName": "שם בעל הכרטיס יכול להכיל 256 תווים לכל היותר.",
        "fieldEmptyForNumber": "עליך למלא את המספר.",
        "fieldEmptyForPostalCode": "עליך למלא את המיקוד.",
        "fieldInvalidForCardholderName": "שם בעל הכרטיס אינו חוקי.",
        "fieldInvalidForCvv": "קוד אבטחה זה אינו חוקי.",
        "fieldInvalidForExpirationDate": "תאריך פקיעת התוקף הזה אינו חוקי.",
        "fieldInvalidForNumber": "מספר כרטיס האשראי הזה אינו חוקי.",
        "fieldInvalidForPostalCode": "מיקוד זה אינו חוקי.",
        "genericError": "נראה שמשהו השתבש בצד שלנו.",
        "hostedFieldsTokenizationFailOnDuplicateError": "כרטיס אשראי זה כבר שמור כשיטת תשלום.",
        "hostedFieldsFailedTokenizationError": "עליך לבדוק את הפרטים שלך ולנסות שוב.",
        "hostedFieldsFieldsInvalidError": "עליך לבדוק את הפרטים שלך ולנסות שוב.",
        "hostedFieldsTokenizationNetworkErrorError": "שגיאת רשת. יש לנסות שוב.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "אימות כרטיס האשראי נכשל. עליך לבדוק את הפרטים שלך ולנסות שוב.",
        "paypalButtonMustBeUsed": "להשתמש בלחצן PayPal כדי להמשיך בביצוע התשלום שלך.",
        "paypalAccountTokenizationFailedError": "משהו השתבש בו בעת הוספת חשבון PayPal. יש לנסות שוב.",
        "paypalFlowFailedError": "משהו השתבש בהתחברות ל-PayPal. יש לנסות שוב.",
        "paypalTokenizationRequestActiveError": "אישור התשלום של PayPal כבר מתבצע.",
        "venmoCanceledError": "נראה שמשהו השתבש. עליך לוודא שהגרסה העדכנית ביותר של אפליקציית Venmo מותקנת במכשיר שלך, ושהדפדפן שלך תומך במעבר ל-Venmo.",
        "vaultManagerPaymentMethodDeletionError": "לא הצלחנו למחוק את שיטת התשלום, עליך לנסות שוב.",
        "venmoAppFailedError": "לא מצאנו למצוא את אפליקציית Venmo במכשיר שלך.",
        "unsupportedCardTypeError": "סוג כרטיס זה אינו נתמך. עליך לנסות כרטיס אחר.",
        "applePayTokenizationError": "אירעה שגיאת רשת בעת עיבוד תשלום התשלומים של Apple Pay. יש לנסות שוב.",
        "applePayActiveCardError": "הוספת כרטיס נתמך לארנק Apple Pay שלך.",
        "cardholderNameLabel": "שם בעל הכרטיס",
        "cardNumberLabel": "מספר הכרטיס",
        "cvvLabel": "קוד האבטחה (CVV)",
        "cvvThreeDigitLabelSubheading": "(3 ספרות)",
        "cvvFourDigitLabelSubheading": "(ארבע ספרות)",
        "cardholderNamePlaceholder": "שם בעל הכרטיס",
        "expirationDateLabel": "תאריך פקיעת תוקף",
        "expirationDateLabelSubheading": "(MM/YY)",
        "expirationDatePlaceholder": "MM/YY",
        "postalCodeLabel": "מיקוד",
        "saveCardLabel": "שמירת הכרטיס",
        "payWithCard": "תשלום באמצעות כרטיס אשראי",
        "endingIn": "המסתיים בספרות {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "כרטיס",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    230: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Fizetve ezzel {{paymentSource}}",
        "chooseAnotherWayToPay": "Válasszon másik fizetési módot",
        "chooseAWayToPay": "Válasszon fizetési módot",
        "otherWaysToPay": "Egyéb fizetési módok",
        "edit": "Szerkesztés",
        "doneEditing": "Kész",
        "editPaymentMethods": "Fizetési módok szerkesztése",
        "CreditCardDeleteConfirmationMessage": "Törli a(z) {{identifier}}-re végződő {{secondaryIdentifier}} kártyát?",
        "PayPalAccountDeleteConfirmationMessage": "Törli a(z) {{identifier}} PayPal-számlát?",
        "VenmoAccountDeleteConfirmationMessage": "Biztosan törli a(z) {{identifier}} felhasználónévhez tartozó Venmo-számlát?",
        "genericDeleteConfirmationMessage": "Biztosan törli ezt a fizetési módot?",
        "deleteCancelButton": "Mégse",
        "deleteConfirmationButton": "Törés",
        "fieldEmptyForCvv": "Adja meg a CVV-t.",
        "fieldEmptyForExpirationDate": "Töltse ki a lejárati dátumot.",
        "fieldEmptyForCardholderName": "Töltse ki a kártyatulajdonos nevét.",
        "fieldTooLongForCardholderName": "A kártyatulajdonos neve nem lehet hosszabb mint 256 karakter.",
        "fieldEmptyForNumber": "Töltse ki a számot.",
        "fieldEmptyForPostalCode": "Töltse ki az irányítószámot.",
        "fieldInvalidForCardholderName": "Ez a kártyabirtokos neve nem érvényes.",
        "fieldInvalidForCvv": "Ez a biztonsági kód nem érvényes.",
        "fieldInvalidForExpirationDate": "Ez a lejárati dátum nem érvényes.",
        "fieldInvalidForNumber": "Ez a kártyaszám nem érvényes.",
        "fieldInvalidForPostalCode": "Ez az irányítószám nem érvényes.",
        "genericError": "Hiba történt a mi oldalunkon.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Ez a hitelkártya már szerepel mentett fizetési módként.",
        "hostedFieldsFailedTokenizationError": "Ellenőrizze adatait, majd próbálja újra.",
        "hostedFieldsFieldsInvalidError": "Ellenőrizze adatait, majd próbálja újra.",
        "hostedFieldsTokenizationNetworkErrorError": "Hálózati hiba. Próbálja újra.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "A hitelkártya hitelesítése sikertelen. Ellenőrizze adatait, majd próbálja újra.",
        "paypalButtonMustBeUsed": "A fizetés folytatásához használja a PayPal-gombot.",
        "paypalAccountTokenizationFailedError": "Hiba történt a PayPal-számla hozzáadása közben. Próbálja újra.",
        "paypalFlowFailedError": "Hiba történt a PayPalhoz való kapcsolódás közben. Próbálja újra.",
        "paypalTokenizationRequestActiveError": "A PayPal-fizetés engedélyezése már folyamatban van.",
        "venmoCanceledError": "Hiba történt. Ellenőrizze, hogy eszközére a Venmo-alkalmazás legfrissebb verziója van-e telepítve, és hogy a böngészője támogatja-e a Venmo-ra történő átváltást.",
        "vaultManagerPaymentMethodDeletionError": "Nem sikerült törölni a fizetési módot, próbálja újra.",
        "venmoAppFailedError": "A Venmo-alkalmazást nem találja a rendszer az eszközön.",
        "unsupportedCardTypeError": "Ez a kártyatípus nem támogatott. Próbáljon meg másik kártyát.",
        "applePayTokenizationError": "Hálózati hiba történt az Apple Pay-kifizetés közben. Próbálja újra.",
        "applePayActiveCardError": "Adjon egy támogatott kártyáját az Apple Pay pénztárcához.",
        "cardholderNameLabel": "Kártyatulajdonos neve",
        "cardNumberLabel": "Kártyaszám",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 számjegy)",
        "cvvFourDigitLabelSubheading": "(4 számjegy)",
        "cardholderNamePlaceholder": "Kártyatulajdonos neve",
        "expirationDateLabel": "Lejárati dátum",
        "expirationDateLabelSubheading": "(HH/ÉÉ)",
        "expirationDatePlaceholder": "HH/ÉÉ",
        "postalCodeLabel": "Irányítószám",
        "saveCardLabel": "Kártya mentése",
        "payWithCard": "Fizetés kártyával",
        "endingIn": "{{lastFourCardDigits}} végű",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "-kártya",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    231: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Membayar dengan {{paymentSource}}",
        "chooseAnotherWayToPay": "Pilih metode pembayaran lain",
        "chooseAWayToPay": "Pilih metode pembayaran",
        "otherWaysToPay": "Metode pembayaran lain",
        "edit": "Edit",
        "doneEditing": "Selesai",
        "editPaymentMethods": "Edit metode pembayaran",
        "CreditCardDeleteConfirmationMessage": "Hapus kartu {{secondaryIdentifier}} yang berakhiran {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Hapus {{identifier}} rekening PayPal?",
        "VenmoAccountDeleteConfirmationMessage": "Yakin akan menghapus rekening Venmo dengan nama pengguna {{identifier}}?",
        "genericDeleteConfirmationMessage": "Yakin akan menghapus metode pembayaran ini?",
        "deleteCancelButton": "Batalkan",
        "deleteConfirmationButton": "Hapus",
        "fieldEmptyForCvv": "Masukkan CVV.",
        "fieldEmptyForExpirationDate": "Masukkan tanggal akhir berlaku.",
        "fieldEmptyForCardholderName": "Masukkan nama pemegang kartu.",
        "fieldTooLongForCardholderName": "Nama pemegang kartu harus kurang dari 256 karakter.",
        "fieldEmptyForNumber": "Masukkan nomor.",
        "fieldEmptyForPostalCode": "Masukkan kode pos.",
        "fieldInvalidForCardholderName": "Nama pemilik kartu ini tidak valid.",
        "fieldInvalidForCvv": "Kode keamanan ini tidak valid.",
        "fieldInvalidForExpirationDate": "Tanggal akhir berlaku ini tidak valid.",
        "fieldInvalidForNumber": "Nomor kartu ini tidak valid.",
        "fieldInvalidForPostalCode": "Kode pos ini tidak valid.",
        "genericError": "Ada yang salah pada sistem kami.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Kartu kredit ini sudah dimasukkan sebagai metode pembayaran tersimpan.",
        "hostedFieldsFailedTokenizationError": "Periksa informasi Anda dan coba lagi.",
        "hostedFieldsFieldsInvalidError": "Periksa informasi Anda dan coba lagi.",
        "hostedFieldsTokenizationNetworkErrorError": "Masalah jaringan. Coba lagi.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Verifikasi kartu kredit gagal. Periksa informasi Anda dan coba lagi.",
        "paypalButtonMustBeUsed": "Gunakan tombol PayPal untuk melanjutkan pembayaran Anda.",
        "paypalAccountTokenizationFailedError": "Terjadi kesalahan saat menambahkan rekening PayPal. Coba lagi.",
        "paypalFlowFailedError": "Terjadi kesalahan saat menyambung ke PayPal. Coba lagi.",
        "paypalTokenizationRequestActiveError": "Otorisasi pembayaran PayPal sedang diproses.",
        "venmoCanceledError": "Terdapat kesalahan. Pastikan Anda telah menginstal aplikasi Venmo versi terbaru pada perangkat dan peramban Anda mendukung untuk beralih ke Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Tidak dapat menghapus metode pembayaran, coba lagi.",
        "venmoAppFailedError": "Aplikasi Venmo tidak dapat ditemukan pada perangkat Anda.",
        "unsupportedCardTypeError": "Jenis kartu ini tidak didukung. Coba kartu lainnya.",
        "applePayTokenizationError": "Terjadi kesalahan jaringan sewaktu memproses pembayaran melalui Apple Pay. Coba lagi.",
        "applePayActiveCardError": "Tambahkan kartu yang didukung ke wallet Apple Pay.",
        "cardholderNameLabel": "Nama Pemegang Kartu",
        "cardNumberLabel": "Nomor Kartu",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 angka)",
        "cvvFourDigitLabelSubheading": "(4 angka)",
        "cardholderNamePlaceholder": "Nama Pemegang Kartu",
        "expirationDateLabel": "Tanggal Kedaluwarsa",
        "expirationDateLabelSubheading": "(BB/TT)",
        "expirationDatePlaceholder": "BB/TT",
        "postalCodeLabel": "Kode Pos",
        "saveCardLabel": "Simpan kartu",
        "payWithCard": "Bayar dengan kartu",
        "endingIn": "Berakhiran {{lastTwoCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Kartu",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    232: [function (require, module, exports) {
      /* eslint-disable camelcase */
      'use strict';

      var assign = require('../lib/assign').assign;

      var fiveCharacterLocales = {
        ar_EG: require('./ar_EG'),
        cs_CZ: require('./cs_CZ'),
        da_DK: require('./da_DK'),
        de_DE: require('./de_DE'),
        el_GR: require('./el_GR'),
        en_AU: require('./en_AU'),
        en_GB: require('./en_GB'),
        en_IN: require('./en_IN'),
        en_US: require('./en_US'),
        es_ES: require('./es_ES'),
        es_XC: require('./es_XC'),
        fi_FI: require('./fi_FI'),
        fr_CA: require('./fr_CA'),
        fr_FR: require('./fr_FR'),
        fr_XC: require('./fr_XC'),
        he_IL: require('./he_IL'),
        hu_HU: require('./hu_HU'),
        id_ID: require('./id_ID'),
        it_IT: require('./it_IT'),
        ja_JP: require('./ja_JP'),
        ko_KR: require('./ko_KR'),
        nl_NL: require('./nl_NL'),
        no_NO: require('./no_NO'),
        pl_PL: require('./pl_PL'),
        pt_BR: require('./pt_BR'),
        pt_PT: require('./pt_PT'),
        ru_RU: require('./ru_RU'),
        sk_SK: require('./sk_SK'),
        sv_SE: require('./sv_SE'),
        th_TH: require('./th_TH'),
        zh_CN: require('./zh_CN'),
        zh_HK: require('./zh_HK'),
        zh_TW: require('./zh_TW'),
        zh_XC: require('./zh_XC')
      };
      var twoCharacterLocaleAliases = {
        ar: fiveCharacterLocales.ar_EG,
        cs: fiveCharacterLocales.cs_CZ,
        da: fiveCharacterLocales.da_DK,
        de: fiveCharacterLocales.de_DE,
        el: fiveCharacterLocales.el_GR,
        en: fiveCharacterLocales.en_US,
        es: fiveCharacterLocales.es_ES,
        fi: fiveCharacterLocales.fi_FI,
        fr: fiveCharacterLocales.fr_FR,
        id: fiveCharacterLocales.id_ID,
        it: fiveCharacterLocales.it_IT,
        hu: fiveCharacterLocales.hu_HU,
        ja: fiveCharacterLocales.ja_JP,
        ko: fiveCharacterLocales.ko_KR,
        nl: fiveCharacterLocales.nl_NL,
        no: fiveCharacterLocales.no_NO,
        pl: fiveCharacterLocales.pl_PL,
        pt: fiveCharacterLocales.pt_PT,
        ru: fiveCharacterLocales.ru_RU,
        sk: fiveCharacterLocales.sk_SK,
        sv: fiveCharacterLocales.sv_SE,
        th: fiveCharacterLocales.th_TH,
        zh: fiveCharacterLocales.zh_CN
      };
      module.exports = {
        twoCharacterLocaleAliases: twoCharacterLocaleAliases,
        fiveCharacterLocales: fiveCharacterLocales,
        translations: assign({}, twoCharacterLocaleAliases, fiveCharacterLocales)
      };
      /* eslint-enable camelcase */
    }, {
      "../lib/assign": 197,
      "./ar_EG": 214,
      "./cs_CZ": 215,
      "./da_DK": 216,
      "./de_DE": 217,
      "./el_GR": 218,
      "./en_AU": 219,
      "./en_GB": 220,
      "./en_IN": 221,
      "./en_US": 222,
      "./es_ES": 223,
      "./es_XC": 224,
      "./fi_FI": 225,
      "./fr_CA": 226,
      "./fr_FR": 227,
      "./fr_XC": 228,
      "./he_IL": 229,
      "./hu_HU": 230,
      "./id_ID": 231,
      "./it_IT": 233,
      "./ja_JP": 234,
      "./ko_KR": 235,
      "./nl_NL": 236,
      "./no_NO": 237,
      "./pl_PL": 238,
      "./pt_BR": 239,
      "./pt_PT": 240,
      "./ru_RU": 241,
      "./sk_SK": 242,
      "./sv_SE": 243,
      "./th_TH": 244,
      "./zh_CN": 245,
      "./zh_HK": 246,
      "./zh_TW": 247,
      "./zh_XC": 248
    }],
    233: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Pagamento con {{paymentSource}}",
        "chooseAnotherWayToPay": "Scegli di pagare in un altro modo",
        "chooseAWayToPay": "Scegli come pagare",
        "otherWaysToPay": "Altri modi di pagare",
        "edit": "Modifica",
        "doneEditing": "Fine",
        "editPaymentMethods": "Modifica i metodi di pagamento",
        "CreditCardDeleteConfirmationMessage": "Eliminare la carta {{secondaryIdentifier}} le cui ultime cifre sono {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Eliminare il conto PayPal {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Vuoi eliminare il conto Venmo con nome utente {{identifier}}?",
        "genericDeleteConfirmationMessage": "Vuoi eliminare questo metodo di pagamento?",
        "deleteCancelButton": "Annulla",
        "deleteConfirmationButton": "Rimuovi",
        "fieldEmptyForCvv": "Immetti il codice di sicurezza (CVV).",
        "fieldEmptyForExpirationDate": "Immetti la data di scadenza.",
        "fieldEmptyForCardholderName": "Immetti il nome del titolare della carta.",
        "fieldTooLongForCardholderName": "Il nome del titolare della carta deve avere meno di 256 caratteri.",
        "fieldEmptyForNumber": "Immetti il numero di carta.",
        "fieldEmptyForPostalCode": "Immetti il CAP.",
        "fieldInvalidForCardholderName": "Il nome del titolare non è valido.",
        "fieldInvalidForCvv": "Il codice di sicurezza non è valido.",
        "fieldInvalidForExpirationDate": "La data di scadenza non è valida.",
        "fieldInvalidForNumber": "Il numero di carta non è valido.",
        "fieldInvalidForPostalCode": "Il CAP non è valido.",
        "genericError": "Si è verificato un errore nei nostri sistemi.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Questa carta di credito è già registrata come metodo di pagamento salvato.",
        "hostedFieldsFailedTokenizationError": "Controlla e riprova.",
        "hostedFieldsFieldsInvalidError": "Controlla e riprova.",
        "hostedFieldsTokenizationNetworkErrorError": "Errore di rete. Riprova.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "La verifica della carta di credito non è andata a buon fine. Controlla i dati e riprova.",
        "paypalButtonMustBeUsed": "Usa il pulsante PayPal per procedere al pagamento.",
        "paypalAccountTokenizationFailedError": "Si è verificato un errore nel collegamento del conto PayPal. Riprova.",
        "paypalFlowFailedError": "Si è verificato un errore di connessione a PayPal. Riprova.",
        "paypalTokenizationRequestActiveError": "L'autorizzazione di pagamento PayPal è già in corso.",
        "venmoCanceledError": "Si è verificato un errore. Assicurati di avere la versione più recente dell'app Venmo installata sul tuo dispositivo e che il browser supporti l'uso di Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Impossibile eliminare il metodo di pagamento; riprova.",
        "venmoAppFailedError": "Impossibile trovare l'app Venmo sul dispositivo in uso.",
        "unsupportedCardTypeError": "Questo tipo di carta non è supportato. Prova con un'altra carta.",
        "applePayTokenizationError": "Si è verificato un errore di rete durante l'elaborazione del pagamento con Apple Pay. Riprova.",
        "applePayActiveCardError": "Collega una carta supportata al tuo Apple Pay Wallet.",
        "cardholderNameLabel": "Titolare della carta",
        "cardNumberLabel": "Numero di carta",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 cifre)",
        "cvvFourDigitLabelSubheading": "(4 cifre)",
        "cardholderNamePlaceholder": "Titolare della carta",
        "expirationDateLabel": "Data di scadenza",
        "expirationDateLabelSubheading": "(MM/AA)",
        "expirationDatePlaceholder": "MM/AA",
        "postalCodeLabel": "CAP",
        "saveCardLabel": "Salva carta",
        "payWithCard": "Paga con una carta",
        "endingIn": "Le cui ultime cifre sono {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Carta",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    234: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "{{paymentSource}}で支払う",
        "chooseAnotherWayToPay": "別の支払方法を選択する",
        "chooseAWayToPay": "支払方法を選択する",
        "otherWaysToPay": "その他の支払方法",
        "edit": "編集",
        "doneEditing": "完了",
        "editPaymentMethods": "支払方法の編集",
        "CreditCardDeleteConfirmationMessage": "末尾が{{identifier}}の{{secondaryIdentifier}}カードを削除しますか?",
        "PayPalAccountDeleteConfirmationMessage": "PayPalアカウント{{identifier}}を削除しますか?",
        "VenmoAccountDeleteConfirmationMessage": "ユーザー名{{identifier}}のVenmoアカウントを削除してよろしいですか?",
        "genericDeleteConfirmationMessage": "この支払い方法を削除してよろしいですか?",
        "deleteCancelButton": "キャンセル",
        "deleteConfirmationButton": "削除",
        "fieldEmptyForCvv": "セキュリティコードを入力してください。",
        "fieldEmptyForExpirationDate": "有効期限を入力してください。",
        "fieldEmptyForCardholderName": "カード保有者の名前を入力してください。",
        "fieldTooLongForCardholderName": "カード保有者の名前は256文字未満にしてください。",
        "fieldEmptyForNumber": "番号を入力してください。",
        "fieldEmptyForPostalCode": "郵便番号を入力してください。",
        "fieldInvalidForCardholderName": "このカード保有者の名前は無効です。",
        "fieldInvalidForCvv": "このセキュリティコードは無効です。",
        "fieldInvalidForExpirationDate": "この有効期限は無効です。",
        "fieldInvalidForNumber": "このカード番号は無効です。",
        "fieldInvalidForPostalCode": "この郵便番号は無効です。",
        "genericError": "弊社側で問題が発生しました。",
        "hostedFieldsTokenizationFailOnDuplicateError": "このクレジットカードは、保存済みの支払方法としてすでに登録されています。",
        "hostedFieldsFailedTokenizationError": "情報を確認してもう一度お試しください。",
        "hostedFieldsFieldsInvalidError": "情報を確認してもう一度お試しください。",
        "hostedFieldsTokenizationNetworkErrorError": "ネットワークエラーです。もう一度お試しください。",
        "hostedFieldsTokenizationCvvVerificationFailedError": "クレジットカードの認証に失敗しました。情報を確認してもう一度お試しください。",
        "paypalButtonMustBeUsed": "お客さまの支払いを続行するには、PayPalボタンを使用します。",
        "paypalAccountTokenizationFailedError": "PayPalアカウントの追加で問題が発生しました。もう一度お試しください。",
        "paypalFlowFailedError": "PayPalへの接続に問題が発生しました。もう一度お試しください。",
        "paypalTokenizationRequestActiveError": "PayPal支払いの承認はすでに処理中です。",
        "venmoCanceledError": "問題が発生しました。お客さまの端末にインストールされているVenmoアプリが最新のバージョンであること、お使いのブラウザがVenmoへの切り替えをサポートしていることを確認してください。",
        "vaultManagerPaymentMethodDeletionError": "支払方法を削除できません。もう一度お試しください。",
        "venmoAppFailedError": "お客さまの端末でVenmoアプリが見つかりませんでした。",
        "unsupportedCardTypeError": "このカードタイプはサポートされていません。別のカードをご使用ください。",
        "applePayTokenizationError": "Apple Payの支払いを処理する際にネットワークエラーが発生しました。もう一度お試しください。",
        "applePayActiveCardError": "Apple Payウォレットに対応しているカードを追加してください。",
        "cardholderNameLabel": "カード保有者の名前",
        "cardNumberLabel": "カード番号",
        "cvvLabel": "セキュリティコード",
        "cvvThreeDigitLabelSubheading": "(3桁)",
        "cvvFourDigitLabelSubheading": "(4桁)",
        "cardholderNamePlaceholder": "カード保有者の名前",
        "expirationDateLabel": "有効期限",
        "expirationDateLabelSubheading": "(MM/YY)",
        "expirationDatePlaceholder": "MM/YY",
        "postalCodeLabel": "郵便番号",
        "saveCardLabel": "カードを保存",
        "payWithCard": "カードで支払う",
        "endingIn": "末尾が{{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "カード",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "銀聯(UnionPay)"
      };
    }, {}],
    235: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "{{paymentSource}}(으)로 결제",
        "chooseAnotherWayToPay": "다른 결제수단 선택",
        "chooseAWayToPay": "결제수단 선택",
        "otherWaysToPay": "다른 방법으로 결제",
        "edit": "편집",
        "doneEditing": "완료",
        "editPaymentMethods": "결제수단 편집",
        "CreditCardDeleteConfirmationMessage": "끝번호가 {{identifier}}인 {{secondaryIdentifier}} 카드를 삭제하시겠어요?",
        "PayPalAccountDeleteConfirmationMessage": "PayPal 계정 {{identifier}}을(를) 삭제하시겠어요?",
        "VenmoAccountDeleteConfirmationMessage": "사용자 이름이 {{identifier}}인 Venmo 계정을 삭제하시겠어요?",
        "genericDeleteConfirmationMessage": "이 결제수단을 삭제하시겠어요?",
        "deleteCancelButton": "취소",
        "deleteConfirmationButton": "삭제",
        "fieldEmptyForCvv": "CVV를 입력하세요.",
        "fieldEmptyForExpirationDate": "만료일을 입력하세요.",
        "fieldEmptyForCardholderName": "카드 소유자 이름을 입력하세요.",
        "fieldTooLongForCardholderName": "카드 소유자 이름은 256자 미만이어야 합니다.",
        "fieldEmptyForNumber": "번호를 입력하세요.",
        "fieldEmptyForPostalCode": "우편번호를 입력하세요.",
        "fieldInvalidForCardholderName": "이 카드 소유자 이름은 유효하지 않습니다.",
        "fieldInvalidForCvv": "이 보안 코드가 올바르지 않습니다.",
        "fieldInvalidForExpirationDate": "이 만료일이 올바르지 않습니다.",
        "fieldInvalidForNumber": "이 카드 번호가 올바르지 않습니다.",
        "fieldInvalidForPostalCode": "이 우편번호가 올바르지 않습니다.",
        "genericError": "저희 쪽에 문제가 발생했습니다.",
        "hostedFieldsTokenizationFailOnDuplicateError": "저장된 결제수단에 이미 이 신용카드가 존재합니다.",
        "hostedFieldsFailedTokenizationError": "정보를 확인하고 다시 시도해 주세요.",
        "hostedFieldsFieldsInvalidError": "정보를 확인하고 다시 시도해 주세요.",
        "hostedFieldsTokenizationNetworkErrorError": "네트워크 오류가 발생했습니다. 다시 시도해 주세요.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "신용카드 인증에 실패했습니다. 정보를 확인하고 다시 시도해 주세요.",
        "paypalButtonMustBeUsed": "결제를 계속하려면 PayPal 버튼을 사용하세요.",
        "paypalAccountTokenizationFailedError": "PayPal 계정을 추가하는 동안 문제가 발생했습니다. 다시 시도해 주세요.",
        "paypalFlowFailedError": "PayPal 계정을 연결하는 동안 문제가 발생했습니다. 다시 시도해 주세요.",
        "paypalTokenizationRequestActiveError": "PayPal 결제 승인이 이미 진행 중입니다.",
        "venmoCanceledError": "오류가 발생했습니다. 기기에 최신 버전의 Venmo 앱이 설치되어 있으며 브라우저가 Venmo로 전환 기능을 지원하는지 확인하세요.",
        "vaultManagerPaymentMethodDeletionError": "결제수단을 삭제할 수 없습니다. 다시 시도해 주세요.",
        "venmoAppFailedError": "기기에서 Venmo 앱을 찾을 수 없습니다.",
        "unsupportedCardTypeError": "이 카드 형식은 지원되지 않습니다. 다른 카드로 시도해 주세요.",
        "applePayTokenizationError": "Apple Pay 결제를 처리하는 동안 네트워크 오류가 발생했습니다. 다시 시도해 주세요.",
        "applePayActiveCardError": "Apple Pay 전자지갑에 지원되는 카드를 추가하세요.",
        "cardholderNameLabel": "카드 소유자 이름",
        "cardNumberLabel": "카드 번호",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3자리)",
        "cvvFourDigitLabelSubheading": "(4자리)",
        "cardholderNamePlaceholder": "카드 소유자 이름",
        "expirationDateLabel": "만료일",
        "expirationDateLabelSubheading": "(MM/YY)",
        "expirationDatePlaceholder": "MM/YY",
        "postalCodeLabel": "우편번호",
        "saveCardLabel": "카드 저장",
        "payWithCard": "카드로 결제",
        "endingIn": "끝번호: {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "카드",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    236: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Betalen met {{paymentSource}}",
        "chooseAnotherWayToPay": "Kies een andere betaalmethode",
        "chooseAWayToPay": "Kies een betaalwijze",
        "otherWaysToPay": "Andere manieren om te betalen",
        "edit": "Bewerk",
        "doneEditing": "Klaar",
        "editPaymentMethods": "Betaalmethoden aanpassen",
        "CreditCardDeleteConfirmationMessage": "{{secondaryIdentifier}}-kaart eindigend op {{identifier}} verwijderen?",
        "PayPalAccountDeleteConfirmationMessage": "PayPal-rekening {{identifier}} verwijderen?",
        "VenmoAccountDeleteConfirmationMessage": "Weet u zeker dat u Venmo-rekening met gebruikersnaam {{identifier}} wilt verwijderen?",
        "genericDeleteConfirmationMessage": "Weet u zeker dat u deze betaalmethode wilt verwijderen?",
        "deleteCancelButton": "Annuleren",
        "deleteConfirmationButton": "Verwijderen",
        "fieldEmptyForCvv": "Vul een CSC in.",
        "fieldEmptyForExpirationDate": "Vul een vervaldatum in.",
        "fieldEmptyForCardholderName": "Vul een naam voor de kaarthouder in.",
        "fieldTooLongForCardholderName": "De naam van de kaarthouder moet korter zijn dan 256 tekens.",
        "fieldEmptyForNumber": "Vul een nummer in.",
        "fieldEmptyForPostalCode": "Vul een postcode in.",
        "fieldInvalidForCardholderName": "Naam kaarthouder is ongeldig.",
        "fieldInvalidForCvv": "Deze CSC is ongeldig.",
        "fieldInvalidForExpirationDate": "Deze vervaldatum is ongeldig.",
        "fieldInvalidForNumber": "Dit creditcardnummer is ongeldig.",
        "fieldInvalidForPostalCode": "Deze postcode is ongeldig.",
        "genericError": "Er is iets fout gegaan.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Deze creditcard staat al geregistreerd als een opgeslagen betaalmethode.",
        "hostedFieldsFailedTokenizationError": "Controleer uw gegevens en probeer het opnieuw.",
        "hostedFieldsFieldsInvalidError": "Controleer uw gegevens en probeer het opnieuw.",
        "hostedFieldsTokenizationNetworkErrorError": "Netwerkfout. Probeer het opnieuw.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "De controle van de creditcard is mislukt. Controleer uw gegevens en probeer het opnieuw.",
        "paypalButtonMustBeUsed": "Gebruik de PayPal-knop om door te gaan met uw betaling.",
        "paypalAccountTokenizationFailedError": "Er is iets misgegaan bij het toevoegen van de PayPal-rekening. Probeer het opnieuw.",
        "paypalFlowFailedError": "Er is iets misgegaan bij de verbinding met PayPal. Probeer het opnieuw.",
        "paypalTokenizationRequestActiveError": "De autorisatie van de PayPal-betaling is al in behandeling.",
        "venmoCanceledError": "Er ging iets fout. Controleer of de meest recente versie van de Venmo-app op je apparaat is geïnstalleerd en dat je browser overschakelen naar Venmo ondersteunt.",
        "vaultManagerPaymentMethodDeletionError": "Kan de betaalmethode niet verwijderen, probeer het opnieuw.",
        "venmoAppFailedError": "De Venmo-app is niet aangetroffen op je apparaat.",
        "unsupportedCardTypeError": "Dit type creditcard wordt niet ondersteund. Gebruik een andere creditcard.",
        "applePayTokenizationError": "Er is een netwerkfout opgetreden bij het verwerken van de Apple Pay-betaling. Probeer het opnieuw.",
        "applePayActiveCardError": "Voeg een ondersteunde creditcard toe aan je Apple Pay-wallet.",
        "cardholderNameLabel": "Naam kaarthouder",
        "cardNumberLabel": "Creditcardnummer",
        "cvvLabel": "CSC",
        "cvvThreeDigitLabelSubheading": "(3 cijfers)",
        "cvvFourDigitLabelSubheading": "(4 cijfers)",
        "cardholderNamePlaceholder": "Naam kaarthouder",
        "expirationDateLabel": "Vervaldatum",
        "expirationDateLabelSubheading": "(MM/JJ)",
        "expirationDatePlaceholder": "MM/JJ",
        "postalCodeLabel": "Postcode",
        "saveCardLabel": "Creditcard opslaan",
        "payWithCard": "Betalen met creditcard",
        "endingIn": "Eindigend op {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Creditcard",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    237: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Betaling med {{paymentSource}}",
        "chooseAnotherWayToPay": "Velg en annen måte å betale på",
        "chooseAWayToPay": "Velg betalingsmåte",
        "otherWaysToPay": "Andre måter å betale på",
        "edit": "Rediger",
        "doneEditing": "Fullført",
        "editPaymentMethods": "Endre betalingsmetodene dine",
        "CreditCardDeleteConfirmationMessage": "Vil du slette {{secondaryIdentifier}}-kortet som slutter på {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Vil du slette PayPal-kontoen {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Er du sikker på at du vil slette Venmo-kontoen med brukernavnet {{identifier}}?",
        "genericDeleteConfirmationMessage": "Er du sikker på at du vil slette denne betalingsmetoden?",
        "deleteCancelButton": "Avbryt",
        "deleteConfirmationButton": "Slett",
        "fieldEmptyForCvv": "Oppgi en kortsikkerhetskode (CVV).",
        "fieldEmptyForExpirationDate": "Oppgi en utløpsdato.",
        "fieldEmptyForCardholderName": "Oppgi et navn for kortinnehaveren.",
        "fieldTooLongForCardholderName": "Makslengden for kortinnehaverens navn er 256 tegn.",
        "fieldEmptyForNumber": "Oppgi et nummer.",
        "fieldEmptyForPostalCode": "Oppgi et postnummer.",
        "fieldInvalidForCardholderName": "Denne kortinnehaverens navn er ikke gyldig.",
        "fieldInvalidForCvv": "Denne sikkerhetskoden er ikke gyldig.",
        "fieldInvalidForExpirationDate": "Denne utløpsdatoen er ikke gyldig.",
        "fieldInvalidForNumber": "Dette kortnummeret er ikke gyldig.",
        "fieldInvalidForPostalCode": "Dette postnummeret er ikke gyldig.",
        "genericError": "Noe gikk galt hos oss.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Dette betalingskortet eksisterer allerede som en lagret betalingsmetode.",
        "hostedFieldsFailedTokenizationError": "Kontroller informasjonen og prøv på nytt.",
        "hostedFieldsFieldsInvalidError": "Kontroller informasjonen og prøv på nytt.",
        "hostedFieldsTokenizationNetworkErrorError": "Nettverksfeil. Prøv på nytt.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Bekreftelsen av betalingskortet mislyktes. Kontroller informasjonen og prøv på nytt.",
        "paypalButtonMustBeUsed": "Bruk PayPal-knappen for å fortsette med betalingen.",
        "paypalAccountTokenizationFailedError": "Noe gikk galt da PayPal-kontoen ble lagt til. Prøv på nytt.",
        "paypalFlowFailedError": "Det oppsto et problem med tilkoblingen til PayPal. Prøv på nytt.",
        "paypalTokenizationRequestActiveError": "Godkjenning av PayPal-betalingen pågår allerede",
        "venmoCanceledError": "Noe gikk galt. Kontroller at du har installert den nyeste versjonen av Venmo-appen på enheten og at nettleseren din støtter bytte til Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Kunne ikke slette betalingsmetoden. Prøv på nytt.",
        "venmoAppFailedError": "Finner ikke Venmo-appen på enheten.",
        "unsupportedCardTypeError": "Denne korttypen støttes ikke. Prøv med et annet kort.",
        "applePayTokenizationError": "Det oppsto en nettverksfeil under behandlingen av Apple Pay-betalingen. Prøv på nytt.",
        "applePayActiveCardError": "Legg til et kort som støttes i Apple Pay-lommeboken din.",
        "cardholderNameLabel": "Kortinnehaverens navn",
        "cardNumberLabel": "Kortnummer",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 siffer)",
        "cvvFourDigitLabelSubheading": "(4 siffer)",
        "cardholderNamePlaceholder": "Kortinnehaverens navn",
        "expirationDateLabel": "Utløpsdato",
        "expirationDateLabelSubheading": "(MM/ÅÅ)",
        "expirationDatePlaceholder": "MM/ÅÅ",
        "postalCodeLabel": "Postnummer",
        "saveCardLabel": "Lagre kort",
        "payWithCard": "Betal med kort",
        "endingIn": "Slutter på {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Kort",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    238: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Źródło finansowania płatności: {{paymentSource}}",
        "chooseAnotherWayToPay": "Wybierz inne źródło finansowania płatności",
        "chooseAWayToPay": "Wybierz źródło finansowania płatności",
        "otherWaysToPay": "Inne źródła finansowania płatności",
        "edit": "Edytuj",
        "doneEditing": "Gotowe",
        "editPaymentMethods": "Edytuj źródła finansowania płatności",
        "CreditCardDeleteConfirmationMessage": "Usunąć kartę {{secondaryIdentifier}} o numerze zakończonym cyframi {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Usunąć konto PayPal {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Czy na pewno chcesz usunąć konto Venmo z nazwą użytkownika {{identifier}}?",
        "genericDeleteConfirmationMessage": "Czy na pewno chcesz usunąć to źródło finansowania płatności?",
        "deleteCancelButton": "Anuluj",
        "deleteConfirmationButton": "Usuń",
        "fieldEmptyForCvv": "Podaj kod bezpieczeństwa.",
        "fieldEmptyForExpirationDate": "Podaj datę ważności.",
        "fieldEmptyForCardholderName": "Podaj imię i nazwisko posiadacza karty.",
        "fieldTooLongForCardholderName": "Imię i nazwisko posiadacza karty musi mieć mniej niż 256 znaków.",
        "fieldEmptyForNumber": "Podaj numer.",
        "fieldEmptyForPostalCode": "Podaj kod pocztowy.",
        "fieldInvalidForCardholderName": "To imię i nazwisko posiadacza karty jest nieprawidłowe.",
        "fieldInvalidForCvv": "Podany kod bezpieczeństwa jest nieprawidłowy.",
        "fieldInvalidForExpirationDate": "Podana data ważności jest nieprawidłowa.",
        "fieldInvalidForNumber": "Podany numer karty jest nieprawidłowy.",
        "fieldInvalidForPostalCode": "Podany kod pocztowy jest nieprawidłowy.",
        "genericError": "Wystąpił błąd po naszej stronie.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Ta karta kredytowa jest już zapisana jako źródło finansowania płatności.",
        "hostedFieldsFailedTokenizationError": "Sprawdź swoje informacje i spróbuj ponownie.",
        "hostedFieldsFieldsInvalidError": "Sprawdź swoje informacje i spróbuj ponownie.",
        "hostedFieldsTokenizationNetworkErrorError": "Błąd sieci. Spróbuj ponownie.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Weryfikacja karty kredytowej nie powiodła się. Sprawdź swoje informacje i spróbuj ponownie.",
        "paypalButtonMustBeUsed": "Użyj przycisku PayPal, aby kontynuować płatność.",
        "paypalAccountTokenizationFailedError": "Coś poszło nie tak podczas dodawania konta PayPal. Spróbuj ponownie.",
        "paypalFlowFailedError": "Coś poszło nie tak podczas łączenia z systemem PayPal. Spróbuj ponownie.",
        "paypalTokenizationRequestActiveError": "Autoryzacja płatności PayPal jest już w trakcie realizacji.",
        "venmoCanceledError": "Wystąpił problem. Upewnij się, czy na swoim urządzeniu masz zainstalowaną najnowszą wersję aplikacji Venmo i Twoja przeglądarka ją obsługuje.",
        "vaultManagerPaymentMethodDeletionError": "Nie można usunąć źródła finansowania płatności. Spróbuj ponownie.",
        "venmoAppFailedError": "Nie można odnaleźć aplikacji Venmo na urządzeniu.",
        "unsupportedCardTypeError": "Ten typ karty nie jest obsługiwany. Spróbuj użyć innej karty.",
        "applePayTokenizationError": "Wystąpił błąd sieci podczas przetwarzania płatności Apple Pay. Spróbuj ponownie.",
        "applePayActiveCardError": "Dodaj obsługiwaną kartę do portfela Apple Pay.",
        "cardholderNameLabel": "Imię i nazwisko posiadacza karty",
        "cardNumberLabel": "Numer karty",
        "cvvLabel": "Kod CVC",
        "cvvThreeDigitLabelSubheading": "(3 cyfry)",
        "cvvFourDigitLabelSubheading": "(4 cyfry)",
        "cardholderNamePlaceholder": "Imię i nazwisko posiadacza karty",
        "expirationDateLabel": "Data ważności",
        "expirationDateLabelSubheading": "(MM/RR)",
        "expirationDatePlaceholder": "MM/RR",
        "postalCodeLabel": "Kod pocztowy",
        "saveCardLabel": "Zapisz kartę",
        "payWithCard": "Zapłać kartą",
        "endingIn": "O numerze zakończonym cyframi {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Karta",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    239: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Pagando com {{paymentSource}}",
        "chooseAnotherWayToPay": "Escolher outro meio de pagamento",
        "chooseAWayToPay": "Escolher um meio de pagamento",
        "otherWaysToPay": "Outro meio de pagamento",
        "edit": "Editar",
        "doneEditing": "Concluído",
        "editPaymentMethods": "Editar meios de pagamento",
        "CreditCardDeleteConfirmationMessage": "Excluir cartão com {{secondaryIdentifier}} com final {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Excluir conta do PayPal {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Tem certeza de que deseja excluir a conta do Venmo com o nome de usuário {{identifier}}?",
        "genericDeleteConfirmationMessage": "Tem certeza de que deseja excluir este meio de pagamento?",
        "deleteCancelButton": "Cancelar",
        "deleteConfirmationButton": "Excluir",
        "fieldEmptyForCvv": "Informe o Código de Segurança.",
        "fieldEmptyForExpirationDate": "Informe a data de vencimento.",
        "fieldEmptyForCardholderName": "Informe o nome do titular do cartão.",
        "fieldTooLongForCardholderName": "O nome do titular do cartão deve ter menos de 256 caracteres.",
        "fieldEmptyForNumber": "Informe um número.",
        "fieldEmptyForPostalCode": "Informe um CEP.",
        "fieldInvalidForCardholderName": "O nome do titular do cartão é inválido.",
        "fieldInvalidForCvv": "Este código de segurança não é válido.",
        "fieldInvalidForExpirationDate": "Esta data de vencimento não é válida.",
        "fieldInvalidForNumber": "O número do cartão não é válido.",
        "fieldInvalidForPostalCode": "Este CEP não é válido.",
        "genericError": "Ocorreu um erro.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Este cartão de crédito já está salvo em seus meios de pagamento.",
        "hostedFieldsFailedTokenizationError": "Verifique as informações e tente novamente.",
        "hostedFieldsFieldsInvalidError": "Verifique as informações e tente novamente.",
        "hostedFieldsTokenizationNetworkErrorError": "Erro de rede. Tente novamente.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Falha ao verificar o cartão de crédito. Verifique as informações e tente novamente.",
        "paypalButtonMustBeUsed": "Use o botão do PayPal para prosseguir com o seu pagamento.",
        "paypalAccountTokenizationFailedError": "Ocorreu um erro ao adicionar a conta do PayPal. Tente novamente.",
        "paypalFlowFailedError": "Ocorreu um erro de conexão com o PayPal. Tente novamente.",
        "paypalTokenizationRequestActiveError": "A autorização de pagamento do PayPal já está em andamento.",
        "venmoCanceledError": "Ocorreu um erro. Certifique-se de ter a versão mais recente do aplicativo Venmo instalado no seu dispositivo e que o seu navegador suporte a mudança para o Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Não é possível excluir o meio de pagamento, tente novamente.",
        "venmoAppFailedError": "Não foi possível encontrar o aplicativo Venmo no seu dispositivo.",
        "unsupportedCardTypeError": "Este tipo de cartão não é aceito. Experimente outro cartão.",
        "applePayTokenizationError": "Ocorreu um erro de rede ao processar o pagamento com Apple Pay. Tente novamente.",
        "applePayActiveCardError": "Adicione cartão suportado à sua carteira do Apple Pay.",
        "cardholderNameLabel": "Nome do titular do cartão",
        "cardNumberLabel": "Número do cartão",
        "cvvLabel": "CSC",
        "cvvThreeDigitLabelSubheading": "(3 dígitos)",
        "cvvFourDigitLabelSubheading": "(4 dígitos)",
        "cardholderNamePlaceholder": "Nome do titular do cartão",
        "expirationDateLabel": "Data de vencimento",
        "expirationDateLabelSubheading": "(MM/AA)",
        "expirationDatePlaceholder": "MM/AA",
        "postalCodeLabel": "CEP",
        "saveCardLabel": "Salvar cartão",
        "payWithCard": "Pague com seu cartão",
        "endingIn": "Com final {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Cartão",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    240: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Pagar com {{paymentSource}}",
        "chooseAnotherWayToPay": "Escolher outra forma de pagamento",
        "chooseAWayToPay": "Escolha um meio de pagamento",
        "otherWaysToPay": "Outras formas de pagamento",
        "edit": "Editar",
        "doneEditing": "Concluído",
        "editPaymentMethods": "Editar meios de pagamento",
        "CreditCardDeleteConfirmationMessage": "Eliminar o cartão {{secondaryIdentifier}} terminado em {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Eliminar {{identifier}} da conta PayPal?",
        "VenmoAccountDeleteConfirmationMessage": "Tem a certeza de que pretende eliminar a conta Venmo com o nome de utilizador {{identifier}}?",
        "genericDeleteConfirmationMessage": "Tem certeza de que pretende eliminar este meio de pagamento?",
        "deleteCancelButton": "Cancelar",
        "deleteConfirmationButton": "Eliminar",
        "fieldEmptyForCvv": "Introduza o código CVV.",
        "fieldEmptyForExpirationDate": "Introduza a data de validade.",
        "fieldEmptyForCardholderName": "Introduza um nome do titular do cartão.",
        "fieldTooLongForCardholderName": "O nome do titular do cartão tem de ter menos de 256 carateres.",
        "fieldEmptyForNumber": "Introduza um número.",
        "fieldEmptyForPostalCode": "Introduza o código postal.",
        "fieldInvalidForCardholderName": "Este nome do titular do cartão não é válido.",
        "fieldInvalidForCvv": "Este código de segurança não é válido.",
        "fieldInvalidForExpirationDate": "Esta data de validade não é correta.",
        "fieldInvalidForNumber": "Este número de cartão não é válido.",
        "fieldInvalidForPostalCode": "Este código postal não é válido.",
        "genericError": "Tudo indica que houve um problema.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Este cartão de crédito já está registado como um meio de pagamento guardado.",
        "hostedFieldsFailedTokenizationError": "Verifique os dados e tente novamente.",
        "hostedFieldsFieldsInvalidError": "Verifique os dados e tente novamente.",
        "hostedFieldsTokenizationNetworkErrorError": "Erro de rede. Tente novamente.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "A verificação do cartão de crédito falhou. Verifique os dados e tente novamente.",
        "paypalButtonMustBeUsed": "Use o botão PayPal para continuar com o seu pagamento.",
        "paypalAccountTokenizationFailedError": "Ocorreu um erro ao associar a conta PayPal. Tente novamente.",
        "paypalFlowFailedError": "Ocorreu um erro na ligação com PayPal. Tente novamente.",
        "paypalTokenizationRequestActiveError": "Já há uma autorização de pagamento PayPal em curso.",
        "venmoCanceledError": "Ocorreu um erro. Certifique-se de que tem a versão mais recente da aplicação Venmo instalada no seu dispositivo e que o navegador suporta a mudança para o Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Não é possível eliminar o meio de pagamento, tente novamente.",
        "venmoAppFailedError": "Não foi possível encontrar a aplicação Venmo no dispositivo.",
        "unsupportedCardTypeError": "Este tipo de cartão não é suportado. Tente usar outro cartão.",
        "applePayTokenizationError": "Ocorreu um erro de rede ao processar o pagamento com Apple Pay. Tente novamente.",
        "applePayActiveCardError": "Adicione um cartão suportado à sua carteira Apple Pay.",
        "cardholderNameLabel": "Nome do titular do cartão",
        "cardNumberLabel": "Número do cartão",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 dígitos)",
        "cvvFourDigitLabelSubheading": "(4 dígitos)",
        "cardholderNamePlaceholder": "Nome do titular do cartão",
        "expirationDateLabel": "Data de validade",
        "expirationDateLabelSubheading": "(MM/AA)",
        "expirationDatePlaceholder": "MM/AA",
        "postalCodeLabel": "Código postal",
        "saveCardLabel": "Guardar cartão",
        "payWithCard": "Pagar com cartão",
        "endingIn": "Terminado em {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Cartão",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    241: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Способы оплаты: {{paymentSource}}",
        "chooseAnotherWayToPay": "Выберите другой способ оплаты",
        "chooseAWayToPay": "Выберите способ оплаты",
        "otherWaysToPay": "Другие способы оплаты",
        "edit": "Редактировать",
        "doneEditing": "Готово",
        "editPaymentMethods": "Редактировать способы оплаты",
        "CreditCardDeleteConfirmationMessage": "Удалить карту {{secondaryIdentifier}}, оканчивающуюся на {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Удалить счет PayPal {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Вы действительно хотите удалить счет Venmo с именем пользователя {{identifier}}?",
        "genericDeleteConfirmationMessage": "Вы действительно хотите удалить этот способ оплаты?",
        "deleteCancelButton": "Отмена",
        "deleteConfirmationButton": "Удалить",
        "fieldEmptyForCvv": "Укажите код безопасности.",
        "fieldEmptyForExpirationDate": "Укажите дату окончания срока действия.",
        "fieldEmptyForCardholderName": "Введите имя и фамилию владельца карты.",
        "fieldTooLongForCardholderName": "Имя владельца карты должно содержать не более 256 символов.",
        "fieldEmptyForNumber": "Введите номер.",
        "fieldEmptyForPostalCode": "Укажите почтовый индекс.",
        "fieldInvalidForCardholderName": "Недопустимое имя владельца карты.",
        "fieldInvalidForCvv": "Этот код безопасности недействителен.",
        "fieldInvalidForExpirationDate": "Эта дата окончания срока действия недействительна.",
        "fieldInvalidForNumber": "Этот номер карты недействителен.",
        "fieldInvalidForPostalCode": "Этот почтовый индекс недействителен.",
        "genericError": "Возникла проблема с нашей стороны.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Эта кредитная карта уже указана как сохраненный источник средств.",
        "hostedFieldsFailedTokenizationError": "Проверьте правильность ввода данных и повторите попытку.",
        "hostedFieldsFieldsInvalidError": "Проверьте правильность ввода данных и повторите попытку.",
        "hostedFieldsTokenizationNetworkErrorError": "Ошибка сети. Повторите попытку.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Проверка банковской карты не выполнена. Проверьте правильность ввода данных и повторите попытку.",
        "paypalButtonMustBeUsed": "Используйте кнопку PayPal, чтобы продолжить совершение оплаты.",
        "paypalAccountTokenizationFailedError": "Что-то пошло не так — не удалось добавить учетную запись PayPal. Повторите попытку.",
        "paypalFlowFailedError": "Что-то пошло не так — не удалось подключиться к системе PayPal. Повторите попытку.",
        "paypalTokenizationRequestActiveError": "Выполняется авторизация платежа PayPal.",
        "venmoCanceledError": "Возникла ошибка. Просим вас убедиться, что у вас установлена новейшая версия приложения Venmo и ваш браузер поддерживает переключение к Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Не удалось удалить способ оплаты. Повторите попытку.",
        "venmoAppFailedError": "Приложение Venmo не обнаружено на вашем устройстве.",
        "unsupportedCardTypeError": "Этот тип карты не поддерживается. Попробуйте воспользоваться другой картой.",
        "applePayTokenizationError": "При обработке платежа через Apple Pay возникла сетевая ошибка. Повторите попытку.",
        "applePayActiveCardError": "Добавьте поддерживаемую карту к своему счету Apple Pay.",
        "cardholderNameLabel": "Имя и фамилия владельца",
        "cardNumberLabel": "Номер карты",
        "cvvLabel": "Код безопасности",
        "cvvThreeDigitLabelSubheading": "(3 цифры)",
        "cvvFourDigitLabelSubheading": "(4 цифры)",
        "cardholderNamePlaceholder": "Имя и фамилия владельца",
        "expirationDateLabel": "Срок действия",
        "expirationDateLabelSubheading": "(ММ/ГГ)",
        "expirationDatePlaceholder": "ММ/ГГ",
        "postalCodeLabel": "Индекс",
        "saveCardLabel": "Сохранить карту",
        "payWithCard": "Оплатить картой",
        "endingIn": "Последние четыре цифры номера карты: {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Карта",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    242: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Spôsob úhrady: {{paymentSource}}",
        "chooseAnotherWayToPay": "Vyberte iný spôsob platby",
        "chooseAWayToPay": "Vyberte spôsob platby",
        "otherWaysToPay": "Iné spôsoby platby",
        "edit": "Upraviť",
        "doneEditing": "Hotovo",
        "editPaymentMethods": "Upraviť spôsoby platby",
        "CreditCardDeleteConfirmationMessage": "Odstrániť kartu {{secondaryIdentifier}} končiacu na {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Odstrániť účet PayPal {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Naozaj chcete odstrániť účet Venmo s menom používateľa {{identifier}}?",
        "genericDeleteConfirmationMessage": "Ste si istí, že chcete tento spôsob platby odstrániť?",
        "deleteCancelButton": "Zrušiť",
        "deleteConfirmationButton": "Odstrániť",
        "fieldEmptyForCvv": "Zadajte číslo CVV.",
        "fieldEmptyForExpirationDate": "Zadajte dátum skončenia platnosti.",
        "fieldEmptyForCardholderName": "Zadajte meno majiteľa karty.",
        "fieldTooLongForCardholderName": "Meno majiteľa karty musí obsahovať menej ako 256 znakov.",
        "fieldEmptyForNumber": "Zadajte číslo.",
        "fieldEmptyForPostalCode": "Zadajte PSČ.",
        "fieldInvalidForCardholderName": "Toto meno majiteľa karty je neplatné.",
        "fieldInvalidForCvv": "Tento bezpečnostný kód je neplatný.",
        "fieldInvalidForExpirationDate": "Tento dátum skončenia platnosti je neplatný.",
        "fieldInvalidForNumber": "Toto číslo karty je neplatné.",
        "fieldInvalidForPostalCode": "Toto PSČ je neplatné.",
        "genericError": "Vyskytla sa chyba na našej strane.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Táto kreditná karta už existuje ako uložená metóda platby.",
        "hostedFieldsFailedTokenizationError": "Skontrolujte údaje a skúste to znova.",
        "hostedFieldsFieldsInvalidError": "Skontrolujte údaje a skúste to znova.",
        "hostedFieldsTokenizationNetworkErrorError": "Chyba v sieti. Skúste to znova.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Overenie kreditnej karty nebolo úspešné. Skontrolujte údaje a skúste to znova.",
        "paypalButtonMustBeUsed": "Ak chcete pokračovať v platbe, použite tlačidlo PayPal.",
        "paypalAccountTokenizationFailedError": "Vyskytla sa chyba pri pridávaní účtu PayPal. Skúste to znova.",
        "paypalFlowFailedError": "Vyskytla sa chyba pri pripájaní do účtu PayPal. Skúste to znova.",
        "paypalTokenizationRequestActiveError": "Autorizácia platby PayPal už prebieha.",
        "venmoCanceledError": "Vyskytla sa chyba. Skontrolujte, či máte v zariadení nainštalovanú najnovšiu verziu aplikácie Venmo a či prehliadač podporuje prechod na aplikáciu Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Nebolo možné odstrániť spôsob platby, skúste to znova.",
        "venmoAppFailedError": "Aplikáciu Venmo sa vo vašom zariadení nepodarilo nájsť.",
        "unsupportedCardTypeError": "Tento typ karty nie je podporovaný. Skúste inú kartu.",
        "applePayTokenizationError": "Počas spracúvania platby cez Apple Pay došlo k chybe siete. Skúste to znova.",
        "applePayActiveCardError": "Pridajte si podporovanú kartu do peňaženky Apple Pay.",
        "cardholderNameLabel": "Meno majiteľa karty",
        "cardNumberLabel": "Číslo karty",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 číslice)",
        "cvvFourDigitLabelSubheading": "(4 číslice)",
        "cardholderNamePlaceholder": "Meno majiteľa karty",
        "expirationDateLabel": "Dátum skončenia platnosti",
        "expirationDateLabelSubheading": "(MM/RR)",
        "expirationDatePlaceholder": "MM/RR",
        "postalCodeLabel": "PSČ",
        "saveCardLabel": "Uložiť kartu",
        "payWithCard": "Zaplatiť kartou",
        "endingIn": "S posledným štvorčíslím {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Karta",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    243: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "Betalas med {{paymentSource}}",
        "chooseAnotherWayToPay": "Välj ett annat sätt att betala",
        "chooseAWayToPay": "Välj hur du vill betala",
        "otherWaysToPay": "Andra sätt att betala",
        "edit": "Ändra",
        "doneEditing": "Klart",
        "editPaymentMethods": "Redigera betalningsmetoder",
        "CreditCardDeleteConfirmationMessage": "Ta bort {{secondaryIdentifier}}-kort som slutar på {{identifier}}?",
        "PayPalAccountDeleteConfirmationMessage": "Ta bort PayPal-konto {{identifier}}?",
        "VenmoAccountDeleteConfirmationMessage": "Är du säker på att du vill ta bort Venmo-konto med användarnamn {{identifier}}?",
        "genericDeleteConfirmationMessage": "Är du säker på att du vill ta bort den här betalningsmetoden?",
        "deleteCancelButton": "Avbryt",
        "deleteConfirmationButton": "Ta bort",
        "fieldEmptyForCvv": "Fyll i en CVV-kod.",
        "fieldEmptyForExpirationDate": "Fyll i ett utgångsdatum.",
        "fieldEmptyForCardholderName": "Fyll i kortinnehavarens namn.",
        "fieldTooLongForCardholderName": "Kortinnehavarens namn måste vara kortare än 256 tecken.",
        "fieldEmptyForNumber": "Fyll i ett nummer.",
        "fieldEmptyForPostalCode": "Fyll i ett postnummer.",
        "fieldInvalidForCardholderName": "Namnet på kortinnehavaren är ogiltigt.",
        "fieldInvalidForCvv": "Den här säkerhetskoden är inte giltig.",
        "fieldInvalidForExpirationDate": "Det här utgångsdatumet är inte giltigt.",
        "fieldInvalidForNumber": "Det här kortnumret är inte giltigt.",
        "fieldInvalidForPostalCode": "Det här postnumret är inte giltigt.",
        "genericError": "Ett fel uppstod.",
        "hostedFieldsTokenizationFailOnDuplicateError": "Det här betalkortet finns redan som en sparad betalningsmetod.",
        "hostedFieldsFailedTokenizationError": "Kontrollera uppgifterna och försök igen.",
        "hostedFieldsFieldsInvalidError": "Kontrollera uppgifterna och försök igen.",
        "hostedFieldsTokenizationNetworkErrorError": "Nätverksfel. Försök igen.",
        "hostedFieldsTokenizationCvvVerificationFailedError": "Verifieringen av betalkort misslyckades. Kontrollera uppgifterna och försök igen.",
        "paypalButtonMustBeUsed": "Använd PayPal-knappen för att fortsätta med din betalning.",
        "paypalAccountTokenizationFailedError": "Ett fel uppstod när PayPal-kontot skulle läggas till. Försök igen.",
        "paypalFlowFailedError": "Ett fel uppstod när anslutningen till PayPal skulle upprättas. Försök igen.",
        "paypalTokenizationRequestActiveError": "Betalningsgodkännandet för PayPal behandlas redan.",
        "venmoCanceledError": "Något gick fel. Se till att du har den senaste versionen av Venmo-appen installerad på din enhet och att webbläsaren stöder att gå över till Venmo.",
        "vaultManagerPaymentMethodDeletionError": "Det gick inte att ta bort betalningsmetoden. Försök igen.",
        "venmoAppFailedError": "Venmo-appen kunde inte hittas på din enhet.",
        "unsupportedCardTypeError": "Den här korttypen stöds inte. Pröva med ett annat kort.",
        "applePayTokenizationError": "Ett nätverksfel inträffade när Apple Pay-betalningen skulle behandlas. Försök igen.",
        "applePayActiveCardError": "Lägg till ett kort som stöds i Apple Pay-e-plånboken.",
        "cardholderNameLabel": "Kortinnehavarens namn",
        "cardNumberLabel": "Kortnummer",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 siffror)",
        "cvvFourDigitLabelSubheading": "(4 siffror)",
        "cardholderNamePlaceholder": "Kortinnehavarens namn",
        "expirationDateLabel": "Utgångsdatum",
        "expirationDateLabelSubheading": "(MM/ÅÅ)",
        "expirationDatePlaceholder": "MM/ÅÅ",
        "postalCodeLabel": "Postnummer",
        "saveCardLabel": "Spara kort",
        "payWithCard": "Betala med kort",
        "endingIn": "Slutar på {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "Kort",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    244: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "การชำระเงินด้วย {{paymentSource}}",
        "chooseAnotherWayToPay": "เลือกวิธีอื่นเพื่อชำระเงิน",
        "chooseAWayToPay": "เลือกวิธีชำระเงิน",
        "otherWaysToPay": "วิธีอื่นๆ ในการชำระเงิน",
        "edit": "แก้ไข",
        "doneEditing": "เสร็จแล้ว",
        "editPaymentMethods": "แก้ไขวิธีการชำระเงิน",
        "CreditCardDeleteConfirmationMessage": "ลบบัตร {{secondaryIdentifier }} ที่ลงท้ายด้วย {{identifier}} หรือไม่",
        "PayPalAccountDeleteConfirmationMessage": "ลบ {{identifier}} บัญชี PayPal หรือไม่",
        "VenmoAccountDeleteConfirmationMessage": "คุณมั่นใจว่าต้องการลบบัญชี Venmo ที่มีชื่อผู้ใช้ {{identifier}} หรือไม่",
        "genericDeleteConfirmationMessage": "คุณมั่นใจว่าต้องการลบวิธีการชำระเงินนี้หรือไม่",
        "deleteCancelButton": "ยกเลิก",
        "deleteConfirmationButton": "ลบ",
        "fieldEmptyForCvv": "โปรดกรอก CVV (รหัสการตรวจสอบยืนยันบัตร)",
        "fieldEmptyForExpirationDate": "โปรดกรอกวันที่หมดอายุ",
        "fieldEmptyForCardholderName": "โปรดกรอกชื่อเจ้าของบัตร",
        "fieldTooLongForCardholderName": "ชื่อผู้ถือบัตรจะต้องไม่เกิน 256 อักขระ",
        "fieldEmptyForNumber": "โปรดกรอกหมายเลข",
        "fieldEmptyForPostalCode": "โปรดกรอกรหัสไปรษณีย์",
        "fieldInvalidForCardholderName": "ชื่อผู้ถือบัตรนี้ไม่ถูกต้องชื่อผู้ถือบัตรนี้ไม่ถูกต้อง",
        "fieldInvalidForCvv": "รหัสความปลอดภัยนี้ไม่ถูกต้อง",
        "fieldInvalidForExpirationDate": "วันที่หมดอายุนี้ไม่ถูกต้อง",
        "fieldInvalidForNumber": "หมายเลขบัตรนี้ไม่ถูกต้อง",
        "fieldInvalidForPostalCode": "รหัสไปรษณีย์นี้ไม่ถูกต้อง",
        "genericError": "เกิดข้อผิดพลาดขึ้นในระบบของเรา",
        "hostedFieldsTokenizationFailOnDuplicateError": "บัตรเครดิตนี้ถูกบันทึกไว้เป็นวิธีการชำระเงิน",
        "hostedFieldsFailedTokenizationError": "โปรดตรวจสอบข้อมูลของคุณ แล้วลองใหม่อีกครั้ง",
        "hostedFieldsFieldsInvalidError": "โปรดตรวจสอบข้อมูลของคุณ แล้วลองใหม่อีกครั้ง",
        "hostedFieldsTokenizationNetworkErrorError": "ข้อผิดพลาดด้านเครือข่าย โปรดลองอีกครั้ง",
        "hostedFieldsTokenizationCvvVerificationFailedError": "การตรวจสอบยืนยันบัตรเครดิตล้มเหลว โปรดตรวจสอบข้อมูลของคุณ แล้วลองใหม่อีกครั้ง",
        "paypalButtonMustBeUsed": "ใช้ปุ่ม PayPal เพื่อดำเนินการชำระเงินต่อ",
        "paypalAccountTokenizationFailedError": "เกิดข้อผิดพลาดในการเพิ่มบัญชี PayPal โปรดลองอีกครั้ง",
        "paypalFlowFailedError": "เกิดข้อผิดพลาดในการเชื่อมต่อกับ PayPal โปรดลองอีกครั้ง",
        "paypalTokenizationRequestActiveError": "การอนุญาตการชำระเงินของ PayPal อยู่ในระหว่างดำเนินการ",
        "venmoCanceledError": "เกิดข้อผิดพลาดบางประการ ตรวจสอบว่าคุณมีแอป Venmo เวอร์ชันล่าสุดติดตั้งในอุปกรณ์ของคุณ และมีเบราเซอร์ที่รองรับ Venmo",
        "vaultManagerPaymentMethodDeletionError": "ไม่สามารถลบวิธีการชำระเงินได้ ลองอีกครั้ง",
        "venmoAppFailedError": "ไม่พบแอป Venmo บนอุปกรณ์ของคุณ",
        "unsupportedCardTypeError": "ไม่รองรับบัตรประเภทนี้ โปรดลองใช้บัตรใบอื่น",
        "applePayTokenizationError": "เกิดข้อผิดพลาดด้านเครือข่ายขึ้นขณะดำเนินการชำระเงินด้วย Apple Pay โปรดลองอีกครั้ง",
        "applePayActiveCardError": "เพิ่มบัตรที่รองรับในกระเป๋าสตางค์ Apple Pay ของคุณ",
        "cardholderNameLabel": "ชื่อเจ้าของบัตร",
        "cardNumberLabel": "หมายเลขบัตร",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "(3 หลัก)",
        "cvvFourDigitLabelSubheading": "(4 หลัก)",
        "cardholderNamePlaceholder": "ชื่อเจ้าของบัตร",
        "expirationDateLabel": "วันหมดอายุ",
        "expirationDateLabelSubheading": "(ดด/ปป)",
        "expirationDatePlaceholder": "ดด/ปป",
        "postalCodeLabel": "รหัสไปรษณีย์",
        "saveCardLabel": "บันทึกบัตร",
        "payWithCard": "ชำระเงินด้วยบัตร",
        "endingIn": "ลงท้ายด้วย {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "บัตร",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    245: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "正在使用{{paymentSource}}付款",
        "chooseAnotherWayToPay": "选择其他付款方式",
        "chooseAWayToPay": "选择付款方式",
        "otherWaysToPay": "其他付款方式",
        "edit": "编辑",
        "doneEditing": "完成",
        "editPaymentMethods": "编辑付款方式",
        "CreditCardDeleteConfirmationMessage": "删除尾号为{{identifier}}的{{secondaryIdentifier}}卡？",
        "PayPalAccountDeleteConfirmationMessage": "删除PayPal账户{{identifier}}？",
        "VenmoAccountDeleteConfirmationMessage": "确定要删除用户名为{{identifier}}的Venmo账户吗？",
        "genericDeleteConfirmationMessage": "确定要删除该付款方式吗？",
        "deleteCancelButton": "取消",
        "deleteConfirmationButton": "删除",
        "fieldEmptyForCvv": "请填写CVV。",
        "fieldEmptyForExpirationDate": "请填写有效期限。",
        "fieldEmptyForCardholderName": "请填写持卡人的姓名。",
        "fieldTooLongForCardholderName": "持卡人姓名必须少于256个字符。",
        "fieldEmptyForNumber": "请填写一个号码。",
        "fieldEmptyForPostalCode": "请填写邮政编码。",
        "fieldInvalidForCardholderName": "此持卡人姓名无效。",
        "fieldInvalidForCvv": "此安全代码无效。",
        "fieldInvalidForExpirationDate": "此有效期限无效。",
        "fieldInvalidForNumber": "此卡号无效。",
        "fieldInvalidForPostalCode": "此邮政编码无效。",
        "genericError": "我们遇到了一些问题",
        "hostedFieldsTokenizationFailOnDuplicateError": "此信用卡已作为保存后的付款方式存在。",
        "hostedFieldsFailedTokenizationError": "请检查您的信息，然后重试。",
        "hostedFieldsFieldsInvalidError": "请检查您的信息，然后重试。",
        "hostedFieldsTokenizationNetworkErrorError": "网络错误。请重试。",
        "hostedFieldsTokenizationCvvVerificationFailedError": "信用卡验证失败。请检查您的信息，然后重试。",
        "paypalButtonMustBeUsed": "使用PayPal按钮继续进行付款。",
        "paypalAccountTokenizationFailedError": "添加PayPal账户时出错。请重试。",
        "paypalFlowFailedError": "连接到PayPal时出错。请重试。",
        "paypalTokenizationRequestActiveError": "PayPal付款授权已在进行中。",
        "venmoCanceledError": "我们遇到了问题。请确保您的设备上已安装最新版本的Venmo应用，并且您的浏览器支持切换到Venmo。",
        "vaultManagerPaymentMethodDeletionError": "无法删除付款方式，请重试。",
        "venmoAppFailedError": "在您的设备上找不到Venmo应用。",
        "unsupportedCardTypeError": "不支持该卡类型。请尝试其他卡。",
        "applePayTokenizationError": "处理Apple Pay付款时出现网络错误。请重试。",
        "applePayActiveCardError": "请添加受支持的卡到您的Apple Pay钱包。",
        "cardholderNameLabel": "持卡人姓名",
        "cardNumberLabel": "卡号",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "（3位数）",
        "cvvFourDigitLabelSubheading": "（4位数）",
        "cardholderNamePlaceholder": "持卡人姓名",
        "expirationDateLabel": "有效期限",
        "expirationDateLabelSubheading": "（MM/YY）",
        "expirationDatePlaceholder": "MM/YY",
        "postalCodeLabel": "邮政编码",
        "saveCardLabel": "保存卡",
        "payWithCard": "用卡付款",
        "endingIn": "尾号为{{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "卡",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "银联"
      };
    }, {}],
    246: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "付款方式為 {{paymentSource}}",
        "chooseAnotherWayToPay": "選擇其他付款方式",
        "chooseAWayToPay": "選擇付款方式",
        "otherWaysToPay": "其他付款方式",
        "edit": "編輯",
        "doneEditing": "完成",
        "editPaymentMethods": "編輯付款方式",
        "CreditCardDeleteConfirmationMessage": "要刪除末碼為 {{identifier}} 的 {{secondaryIdentifier}} 卡嗎？",
        "PayPalAccountDeleteConfirmationMessage": "要刪除 PayPal 帳戶 {{identifier}} 嗎？",
        "VenmoAccountDeleteConfirmationMessage": "確定要刪除使用者名稱為 {{identifier}} 的 Venmo 帳戶嗎？",
        "genericDeleteConfirmationMessage": "確定要刪除此付款方式嗎？",
        "deleteCancelButton": "取消",
        "deleteConfirmationButton": "刪除",
        "fieldEmptyForCvv": "請填寫信用卡認證碼。",
        "fieldEmptyForExpirationDate": "請填寫到期日。",
        "fieldEmptyForCardholderName": "請填寫持卡人的名字。",
        "fieldTooLongForCardholderName": "持卡人姓名必須少於 256 個字元。",
        "fieldEmptyForNumber": "請填寫號碼。",
        "fieldEmptyForPostalCode": "請填寫郵遞區號。",
        "fieldInvalidForCardholderName": "持卡人姓名無效。",
        "fieldInvalidForCvv": "此安全代碼無效。",
        "fieldInvalidForExpirationDate": "此到期日無效。",
        "fieldInvalidForNumber": "此卡號無效。",
        "fieldInvalidForPostalCode": "此郵遞區號無效。",
        "genericError": "系統發生錯誤。",
        "hostedFieldsTokenizationFailOnDuplicateError": "此信用卡已存在，為已儲存的付款方式。",
        "hostedFieldsFailedTokenizationError": "請檢查你的資料並再試一次。",
        "hostedFieldsFieldsInvalidError": "請檢查你的資料並再試一次。",
        "hostedFieldsTokenizationNetworkErrorError": "網絡錯誤。再試一次。",
        "hostedFieldsTokenizationCvvVerificationFailedError": "信用卡認證失敗。請檢查你的資料並再試一次。",
        "paypalButtonMustBeUsed": "使用 PayPal 按鈕以繼續付款。",
        "paypalAccountTokenizationFailedError": "加入 PayPal 帳戶時發生錯誤。再試一次。",
        "paypalFlowFailedError": "連接 PayPal 時發生錯誤。再試一次。",
        "paypalTokenizationRequestActiveError": "PayPal 付款授權已在處理中。",
        "venmoCanceledError": "系統發生錯誤，請確保你已在裝置上安裝最新版本的 Venmo 應用程式，而且你的瀏覽器支援切換至 Venmo。",
        "vaultManagerPaymentMethodDeletionError": "無法刪除付款方式，請再試一次。",
        "venmoAppFailedError": "在你的裝置上找不到 Venmo 應用程式。",
        "unsupportedCardTypeError": "不可使用此信用卡類型。請改用其他信用卡。",
        "applePayTokenizationError": "處理 Apple Pay 付款時發生網絡錯誤。再試一次。",
        "applePayActiveCardError": "在 Apple Pay 錢包中加入支援的信用卡。",
        "cardholderNameLabel": "持卡人名字",
        "cardNumberLabel": "卡號",
        "cvvLabel": "信用卡認證碼",
        "cvvThreeDigitLabelSubheading": "（3 位數）",
        "cvvFourDigitLabelSubheading": "（4 位數）",
        "cardholderNamePlaceholder": "持卡人名字",
        "expirationDateLabel": "到期日",
        "expirationDateLabelSubheading": "(MM/YY)",
        "expirationDatePlaceholder": "月 / 年",
        "postalCodeLabel": "郵遞區號",
        "saveCardLabel": "儲存信用卡",
        "payWithCard": "使用信用卡付款",
        "endingIn": "末碼為 {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "信用卡",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    247: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "以 {{paymentSource}} 付款",
        "chooseAnotherWayToPay": "選擇付款的以其他方式付款",
        "chooseAWayToPay": "選擇付款方式",
        "otherWaysToPay": "其他付款方式",
        "edit": "編輯",
        "doneEditing": "完成",
        "editPaymentMethods": "編輯付款方式",
        "CreditCardDeleteConfirmationMessage": "確定要刪除末碼為 {{identifier}} 的 {{secondaryIdentifier}} 卡片嗎？",
        "PayPalAccountDeleteConfirmationMessage": "確定要刪除 {{identifier}} PayPal 帳戶嗎？",
        "VenmoAccountDeleteConfirmationMessage": "確定要刪除用戶名稱為 {{identifier}} 的 Venmo 帳戶嗎？",
        "genericDeleteConfirmationMessage": "確定要刪除此付款方式？",
        "deleteCancelButton": "取消",
        "deleteConfirmationButton": "刪除",
        "fieldEmptyForCvv": "請填妥信用卡驗證碼。",
        "fieldEmptyForExpirationDate": "請填妥到期日。",
        "fieldEmptyForCardholderName": "請填妥持卡人姓名。",
        "fieldTooLongForCardholderName": "持卡人姓名不能超過 256 個字元。",
        "fieldEmptyForNumber": "請填妥號碼。",
        "fieldEmptyForPostalCode": "請填寫郵遞區號。",
        "fieldInvalidForCardholderName": "此持卡人姓名無效。",
        "fieldInvalidForCvv": "這組安全代碼無效。",
        "fieldInvalidForExpirationDate": "此到期日無效。",
        "fieldInvalidForNumber": "此卡號無效。",
        "fieldInvalidForPostalCode": "此郵遞區號無效。",
        "genericError": "我們的系統發生問題。",
        "hostedFieldsTokenizationFailOnDuplicateError": "此信用卡已存在，為已儲存的付款方式。",
        "hostedFieldsFailedTokenizationError": "請檢查你的資料並重試。",
        "hostedFieldsFieldsInvalidError": "請檢查你的資料並重試。",
        "hostedFieldsTokenizationNetworkErrorError": "網路錯誤。請重試。",
        "hostedFieldsTokenizationCvvVerificationFailedError": "信用卡認證失敗。請檢查你的資料並重試。",
        "paypalButtonMustBeUsed": "使用 PayPal 按鈕以繼續付款。",
        "paypalAccountTokenizationFailedError": "新增 PayPal 帳戶時，系統發生錯誤。請重試。",
        "paypalFlowFailedError": "連結至 PayPal 時，系統發生錯誤。請重試。",
        "paypalTokenizationRequestActiveError": "PayPal 支付款項的授權已在處理中。",
        "venmoCanceledError": "系統發生錯誤。確認你的裝置上裝有最新版本的 Venmo 應用程式，而且瀏覽器支援切換至 Venmo。",
        "vaultManagerPaymentMethodDeletionError": "無法刪除付款方式，請再試一次。",
        "venmoAppFailedError": "你的裝置上找不到 Venmo 應用程式。",
        "unsupportedCardTypeError": "不支援此卡片類型。請改用其他卡片。",
        "applePayTokenizationError": "在處理 Apple Pay 付款時發生網路錯誤。請重試。",
        "applePayActiveCardError": "新增支援的卡片至你的 Apple Pay 錢包。",
        "cardholderNameLabel": "持卡人姓名",
        "cardNumberLabel": "卡號",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "（3 位數）",
        "cvvFourDigitLabelSubheading": "（4 位數）",
        "cardholderNamePlaceholder": "持卡人姓名",
        "expirationDateLabel": "到期日",
        "expirationDateLabelSubheading": "（月 / 年）",
        "expirationDatePlaceholder": "月 / 年",
        "postalCodeLabel": "郵遞區號",
        "saveCardLabel": "儲存卡片",
        "payWithCard": "使用信用卡 / 扣帳卡付款",
        "endingIn": "末碼為 {{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "信用卡或扣帳卡",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal 信貸",
        "Google Pay": "Google Pay",
        "American Express": "美國運通 (American Express)",
        "Discover": "Discover",
        "Diners Club": "大來國際 (Diners Club)",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "UnionPay"
      };
    }, {}],
    248: [function (require, module, exports) {
      'use strict';

      module.exports = {
        "payingWith": "使用{{paymentSource}}付款",
        "chooseAnotherWayToPay": "选择其它付款方式",
        "chooseAWayToPay": "选择付款方式",
        "otherWaysToPay": "其它付款方式",
        "edit": "编辑",
        "doneEditing": "完成",
        "editPaymentMethods": "编辑付款方式",
        "CreditCardDeleteConfirmationMessage": "删除尾号为{{identifier}}的{{secondaryIdentifier}}卡？",
        "PayPalAccountDeleteConfirmationMessage": "删除PayPal账户{{identifier}}？",
        "VenmoAccountDeleteConfirmationMessage": "确定要删除用户名为{{identifier}}的Venmo账户吗？",
        "genericDeleteConfirmationMessage": "确定要删除此付款方式吗？",
        "deleteCancelButton": "取消",
        "deleteConfirmationButton": "删除",
        "fieldEmptyForCvv": "请填写 CVV。",
        "fieldEmptyForExpirationDate": "请填写有效期限。",
        "fieldEmptyForCardholderName": "请填写持卡人姓名。",
        "fieldTooLongForCardholderName": "持卡人姓名必须少于256个字符。",
        "fieldEmptyForNumber": "请填写号码。",
        "fieldEmptyForPostalCode": "请填写邮政编码。",
        "fieldInvalidForCardholderName": "此持卡人姓名无效。",
        "fieldInvalidForCvv": "此验证码无效。",
        "fieldInvalidForExpirationDate": "此有效期限无效。",
        "fieldInvalidForNumber": "此卡号无效。",
        "fieldInvalidForPostalCode": "此邮政编码无效。",
        "genericError": "我们遇到了一些问题。",
        "hostedFieldsTokenizationFailOnDuplicateError": "此信用卡已存在于已保存的付款方式中。",
        "hostedFieldsFailedTokenizationError": "请检查您的信息，然后重试。",
        "hostedFieldsFieldsInvalidError": "请检查您的信息，然后重试。",
        "hostedFieldsTokenizationNetworkErrorError": "网络错误。请重试。",
        "hostedFieldsTokenizationCvvVerificationFailedError": "信用卡认证失败。请检查您的信息，然后重试。",
        "paypalButtonMustBeUsed": "使用PayPal按钮以便继续进行您的付款。",
        "paypalAccountTokenizationFailedError": "添加PayPal账户时遇到了问题。请重试。",
        "paypalFlowFailedError": "连接到PayPal时遇到了问题。请重试。",
        "paypalTokenizationRequestActiveError": "PayPal付款授权正在处理中。",
        "venmoCanceledError": "我们遇到了一些问题。请确保您的设备上安装了最新版本的Venmo应用，并且您的浏览器支持切换到Venmo。",
        "vaultManagerPaymentMethodDeletionError": "无法删除付款方式，请重试。",
        "venmoAppFailedError": "未能在您的设备上找到Venmo应用。",
        "unsupportedCardTypeError": "不支持此类型的卡。请尝试其它卡。",
        "applePayTokenizationError": "处理Apple Pay付款时出现了网络错误。请重试。",
        "applePayActiveCardError": "在您的Apple Pay钱包中添加一张受支持的卡。",
        "cardholderNameLabel": "持卡人姓名",
        "cardNumberLabel": "卡号",
        "cvvLabel": "CVV",
        "cvvThreeDigitLabelSubheading": "（3位数）",
        "cvvFourDigitLabelSubheading": "（4位数）",
        "cardholderNamePlaceholder": "持卡人姓名",
        "expirationDateLabel": "有效期限",
        "expirationDateLabelSubheading": "（月/年）",
        "expirationDatePlaceholder": "月/年",
        "postalCodeLabel": "邮政编码",
        "saveCardLabel": "保存卡",
        "payWithCard": "使用卡付款",
        "endingIn": "尾号为{{lastFourCardDigits}}",
        "Apple Pay": "Apple Pay",
        "Venmo": "Venmo",
        "Card": "卡",
        "PayPal": "PayPal",
        "PayPal Credit": "PayPal Credit",
        "Google Pay": "Google Pay",
        "American Express": "American Express",
        "Discover": "Discover",
        "Diners Club": "Diners Club",
        "MasterCard": "Mastercard",
        "Visa": "Visa",
        "JCB": "JCB",
        "Maestro": "Maestro",
        "UnionPay": "银联"
      };
    }, {}],
    249: [function (require, module, exports) {
      'use strict';

      var assign = require('../lib/assign').assign;

      var classList = require('@braintree/class-list');

      var DropinError = require('../lib/dropin-error');

      var errors = require('../constants').errors;

      var Promise = require('../lib/promise');

      function BaseView(options) {
        options = options || {};
        assign(this, options);
      }

      BaseView.prototype.getElementById = function (id) {
        if (!this.element) {
          return null;
        }

        return this.element.querySelector('[data-braintree-id="' + id + '"]');
      };

      BaseView.prototype.requestPaymentMethod = function () {
        return Promise.reject(new DropinError(errors.NO_PAYMENT_METHOD_ERROR));
      };

      BaseView.prototype.getPaymentMethod = function () {
        return this.activeMethodView && this.activeMethodView.paymentMethod;
      };

      BaseView.prototype.onSelection = function () {};

      BaseView.prototype.teardown = function () {
        return Promise.resolve();
      };

      BaseView.prototype.preventUserAction = function () {
        if (this.element) {
          classList.add(this.element, 'braintree-sheet--loading');
        }

        this.model.preventUserAction();
      };

      BaseView.prototype.allowUserAction = function () {
        if (this.element) {
          classList.remove(this.element, 'braintree-sheet--loading');
        }

        this.model.allowUserAction();
      };

      module.exports = BaseView;
    }, {
      "../constants": 191,
      "../lib/assign": 197,
      "../lib/dropin-error": 201,
      "../lib/promise": 208,
      "@braintree/class-list": 39
    }],
    250: [function (require, module, exports) {
      'use strict';

      var BaseView = require('./base-view');

      var addSelectionEventHandler = require('../lib/add-selection-event-handler');

      var paymentMethodTypes = require('../constants').paymentMethodTypes;

      function DeleteConfirmationView() {
        BaseView.apply(this, arguments);

        this._initialize();
      }

      DeleteConfirmationView.prototype = Object.create(BaseView.prototype);
      DeleteConfirmationView.prototype.constructor = DeleteConfirmationView;
      DeleteConfirmationView.ID = DeleteConfirmationView.prototype.ID = 'delete-confirmation';

      DeleteConfirmationView.prototype._initialize = function () {
        this._yesButton = this.getElementById('delete-confirmation__yes');
        this._noButton = this.getElementById('delete-confirmation__no');
        this._messageBox = this.getElementById('delete-confirmation__message');
        addSelectionEventHandler(this._yesButton, function () {
          this.model.deleteVaultedPaymentMethod();
        }.bind(this));
        addSelectionEventHandler(this._noButton, function () {
          this.model.cancelDeleteVaultedPaymentMethod();
        }.bind(this));
      };

      DeleteConfirmationView.prototype.applyPaymentMethod = function (paymentMethod) {
        var identifier, secondaryIdentifier;
        var messageText = this.strings[paymentMethod.type + 'DeleteConfirmationMessage'];

        if (messageText) {
          switch (paymentMethod.type) {
            case paymentMethodTypes.card:
              identifier = paymentMethod.details.lastFour;
              secondaryIdentifier = paymentMethod.details.cardType;
              secondaryIdentifier = this.strings[secondaryIdentifier] || secondaryIdentifier;
              break;

            case paymentMethodTypes.paypal:
              identifier = paymentMethod.details.email;
              break;

            case paymentMethodTypes.venmo:
              identifier = paymentMethod.details.username;
              break;

            default:
              break;
          }

          messageText = messageText.replace('{{identifier}}', identifier);

          if (secondaryIdentifier) {
            messageText = messageText.replace('{{secondaryIdentifier}}', secondaryIdentifier);
          }
        } else {
          messageText = this.strings.genericDeleteConfirmationMessage;
        }

        this._messageBox.innerText = messageText;
      };

      DeleteConfirmationView.prototype.onSelection = function () {
        window.requestAnimationFrame(function () {
          this._yesButton.focus();
        }.bind(this));
      };

      module.exports = DeleteConfirmationView;
    }, {
      "../constants": 191,
      "../lib/add-selection-event-handler": 195,
      "./base-view": 249
    }],
    251: [function (require, module, exports) {
      'use strict';

      var analytics = require('../lib/analytics');

      var analyticsKinds = require('../constants').analyticsKinds;

      var BaseView = require('./base-view');

      var classList = require('@braintree/class-list');

      var sheetViews = require('./payment-sheet-views');

      var PaymentMethodsView = require('./payment-methods-view');

      var PaymentOptionsView = require('./payment-options-view');

      var DeleteConfirmationView = require('./delete-confirmation-view');

      var addSelectionEventHandler = require('../lib/add-selection-event-handler');

      var Promise = require('../lib/promise');

      var wait = require('../lib/wait');

      var supportsFlexbox = require('../lib/supports-flexbox');

      var CHANGE_ACTIVE_PAYMENT_METHOD_TIMEOUT = require('../constants').CHANGE_ACTIVE_PAYMENT_METHOD_TIMEOUT;

      var DEVELOPER_MISCONFIGURATION_MESSAGE = require('../constants').errors.DEVELOPER_MISCONFIGURATION_MESSAGE;

      function MainView() {
        BaseView.apply(this, arguments);
        this.dependenciesInitializing = 0;

        this._initialize();
      }

      MainView.prototype = Object.create(BaseView.prototype);
      MainView.prototype.constructor = MainView;

      MainView.prototype._initialize = function () {
        var paymentOptionsView;
        this._hasMultiplePaymentOptions = this.model.supportedPaymentOptions.length > 1;
        this._views = {};
        this.sheetContainer = this.getElementById('sheet-container');
        this.sheetErrorText = this.getElementById('sheet-error-text');
        this.toggle = this.getElementById('toggle');
        this.disableWrapper = this.getElementById('disable-wrapper');
        this.lowerContainer = this.getElementById('lower-container');
        this.loadingContainer = this.getElementById('loading-container');
        this.dropinContainer = this.element.querySelector('.braintree-dropin');
        this.supportsFlexbox = supportsFlexbox();
        this.model.on('asyncDependenciesReady', this.hideLoadingIndicator.bind(this));
        this.model.on('errorOccurred', this.showSheetError.bind(this));
        this.model.on('errorCleared', this.hideSheetError.bind(this));
        this.model.on('preventUserAction', this.preventUserAction.bind(this));
        this.model.on('allowUserAction', this.allowUserAction.bind(this));
        this.paymentSheetViewIDs = Object.keys(sheetViews).reduce(function (ids, sheetViewKey) {
          var PaymentSheetView, paymentSheetView;

          if (this.model.supportedPaymentOptions.indexOf(sheetViewKey) !== -1) {
            PaymentSheetView = sheetViews[sheetViewKey];
            paymentSheetView = new PaymentSheetView({
              element: this.getElementById(PaymentSheetView.ID),
              mainView: this,
              model: this.model,
              client: this.client,
              strings: this.strings
            });
            paymentSheetView.initialize();
            this.addView(paymentSheetView);
            ids.push(paymentSheetView.ID);
          }

          return ids;
        }.bind(this), []);
        this.paymentMethodsViews = new PaymentMethodsView({
          element: this.element,
          model: this.model,
          client: this.client,
          strings: this.strings
        });
        this.addView(this.paymentMethodsViews);
        this.deleteConfirmationView = new DeleteConfirmationView({
          element: this.getElementById('delete-confirmation'),
          model: this.model,
          strings: this.strings
        });
        this.addView(this.deleteConfirmationView);
        addSelectionEventHandler(this.toggle, this.toggleAdditionalOptions.bind(this));
        this.model.on('changeActivePaymentMethod', function () {
          wait.delay(CHANGE_ACTIVE_PAYMENT_METHOD_TIMEOUT).then(function () {
            var id = PaymentMethodsView.ID; // if Drop-in gets into the state where it's told to go to the methods
            // view, but there are no saved payment methods, it should instead
            // redirect to the view it started on

            if (!this.model.hasPaymentMethods()) {
              id = this.model.getInitialViewId();
            }

            this.setPrimaryView(id);
          }.bind(this));
        }.bind(this));
        this.model.on('changeActiveView', this._onChangeActiveView.bind(this));
        this.model.on('removeActivePaymentMethod', function () {
          var activePaymentView = this.getView(this.model.getActivePaymentViewId());

          if (activePaymentView && typeof activePaymentView.removeActivePaymentMethod === 'function') {
            activePaymentView.removeActivePaymentMethod();
          }
        }.bind(this));
        this.model.on('enableEditMode', this.enableEditMode.bind(this));
        this.model.on('disableEditMode', this.disableEditMode.bind(this));
        this.model.on('confirmPaymentMethodDeletion', this.openConfirmPaymentMethodDeletionDialog.bind(this));
        this.model.on('cancelVaultedPaymentMethodDeletion', this.cancelVaultedPaymentMethodDeletion.bind(this));
        this.model.on('startVaultedPaymentMethodDeletion', this.startVaultedPaymentMethodDeletion.bind(this));
        this.model.on('finishVaultedPaymentMethodDeletion', this.finishVaultedPaymentMethodDeletion.bind(this));

        if (this._hasMultiplePaymentOptions) {
          paymentOptionsView = new PaymentOptionsView({
            client: this.client,
            element: this.getElementById(PaymentOptionsView.ID),
            mainView: this,
            model: this.model,
            strings: this.strings
          });
          this.addView(paymentOptionsView);
        }

        this._sendToDefaultView();
      };

      MainView.prototype._onChangeActiveView = function (data) {
        var id = data.newViewId;
        var activePaymentView = this.getView(id);

        if (id === PaymentMethodsView.ID) {
          classList.add(this.paymentMethodsViews.container, 'braintree-methods--active');
          classList.remove(this.sheetContainer, 'braintree-sheet--active');
        } else {
          wait.delay(0).then(function () {
            classList.add(this.sheetContainer, 'braintree-sheet--active');
          }.bind(this));
          classList.remove(this.paymentMethodsViews.container, 'braintree-methods--active');

          if (!this.getView(id).getPaymentMethod()) {
            this.model.setPaymentMethodRequestable({
              isRequestable: false
            });
          }
        }

        activePaymentView.onSelection();
      };

      MainView.prototype.addView = function (view) {
        this._views[view.ID] = view;
      };

      MainView.prototype.getView = function (id) {
        return this._views[id];
      };

      MainView.prototype.setPrimaryView = function (id, secondaryViewId) {
        var paymentMethod;
        wait.delay(0).then(function () {
          this.element.className = prefixShowClass(id);

          if (secondaryViewId) {
            classList.add(this.element, prefixShowClass(secondaryViewId));
          }
        }.bind(this));
        this.primaryView = this.getView(id);
        this.model.changeActiveView(id);

        if (this.paymentSheetViewIDs.indexOf(id) !== -1) {
          if (this.model.getPaymentMethods().length > 0 || this.getView(PaymentOptionsView.ID)) {
            this.showToggle();
          } else {
            this.hideToggle();
          }
        } else if (id === PaymentMethodsView.ID) {
          this.showToggle(); // Move options below the upper-container

          this.getElementById('lower-container').appendChild(this.getElementById('options'));
        } else if (id === PaymentOptionsView.ID) {
          this.hideToggle();
        }

        if (!this.supportsFlexbox) {
          this.element.setAttribute('data-braintree-no-flexbox', true);
        }

        paymentMethod = this.primaryView.getPaymentMethod();
        this.model.setPaymentMethodRequestable({
          isRequestable: Boolean(paymentMethod && !this.model.isInEditMode()),
          type: paymentMethod && paymentMethod.type,
          selectedPaymentMethod: paymentMethod
        });
        this.model.clearError();
      };

      MainView.prototype.requestPaymentMethod = function () {
        var activePaymentView = this.getView(this.model.getActivePaymentViewId());
        return activePaymentView.requestPaymentMethod().then(function (payload) {
          analytics.sendEvent(this.client, 'request-payment-method.' + analyticsKinds[payload.type]);
          return payload;
        }.bind(this)).catch(function (err) {
          analytics.sendEvent(this.client, 'request-payment-method.error');
          return Promise.reject(err);
        }.bind(this));
      };

      MainView.prototype.hideLoadingIndicator = function () {
        classList.remove(this.dropinContainer, 'braintree-loading');
        classList.add(this.dropinContainer, 'braintree-loaded');
        classList.add(this.loadingContainer, 'braintree-hidden');
      };

      MainView.prototype.showLoadingIndicator = function () {
        classList.add(this.dropinContainer, 'braintree-loading');
        classList.remove(this.dropinContainer, 'braintree-loaded');
        classList.remove(this.loadingContainer, 'braintree-hidden');
      };

      MainView.prototype.toggleAdditionalOptions = function () {
        var sheetViewID;
        var isPaymentSheetView = this.paymentSheetViewIDs.indexOf(this.primaryView.ID) !== -1;
        this.hideToggle();

        if (!this._hasMultiplePaymentOptions) {
          sheetViewID = this.paymentSheetViewIDs[0];
          classList.add(this.element, prefixShowClass(sheetViewID));
          this.model.changeActiveView(sheetViewID);
        } else if (isPaymentSheetView) {
          if (this.model.getPaymentMethods().length === 0) {
            this.setPrimaryView(PaymentOptionsView.ID);
          } else {
            this.setPrimaryView(PaymentMethodsView.ID, PaymentOptionsView.ID);
            this.hideToggle();
          }
        } else {
          classList.add(this.element, prefixShowClass(PaymentOptionsView.ID));
        }
      };

      MainView.prototype.showToggle = function () {
        if (this.model.isInEditMode()) {
          return;
        }

        classList.remove(this.toggle, 'braintree-hidden');
        classList.add(this.lowerContainer, 'braintree-hidden');
      };

      MainView.prototype.hideToggle = function () {
        classList.add(this.toggle, 'braintree-hidden');
        classList.remove(this.lowerContainer, 'braintree-hidden');
      };

      MainView.prototype.showSheetError = function (error) {
        var errorMessage;
        var genericErrorMessage = this.strings.genericError;

        if (this.strings.hasOwnProperty(error)) {
          errorMessage = this.strings[error];
        } else if (error && typeof error.code === 'string') {
          errorMessage = this.strings[snakeCaseToCamelCase(error.code) + 'Error'] || genericErrorMessage;
        } else if (error === 'developerError') {
          errorMessage = DEVELOPER_MISCONFIGURATION_MESSAGE;
        } else {
          errorMessage = genericErrorMessage;
        }

        classList.add(this.dropinContainer, 'braintree-sheet--has-error');
        this.sheetErrorText.innerHTML = errorMessage;
      };

      MainView.prototype.hideSheetError = function () {
        classList.remove(this.dropinContainer, 'braintree-sheet--has-error');
      };

      MainView.prototype.getOptionsElements = function () {
        return this._views.options.elements;
      };

      MainView.prototype.preventUserAction = function () {
        classList.remove(this.disableWrapper, 'braintree-hidden');
      };

      MainView.prototype.allowUserAction = function () {
        classList.add(this.disableWrapper, 'braintree-hidden');
      };

      MainView.prototype.teardown = function () {
        var error;
        var viewNames = Object.keys(this._views);
        var teardownPromises = viewNames.map(function (view) {
          return this._views[view].teardown().catch(function (err) {
            error = err;
          });
        }.bind(this));
        return Promise.all(teardownPromises).then(function () {
          if (error) {
            return Promise.reject(error);
          }

          return Promise.resolve();
        });
      };

      MainView.prototype.enableEditMode = function () {
        this.setPrimaryView(this.paymentMethodsViews.ID);
        this.paymentMethodsViews.enableEditMode();
        this.hideToggle();
        this.model.setPaymentMethodRequestable({
          isRequestable: false
        });
      };

      MainView.prototype.disableEditMode = function () {
        var paymentMethod;
        this.hideSheetError();
        this.paymentMethodsViews.disableEditMode();
        this.showToggle();
        paymentMethod = this.primaryView.getPaymentMethod();
        this.model.setPaymentMethodRequestable({
          isRequestable: Boolean(paymentMethod),
          type: paymentMethod && paymentMethod.type,
          selectedPaymentMethod: paymentMethod
        });
      };

      MainView.prototype.openConfirmPaymentMethodDeletionDialog = function (paymentMethod) {
        this.deleteConfirmationView.applyPaymentMethod(paymentMethod);
        this.setPrimaryView(this.deleteConfirmationView.ID);
      };

      MainView.prototype.cancelVaultedPaymentMethodDeletion = function () {
        this.setPrimaryView(this.paymentMethodsViews.ID);
      };

      MainView.prototype.startVaultedPaymentMethodDeletion = function () {
        this.element.className = '';
        this.showLoadingIndicator();
      };

      MainView.prototype.finishVaultedPaymentMethodDeletion = function (error) {
        var self = this;
        this.paymentMethodsViews.refreshPaymentMethods();

        if (error && this.model.getPaymentMethods().length > 0) {
          this.model.enableEditMode();
          this.showSheetError('vaultManagerPaymentMethodDeletionError');
        } else {
          this._sendToDefaultView();
        }

        return new Promise(function (resolve) {
          wait.delay(500).then(function () {
            // allow all the views to reset before hiding the loading indicator
            self.hideLoadingIndicator();
            resolve();
          });
        });
      };

      MainView.prototype._sendToDefaultView = function () {
        var paymentMethods = this.model.getPaymentMethods();
        var preselectVaultedPaymentMethod = this.model.merchantConfiguration.preselectVaultedPaymentMethod !== false;

        if (paymentMethods.length > 0) {
          if (preselectVaultedPaymentMethod) {
            analytics.sendEvent(this.client, 'vaulted-card.preselect');
            this.model.changeActivePaymentMethod(paymentMethods[0]);
          } else {
            this.setPrimaryView(this.paymentMethodsViews.ID);
          }
        } else if (this._hasMultiplePaymentOptions) {
          this.setPrimaryView(PaymentOptionsView.ID);
        } else {
          this.setPrimaryView(this.paymentSheetViewIDs[0]);
        }
      };

      function snakeCaseToCamelCase(s) {
        return s.toLowerCase().replace(/(\_\w)/g, function (m) {
          return m[1].toUpperCase();
        });
      }

      function prefixShowClass(classname) {
        return 'braintree-show-' + classname;
      }

      module.exports = MainView;
    }, {
      "../constants": 191,
      "../lib/add-selection-event-handler": 195,
      "../lib/analytics": 196,
      "../lib/promise": 208,
      "../lib/supports-flexbox": 210,
      "../lib/wait": 213,
      "./base-view": 249,
      "./delete-confirmation-view": 250,
      "./payment-methods-view": 253,
      "./payment-options-view": 254,
      "./payment-sheet-views": 259,
      "@braintree/class-list": 39
    }],
    252: [function (require, module, exports) {
      'use strict';

      var analytics = require('../lib/analytics');

      var BaseView = require('./base-view');

      var classList = require('@braintree/class-list');

      var constants = require('../constants');

      var addSelectionEventHandler = require('../lib/add-selection-event-handler');

      var paymentMethodHTML = "<div class=\"braintree-method__icon-container braintree-method__delete-container\">\n  <div class=\"braintree-method__icon braintree-method__delete\">\n    <svg width=\"48\" height=\"29\">\n      <use xlink:href=\"#iconX\"></use>\n    </svg>\n  </div>\n</div>\n\n<div class=\"braintree-method__logo\">\n  <svg width=\"40\" height=\"24\" class=\"@CLASSNAME\">\n    <use xlink:href=\"#@ICON\"></use>\n  </svg>\n</div>\n\n<div class=\"braintree-method__label\">@TITLE<br><div class=\"braintree-method__label--small\">@SUBTITLE</div></div>\n\n<div class=\"braintree-method__icon-container braintree-method__check-container\">\n  <div class=\"braintree-method__icon braintree-method__check\">\n    <svg height=\"100%\" width=\"100%\">\n      <use xlink:href=\"#iconCheck\"></use>\n    </svg>\n  </div>\n</div>\n";

      function PaymentMethodView() {
        BaseView.apply(this, arguments);

        this._initialize();
      }

      PaymentMethodView.prototype = Object.create(BaseView.prototype);
      PaymentMethodView.prototype.constructor = PaymentMethodView;

      PaymentMethodView.prototype._initialize = function () {
        var endingInText;
        var html = paymentMethodHTML;
        var paymentMethodCardTypes = constants.paymentMethodCardTypes;
        var paymentMethodTypes = constants.paymentMethodTypes;
        this.element = document.createElement('div');
        this.element.className = 'braintree-method';
        this.element.setAttribute('tabindex', '0');
        this.element.setAttribute('role', 'button');
        addSelectionEventHandler(this.element, function () {
          if (this.model.isInEditMode()) {
            this._selectDelete();
          } else {
            this._choosePaymentMethod();
          }
        }.bind(this));

        switch (this.paymentMethod.type) {
          case paymentMethodTypes.applePay:
            html = html.replace(/@ICON/g, 'logoApplePay').replace(/@CLASSNAME/g, '').replace(/@TITLE/g, this.strings['Apple Pay']).replace(/@SUBTITLE/g, '');
            break;

          case paymentMethodTypes.card:
            endingInText = this.strings.endingIn.replace('{{lastFourCardDigits}}', this.paymentMethod.details.lastFour);
            html = html.replace(/@ICON/g, 'icon-' + paymentMethodCardTypes[this.paymentMethod.details.cardType]).replace(/@CLASSNAME/g, ' braintree-icon--bordered').replace(/@TITLE/g, endingInText).replace(/@SUBTITLE/g, this.strings[this.paymentMethod.details.cardType]);
            break;

          case paymentMethodTypes.googlePay:
            html = html.replace(/@ICON/g, 'logoGooglePay').replace(/@CLASSNAME/g, '').replace(/@TITLE/g, this.strings['Google Pay']).replace(/@SUBTITLE/g, '');
            break;

          case paymentMethodTypes.paypal:
            html = html.replace(/@ICON/g, 'logoPayPal').replace(/@CLASSNAME/g, '').replace(/@TITLE/g, this.paymentMethod.details.email).replace(/@SUBTITLE/g, this.strings.PayPal);
            break;

          case paymentMethodTypes.venmo:
            html = html.replace(/@ICON/g, 'logoVenmo').replace(/@CLASSNAME/g, '').replace(/@TITLE/g, this.paymentMethod.details.username).replace(/@SUBTITLE/g, this.strings.Venmo);
            break;

          default:
            break;
        }

        this.element.innerHTML = html;
        this.checkMark = this.element.querySelector('.braintree-method__check-container');
      };

      PaymentMethodView.prototype.setActive = function (isActive) {
        // setTimeout required to animate addition of new payment methods
        setTimeout(function () {
          classList.toggle(this.element, 'braintree-method--active', isActive);
        }.bind(this), 0);
      };

      PaymentMethodView.prototype.enableEditMode = function () {
        classList.add(this.checkMark, 'braintree-hidden');

        if (this.paymentMethod.hasSubscription) {
          classList.add(this.element, 'braintree-method--disabled');
        }
      };

      PaymentMethodView.prototype.disableEditMode = function () {
        classList.remove(this.checkMark, 'braintree-hidden');
        classList.remove(this.element, 'braintree-method--disabled');
      };

      PaymentMethodView.prototype.teardown = function () {
        if (this.element.parentNode) {
          this.element.parentNode.removeChild(this.element);
        }
      };

      PaymentMethodView.prototype._choosePaymentMethod = function () {
        if (this.paymentMethod.vaulted) {
          analytics.sendEvent(this.client, 'vaulted-' + constants.analyticsKinds[this.paymentMethod.type] + '.select');
        }

        this.model.changeActivePaymentMethod(this.paymentMethod);
      };

      PaymentMethodView.prototype._selectDelete = function () {
        this.model.confirmPaymentMethodDeletion(this.paymentMethod);
      };

      module.exports = PaymentMethodView;
    }, {
      "../constants": 191,
      "../lib/add-selection-event-handler": 195,
      "../lib/analytics": 196,
      "./base-view": 249,
      "@braintree/class-list": 39
    }],
    253: [function (require, module, exports) {
      'use strict';

      var BaseView = require('./base-view');

      var PaymentMethodView = require('./payment-method-view');

      var DropinError = require('../lib/dropin-error');

      var classList = require('@braintree/class-list');

      var errors = require('../constants').errors;

      var Promise = require('../lib/promise');

      var addSelectionEventHandler = require('../lib/add-selection-event-handler');

      var PAYMENT_METHOD_TYPE_TO_TRANSLATION_STRING = {
        CreditCard: 'Card',
        PayPalAccount: 'PayPal',
        ApplePayCard: 'Apple Pay',
        AndroidPayCard: 'Google Pay',
        VenmoAccount: 'Venmo'
      };

      function PaymentMethodsView() {
        BaseView.apply(this, arguments);

        this._initialize();
      }

      PaymentMethodsView.prototype = Object.create(BaseView.prototype);
      PaymentMethodsView.prototype.constructor = PaymentMethodsView;
      PaymentMethodsView.ID = PaymentMethodsView.prototype.ID = 'methods';

      PaymentMethodsView.prototype._initialize = function () {
        this.views = [];
        this.container = this.getElementById('methods-container');
        this._headingLabel = this.getElementById('methods-label');
        this._editButton = this.getElementById('methods-edit');
        this.model.on('addPaymentMethod', this._addPaymentMethod.bind(this));
        this.model.on('changeActivePaymentMethod', this._changeActivePaymentMethodView.bind(this));
        this.model.on('refreshPaymentMethods', this.refreshPaymentMethods.bind(this));
        this.refreshPaymentMethods();

        if (this.model.merchantConfiguration.vaultManager) {
          this.model.on('removePaymentMethod', this._removePaymentMethod.bind(this));
          addSelectionEventHandler(this._editButton, function () {
            if (this.model.isInEditMode()) {
              this.model.disableEditMode();
            } else {
              this.model.enableEditMode();
            }
          }.bind(this));
          classList.remove(this._editButton, 'braintree-hidden');
        }
      };

      PaymentMethodsView.prototype.removeActivePaymentMethod = function () {
        if (!this.activeMethodView) {
          return;
        }

        this.activeMethodView.setActive(false);
        this.activeMethodView = null;
        classList.add(this._headingLabel, 'braintree-no-payment-method-selected');
      };

      PaymentMethodsView.prototype._getPaymentMethodString = function () {
        var stringKey, paymentMethodTypeString;

        if (!this.activeMethodView) {
          return '';
        }

        stringKey = PAYMENT_METHOD_TYPE_TO_TRANSLATION_STRING[this.activeMethodView.paymentMethod.type];
        paymentMethodTypeString = this.strings[stringKey];
        return this.strings.payingWith.replace('{{paymentSource}}', paymentMethodTypeString);
      };

      PaymentMethodsView.prototype.enableEditMode = function () {
        classList.add(this.container, 'braintree-methods--edit');
        this._editButton.innerHTML = this.strings.deleteCancelButton;
        this._headingLabel.innerHTML = this.strings.editPaymentMethods;
        this.views.forEach(function (view) {
          view.enableEditMode();
        });
      };

      PaymentMethodsView.prototype.disableEditMode = function () {
        classList.remove(this.container, 'braintree-methods--edit');
        this._editButton.innerHTML = this.strings.edit;
        this._headingLabel.innerHTML = this._getPaymentMethodString();
        this.views.forEach(function (view) {
          view.disableEditMode();
        });
      };

      PaymentMethodsView.prototype._addPaymentMethod = function (paymentMethod) {
        var paymentMethodView = new PaymentMethodView({
          model: this.model,
          paymentMethod: paymentMethod,
          client: this.client,
          strings: this.strings
        });

        if (this.model.isGuestCheckout && this.container.firstChild) {
          this.views[0].teardown();
          this.views.pop();
        }

        if (this.container.firstChild) {
          this.container.insertBefore(paymentMethodView.element, this.container.firstChild);
        } else {
          this.container.appendChild(paymentMethodView.element);
        }

        this.views.push(paymentMethodView);
      };

      PaymentMethodsView.prototype._removePaymentMethod = function (paymentMethod) {
        var i;

        for (i = 0; i < this.views.length; i++) {
          if (this.views[i].paymentMethod === paymentMethod) {
            this.views[i].teardown();
            this._headingLabel.innerHTML = '&nbsp;';
            this.views.splice(i, 1);
            break;
          }
        }
      };

      PaymentMethodsView.prototype._changeActivePaymentMethodView = function (paymentMethod) {
        var i;
        var previousActiveMethodView = this.activeMethodView;

        for (i = 0; i < this.views.length; i++) {
          if (this.views[i].paymentMethod === paymentMethod) {
            this.activeMethodView = this.views[i];
            this._headingLabel.innerHTML = this._getPaymentMethodString();
            break;
          }
        }

        if (previousActiveMethodView) {
          previousActiveMethodView.setActive(false);
        }

        this.activeMethodView.setActive(true);
        classList.remove(this._headingLabel, 'braintree-no-payment-method-selected');
      };

      PaymentMethodsView.prototype.requestPaymentMethod = function () {
        if (!this.activeMethodView || this.model.isInEditMode()) {
          return Promise.reject(new DropinError(errors.NO_PAYMENT_METHOD_ERROR));
        }

        return Promise.resolve(this.activeMethodView.paymentMethod);
      };

      PaymentMethodsView.prototype.refreshPaymentMethods = function () {
        var i;
        var paymentMethods = this.model.getPaymentMethods();
        this.views.forEach(function (view) {
          view.teardown();
        });
        this.views = [];

        for (i = paymentMethods.length - 1; i >= 0; i--) {
          this._addPaymentMethod(paymentMethods[i]);
        }
      };

      module.exports = PaymentMethodsView;
    }, {
      "../constants": 191,
      "../lib/add-selection-event-handler": 195,
      "../lib/dropin-error": 201,
      "../lib/promise": 208,
      "./base-view": 249,
      "./payment-method-view": 252,
      "@braintree/class-list": 39
    }],
    254: [function (require, module, exports) {
      'use strict';

      var analytics = require('../lib/analytics');

      var addSelectionEventHandler = require('../lib/add-selection-event-handler');

      var BaseView = require('./base-view');

      var paymentOptionIDs = require('../constants').paymentOptionIDs;

      var paymentMethodOptionHTML = "<div class=\"braintree-option__logo\">\n  <svg width=\"48\" height=\"29\" class=\"@CLASSNAME\">\n    <use xlink:href=\"#@ICON\"></use>\n  </svg>\n</div>\n\n<div class=\"braintree-option__label\" aria-label=\"@OPTION_LABEL\">\n  @OPTION_TITLE\n  <div class=\"braintree-option__disabled-message\"></div>\n</div>\n";

      function PaymentOptionsView() {
        BaseView.apply(this, arguments);

        this._initialize();
      }

      PaymentOptionsView.prototype = Object.create(BaseView.prototype);
      PaymentOptionsView.prototype.constructor = PaymentOptionsView;
      PaymentOptionsView.ID = PaymentOptionsView.prototype.ID = 'options';

      PaymentOptionsView.prototype._initialize = function () {
        this.container = this.getElementById('payment-options-container');
        this.elements = {};
        this.model.supportedPaymentOptions.forEach(function (paymentOptionID) {
          this._addPaymentOption(paymentOptionID);
        }.bind(this));
      };

      PaymentOptionsView.prototype._addPaymentOption = function (paymentOptionID) {
        var paymentSource;
        var div = document.createElement('div');
        var html = paymentMethodOptionHTML;

        var clickHandler = function clickHandler() {
          this.mainView.setPrimaryView(paymentOptionID);
          this.model.selectPaymentOption(paymentOptionID);
          analytics.sendEvent(this.client, 'selected.' + paymentOptionIDs[paymentOptionID]);
        }.bind(this);

        div.className = 'braintree-option braintree-option__' + paymentOptionID;
        div.setAttribute('tabindex', '0');
        div.setAttribute('role', 'button');

        switch (paymentOptionID) {
          case paymentOptionIDs.applePay:
            paymentSource = this.strings['Apple Pay'];
            html = html.replace(/@ICON/g, 'logoApplePay');
            break;

          case paymentOptionIDs.card:
            paymentSource = this.strings.Card;
            html = html.replace(/@ICON/g, 'iconCardFront');
            html = html.replace(/@CLASSNAME/g, 'braintree-icon--bordered');
            break;

          case paymentOptionIDs.googlePay:
            paymentSource = this.strings['Google Pay'];
            html = html.replace(/@ICON/g, 'logoGooglePay');
            break;

          case paymentOptionIDs.paypal:
            paymentSource = this.strings.PayPal;
            html = html.replace(/@ICON/g, 'logoPayPal');
            break;

          case paymentOptionIDs.paypalCredit:
            paymentSource = this.strings['PayPal Credit'];
            html = html.replace(/@ICON/g, 'logoPayPalCredit');
            break;

          case paymentOptionIDs.venmo:
            paymentSource = this.strings.Venmo;
            html = html.replace(/@ICON/g, 'logoVenmo');
            break;

          default:
            break;
        }

        html = html.replace(/@OPTION_LABEL/g, this._generateOptionLabel(paymentSource));
        html = html.replace(/@OPTION_TITLE/g, paymentSource);
        html = html.replace(/@CLASSNAME/g, '');
        div.innerHTML = html;
        addSelectionEventHandler(div, clickHandler);
        this.container.appendChild(div);
        this.elements[paymentOptionID] = {
          div: div,
          clickHandler: clickHandler
        };
      };

      PaymentOptionsView.prototype._generateOptionLabel = function (paymentSourceString) {
        return this.strings.payingWith.replace('{{paymentSource}}', paymentSourceString);
      };

      module.exports = PaymentOptionsView;
    }, {
      "../constants": 191,
      "../lib/add-selection-event-handler": 195,
      "../lib/analytics": 196,
      "./base-view": 249
    }],
    255: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var assign = require('../../lib/assign').assign;

          var BaseView = require('../base-view');

          var btApplePay = require('braintree-web/apple-pay');

          var DropinError = require('../../lib/dropin-error');

          var isHTTPS = require('../../lib/is-https');

          var Promise = require('../../lib/promise');

          var paymentOptionIDs = require('../../constants').paymentOptionIDs;

          var DEFAULT_APPLE_PAY_SESSION_VERSION = 2;

          function ApplePayView() {
            BaseView.apply(this, arguments);
          }

          ApplePayView.prototype = Object.create(BaseView.prototype);
          ApplePayView.prototype.constructor = ApplePayView;
          ApplePayView.ID = ApplePayView.prototype.ID = paymentOptionIDs.applePay;

          ApplePayView.prototype.initialize = function () {
            var self = this;
            self.applePayConfiguration = assign({}, self.model.merchantConfiguration.applePay);
            self.applePaySessionVersion = self.applePayConfiguration.applePaySessionVersion || DEFAULT_APPLE_PAY_SESSION_VERSION;
            delete self.applePayConfiguration.applePaySessionVersion;
            return btApplePay.create({
              client: this.client
            }).then(function (applePayInstance) {
              self.buttonDiv = self.getElementById('apple-pay-button');
              self.applePayInstance = applePayInstance;
              self.buttonDiv.onclick = self._showPaymentSheet.bind(self);
              self.buttonDiv.style['-apple-pay-button-style'] = self.model.merchantConfiguration.applePay.buttonStyle || 'black';
              self.model.asyncDependencyReady(ApplePayView.ID);
            }).catch(function (err) {
              self.model.asyncDependencyFailed({
                view: self.ID,
                error: new DropinError(err)
              });
            });
          };

          ApplePayView.prototype._showPaymentSheet = function () {
            var self = this;
            var request, session;

            if (this._sessionInProgress) {
              return false;
            }

            this._sessionInProgress = true;
            request = this.applePayInstance.createPaymentRequest(this.applePayConfiguration.paymentRequest);
            session = new global.ApplePaySession(self.applePaySessionVersion, request);

            session.onvalidatemerchant = function (event) {
              self.applePayInstance.performValidation({
                validationURL: event.validationURL,
                displayName: self.applePayConfiguration.displayName
              }).then(function (validationData) {
                session.completeMerchantValidation(validationData);
              }).catch(function (validationErr) {
                self.model.reportError(validationErr);
                self._sessionInProgress = false;
                session.abort();
              });
            };

            session.onpaymentauthorized = function (event) {
              self.applePayInstance.tokenize({
                token: event.payment.token
              }).then(function (payload) {
                self._sessionInProgress = false;
                session.completePayment(global.ApplePaySession.STATUS_SUCCESS);
                payload.rawPaymentData = event.payment;
                self.model.addPaymentMethod(payload);
              }).catch(function (tokenizeErr) {
                self.model.reportError(tokenizeErr);
                self._sessionInProgress = false;
                session.completePayment(global.ApplePaySession.STATUS_FAILURE);
              });
            };

            session.oncancel = function () {
              self._sessionInProgress = false;
            };

            session.begin();
            return false;
          };

          ApplePayView.prototype.updateConfiguration = function (key, value) {
            this.applePayConfiguration[key] = value;
          };

          ApplePayView.isEnabled = function (options) {
            var gatewayConfiguration = options.client.getConfiguration().gatewayConfiguration;
            var applePayEnabled = gatewayConfiguration.applePayWeb && Boolean(options.merchantConfiguration.applePay);
            var applePaySessionVersion = options.merchantConfiguration.applePay && options.merchantConfiguration.applePay.applePaySessionVersion;
            var applePayBrowserSupported;
            applePaySessionVersion = applePaySessionVersion || DEFAULT_APPLE_PAY_SESSION_VERSION;

            if (!applePayEnabled) {
              return Promise.resolve(false);
            }

            applePayBrowserSupported = global.ApplePaySession && isHTTPS.isHTTPS();

            if (!applePayBrowserSupported) {
              return Promise.resolve(false);
            }

            if (!global.ApplePaySession.supportsVersion(applePaySessionVersion)) {
              return Promise.resolve(false);
            }

            return Promise.resolve(Boolean(global.ApplePaySession.canMakePayments()));
          };

          module.exports = ApplePayView;
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../constants": 191,
      "../../lib/assign": 197,
      "../../lib/dropin-error": 201,
      "../../lib/is-https": 204,
      "../../lib/promise": 208,
      "../base-view": 249,
      "braintree-web/apple-pay": 53
    }],
    256: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var analytics = require('../../lib/analytics');

          var assign = require('../../lib/assign').assign;

          var browserDetection = require('../../lib/browser-detection');

          var BaseView = require('../base-view');

          var btPaypal = require('braintree-web/paypal-checkout');

          var DropinError = require('../../lib/dropin-error');

          var constants = require('../../constants');

          var assets = require('@braintree/asset-loader');

          var translations = require('../../translations').fiveCharacterLocales;

          var Promise = require('../../lib/promise');

          var ASYNC_DEPENDENCY_TIMEOUT = 30000;
          var READ_ONLY_CONFIGURATION_OPTIONS = ['offerCredit', 'locale'];
          var DEFAULT_CHECKOUTJS_LOG_LEVEL = 'warn';
          var paypalScriptLoadInProgressPromise;

          function BasePayPalView() {
            BaseView.apply(this, arguments);
          }

          BasePayPalView.prototype = Object.create(BaseView.prototype);

          BasePayPalView.prototype.initialize = function () {
            var asyncDependencyTimeoutHandler;
            var isCredit = Boolean(this._isPayPalCredit);
            var setupComplete = false;
            var self = this;
            var paypalType = isCredit ? 'paypalCredit' : 'paypal';
            var paypalConfiguration = this.model.merchantConfiguration[paypalType];
            var dropinWrapperId = '#braintree--dropin__' + this.model.componentID;
            this.paypalConfiguration = assign({}, paypalConfiguration);
            asyncDependencyTimeoutHandler = setTimeout(function () {
              self.model.asyncDependencyFailed({
                view: self.ID,
                error: new DropinError('There was an error connecting to PayPal.')
              });
            }, ASYNC_DEPENDENCY_TIMEOUT);
            return btPaypal.create({
              client: this.client
            }).then(function (paypalInstance) {
              var checkoutJSConfiguration;
              var buttonSelector = '[data-braintree-id="paypal-button"]';
              var environment = self.client.getConfiguration().gatewayConfiguration.environment === 'production' ? 'production' : 'sandbox';
              var locale = self.model.merchantConfiguration.locale;
              self.paypalInstance = paypalInstance;
              self.paypalConfiguration.offerCredit = Boolean(isCredit);
              checkoutJSConfiguration = {
                env: environment,
                style: self.paypalConfiguration.buttonStyle || {},
                commit: self.paypalConfiguration.commit,
                payment: function payment() {
                  return paypalInstance.createPayment(self.paypalConfiguration).catch(reportError);
                },
                onAuthorize: function onAuthorize(data) {
                  // NEXT_MAJOR_VERSION change out this vaultPayPal property
                  // to something more generic, such as vaultOnTokenization so
                  // all the vault objects can have the same shape (instead
                  // of being specific to PayPal accounts here)
                  var shouldNotVault = self.paypalConfiguration.vault && self.paypalConfiguration.vault.vaultPayPal === false;

                  if (shouldNotVault) {
                    data.vault = false;
                  }

                  return paypalInstance.tokenizePayment(data).then(function (tokenizePayload) {
                    if (!shouldNotVault && self.paypalConfiguration.flow === 'vault' && !self.model.isGuestCheckout) {
                      tokenizePayload.vaulted = true;
                    }

                    self.model.addPaymentMethod(tokenizePayload);
                  }).catch(reportError);
                },
                onError: reportError
              };

              if (locale && locale in translations) {
                self.paypalConfiguration.locale = locale;
                checkoutJSConfiguration.locale = locale;
              }

              checkoutJSConfiguration.funding = {
                disallowed: []
              };
              Object.keys(global.paypal.FUNDING).forEach(function (key) {
                if (key === 'PAYPAL' || key === 'CREDIT') {
                  return;
                }

                checkoutJSConfiguration.funding.disallowed.push(global.paypal.FUNDING[key]);
              });

              if (isCredit) {
                buttonSelector = '[data-braintree-id="paypal-credit-button"]';
                checkoutJSConfiguration.style.label = 'credit';
              } else {
                checkoutJSConfiguration.funding.disallowed.push(global.paypal.FUNDING.CREDIT);
              }

              buttonSelector = dropinWrapperId + ' ' + buttonSelector;
              return global.paypal.Button.render(checkoutJSConfiguration, buttonSelector).then(function () {
                self.model.asyncDependencyReady(paypalType);
                setupComplete = true;
                clearTimeout(asyncDependencyTimeoutHandler);
              });
            }).catch(reportError);

            function reportError(err) {
              if (setupComplete) {
                self.model.reportError(err);
              } else {
                self.model.asyncDependencyFailed({
                  view: self.ID,
                  error: err
                });
                clearTimeout(asyncDependencyTimeoutHandler);
              }
            }
          };

          BasePayPalView.prototype.requestPaymentMethod = function () {
            this.model.reportError('paypalButtonMustBeUsed');
            return BaseView.prototype.requestPaymentMethod.call(this);
          };

          BasePayPalView.prototype.updateConfiguration = function (key, value) {
            if (READ_ONLY_CONFIGURATION_OPTIONS.indexOf(key) === -1) {
              this.paypalConfiguration[key] = value;
            }
          };

          BasePayPalView.isEnabled = function (options) {
            var gatewayConfiguration = options.client.getConfiguration().gatewayConfiguration;
            var merchantPayPalConfig = options.merchantConfiguration.paypal || options.merchantConfiguration.paypalCredit;

            if (!gatewayConfiguration.paypalEnabled) {
              return Promise.resolve(false);
            }

            if (browserDetection.isIe9() || browserDetection.isIe10()) {
              analytics.sendEvent(options.client, options.viewID + '.checkout.js-browser-not-supported');
              return Promise.resolve(false);
            }

            if (global.paypal && global.paypal.Button) {
              return Promise.resolve(true);
            }

            if (paypalScriptLoadInProgressPromise) {
              return paypalScriptLoadInProgressPromise;
            }

            paypalScriptLoadInProgressPromise = assets.loadScript({
              src: constants.CHECKOUT_JS_SOURCE,
              id: constants.PAYPAL_CHECKOUT_SCRIPT_ID,
              dataAttributes: {
                'log-level': merchantPayPalConfig.logLevel || DEFAULT_CHECKOUTJS_LOG_LEVEL
              }
            }).then(function () {
              return Promise.resolve(true);
            }).catch(function () {
              return Promise.resolve(false);
            }).then(function (result) {
              paypalScriptLoadInProgressPromise = null;
              return Promise.resolve(result);
            });
            return paypalScriptLoadInProgressPromise;
          };

          module.exports = BasePayPalView;
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../constants": 191,
      "../../lib/analytics": 196,
      "../../lib/assign": 197,
      "../../lib/browser-detection": 198,
      "../../lib/dropin-error": 201,
      "../../lib/promise": 208,
      "../../translations": 232,
      "../base-view": 249,
      "@braintree/asset-loader": 1,
      "braintree-web/paypal-checkout": 136
    }],
    257: [function (require, module, exports) {
      'use strict';

      var assign = require('../../lib/assign').assign;

      var BaseView = require('../base-view');

      var classList = require('@braintree/class-list');

      var constants = require('../../constants');

      var DropinError = require('../../lib/dropin-error');

      var hostedFields = require('braintree-web/hosted-fields');

      var isUtf8 = require('../../lib/is-utf-8');

      var transitionHelper = require('../../lib/transition-helper');

      var Promise = require('../../lib/promise');

      var cardIconHTML = "<div data-braintree-id=\"visa-card-icon\" class=\"braintree-sheet__card-icon\">\n    <svg width=\"40\" height=\"24\">\n        <use xlink:href=\"#icon-visa\"></use>\n    </svg>\n</div>\n<div data-braintree-id=\"master-card-card-icon\" class=\"braintree-sheet__card-icon\">\n    <svg width=\"40\" height=\"24\">\n        <use xlink:href=\"#icon-master-card\"></use>\n    </svg>\n</div>\n<div data-braintree-id=\"unionpay-card-icon\" class=\"braintree-sheet__card-icon braintree-hidden\">\n    <svg width=\"40\" height=\"24\">\n        <use xlink:href=\"#icon-unionpay\"></use>\n    </svg>\n</div>\n<div data-braintree-id=\"american-express-card-icon\" class=\"braintree-sheet__card-icon\">\n    <svg width=\"40\" height=\"24\">\n        <use xlink:href=\"#icon-american-express\"></use>\n    </svg>\n</div>\n<div data-braintree-id=\"jcb-card-icon\" class=\"braintree-sheet__card-icon\">\n    <svg width=\"40\" height=\"24\">\n        <use xlink:href=\"#icon-jcb\"></use>\n    </svg>\n</div>\n<!-- Remove braintree-hidden class when supportedCardType accurately indicates Diners Club support -->\n<div data-braintree-id=\"diners-club-card-icon\" class=\"braintree-sheet__card-icon braintree-hidden\">\n    <svg width=\"40\" height=\"24\">\n        <use xlink:href=\"#icon-diners-club\"></use>\n    </svg>\n</div>\n<div data-braintree-id=\"discover-card-icon\" class=\"braintree-sheet__card-icon\">\n    <svg width=\"40\" height=\"24\">\n        <use xlink:href=\"#icon-discover\"></use>\n    </svg>\n</div>\n<div data-braintree-id=\"maestro-card-icon\" class=\"braintree-sheet__card-icon\">\n    <svg width=\"40\" height=\"24\">\n        <use xlink:href=\"#icon-maestro\"></use>\n    </svg>\n</div>\n";
      var PASSTHROUGH_EVENTS = ['empty', // TODO should intercept this event and call tokenize
      'inputSubmitRequest', 'binAvailable'];

      function CardView() {
        BaseView.apply(this, arguments);
      }

      CardView.prototype = Object.create(BaseView.prototype);
      CardView.prototype.constructor = CardView;
      CardView.ID = CardView.prototype.ID = constants.paymentOptionIDs.card;

      CardView.prototype.initialize = function () {
        var cvvFieldGroup, postalCodeFieldGroup, hfOptions;
        var cardholderNameGroup = this.getElementById('cardholder-name-field-group');
        var cardIcons = this.getElementById('card-view-icons'); // If merchant explicty passes a value of `true` for card configuration,
        // we need to treat it as if no card configuration was passed, and provide
        // the default configuration

        if (this.model.merchantConfiguration.card && this.model.merchantConfiguration.card !== true) {
          this.merchantConfiguration = this.model.merchantConfiguration.card;
        } else {
          this.merchantConfiguration = {};
        }

        this.merchantConfiguration.vault = this.merchantConfiguration.vault || {};
        this.hasCardholderName = Boolean(this.merchantConfiguration.cardholderName);
        this.cardholderNameRequired = this.hasCardholderName && this.merchantConfiguration.cardholderName.required === true;
        hfOptions = this._generateHostedFieldsOptions();
        cardIcons.innerHTML = cardIconHTML;

        this._hideUnsupportedCardIcons();

        this.hasCVV = hfOptions.fields.cvv;
        this.saveCardInput = this.getElementById('save-card-input');
        this.cardNumberIcon = this.getElementById('card-number-icon');
        this.cardNumberIconSvg = this.getElementById('card-number-icon-svg');
        this.cvvIcon = this.getElementById('cvv-icon');
        this.cvvIconSvg = this.getElementById('cvv-icon-svg');
        this.cvvLabelDescriptor = this.getElementById('cvv-label-descriptor');
        this.fieldErrors = {};

        if (!this.hasCardholderName) {
          cardholderNameGroup.parentNode.removeChild(cardholderNameGroup);
        }

        if (!this.hasCVV) {
          cvvFieldGroup = this.getElementById('cvv-field-group');
          cvvFieldGroup.parentNode.removeChild(cvvFieldGroup);
        }

        if (!hfOptions.fields.postalCode) {
          postalCodeFieldGroup = this.getElementById('postal-code-field-group');
          postalCodeFieldGroup.parentNode.removeChild(postalCodeFieldGroup);
        }

        if (!this.model.isGuestCheckout && this.merchantConfiguration.vault.allowVaultCardOverride === true) {
          classList.remove(this.getElementById('save-card-field-group'), 'braintree-hidden');
        } // NEXT_MAJOR_VERSION change out this vaultCard property
        // to something more generic, such as vaultOnTokenization so
        // all the vault objects can have the same shape (instead
        // of being specific to cards here)


        if (this.merchantConfiguration.vault.vaultCard === false) {
          this.saveCardInput.checked = false;
        }

        return hostedFields.create(hfOptions).then(function (hostedFieldsInstance) {
          this.hostedFieldsInstance = hostedFieldsInstance;
          this.hostedFieldsInstance.on('blur', this._onBlurEvent.bind(this));
          this.hostedFieldsInstance.on('cardTypeChange', this._onCardTypeChangeEvent.bind(this));
          this.hostedFieldsInstance.on('focus', this._onFocusEvent.bind(this));
          this.hostedFieldsInstance.on('notEmpty', this._onNotEmptyEvent.bind(this));
          this.hostedFieldsInstance.on('validityChange', this._onValidityChangeEvent.bind(this));
          PASSTHROUGH_EVENTS.forEach(function (eventName) {
            this.hostedFieldsInstance.on(eventName, function (event) {
              this.model._emit('card:' + eventName, event);
            }.bind(this));
          }.bind(this));
          this.model.asyncDependencyReady(CardView.ID);
        }.bind(this)).catch(function (err) {
          this.model.asyncDependencyFailed({
            view: this.ID,
            error: err
          });
        }.bind(this));
      };

      CardView.prototype._sendRequestableEvent = function () {
        if (!this._isTokenizing) {
          this.model.setPaymentMethodRequestable({
            isRequestable: this._validateForm(),
            type: constants.paymentMethodTypes.card
          });
        }
      };

      CardView.prototype._generateHostedFieldsOptions = function () {
        var challenges = this.client.getConfiguration().gatewayConfiguration.challenges;
        var hasCVVChallenge = challenges.indexOf('cvv') !== -1;
        var hasPostalCodeChallenge = challenges.indexOf('postal_code') !== -1;
        var overrides = this.merchantConfiguration.overrides;
        var options = {
          client: this.client,
          fields: {
            cardholderName: {
              container: this._getFieldContainer('cardholder-name'),
              placeholder: this.strings.cardholderNamePlaceholder
            },
            number: {
              container: this._getFieldContainer('number'),
              placeholder: generateCardNumberPlaceholder()
            },
            expirationDate: {
              container: this._getFieldContainer('expiration'),
              placeholder: this.strings.expirationDatePlaceholder
            },
            cvv: {
              container: this._getFieldContainer('cvv'),
              placeholder: addBullets(3)
            },
            postalCode: {
              container: this._getFieldContainer('postal-code')
            }
          },
          styles: {
            input: {
              'font-size': '16px',
              'font-family': '-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif',
              color: '#000'
            },
            ':focus': {
              color: 'black'
            },
            '::-webkit-input-placeholder': {
              color: '#6a6a6a'
            },
            ':-moz-placeholder': {
              color: '#6a6a6a'
            },
            '::-moz-placeholder': {
              color: '#6a6a6a'
            },
            ':-ms-input-placeholder ': {
              color: '#6a6a6a'
            },
            'input::-ms-clear': {
              color: 'transparent'
            }
          }
        };

        if (!this.hasCardholderName) {
          delete options.fields.cardholderName;
        }

        if (!hasCVVChallenge) {
          delete options.fields.cvv;
        }

        if (!hasPostalCodeChallenge) {
          delete options.fields.postalCode;
        }

        if (!overrides) {
          return options;
        }

        if (overrides.fields) {
          if (overrides.fields.cvv && typeof overrides.fields.cvv.placeholder !== 'undefined') {
            this._hasCustomCVVPlaceholder = true;
          }

          Object.keys(overrides.fields).forEach(function (field) {
            if ((field === 'cvv' || field === 'postalCode') && overrides.fields[field] === null) {
              delete options.fields[field];
              return;
            }

            if (!options.fields[field]) {
              return;
            }

            assign(options.fields[field], overrides.fields[field], {
              selector: options.fields[field].selector
            });
          });
        }

        if (overrides.styles) {
          Object.keys(overrides.styles).forEach(function (style) {
            if (overrides.styles[style] === null) {
              delete options.styles[style];
              return;
            } else if (typeof overrides.styles[style] === 'string') {
              // it's a class name, and should override the configured styles entirely
              options.styles[style] = overrides.styles[style];
              return;
            }

            normalizeStyles(overrides.styles[style]);
            options.styles[style] = options.styles[style] || {};
            assign(options.styles[style], overrides.styles[style]);
          });
        }

        return options;
      };

      CardView.prototype._validateForm = function (showFieldErrors) {
        var card, cardType, cardTypeSupported, state;
        var isValid = true;
        var supportedCardTypes = this.client.getConfiguration().gatewayConfiguration.creditCards.supportedCardTypes;

        if (!this.hostedFieldsInstance) {
          return false;
        }

        state = this.hostedFieldsInstance.getState();
        Object.keys(state.fields).forEach(function (key) {
          var field = state.fields[key];

          if (!showFieldErrors && !isValid) {
            // return early if form is already invalid
            // and we don't need to display all field errors
            return;
          }

          if (field.isEmpty) {
            if (!this.cardholderNameRequired && key === 'cardholderName') {
              isValid = true;
            } else {
              isValid = false;

              if (showFieldErrors) {
                this.showFieldError(key, this.strings['fieldEmptyFor' + capitalize(key)]);
              }
            }
          } else if (!field.isValid) {
            isValid = false;

            if (showFieldErrors) {
              this.showFieldError(key, this.strings['fieldInvalidFor' + capitalize(key)]);
            }
          }
        }.bind(this));

        if (state.fields.number.isValid) {
          card = state.cards[0];
          cardType = card && constants.configurationCardTypes[card.type];
          cardTypeSupported = cardType && supportedCardTypes.indexOf(cardType) !== -1;

          if (!cardTypeSupported) {
            isValid = false;

            if (showFieldErrors) {
              this.showFieldError('number', this.strings.unsupportedCardTypeError);
            }
          }
        }

        return isValid;
      };

      CardView.prototype.getPaymentMethod = function () {
        // eslint-disable-line consistent-return
        var formIsValid = this._validateForm();

        if (formIsValid) {
          return {
            type: constants.paymentMethodTypes.card
          };
        }
      };

      CardView.prototype.tokenize = function () {
        var transitionCallback;
        var self = this;
        var state = self.hostedFieldsInstance.getState();
        var tokenizeOptions = {
          vault: this._shouldVault()
        };
        this.model.clearError();

        if (!this._validateForm(true)) {
          self.model.reportError('hostedFieldsFieldsInvalidError');
          self.allowUserAction();
          return Promise.reject(new DropinError(constants.errors.NO_PAYMENT_METHOD_ERROR));
        }

        if (!this.cardholderNameRequired && state.fields.cardholderName && state.fields.cardholderName.isEmpty) {
          tokenizeOptions.fieldsToTokenize = Object.keys(state.fields).filter(function (field) {
            return field !== 'cardholderName';
          });
        }

        self._isTokenizing = true;
        return self.hostedFieldsInstance.tokenize(tokenizeOptions).then(function (payload) {
          var retainCardFields = self.merchantConfiguration.clearFieldsAfterTokenization === false;

          if (!retainCardFields) {
            Object.keys(state.fields).forEach(function (field) {
              self.hostedFieldsInstance.clear(field);
            });
          }

          if (self._shouldVault()) {
            payload.vaulted = true;
          }

          return new Promise(function (resolve) {
            transitionCallback = function transitionCallback() {
              // Wait for braintree-sheet--tokenized class to be added in IE 9
              // before attempting to remove it
              setTimeout(function () {
                self.model.addPaymentMethod(payload);
                resolve(payload);
                classList.remove(self.element, 'braintree-sheet--tokenized');
              }, 0);
            };

            transitionHelper.onTransitionEnd(self.element, 'max-height', transitionCallback);
            setTimeout(function () {
              self.allowUserAction();
              self._isTokenizing = false;
            }, constants.CHANGE_ACTIVE_PAYMENT_METHOD_TIMEOUT);
            classList.add(self.element, 'braintree-sheet--tokenized');
          });
        }).catch(function (err) {
          self._isTokenizing = false; // this is a little magical, but if the code property exists
          // in the translations with the word Error appended to the end,
          // then reportError will automatically print that translation.
          // See https://github.com/braintree/braintree-web-drop-in/blob/6ecba73f2f16e8b7ae2119702ac162a1a985908e/src/views/main-view.js#L255-L256

          self.model.reportError(err);
          self.allowUserAction();
          return Promise.reject(new DropinError({
            message: constants.errors.NO_PAYMENT_METHOD_ERROR,
            braintreeWebError: err
          }));
        });
      };

      CardView.prototype.showFieldError = function (field, errorMessage) {
        var fieldError;
        var fieldGroup = this.getElementById(camelCaseToKebabCase(field) + '-field-group');
        var input = fieldGroup.querySelector('input');

        if (!this.fieldErrors.hasOwnProperty(field)) {
          this.fieldErrors[field] = this.getElementById(camelCaseToKebabCase(field) + '-field-error');
        }

        classList.add(fieldGroup, 'braintree-form__field-group--has-error');
        fieldError = this.fieldErrors[field];
        fieldError.innerHTML = errorMessage;

        if (input) {
          input.setAttribute('aria-invalid', true);
        } else {
          this.hostedFieldsInstance.setAttribute({
            field: field,
            attribute: 'aria-invalid',
            value: true
          });
          this.hostedFieldsInstance.setMessage({
            field: field,
            message: errorMessage
          });
        }
      };

      CardView.prototype.hideFieldError = function (field) {
        var fieldGroup = this.getElementById(camelCaseToKebabCase(field) + '-field-group');
        var input = fieldGroup.querySelector('input');

        if (!this.fieldErrors.hasOwnProperty(field)) {
          this.fieldErrors[field] = this.getElementById(camelCaseToKebabCase(field) + '-field-error');
        }

        classList.remove(fieldGroup, 'braintree-form__field-group--has-error');

        if (input) {
          input.removeAttribute('aria-invalid');
        } else {
          this.hostedFieldsInstance.removeAttribute({
            field: field,
            attribute: 'aria-invalid'
          });
          this.hostedFieldsInstance.setMessage({
            field: field,
            message: ''
          });
        }
      };

      CardView.prototype.teardown = function () {
        return this.hostedFieldsInstance.teardown();
      };

      CardView.prototype._shouldVault = function () {
        return !this.model.isGuestCheckout && this.saveCardInput.checked;
      };

      CardView.prototype._getFieldContainer = function (field) {
        // we committed to not changing the data-braintree-id fields
        // so we need to convert this field to the id used in the HTML
        if (field === 'expiration') {
          field = 'expiration-date';
        }

        return this.getElementById(field + '-field-group').querySelector('.braintree-form__hosted-field');
      };

      CardView.prototype._onBlurEvent = function (event) {
        var field = event.fields[event.emittedBy];
        var fieldGroup = this.getElementById(camelCaseToKebabCase(event.emittedBy) + '-field-group');
        classList.remove(fieldGroup, 'braintree-form__field-group--is-focused');

        if (this._shouldApplyFieldEmptyError(event.emittedBy, field)) {
          this.showFieldError(event.emittedBy, this.strings['fieldEmptyFor' + capitalize(event.emittedBy)]);
        } else if (!field.isEmpty && !field.isValid) {
          this.showFieldError(event.emittedBy, this.strings['fieldInvalidFor' + capitalize(event.emittedBy)]);
        } else if (event.emittedBy === 'number' && !this._isCardTypeSupported(event.cards[0].type)) {
          this.showFieldError('number', this.strings.unsupportedCardTypeError);
        }

        this.model._emit('card:blur', event);

        setTimeout(function () {
          // when focusing on a field by clicking the label,
          // we need to wait a bit for the iframe to be
          // focused properly before applying validations
          if (this._shouldApplyFieldEmptyError(event.emittedBy, field)) {
            this.showFieldError(event.emittedBy, this.strings['fieldEmptyFor' + capitalize(event.emittedBy)]);
          }
        }.bind(this), 150);
      };

      CardView.prototype._onCardTypeChangeEvent = function (event) {
        var cardType;
        var cardNumberHrefLink = '#iconCardFront';
        var cvvHrefLink = '#iconCVVBack';
        var cvvDescriptor = this.strings.cvvThreeDigitLabelSubheading;
        var cvvPlaceholder = addBullets(3);
        var numberFieldGroup = this.getElementById('number-field-group');

        if (event.cards.length === 1) {
          cardType = event.cards[0].type;
          cardNumberHrefLink = '#icon-' + cardType;

          if (cardType === 'american-express') {
            cvvHrefLink = '#iconCVVFront';
            cvvDescriptor = this.strings.cvvFourDigitLabelSubheading;
            cvvPlaceholder = addBullets(4);
          } // Keep icon visible when field is not focused


          classList.add(numberFieldGroup, 'braintree-form__field-group--card-type-known');
        } else {
          classList.remove(numberFieldGroup, 'braintree-form__field-group--card-type-known');
        }

        this.cardNumberIconSvg.setAttribute('xlink:href', cardNumberHrefLink);

        if (this.hasCVV) {
          this.cvvIconSvg.setAttribute('xlink:href', cvvHrefLink);
          this.cvvLabelDescriptor.innerHTML = cvvDescriptor;

          if (!this._hasCustomCVVPlaceholder) {
            this.hostedFieldsInstance.setAttribute({
              field: 'cvv',
              attribute: 'placeholder',
              value: cvvPlaceholder
            });
          }
        }

        this.model._emit('card:cardTypeChange', event);
      };

      CardView.prototype._onFocusEvent = function (event) {
        var fieldGroup = this.getElementById(camelCaseToKebabCase(event.emittedBy) + '-field-group');
        classList.add(fieldGroup, 'braintree-form__field-group--is-focused');

        this.model._emit('card:focus', event);
      };

      CardView.prototype._onNotEmptyEvent = function (event) {
        this.hideFieldError(event.emittedBy);

        this.model._emit('card:notEmpty', event);
      };

      CardView.prototype._onValidityChangeEvent = function (event) {
        var isValid;
        var field = event.fields[event.emittedBy];

        if (event.emittedBy === 'number' && event.cards[0]) {
          isValid = field.isValid && this._isCardTypeSupported(event.cards[0].type);
        } else {
          isValid = field.isValid;
        }

        classList.toggle(field.container, 'braintree-form__field--valid', isValid);

        if (field.isPotentiallyValid) {
          this.hideFieldError(event.emittedBy);
        }

        this._sendRequestableEvent();

        this.model._emit('card:validityChange', event);
      };

      CardView.prototype.requestPaymentMethod = function () {
        this.preventUserAction();
        return this.tokenize();
      };

      CardView.prototype.onSelection = function () {
        if (!this.hostedFieldsInstance) {
          return;
        }

        setTimeout(function () {
          if (this.hasCardholderName) {
            this.hostedFieldsInstance.focus('cardholderName');
          } else {
            this.hostedFieldsInstance.focus('number');
          }
        }.bind(this), 50);

        this._sendRequestableEvent();
      };

      CardView.prototype._hideUnsupportedCardIcons = function () {
        var supportedCardTypes = this.client.getConfiguration().gatewayConfiguration.creditCards.supportedCardTypes;
        Object.keys(constants.configurationCardTypes).forEach(function (paymentMethodCardType) {
          var cardIcon;
          var configurationCardType = constants.configurationCardTypes[paymentMethodCardType];

          if (supportedCardTypes.indexOf(configurationCardType) === -1) {
            cardIcon = this.getElementById(paymentMethodCardType + '-card-icon');
            classList.add(cardIcon, 'braintree-hidden');
          }
        }.bind(this));
      };

      CardView.prototype._isCardTypeSupported = function (cardType) {
        var configurationCardType = constants.configurationCardTypes[cardType];
        var supportedCardTypes = this.client.getConfiguration().gatewayConfiguration.creditCards.supportedCardTypes;
        return supportedCardTypes.indexOf(configurationCardType) !== -1;
      };

      CardView.isEnabled = function (options) {
        var gatewayConfiguration = options.client.getConfiguration().gatewayConfiguration;
        var disabledByMerchant = options.merchantConfiguration.card === false;
        return Promise.resolve(!disabledByMerchant && gatewayConfiguration.creditCards.supportedCardTypes.length > 0);
      };

      CardView.prototype._shouldApplyFieldEmptyError = function (fieldId, field) {
        if (!field.isEmpty) {
          return false;
        }

        if (fieldId === 'cardholderName' && !this.cardholderNameRequired) {
          return false;
        }

        return isCardViewElement();
      };

      function isCardViewElement() {
        var activeId = document.activeElement && document.activeElement.id;
        var isHostedFieldsElement = document.activeElement instanceof HTMLIFrameElement && activeId.indexOf('braintree-hosted-field') !== -1;
        return isHostedFieldsElement;
      }

      function camelCaseToKebabCase(string) {
        return string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
      }

      function capitalize(string) {
        return string[0].toUpperCase() + string.substr(1);
      }

      function normalizeStyles(styles) {
        Object.keys(styles).forEach(function (style) {
          var transformedKeyName = camelCaseToKebabCase(style);
          styles[transformedKeyName] = styles[style];
        });
      }

      function addBullets(number) {
        var bulletCharacter = isUtf8() ? '•' : '*';
        return Array(number + 1).join(bulletCharacter);
      }

      function generateCardNumberPlaceholder() {
        var four = addBullets(4);
        return [four, four, four, four].join(' ');
      }

      module.exports = CardView;
    }, {
      "../../constants": 191,
      "../../lib/assign": 197,
      "../../lib/dropin-error": 201,
      "../../lib/is-utf-8": 205,
      "../../lib/promise": 208,
      "../../lib/transition-helper": 212,
      "../base-view": 249,
      "@braintree/class-list": 39,
      "braintree-web/hosted-fields": 85
    }],
    258: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var assign = require('../../lib/assign').assign;

          var BaseView = require('../base-view');

          var btGooglePay = require('braintree-web/google-payment');

          var DropinError = require('../../lib/dropin-error');

          var constants = require('../../constants');

          var assets = require('@braintree/asset-loader');

          var Promise = require('../../lib/promise');

          var analytics = require('../../lib/analytics');

          function GooglePayView() {
            BaseView.apply(this, arguments);
          }

          GooglePayView.prototype = Object.create(BaseView.prototype);
          GooglePayView.prototype.constructor = GooglePayView;
          GooglePayView.ID = GooglePayView.prototype.ID = constants.paymentOptionIDs.googlePay;

          GooglePayView.prototype.initialize = function () {
            var self = this;
            var buttonOptions, googlePayVersion, merchantId;
            self.googlePayConfiguration = assign({}, self.model.merchantConfiguration.googlePay);
            googlePayVersion = self.googlePayConfiguration.googlePayVersion;
            merchantId = self.googlePayConfiguration.merchantId;
            buttonOptions = assign({
              buttonType: 'short'
            }, self.googlePayConfiguration.button, {
              onClick: function onClick(event) {
                event.preventDefault();
                self.preventUserAction();
                self.tokenize().then(function () {
                  self.allowUserAction();
                });
              }
            });
            delete self.googlePayConfiguration.googlePayVersion;
            delete self.googlePayConfiguration.merchantId;
            delete self.googlePayConfiguration.button;
            return btGooglePay.create({
              client: self.client,
              googlePayVersion: googlePayVersion,
              googleMerchantId: merchantId
            }).then(function (googlePayInstance) {
              self.googlePayInstance = googlePayInstance;
              self.paymentsClient = createPaymentsClient(self.client);
            }).then(function () {
              var buttonContainer = self.getElementById('google-pay-button');
              buttonContainer.appendChild(self.paymentsClient.createButton(buttonOptions));
              self.model.asyncDependencyReady(GooglePayView.ID);
            }).catch(function (err) {
              self.model.asyncDependencyFailed({
                view: self.ID,
                error: new DropinError(err)
              });
            });
          };

          GooglePayView.prototype.tokenize = function () {
            var self = this;
            var paymentDataRequest = self.googlePayInstance.createPaymentDataRequest(self.googlePayConfiguration);
            var rawPaymentData;
            return self.paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {
              rawPaymentData = paymentData;
              return self.googlePayInstance.parseResponse(paymentData);
            }).then(function (tokenizePayload) {
              tokenizePayload.rawPaymentData = rawPaymentData;
              self.model.addPaymentMethod(tokenizePayload);
            }).catch(function (err) {
              var reportedError = err;

              if (err.statusCode === 'DEVELOPER_ERROR') {
                console.error(err); // eslint-disable-line no-console

                reportedError = 'developerError';
              } else if (err.statusCode === 'CANCELED') {
                analytics.sendEvent(self.client, 'googlepay.loadPaymentData.canceled');
                return;
              } else if (err.statusCode) {
                analytics.sendEvent(self.client, 'googlepay.loadPaymentData.failed');
              }

              self.model.reportError(reportedError);
            });
          };

          GooglePayView.prototype.updateConfiguration = function (key, value) {
            this.googlePayConfiguration[key] = value;
          };

          GooglePayView.isEnabled = function (options) {
            var gatewayConfiguration = options.client.getConfiguration().gatewayConfiguration;

            if (!(gatewayConfiguration.androidPay && Boolean(options.merchantConfiguration.googlePay))) {
              return Promise.resolve(false);
            }

            return Promise.resolve().then(function () {
              if (!(global.google && global.google.payments && global.google.payments.api && global.google.payments.api.PaymentsClient)) {
                return assets.loadScript({
                  id: constants.GOOGLE_PAYMENT_SCRIPT_ID,
                  src: constants.GOOGLE_PAYMENT_SOURCE
                });
              }

              return Promise.resolve();
            }).then(function () {
              var paymentsClient = createPaymentsClient(options.client);
              return paymentsClient.isReadyToPay({
                allowedPaymentMethods: ['CARD', 'TOKENIZED_CARD']
              });
            }).then(function (response) {
              return Boolean(response.result);
            });
          };

          function createPaymentsClient(client) {
            return new global.google.payments.api.PaymentsClient({
              environment: client.getConfiguration().gatewayConfiguration.environment === 'production' ? 'PRODUCTION' : 'TEST'
            });
          }

          module.exports = GooglePayView;
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "../../constants": 191,
      "../../lib/analytics": 196,
      "../../lib/assign": 197,
      "../../lib/dropin-error": 201,
      "../../lib/promise": 208,
      "../base-view": 249,
      "@braintree/asset-loader": 1,
      "braintree-web/google-payment": 78
    }],
    259: [function (require, module, exports) {
      'use strict';

      var paymentOptionIDs = require('../../constants').paymentOptionIDs;

      var result = {};
      result[paymentOptionIDs.applePay] = require('./apple-pay-view');
      result[paymentOptionIDs.card] = require('./card-view');
      result[paymentOptionIDs.googlePay] = require('./google-pay-view');
      result[paymentOptionIDs.paypal] = require('./paypal-view');
      result[paymentOptionIDs.paypalCredit] = require('./paypal-credit-view');
      result[paymentOptionIDs.venmo] = require('./venmo-view');
      module.exports = result;
    }, {
      "../../constants": 191,
      "./apple-pay-view": 255,
      "./card-view": 257,
      "./google-pay-view": 258,
      "./paypal-credit-view": 260,
      "./paypal-view": 261,
      "./venmo-view": 262
    }],
    260: [function (require, module, exports) {
      'use strict';

      var assign = require('../../lib/assign').assign;

      var Promise = require('../../lib/promise');

      var paymentOptionIDs = require('../../constants').paymentOptionIDs;

      var BasePayPalView = require('./base-paypal-view');

      function PayPalCreditView() {
        BasePayPalView.apply(this, arguments);
        this._isPayPalCredit = true;
      }

      PayPalCreditView.prototype = Object.create(BasePayPalView.prototype);
      PayPalCreditView.prototype.constructor = PayPalCreditView;
      PayPalCreditView.ID = PayPalCreditView.prototype.ID = paymentOptionIDs.paypalCredit;

      PayPalCreditView.isEnabled = function (options) {
        if (!options.merchantConfiguration.paypalCredit) {
          return Promise.resolve(false);
        }

        return BasePayPalView.isEnabled(assign({
          viewID: PayPalCreditView.ID
        }, options));
      };

      module.exports = PayPalCreditView;
    }, {
      "../../constants": 191,
      "../../lib/assign": 197,
      "../../lib/promise": 208,
      "./base-paypal-view": 256
    }],
    261: [function (require, module, exports) {
      'use strict';

      var assign = require('../../lib/assign').assign;

      var Promise = require('../../lib/promise');

      var paymentOptionIDs = require('../../constants').paymentOptionIDs;

      var BasePayPalView = require('./base-paypal-view');

      function PayPalView() {
        BasePayPalView.apply(this, arguments);
      }

      PayPalView.prototype = Object.create(BasePayPalView.prototype);
      PayPalView.prototype.constructor = PayPalView;
      PayPalView.ID = PayPalView.prototype.ID = paymentOptionIDs.paypal;

      PayPalView.isEnabled = function (options) {
        if (!options.merchantConfiguration.paypal) {
          return Promise.resolve(false);
        }

        return BasePayPalView.isEnabled(assign({
          viewID: PayPalView.ID
        }, options));
      };

      module.exports = PayPalView;
    }, {
      "../../constants": 191,
      "../../lib/assign": 197,
      "../../lib/promise": 208,
      "./base-paypal-view": 256
    }],
    262: [function (require, module, exports) {
      'use strict';

      var assign = require('../../lib/assign').assign;

      var BaseView = require('../base-view');

      var btVenmo = require('braintree-web/venmo');

      var DropinError = require('../../lib/dropin-error');

      var Promise = require('../../lib/promise');

      var paymentOptionIDs = require('../../constants').paymentOptionIDs;

      function VenmoView() {
        BaseView.apply(this, arguments);
      }

      VenmoView.prototype = Object.create(BaseView.prototype);
      VenmoView.prototype.constructor = VenmoView;
      VenmoView.ID = VenmoView.prototype.ID = paymentOptionIDs.venmo;

      VenmoView.prototype.initialize = function () {
        var self = this;
        var venmoConfiguration = assign({}, self.model.merchantConfiguration.venmo, {
          client: this.client
        });
        return btVenmo.create(venmoConfiguration).then(function (venmoInstance) {
          self.venmoInstance = venmoInstance;

          if (!self.venmoInstance.hasTokenizationResult()) {
            return Promise.resolve();
          }

          return self.venmoInstance.tokenize().then(function (payload) {
            self.model.reportAppSwitchPayload(payload);
          }).catch(function (err) {
            if (self._isIgnorableError(err)) {
              return;
            }

            self.model.reportAppSwitchError(paymentOptionIDs.venmo, err);
          });
        }).then(function () {
          var button = self.getElementById('venmo-button');
          button.addEventListener('click', function (event) {
            event.preventDefault();
            self.preventUserAction();
            return self.venmoInstance.tokenize().then(function (payload) {
              self.model.addPaymentMethod(payload);
            }).catch(function (tokenizeErr) {
              if (self._isIgnorableError(tokenizeErr)) {
                return;
              }

              self.model.reportError(tokenizeErr);
            }).then(function () {
              self.allowUserAction();
            });
          });
          self.model.asyncDependencyReady(VenmoView.ID);
        }).catch(function (err) {
          self.model.asyncDependencyFailed({
            view: self.ID,
            error: new DropinError(err)
          });
        });
      };

      VenmoView.prototype._isIgnorableError = function (error) {
        // customer cancels the flow in the app
        // we don't emit an error because the customer
        // initiated that action
        return error.code === 'VENMO_APP_CANCELED' || error.code === 'VENMO_DESKTOP_CANCELED';
      };

      VenmoView.isEnabled = function (options) {
        var gatewayConfiguration = options.client.getConfiguration().gatewayConfiguration;
        var venmoEnabled = gatewayConfiguration.payWithVenmo && Boolean(options.merchantConfiguration.venmo);

        if (!venmoEnabled) {
          return Promise.resolve(false);
        }

        return Promise.resolve(btVenmo.isBrowserSupported(options.merchantConfiguration.venmo));
      };

      module.exports = VenmoView;
    }, {
      "../../constants": 191,
      "../../lib/assign": 197,
      "../../lib/dropin-error": 201,
      "../../lib/promise": 208,
      "../base-view": 249,
      "braintree-web/venmo": 157
    }]
  }, {}, [194])(194);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/jquery/external/sizzle/dist/sizzle.js":
/*!************************************************************!*\
  !*** ./node_modules/jquery/external/sizzle/dist/sizzle.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
(function (window) {
  var i,
      support,
      Expr,
      getText,
      isXML,
      tokenize,
      compile,
      select,
      outermostContext,
      sortInput,
      hasDuplicate,
      // Local document vars
  setDocument,
      document,
      docElem,
      documentIsHTML,
      rbuggyQSA,
      rbuggyMatches,
      matches,
      contains,
      // Instance-specific data
  expando = "sizzle" + 1 * new Date(),
      preferredDoc = window.document,
      dirruns = 0,
      done = 0,
      classCache = createCache(),
      tokenCache = createCache(),
      compilerCache = createCache(),
      nonnativeSelectorCache = createCache(),
      sortOrder = function sortOrder(a, b) {
    if (a === b) {
      hasDuplicate = true;
    }

    return 0;
  },
      // Instance methods
  hasOwn = {}.hasOwnProperty,
      arr = [],
      pop = arr.pop,
      pushNative = arr.push,
      push = arr.push,
      slice = arr.slice,
      // Use a stripped-down indexOf as it's faster than native
  // https://jsperf.com/thor-indexof-vs-for/5
  indexOf = function indexOf(list, elem) {
    var i = 0,
        len = list.length;

    for (; i < len; i++) {
      if (list[i] === elem) {
        return i;
      }
    }

    return -1;
  },
      booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" + "ismap|loop|multiple|open|readonly|required|scoped",
      // Regular expressions
  // http://www.w3.org/TR/css3-selectors/#whitespace
  whitespace = "[\\x20\\t\\r\\n\\f]",
      // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
  identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",
      // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
  attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
  "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5]
  // or strings [capture 3 or capture 4]"
  "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
      pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
  // 1. quoted (capture 3; capture 4 or capture 5)
  "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
  "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
  ".*" + ")\\)|)",
      // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
  rwhitespace = new RegExp(whitespace + "+", "g"),
      rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
      rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
      rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
      rdescend = new RegExp(whitespace + "|>"),
      rpseudo = new RegExp(pseudos),
      ridentifier = new RegExp("^" + identifier + "$"),
      matchExpr = {
    "ID": new RegExp("^#(" + identifier + ")"),
    "CLASS": new RegExp("^\\.(" + identifier + ")"),
    "TAG": new RegExp("^(" + identifier + "|[*])"),
    "ATTR": new RegExp("^" + attributes),
    "PSEUDO": new RegExp("^" + pseudos),
    "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
    "bool": new RegExp("^(?:" + booleans + ")$", "i"),
    // For use in libraries implementing .is()
    // We use this for POS matching in `select`
    "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
  },
      rhtml = /HTML$/i,
      rinputs = /^(?:input|select|textarea|button)$/i,
      rheader = /^h\d$/i,
      rnative = /^[^{]+\{\s*\[native \w/,
      // Easily-parseable/retrievable ID or TAG or CLASS selectors
  rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
      rsibling = /[+~]/,
      // CSS escapes
  // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
  runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"),
      funescape = function funescape(escape, nonHex) {
    var high = "0x" + escape.slice(1) - 0x10000;
    return nonHex ? // Strip the backslash prefix from a non-hex escape sequence
    nonHex : // Replace a hexadecimal escape sequence with the encoded Unicode code point
    // Support: IE <=11+
    // For values outside the Basic Multilingual Plane (BMP), manually construct a
    // surrogate pair
    high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
  },
      // CSS string/identifier serialization
  // https://drafts.csswg.org/cssom/#common-serializing-idioms
  rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
      fcssescape = function fcssescape(ch, asCodePoint) {
    if (asCodePoint) {
      // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
      if (ch === "\0") {
        return "\uFFFD";
      } // Control characters and (dependent upon position) numbers get escaped as code points


      return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
    } // Other potentially-special ASCII characters get backslash-escaped


    return "\\" + ch;
  },
      // Used for iframes
  // See setDocument()
  // Removing the function wrapper causes a "Permission Denied"
  // error in IE
  unloadHandler = function unloadHandler() {
    setDocument();
  },
      inDisabledFieldset = addCombinator(function (elem) {
    return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
  }, {
    dir: "parentNode",
    next: "legend"
  }); // Optimize for push.apply( _, NodeList )


  try {
    push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
    // Detect silently failing push.apply
    // eslint-disable-next-line no-unused-expressions

    arr[preferredDoc.childNodes.length].nodeType;
  } catch (e) {
    push = {
      apply: arr.length ? // Leverage slice if possible
      function (target, els) {
        pushNative.apply(target, slice.call(els));
      } : // Support: IE<9
      // Otherwise append directly
      function (target, els) {
        var j = target.length,
            i = 0; // Can't trust NodeList.length

        while (target[j++] = els[i++]) {}

        target.length = j - 1;
      }
    };
  }

  function Sizzle(selector, context, results, seed) {
    var m,
        i,
        elem,
        nid,
        match,
        groups,
        newSelector,
        newContext = context && context.ownerDocument,
        // nodeType defaults to 9, since context defaults to document
    nodeType = context ? context.nodeType : 9;
    results = results || []; // Return early from calls with invalid selector or context

    if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
      return results;
    } // Try to shortcut find operations (as opposed to filters) in HTML documents


    if (!seed) {
      setDocument(context);
      context = context || document;

      if (documentIsHTML) {
        // If the selector is sufficiently simple, try using a "get*By*" DOM method
        // (excepting DocumentFragment context, where the methods don't exist)
        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
          // ID selector
          if (m = match[1]) {
            // Document context
            if (nodeType === 9) {
              if (elem = context.getElementById(m)) {
                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if (elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } else {
                return results;
              } // Element context

            } else {
              // Support: IE, Opera, Webkit
              // TODO: identify versions
              // getElementById can match elements by name instead of ID
              if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                results.push(elem);
                return results;
              }
            } // Type selector

          } else if (match[2]) {
            push.apply(results, context.getElementsByTagName(selector));
            return results; // Class selector
          } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
            push.apply(results, context.getElementsByClassName(m));
            return results;
          }
        } // Take advantage of querySelectorAll


        if (support.qsa && !nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector)) && ( // Support: IE 8 only
        // Exclude object elements
        nodeType !== 1 || context.nodeName.toLowerCase() !== "object")) {
          newSelector = selector;
          newContext = context; // qSA considers elements outside a scoping root when evaluating child or
          // descendant combinators, which is not what we want.
          // In such cases, we work around the behavior by prefixing every selector in the
          // list with an ID selector referencing the scope context.
          // The technique has to be used as well when a leading combinator is used
          // as such selectors are not recognized by querySelectorAll.
          // Thanks to Andrew Dupont for this technique.

          if (nodeType === 1 && (rdescend.test(selector) || rcombinators.test(selector))) {
            // Expand context for sibling selectors
            newContext = rsibling.test(selector) && testContext(context.parentNode) || context; // We can use :scope instead of the ID hack if the browser
            // supports it & if we're not changing the context.

            if (newContext !== context || !support.scope) {
              // Capture the context ID, setting it first if necessary
              if (nid = context.getAttribute("id")) {
                nid = nid.replace(rcssescape, fcssescape);
              } else {
                context.setAttribute("id", nid = expando);
              }
            } // Prefix every selector in the list


            groups = tokenize(selector);
            i = groups.length;

            while (i--) {
              groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);
            }

            newSelector = groups.join(",");
          }

          try {
            push.apply(results, newContext.querySelectorAll(newSelector));
            return results;
          } catch (qsaError) {
            nonnativeSelectorCache(selector, true);
          } finally {
            if (nid === expando) {
              context.removeAttribute("id");
            }
          }
        }
      }
    } // All others


    return select(selector.replace(rtrim, "$1"), context, results, seed);
  }
  /**
   * Create key-value caches of limited size
   * @returns {function(string, object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */


  function createCache() {
    var keys = [];

    function cache(key, value) {
      // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
      if (keys.push(key + " ") > Expr.cacheLength) {
        // Only keep the most recent entries
        delete cache[keys.shift()];
      }

      return cache[key + " "] = value;
    }

    return cache;
  }
  /**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */


  function markFunction(fn) {
    fn[expando] = true;
    return fn;
  }
  /**
   * Support testing using an element
   * @param {Function} fn Passed the created element and returns a boolean result
   */


  function assert(fn) {
    var el = document.createElement("fieldset");

    try {
      return !!fn(el);
    } catch (e) {
      return false;
    } finally {
      // Remove from its parent by default
      if (el.parentNode) {
        el.parentNode.removeChild(el);
      } // release memory in IE


      el = null;
    }
  }
  /**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */


  function addHandle(attrs, handler) {
    var arr = attrs.split("|"),
        i = arr.length;

    while (i--) {
      Expr.attrHandle[arr[i]] = handler;
    }
  }
  /**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */


  function siblingCheck(a, b) {
    var cur = b && a,
        diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes

    if (diff) {
      return diff;
    } // Check if b follows a


    if (cur) {
      while (cur = cur.nextSibling) {
        if (cur === b) {
          return -1;
        }
      }
    }

    return a ? 1 : -1;
  }
  /**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */


  function createInputPseudo(type) {
    return function (elem) {
      var name = elem.nodeName.toLowerCase();
      return name === "input" && elem.type === type;
    };
  }
  /**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */


  function createButtonPseudo(type) {
    return function (elem) {
      var name = elem.nodeName.toLowerCase();
      return (name === "input" || name === "button") && elem.type === type;
    };
  }
  /**
   * Returns a function to use in pseudos for :enabled/:disabled
   * @param {Boolean} disabled true for :disabled; false for :enabled
   */


  function createDisabledPseudo(disabled) {
    // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
    return function (elem) {
      // Only certain elements can match :enabled or :disabled
      // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
      // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
      if ("form" in elem) {
        // Check for inherited disabledness on relevant non-disabled elements:
        // * listed form-associated elements in a disabled fieldset
        //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
        //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
        // * option elements in a disabled optgroup
        //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
        // All such elements have a "form" property.
        if (elem.parentNode && elem.disabled === false) {
          // Option elements defer to a parent optgroup if present
          if ("label" in elem) {
            if ("label" in elem.parentNode) {
              return elem.parentNode.disabled === disabled;
            } else {
              return elem.disabled === disabled;
            }
          } // Support: IE 6 - 11
          // Use the isDisabled shortcut property to check for disabled fieldset ancestors


          return elem.isDisabled === disabled || // Where there is no isDisabled, check manually

          /* jshint -W018 */
          elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
        }

        return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.
        // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
        // even exist on them, let alone have a boolean value.
      } else if ("label" in elem) {
        return elem.disabled === disabled;
      } // Remaining elements are neither :enabled nor :disabled


      return false;
    };
  }
  /**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */


  function createPositionalPseudo(fn) {
    return markFunction(function (argument) {
      argument = +argument;
      return markFunction(function (seed, matches) {
        var j,
            matchIndexes = fn([], seed.length, argument),
            i = matchIndexes.length; // Match elements found at the specified indexes

        while (i--) {
          if (seed[j = matchIndexes[i]]) {
            seed[j] = !(matches[j] = seed[j]);
          }
        }
      });
    });
  }
  /**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */


  function testContext(context) {
    return context && typeof context.getElementsByTagName !== "undefined" && context;
  } // Expose support vars for convenience


  support = Sizzle.support = {};
  /**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */

  isXML = Sizzle.isXML = function (elem) {
    var namespace = elem && elem.namespaceURI,
        docElem = elem && (elem.ownerDocument || elem).documentElement; // Support: IE <=8
    // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
    // https://bugs.jquery.com/ticket/4833

    return !rhtml.test(namespace || docElem && docElem.nodeName || "HTML");
  };
  /**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */


  setDocument = Sizzle.setDocument = function (node) {
    var hasCompare,
        subWindow,
        doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected
    // Support: IE 11+, Edge 17 - 18+
    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    // two documents; shallow comparisons work.
    // eslint-disable-next-line eqeqeq

    if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
      return document;
    } // Update global variables


    document = doc;
    docElem = document.documentElement;
    documentIsHTML = !isXML(document); // Support: IE 9 - 11+, Edge 12 - 18+
    // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
    // Support: IE 11+, Edge 17 - 18+
    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    // two documents; shallow comparisons work.
    // eslint-disable-next-line eqeqeq

    if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
      // Support: IE 11, Edge
      if (subWindow.addEventListener) {
        subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
      } else if (subWindow.attachEvent) {
        subWindow.attachEvent("onunload", unloadHandler);
      }
    } // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
    // Safari 4 - 5 only, Opera <=11.6 - 12.x only
    // IE/Edge & older browsers don't support the :scope pseudo-class.
    // Support: Safari 6.0 only
    // Safari 6.0 supports :scope but it's an alias of :root there.


    support.scope = assert(function (el) {
      docElem.appendChild(el).appendChild(document.createElement("div"));
      return typeof el.querySelectorAll !== "undefined" && !el.querySelectorAll(":scope fieldset div").length;
    });
    /* Attributes
    ---------------------------------------------------------------------- */
    // Support: IE<8
    // Verify that getAttribute really returns attributes and not properties
    // (excepting IE8 booleans)

    support.attributes = assert(function (el) {
      el.className = "i";
      return !el.getAttribute("className");
    });
    /* getElement(s)By*
    ---------------------------------------------------------------------- */
    // Check if getElementsByTagName("*") returns only elements

    support.getElementsByTagName = assert(function (el) {
      el.appendChild(document.createComment(""));
      return !el.getElementsByTagName("*").length;
    }); // Support: IE<9

    support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
    // Check if getElementById returns elements by name
    // The broken getElementById methods don't pick up programmatically-set names,
    // so use a roundabout getElementsByName test

    support.getById = assert(function (el) {
      docElem.appendChild(el).id = expando;
      return !document.getElementsByName || !document.getElementsByName(expando).length;
    }); // ID filter and find

    if (support.getById) {
      Expr.filter["ID"] = function (id) {
        var attrId = id.replace(runescape, funescape);
        return function (elem) {
          return elem.getAttribute("id") === attrId;
        };
      };

      Expr.find["ID"] = function (id, context) {
        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
          var elem = context.getElementById(id);
          return elem ? [elem] : [];
        }
      };
    } else {
      Expr.filter["ID"] = function (id) {
        var attrId = id.replace(runescape, funescape);
        return function (elem) {
          var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
          return node && node.value === attrId;
        };
      }; // Support: IE 6 - 7 only
      // getElementById is not reliable as a find shortcut


      Expr.find["ID"] = function (id, context) {
        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
          var node,
              i,
              elems,
              elem = context.getElementById(id);

          if (elem) {
            // Verify the id attribute
            node = elem.getAttributeNode("id");

            if (node && node.value === id) {
              return [elem];
            } // Fall back on getElementsByName


            elems = context.getElementsByName(id);
            i = 0;

            while (elem = elems[i++]) {
              node = elem.getAttributeNode("id");

              if (node && node.value === id) {
                return [elem];
              }
            }
          }

          return [];
        }
      };
    } // Tag


    Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
      if (typeof context.getElementsByTagName !== "undefined") {
        return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
      } else if (support.qsa) {
        return context.querySelectorAll(tag);
      }
    } : function (tag, context) {
      var elem,
          tmp = [],
          i = 0,
          // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
      results = context.getElementsByTagName(tag); // Filter out possible comments

      if (tag === "*") {
        while (elem = results[i++]) {
          if (elem.nodeType === 1) {
            tmp.push(elem);
          }
        }

        return tmp;
      }

      return results;
    }; // Class

    Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
      if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
        return context.getElementsByClassName(className);
      }
    };
    /* QSA/matchesSelector
    ---------------------------------------------------------------------- */
    // QSA and matchesSelector support
    // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


    rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
    // We allow this because of a bug in IE8/9 that throws an error
    // whenever `document.activeElement` is accessed on an iframe
    // So, we allow :focus to pass through QSA all the time to avoid the IE error
    // See https://bugs.jquery.com/ticket/13378

    rbuggyQSA = [];

    if (support.qsa = rnative.test(document.querySelectorAll)) {
      // Build QSA regex
      // Regex strategy adopted from Diego Perini
      assert(function (el) {
        var input; // Select is set to empty string on purpose
        // This is to test IE's treatment of not explicitly
        // setting a boolean content attribute,
        // since its presence should be enough
        // https://bugs.jquery.com/ticket/12359

        docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
        // Nothing should be selected when empty strings follow ^= or $= or *=
        // The test attribute must be unknown in Opera but "safe" for WinRT
        // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

        if (el.querySelectorAll("[msallowcapture^='']").length) {
          rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
        } // Support: IE8
        // Boolean attributes and "value" are not treated correctly


        if (!el.querySelectorAll("[selected]").length) {
          rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
        } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


        if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
          rbuggyQSA.push("~=");
        } // Support: IE 11+, Edge 15 - 18+
        // IE 11/Edge don't find elements on a `[name='']` query in some cases.
        // Adding a temporary attribute to the document before the selection works
        // around the issue.
        // Interestingly, IE 10 & older don't seem to have the issue.


        input = document.createElement("input");
        input.setAttribute("name", "");
        el.appendChild(input);

        if (!el.querySelectorAll("[name='']").length) {
          rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:''|\"\")");
        } // Webkit/Opera - :checked should return selected option elements
        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
        // IE8 throws error here and will not see later tests


        if (!el.querySelectorAll(":checked").length) {
          rbuggyQSA.push(":checked");
        } // Support: Safari 8+, iOS 8+
        // https://bugs.webkit.org/show_bug.cgi?id=136851
        // In-page `selector#id sibling-combinator selector` fails


        if (!el.querySelectorAll("a#" + expando + "+*").length) {
          rbuggyQSA.push(".#.+[+~]");
        } // Support: Firefox <=3.6 - 5 only
        // Old Firefox doesn't throw on a badly-escaped identifier.


        el.querySelectorAll("\\\f");
        rbuggyQSA.push("[\\r\\n\\f]");
      });
      assert(function (el) {
        el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>"; // Support: Windows 8 Native Apps
        // The type and name attributes are restricted during .innerHTML assignment

        var input = document.createElement("input");
        input.setAttribute("type", "hidden");
        el.appendChild(input).setAttribute("name", "D"); // Support: IE8
        // Enforce case-sensitivity of name attribute

        if (el.querySelectorAll("[name=d]").length) {
          rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
        } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
        // IE8 throws error here and will not see later tests


        if (el.querySelectorAll(":enabled").length !== 2) {
          rbuggyQSA.push(":enabled", ":disabled");
        } // Support: IE9-11+
        // IE's :disabled selector does not pick up the children of disabled fieldsets


        docElem.appendChild(el).disabled = true;

        if (el.querySelectorAll(":disabled").length !== 2) {
          rbuggyQSA.push(":enabled", ":disabled");
        } // Support: Opera 10 - 11 only
        // Opera 10-11 does not throw on post-comma invalid pseudos


        el.querySelectorAll("*,:x");
        rbuggyQSA.push(",.*:");
      });
    }

    if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
      assert(function (el) {
        // Check to see if it's possible to do matchesSelector
        // on a disconnected node (IE 9)
        support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception
        // Gecko does not error, returns false instead

        matches.call(el, "[s!='']:x");
        rbuggyMatches.push("!=", pseudos);
      });
    }

    rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
    rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
    /* Contains
    ---------------------------------------------------------------------- */

    hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
    // Purposefully self-exclusive
    // As in, an element does not contain itself

    contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
      var adown = a.nodeType === 9 ? a.documentElement : a,
          bup = b && b.parentNode;
      return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
    } : function (a, b) {
      if (b) {
        while (b = b.parentNode) {
          if (b === a) {
            return true;
          }
        }
      }

      return false;
    };
    /* Sorting
    ---------------------------------------------------------------------- */
    // Document order sorting

    sortOrder = hasCompare ? function (a, b) {
      // Flag for duplicate removal
      if (a === b) {
        hasDuplicate = true;
        return 0;
      } // Sort on method existence if only one input has compareDocumentPosition


      var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

      if (compare) {
        return compare;
      } // Calculate position if both inputs belong to the same document
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.
      // eslint-disable-next-line eqeqeq


      compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
      1; // Disconnected nodes

      if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
        // Choose the first element that is related to our preferred document
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if (a == document || a.ownerDocument == preferredDoc && contains(preferredDoc, a)) {
          return -1;
        } // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq


        if (b == document || b.ownerDocument == preferredDoc && contains(preferredDoc, b)) {
          return 1;
        } // Maintain original order


        return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
      }

      return compare & 4 ? -1 : 1;
    } : function (a, b) {
      // Exit early if the nodes are identical
      if (a === b) {
        hasDuplicate = true;
        return 0;
      }

      var cur,
          i = 0,
          aup = a.parentNode,
          bup = b.parentNode,
          ap = [a],
          bp = [b]; // Parentless nodes are either documents or disconnected

      if (!aup || !bup) {
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.

        /* eslint-disable eqeqeq */
        return a == document ? -1 : b == document ? 1 :
        /* eslint-enable eqeqeq */
        aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
      } else if (aup === bup) {
        return siblingCheck(a, b);
      } // Otherwise we need full lists of their ancestors for comparison


      cur = a;

      while (cur = cur.parentNode) {
        ap.unshift(cur);
      }

      cur = b;

      while (cur = cur.parentNode) {
        bp.unshift(cur);
      } // Walk down the tree looking for a discrepancy


      while (ap[i] === bp[i]) {
        i++;
      }

      return i ? // Do a sibling check if the nodes have a common ancestor
      siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
      // Support: IE 11+, Edge 17 - 18+
      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
      // two documents; shallow comparisons work.

      /* eslint-disable eqeqeq */
      ap[i] == preferredDoc ? -1 : bp[i] == preferredDoc ? 1 :
      /* eslint-enable eqeqeq */
      0;
    };
    return document;
  };

  Sizzle.matches = function (expr, elements) {
    return Sizzle(expr, null, null, elements);
  };

  Sizzle.matchesSelector = function (elem, expr) {
    setDocument(elem);

    if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
      try {
        var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

        if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
        // fragment in IE 9
        elem.document && elem.document.nodeType !== 11) {
          return ret;
        }
      } catch (e) {
        nonnativeSelectorCache(expr, true);
      }
    }

    return Sizzle(expr, document, null, [elem]).length > 0;
  };

  Sizzle.contains = function (context, elem) {
    // Set document vars if needed
    // Support: IE 11+, Edge 17 - 18+
    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    // two documents; shallow comparisons work.
    // eslint-disable-next-line eqeqeq
    if ((context.ownerDocument || context) != document) {
      setDocument(context);
    }

    return contains(context, elem);
  };

  Sizzle.attr = function (elem, name) {
    // Set document vars if needed
    // Support: IE 11+, Edge 17 - 18+
    // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    // two documents; shallow comparisons work.
    // eslint-disable-next-line eqeqeq
    if ((elem.ownerDocument || elem) != document) {
      setDocument(elem);
    }

    var fn = Expr.attrHandle[name.toLowerCase()],
        // Don't get fooled by Object.prototype properties (jQuery #13807)
    val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
    return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
  };

  Sizzle.escape = function (sel) {
    return (sel + "").replace(rcssescape, fcssescape);
  };

  Sizzle.error = function (msg) {
    throw new Error("Syntax error, unrecognized expression: " + msg);
  };
  /**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */


  Sizzle.uniqueSort = function (results) {
    var elem,
        duplicates = [],
        j = 0,
        i = 0; // Unless we *know* we can detect duplicates, assume their presence

    hasDuplicate = !support.detectDuplicates;
    sortInput = !support.sortStable && results.slice(0);
    results.sort(sortOrder);

    if (hasDuplicate) {
      while (elem = results[i++]) {
        if (elem === results[i]) {
          j = duplicates.push(i);
        }
      }

      while (j--) {
        results.splice(duplicates[j], 1);
      }
    } // Clear input after sorting to release objects
    // See https://github.com/jquery/sizzle/pull/225


    sortInput = null;
    return results;
  };
  /**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */


  getText = Sizzle.getText = function (elem) {
    var node,
        ret = "",
        i = 0,
        nodeType = elem.nodeType;

    if (!nodeType) {
      // If no nodeType, this is expected to be an array
      while (node = elem[i++]) {
        // Do not traverse comment nodes
        ret += getText(node);
      }
    } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
      // Use textContent for elements
      // innerText usage removed for consistency of new lines (jQuery #11153)
      if (typeof elem.textContent === "string") {
        return elem.textContent;
      } else {
        // Traverse its children
        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
          ret += getText(elem);
        }
      }
    } else if (nodeType === 3 || nodeType === 4) {
      return elem.nodeValue;
    } // Do not include comment or processing instruction nodes


    return ret;
  };

  Expr = Sizzle.selectors = {
    // Can be adjusted by the user
    cacheLength: 50,
    createPseudo: markFunction,
    match: matchExpr,
    attrHandle: {},
    find: {},
    relative: {
      ">": {
        dir: "parentNode",
        first: true
      },
      " ": {
        dir: "parentNode"
      },
      "+": {
        dir: "previousSibling",
        first: true
      },
      "~": {
        dir: "previousSibling"
      }
    },
    preFilter: {
      "ATTR": function ATTR(match) {
        match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

        match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

        if (match[2] === "~=") {
          match[3] = " " + match[3] + " ";
        }

        return match.slice(0, 4);
      },
      "CHILD": function CHILD(match) {
        /* matches from matchExpr["CHILD"]
        	1 type (only|nth|...)
        	2 what (child|of-type)
        	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
        	4 xn-component of xn+y argument ([+-]?\d*n|)
        	5 sign of xn-component
        	6 x of xn-component
        	7 sign of y-component
        	8 y of y-component
        */
        match[1] = match[1].toLowerCase();

        if (match[1].slice(0, 3) === "nth") {
          // nth-* requires argument
          if (!match[3]) {
            Sizzle.error(match[0]);
          } // numeric x and y parameters for Expr.filter.CHILD
          // remember that false/true cast respectively to 0/1


          match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
          match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
        } else if (match[3]) {
          Sizzle.error(match[0]);
        }

        return match;
      },
      "PSEUDO": function PSEUDO(match) {
        var excess,
            unquoted = !match[6] && match[2];

        if (matchExpr["CHILD"].test(match[0])) {
          return null;
        } // Accept quoted arguments as-is


        if (match[3]) {
          match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
        } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
        excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
        excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
          // excess is a negative index
          match[0] = match[0].slice(0, excess);
          match[2] = unquoted.slice(0, excess);
        } // Return only captures needed by the pseudo filter method (type and argument)


        return match.slice(0, 3);
      }
    },
    filter: {
      "TAG": function TAG(nodeNameSelector) {
        var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
        return nodeNameSelector === "*" ? function () {
          return true;
        } : function (elem) {
          return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
        };
      },
      "CLASS": function CLASS(className) {
        var pattern = classCache[className + " "];
        return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
          return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
        });
      },
      "ATTR": function ATTR(name, operator, check) {
        return function (elem) {
          var result = Sizzle.attr(elem, name);

          if (result == null) {
            return operator === "!=";
          }

          if (!operator) {
            return true;
          }

          result += "";
          /* eslint-disable max-len */

          return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
          /* eslint-enable max-len */
        };
      },
      "CHILD": function CHILD(type, what, _argument, first, last) {
        var simple = type.slice(0, 3) !== "nth",
            forward = type.slice(-4) !== "last",
            ofType = what === "of-type";
        return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
        function (elem) {
          return !!elem.parentNode;
        } : function (elem, _context, xml) {
          var cache,
              uniqueCache,
              outerCache,
              node,
              nodeIndex,
              start,
              dir = simple !== forward ? "nextSibling" : "previousSibling",
              parent = elem.parentNode,
              name = ofType && elem.nodeName.toLowerCase(),
              useCache = !xml && !ofType,
              diff = false;

          if (parent) {
            // :(first|last|only)-(child|of-type)
            if (simple) {
              while (dir) {
                node = elem;

                while (node = node[dir]) {
                  if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                    return false;
                  }
                } // Reverse direction for :only-* (if we haven't yet done so)


                start = dir = type === "only" && !start && "nextSibling";
              }

              return true;
            }

            start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

            if (forward && useCache) {
              // Seek `elem` from a previously-cached index
              // ...in a gzip-friendly way
              node = parent;
              outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)

              uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
              cache = uniqueCache[type] || [];
              nodeIndex = cache[0] === dirruns && cache[1];
              diff = nodeIndex && cache[2];
              node = nodeIndex && parent.childNodes[nodeIndex];

              while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
              diff = nodeIndex = 0) || start.pop()) {
                // When found, cache indexes on `parent` and break
                if (node.nodeType === 1 && ++diff && node === elem) {
                  uniqueCache[type] = [dirruns, nodeIndex, diff];
                  break;
                }
              }
            } else {
              // Use previously-cached element index if available
              if (useCache) {
                // ...in a gzip-friendly way
                node = elem;
                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)

                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex;
              } // xml :nth-child(...)
              // or :nth-last-child(...) or :nth(-last)?-of-type(...)


              if (diff === false) {
                // Use the same loop as above to seek `elem` from the start
                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                  if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                    // Cache the index of each encountered element
                    if (useCache) {
                      outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)

                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                      uniqueCache[type] = [dirruns, diff];
                    }

                    if (node === elem) {
                      break;
                    }
                  }
                }
              }
            } // Incorporate the offset, then check against cycle size


            diff -= last;
            return diff === first || diff % first === 0 && diff / first >= 0;
          }
        };
      },
      "PSEUDO": function PSEUDO(pseudo, argument) {
        // pseudo-class names are case-insensitive
        // http://www.w3.org/TR/selectors/#pseudo-classes
        // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
        // Remember that setFilters inherits from pseudos
        var args,
            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
        // arguments are needed to create the filter function
        // just as Sizzle does

        if (fn[expando]) {
          return fn(argument);
        } // But maintain support for old signatures


        if (fn.length > 1) {
          args = [pseudo, pseudo, "", argument];
          return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
            var idx,
                matched = fn(seed, argument),
                i = matched.length;

            while (i--) {
              idx = indexOf(seed, matched[i]);
              seed[idx] = !(matches[idx] = matched[i]);
            }
          }) : function (elem) {
            return fn(elem, 0, args);
          };
        }

        return fn;
      }
    },
    pseudos: {
      // Potentially complex pseudos
      "not": markFunction(function (selector) {
        // Trim the selector passed to compile
        // to avoid treating leading and trailing
        // spaces as combinators
        var input = [],
            results = [],
            matcher = compile(selector.replace(rtrim, "$1"));
        return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {
          var elem,
              unmatched = matcher(seed, null, xml, []),
              i = seed.length; // Match elements unmatched by `matcher`

          while (i--) {
            if (elem = unmatched[i]) {
              seed[i] = !(matches[i] = elem);
            }
          }
        }) : function (elem, _context, xml) {
          input[0] = elem;
          matcher(input, null, xml, results); // Don't keep the element (issue #299)

          input[0] = null;
          return !results.pop();
        };
      }),
      "has": markFunction(function (selector) {
        return function (elem) {
          return Sizzle(selector, elem).length > 0;
        };
      }),
      "contains": markFunction(function (text) {
        text = text.replace(runescape, funescape);
        return function (elem) {
          return (elem.textContent || getText(elem)).indexOf(text) > -1;
        };
      }),
      // "Whether an element is represented by a :lang() selector
      // is based solely on the element's language value
      // being equal to the identifier C,
      // or beginning with the identifier C immediately followed by "-".
      // The matching of C against the element's language value is performed case-insensitively.
      // The identifier C does not have to be a valid language name."
      // http://www.w3.org/TR/selectors/#lang-pseudo
      "lang": markFunction(function (lang) {
        // lang value must be a valid identifier
        if (!ridentifier.test(lang || "")) {
          Sizzle.error("unsupported lang: " + lang);
        }

        lang = lang.replace(runescape, funescape).toLowerCase();
        return function (elem) {
          var elemLang;

          do {
            if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
              elemLang = elemLang.toLowerCase();
              return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
            }
          } while ((elem = elem.parentNode) && elem.nodeType === 1);

          return false;
        };
      }),
      // Miscellaneous
      "target": function target(elem) {
        var hash = window.location && window.location.hash;
        return hash && hash.slice(1) === elem.id;
      },
      "root": function root(elem) {
        return elem === docElem;
      },
      "focus": function focus(elem) {
        return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
      },
      // Boolean properties
      "enabled": createDisabledPseudo(false),
      "disabled": createDisabledPseudo(true),
      "checked": function checked(elem) {
        // In CSS3, :checked should return both checked and selected elements
        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
        var nodeName = elem.nodeName.toLowerCase();
        return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
      },
      "selected": function selected(elem) {
        // Accessing this property makes selected-by-default
        // options in Safari work properly
        if (elem.parentNode) {
          // eslint-disable-next-line no-unused-expressions
          elem.parentNode.selectedIndex;
        }

        return elem.selected === true;
      },
      // Contents
      "empty": function empty(elem) {
        // http://www.w3.org/TR/selectors/#empty-pseudo
        // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
        //   but not by others (comment: 8; processing instruction: 7; etc.)
        // nodeType < 6 works because attributes (2) do not appear as children
        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
          if (elem.nodeType < 6) {
            return false;
          }
        }

        return true;
      },
      "parent": function parent(elem) {
        return !Expr.pseudos["empty"](elem);
      },
      // Element/input types
      "header": function header(elem) {
        return rheader.test(elem.nodeName);
      },
      "input": function input(elem) {
        return rinputs.test(elem.nodeName);
      },
      "button": function button(elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === "button" || name === "button";
      },
      "text": function text(elem) {
        var attr;
        return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
        // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
        (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
      },
      // Position-in-collection
      "first": createPositionalPseudo(function () {
        return [0];
      }),
      "last": createPositionalPseudo(function (_matchIndexes, length) {
        return [length - 1];
      }),
      "eq": createPositionalPseudo(function (_matchIndexes, length, argument) {
        return [argument < 0 ? argument + length : argument];
      }),
      "even": createPositionalPseudo(function (matchIndexes, length) {
        var i = 0;

        for (; i < length; i += 2) {
          matchIndexes.push(i);
        }

        return matchIndexes;
      }),
      "odd": createPositionalPseudo(function (matchIndexes, length) {
        var i = 1;

        for (; i < length; i += 2) {
          matchIndexes.push(i);
        }

        return matchIndexes;
      }),
      "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
        var i = argument < 0 ? argument + length : argument > length ? length : argument;

        for (; --i >= 0;) {
          matchIndexes.push(i);
        }

        return matchIndexes;
      }),
      "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
        var i = argument < 0 ? argument + length : argument;

        for (; ++i < length;) {
          matchIndexes.push(i);
        }

        return matchIndexes;
      })
    }
  };
  Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

  for (i in {
    radio: true,
    checkbox: true,
    file: true,
    password: true,
    image: true
  }) {
    Expr.pseudos[i] = createInputPseudo(i);
  }

  for (i in {
    submit: true,
    reset: true
  }) {
    Expr.pseudos[i] = createButtonPseudo(i);
  } // Easy API for creating new setFilters


  function setFilters() {}

  setFilters.prototype = Expr.filters = Expr.pseudos;
  Expr.setFilters = new setFilters();

  tokenize = Sizzle.tokenize = function (selector, parseOnly) {
    var matched,
        match,
        tokens,
        type,
        soFar,
        groups,
        preFilters,
        cached = tokenCache[selector + " "];

    if (cached) {
      return parseOnly ? 0 : cached.slice(0);
    }

    soFar = selector;
    groups = [];
    preFilters = Expr.preFilter;

    while (soFar) {
      // Comma and first run
      if (!matched || (match = rcomma.exec(soFar))) {
        if (match) {
          // Don't consume trailing commas as valid
          soFar = soFar.slice(match[0].length) || soFar;
        }

        groups.push(tokens = []);
      }

      matched = false; // Combinators

      if (match = rcombinators.exec(soFar)) {
        matched = match.shift();
        tokens.push({
          value: matched,
          // Cast descendant combinators to space
          type: match[0].replace(rtrim, " ")
        });
        soFar = soFar.slice(matched.length);
      } // Filters


      for (type in Expr.filter) {
        if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
          matched = match.shift();
          tokens.push({
            value: matched,
            type: type,
            matches: match
          });
          soFar = soFar.slice(matched.length);
        }
      }

      if (!matched) {
        break;
      }
    } // Return the length of the invalid excess
    // if we're just parsing
    // Otherwise, throw an error or return tokens


    return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
    tokenCache(selector, groups).slice(0);
  };

  function toSelector(tokens) {
    var i = 0,
        len = tokens.length,
        selector = "";

    for (; i < len; i++) {
      selector += tokens[i].value;
    }

    return selector;
  }

  function addCombinator(matcher, combinator, base) {
    var dir = combinator.dir,
        skip = combinator.next,
        key = skip || dir,
        checkNonElements = base && key === "parentNode",
        doneName = done++;
    return combinator.first ? // Check against closest ancestor/preceding element
    function (elem, context, xml) {
      while (elem = elem[dir]) {
        if (elem.nodeType === 1 || checkNonElements) {
          return matcher(elem, context, xml);
        }
      }

      return false;
    } : // Check against all ancestor/preceding elements
    function (elem, context, xml) {
      var oldCache,
          uniqueCache,
          outerCache,
          newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

      if (xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            if (matcher(elem, context, xml)) {
              return true;
            }
          }
        }
      } else {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
            // Defend against cloned attroperties (jQuery gh-1709)

            uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

            if (skip && skip === elem.nodeName.toLowerCase()) {
              elem = elem[dir] || elem;
            } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
              // Assign to newCache so results back-propagate to previous elements
              return newCache[2] = oldCache[2];
            } else {
              // Reuse newcache so results back-propagate to previous elements
              uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking

              if (newCache[2] = matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        }
      }

      return false;
    };
  }

  function elementMatcher(matchers) {
    return matchers.length > 1 ? function (elem, context, xml) {
      var i = matchers.length;

      while (i--) {
        if (!matchers[i](elem, context, xml)) {
          return false;
        }
      }

      return true;
    } : matchers[0];
  }

  function multipleContexts(selector, contexts, results) {
    var i = 0,
        len = contexts.length;

    for (; i < len; i++) {
      Sizzle(selector, contexts[i], results);
    }

    return results;
  }

  function condense(unmatched, map, filter, context, xml) {
    var elem,
        newUnmatched = [],
        i = 0,
        len = unmatched.length,
        mapped = map != null;

    for (; i < len; i++) {
      if (elem = unmatched[i]) {
        if (!filter || filter(elem, context, xml)) {
          newUnmatched.push(elem);

          if (mapped) {
            map.push(i);
          }
        }
      }
    }

    return newUnmatched;
  }

  function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
    if (postFilter && !postFilter[expando]) {
      postFilter = setMatcher(postFilter);
    }

    if (postFinder && !postFinder[expando]) {
      postFinder = setMatcher(postFinder, postSelector);
    }

    return markFunction(function (seed, results, context, xml) {
      var temp,
          i,
          elem,
          preMap = [],
          postMap = [],
          preexisting = results.length,
          // Get initial elements from seed or context
      elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
          // Prefilter to get matcher input, preserving a map for seed-results synchronization
      matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
          matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
      postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
      [] : // ...otherwise use results directly
      results : matcherIn; // Find primary matches

      if (matcher) {
        matcher(matcherIn, matcherOut, context, xml);
      } // Apply postFilter


      if (postFilter) {
        temp = condense(matcherOut, postMap);
        postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

        i = temp.length;

        while (i--) {
          if (elem = temp[i]) {
            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
          }
        }
      }

      if (seed) {
        if (postFinder || preFilter) {
          if (postFinder) {
            // Get the final matcherOut by condensing this intermediate into postFinder contexts
            temp = [];
            i = matcherOut.length;

            while (i--) {
              if (elem = matcherOut[i]) {
                // Restore matcherIn since elem is not yet a final match
                temp.push(matcherIn[i] = elem);
              }
            }

            postFinder(null, matcherOut = [], temp, xml);
          } // Move matched elements from seed to results to keep them synchronized


          i = matcherOut.length;

          while (i--) {
            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
              seed[temp] = !(results[temp] = elem);
            }
          }
        } // Add elements to results, through postFinder if defined

      } else {
        matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

        if (postFinder) {
          postFinder(null, results, matcherOut, xml);
        } else {
          push.apply(results, matcherOut);
        }
      }
    });
  }

  function matcherFromTokens(tokens) {
    var checkContext,
        matcher,
        j,
        len = tokens.length,
        leadingRelative = Expr.relative[tokens[0].type],
        implicitRelative = leadingRelative || Expr.relative[" "],
        i = leadingRelative ? 1 : 0,
        // The foundational matcher ensures that elements are reachable from top-level context(s)
    matchContext = addCombinator(function (elem) {
      return elem === checkContext;
    }, implicitRelative, true),
        matchAnyContext = addCombinator(function (elem) {
      return indexOf(checkContext, elem) > -1;
    }, implicitRelative, true),
        matchers = [function (elem, context, xml) {
      var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

      checkContext = null;
      return ret;
    }];

    for (; i < len; i++) {
      if (matcher = Expr.relative[tokens[i].type]) {
        matchers = [addCombinator(elementMatcher(matchers), matcher)];
      } else {
        matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

        if (matcher[expando]) {
          // Find the next relative operator (if any) for proper handling
          j = ++i;

          for (; j < len; j++) {
            if (Expr.relative[tokens[j].type]) {
              break;
            }
          }

          return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
          tokens.slice(0, i - 1).concat({
            value: tokens[i - 2].type === " " ? "*" : ""
          })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
        }

        matchers.push(matcher);
      }
    }

    return elementMatcher(matchers);
  }

  function matcherFromGroupMatchers(elementMatchers, setMatchers) {
    var bySet = setMatchers.length > 0,
        byElement = elementMatchers.length > 0,
        superMatcher = function superMatcher(seed, context, xml, results, outermost) {
      var elem,
          j,
          matcher,
          matchedCount = 0,
          i = "0",
          unmatched = seed && [],
          setMatched = [],
          contextBackup = outermostContext,
          // We must always have either seed elements or outermost context
      elems = seed || byElement && Expr.find["TAG"]("*", outermost),
          // Use integer dirruns iff this is the outermost matcher
      dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
          len = elems.length;

      if (outermost) {
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        outermostContext = context == document || context || outermost;
      } // Add elements passing elementMatchers directly to results
      // Support: IE<9, Safari
      // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


      for (; i !== len && (elem = elems[i]) != null; i++) {
        if (byElement && elem) {
          j = 0; // Support: IE 11+, Edge 17 - 18+
          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
          // two documents; shallow comparisons work.
          // eslint-disable-next-line eqeqeq

          if (!context && elem.ownerDocument != document) {
            setDocument(elem);
            xml = !documentIsHTML;
          }

          while (matcher = elementMatchers[j++]) {
            if (matcher(elem, context || document, xml)) {
              results.push(elem);
              break;
            }
          }

          if (outermost) {
            dirruns = dirrunsUnique;
          }
        } // Track unmatched elements for set filters


        if (bySet) {
          // They will have gone through all possible matchers
          if (elem = !matcher && elem) {
            matchedCount--;
          } // Lengthen the array for every element, matched or not


          if (seed) {
            unmatched.push(elem);
          }
        }
      } // `i` is now the count of elements visited above, and adding it to `matchedCount`
      // makes the latter nonnegative.


      matchedCount += i; // Apply set filters to unmatched elements
      // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
      // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
      // no element matchers and no seed.
      // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
      // case, which will result in a "00" `matchedCount` that differs from `i` but is also
      // numerically zero.

      if (bySet && i !== matchedCount) {
        j = 0;

        while (matcher = setMatchers[j++]) {
          matcher(unmatched, setMatched, context, xml);
        }

        if (seed) {
          // Reintegrate element matches to eliminate the need for sorting
          if (matchedCount > 0) {
            while (i--) {
              if (!(unmatched[i] || setMatched[i])) {
                setMatched[i] = pop.call(results);
              }
            }
          } // Discard index placeholder values to get only actual matches


          setMatched = condense(setMatched);
        } // Add matches to results


        push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
          Sizzle.uniqueSort(results);
        }
      } // Override manipulation of globals by nested matchers


      if (outermost) {
        dirruns = dirrunsUnique;
        outermostContext = contextBackup;
      }

      return unmatched;
    };

    return bySet ? markFunction(superMatcher) : superMatcher;
  }

  compile = Sizzle.compile = function (selector, match
  /* Internal Use Only */
  ) {
    var i,
        setMatchers = [],
        elementMatchers = [],
        cached = compilerCache[selector + " "];

    if (!cached) {
      // Generate a function of recursive functions that can be used to check each element
      if (!match) {
        match = tokenize(selector);
      }

      i = match.length;

      while (i--) {
        cached = matcherFromTokens(match[i]);

        if (cached[expando]) {
          setMatchers.push(cached);
        } else {
          elementMatchers.push(cached);
        }
      } // Cache the compiled function


      cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

      cached.selector = selector;
    }

    return cached;
  };
  /**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */


  select = Sizzle.select = function (selector, context, results, seed) {
    var i,
        tokens,
        token,
        type,
        find,
        compiled = typeof selector === "function" && selector,
        match = !seed && tokenize(selector = compiled.selector || selector);
    results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
    // (the latter of which guarantees us context)

    if (match.length === 1) {
      // Reduce context if the leading compound selector is an ID
      tokens = match[0] = match[0].slice(0);

      if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

        if (!context) {
          return results; // Precompiled matchers will still verify ancestry, so step up a level
        } else if (compiled) {
          context = context.parentNode;
        }

        selector = selector.slice(tokens.shift().value.length);
      } // Fetch a seed set for right-to-left matching


      i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

      while (i--) {
        token = tokens[i]; // Abort if we hit a combinator

        if (Expr.relative[type = token.type]) {
          break;
        }

        if (find = Expr.find[type]) {
          // Search, expanding context for leading sibling combinators
          if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
            // If seed is empty or no tokens remain, we can return early
            tokens.splice(i, 1);
            selector = seed.length && toSelector(tokens);

            if (!selector) {
              push.apply(results, seed);
              return results;
            }

            break;
          }
        }
      }
    } // Compile and execute a filtering function if one is not provided
    // Provide `match` to avoid retokenization if we modified the selector above


    (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
    return results;
  }; // One-time assignments
  // Sort stability


  support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
  // Always assume duplicates if they aren't passed to the comparison function

  support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

  setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
  // Detached nodes confoundingly follow *each other*

  support.sortDetached = assert(function (el) {
    // Should return 1, but returns 4 (following)
    return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
  }); // Support: IE<8
  // Prevent attribute/property "interpolation"
  // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

  if (!assert(function (el) {
    el.innerHTML = "<a href='#'></a>";
    return el.firstChild.getAttribute("href") === "#";
  })) {
    addHandle("type|href|height|width", function (elem, name, isXML) {
      if (!isXML) {
        return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
      }
    });
  } // Support: IE<9
  // Use defaultValue in place of getAttribute("value")


  if (!support.attributes || !assert(function (el) {
    el.innerHTML = "<input/>";
    el.firstChild.setAttribute("value", "");
    return el.firstChild.getAttribute("value") === "";
  })) {
    addHandle("value", function (elem, _name, isXML) {
      if (!isXML && elem.nodeName.toLowerCase() === "input") {
        return elem.defaultValue;
      }
    });
  } // Support: IE<9
  // Use getAttributeNode to fetch booleans when getAttribute lies


  if (!assert(function (el) {
    return el.getAttribute("disabled") == null;
  })) {
    addHandle(booleans, function (elem, name, isXML) {
      var val;

      if (!isXML) {
        return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
      }
    });
  } // EXPOSE


  var _sizzle = window.Sizzle;

  Sizzle.noConflict = function () {
    if (window.Sizzle === Sizzle) {
      window.Sizzle = _sizzle;
    }

    return Sizzle;
  };

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return Sizzle;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // Sizzle requires that there be a global window in Common-JS like environments
  } else {} // EXPOSE

})(window);

/***/ }),

/***/ "./node_modules/jquery/src/ajax.js":
/*!*****************************************!*\
  !*** ./node_modules/jquery/src/ajax.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"), __webpack_require__(/*! ./ajax/var/location */ "./node_modules/jquery/src/ajax/var/location.js"), __webpack_require__(/*! ./ajax/var/nonce */ "./node_modules/jquery/src/ajax/var/nonce.js"), __webpack_require__(/*! ./ajax/var/rquery */ "./node_modules/jquery/src/ajax/var/rquery.js"), __webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"), __webpack_require__(/*! ./core/parseXML */ "./node_modules/jquery/src/core/parseXML.js"), __webpack_require__(/*! ./event/trigger */ "./node_modules/jquery/src/event/trigger.js"), __webpack_require__(/*! ./deferred */ "./node_modules/jquery/src/deferred.js"), __webpack_require__(/*! ./serialize */ "./node_modules/jquery/src/serialize.js") // jQuery.param
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, isFunction, rnothtmlwhite, location, nonce, rquery) {
  "use strict";

  var r20 = /%20/g,
      rhash = /#.*$/,
      rantiCache = /([?&])_=[^&]*/,
      rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
      // #7653, #8125, #8152: local protocol detection
  rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      rnoContent = /^(?:GET|HEAD)$/,
      rprotocol = /^\/\//,

  /* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */
  prefilters = {},

  /* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */
  transports = {},
      // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
  allTypes = "*/".concat("*"),
      // Anchor tag for parsing the document origin
  originAnchor = document.createElement("a");
  originAnchor.href = location.href; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== "string") {
        func = dataTypeExpression;
        dataTypeExpression = "*";
      }

      var dataType,
          i = 0,
          dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === "+") {
            dataType = dataType.slice(1) || "*";
            (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  } // Base inspection function for prefilters and transports


  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {},
        seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);

        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
  } // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887


  function ajaxExtend(target, src) {
    var key,
        deep,
        flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }

    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }
  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */


  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
        type,
        finalDataType,
        firstDataType,
        contents = s.contents,
        dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process

    while (dataTypes[0] === "*") {
      dataTypes.shift();

      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
      }
    } // Check if we're dealing with a known content-type


    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    } // Check to see if we have a response for the expected dataType


    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
          finalDataType = type;
          break;
        }

        if (!firstDataType) {
          firstDataType = type;
        }
      } // Or just use first one


      finalDataType = finalDataType || firstDataType;
    } // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response


    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }

      return responses[finalDataType];
    }
  }
  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */


  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
        current,
        conv,
        tmp,
        prev,
        converters = {},
        // Work with a copy of dataTypes in case we need to modify it for conversion
    dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys

    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift(); // Convert to each sequential dataType

    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      } // Apply the dataFilter if provided


      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === "*") {
          current = prev; // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== "*" && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair

          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(" ");

              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];

                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2]; // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }

                  break;
                }
              }
            }
          } // Apply converter (if not an equivalence)


          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s.throws) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: "parsererror",
                  error: conv ? e : "No conversion from " + prev + " to " + current
                };
              }
            }
          }
        }
      }
    }

    return {
      state: "success",
      data: response
    };
  }

  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,
    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: location.href,
      type: "GET",
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",

      /*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */
      accepts: {
        "*": allTypes,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        "* text": String,
        // Text to html (true = no transformation)
        "text html": true,
        // Evaluate text as a json expression
        "text json": JSON.parse,
        // Parse text as xml
        "text xml": jQuery.parseXML
      },
      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true
      }
    },
    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function ajaxSetup(target, settings) {
      return settings ? // Building a settings object
      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings
      ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    // Main method
    ajax: function ajax(url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (_typeof(url) === "object") {
        options = url;
        url = undefined;
      } // Force options to be an object


      options = options || {};

      var transport,
          // URL without anti-cache param
      cacheURL,
          // Response headers
      responseHeadersString,
          responseHeaders,
          // timeout handle
      timeoutTimer,
          // Url cleanup var
      urlAnchor,
          // Request state (becomes false upon send and true upon completion)
      completed,
          // To know if global events are to be dispatched
      fireGlobals,
          // Loop variable
      i,
          // uncached part of the url
      uncached,
          // Create the final options object
      s = jQuery.ajaxSetup({}, options),
          // Callbacks context
      callbackContext = s.context || s,
          // Context for global events is callbackContext if it is a DOM node or jQuery collection
      globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
          // Deferreds
      deferred = jQuery.Deferred(),
          completeDeferred = jQuery.Callbacks("once memory"),
          // Status-dependent callbacks
      _statusCode = s.statusCode || {},
          // Headers (they are sent all at once)
      requestHeaders = {},
          requestHeadersNames = {},
          // Default abort message
      strAbort = "canceled",
          // Fake xhr
      jqXHR = {
        readyState: 0,
        // Builds headers hashtable if needed
        getResponseHeader: function getResponseHeader(key) {
          var match;

          if (completed) {
            if (!responseHeaders) {
              responseHeaders = {};

              while (match = rheaders.exec(responseHeadersString)) {
                responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
              }
            }

            match = responseHeaders[key.toLowerCase() + " "];
          }

          return match == null ? null : match.join(", ");
        },
        // Raw string
        getAllResponseHeaders: function getAllResponseHeaders() {
          return completed ? responseHeadersString : null;
        },
        // Caches the header
        setRequestHeader: function setRequestHeader(name, value) {
          if (completed == null) {
            name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
            requestHeaders[name] = value;
          }

          return this;
        },
        // Overrides response content-type header
        overrideMimeType: function overrideMimeType(type) {
          if (completed == null) {
            s.mimeType = type;
          }

          return this;
        },
        // Status-dependent callbacks
        statusCode: function statusCode(map) {
          var code;

          if (map) {
            if (completed) {
              // Execute the appropriate callbacks
              jqXHR.always(map[jqXHR.status]);
            } else {
              // Lazy-add the new callbacks in a way that preserves old ones
              for (code in map) {
                _statusCode[code] = [_statusCode[code], map[code]];
              }
            }
          }

          return this;
        },
        // Cancel the request
        abort: function abort(statusText) {
          var finalText = statusText || strAbort;

          if (transport) {
            transport.abort(finalText);
          }

          done(0, finalText);
          return this;
        }
      }; // Attach deferreds


      deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available

      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//"); // Alias method option to type as per ticket #12004

      s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list

      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""]; // A cross-domain request is in order when the origin doesn't match the current origin.

      if (s.crossDomain == null) {
        urlAnchor = document.createElement("a"); // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/

        try {
          urlAnchor.href = s.url; // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative

          urlAnchor.href = urlAnchor.href;
          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      } // Convert data if not already a string


      if (s.data && s.processData && typeof s.data !== "string") {
        s.data = jQuery.param(s.data, s.traditional);
      } // Apply prefilters


      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there

      if (completed) {
        return jqXHR;
      } // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)


      fireGlobals = jQuery.event && s.global; // Watch for a new set of requests

      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger("ajaxStart");
      } // Uppercase the type


      s.type = s.type.toUpperCase(); // Determine if request has content

      s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation

      cacheURL = s.url.replace(rhash, ""); // More options handling for requests with no content

      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length); // If data is available and should be processed, append data to url

        if (s.data && (s.processData || typeof s.data === "string")) {
          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data; // #9682: remove data so that it's not used in an eventual retry

          delete s.data;
        } // Add or update anti-cache param if needed


        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, "$1");
          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
        } // Put hash and anti-cache on the URL that will be requested (gh-1732)


        s.url = cacheURL + uncached; // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
        s.data = s.data.replace(r20, "+");
      } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.


      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
        }

        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
        }
      } // Set the correct header, if data is being sent


      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader("Content-Type", s.contentType);
      } // Set the Accepts header for the server, depending on the dataType


      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]); // Check for headers option

      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      } // Allow custom headers/mimetypes and early abort


      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {
        // Abort if not done already and return
        return jqXHR.abort();
      } // Aborting is no longer a cancellation


      strAbort = "abort"; // Install callbacks on deferreds

      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error); // Get transport

      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort

      if (!transport) {
        done(-1, "No Transport");
      } else {
        jqXHR.readyState = 1; // Send global event

        if (fireGlobals) {
          globalEventContext.trigger("ajaxSend", [jqXHR, s]);
        } // If request was aborted inside ajaxSend, stop there


        if (completed) {
          return jqXHR;
        } // Timeout


        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort("timeout");
          }, s.timeout);
        }

        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          } // Propagate others as results


          done(-1, e);
        }
      } // Callback for when everything is done


      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
            success,
            error,
            response,
            modified,
            statusText = nativeStatusText; // Ignore repeat invocations

        if (completed) {
          return;
        }

        completed = true; // Clear timeout if it exists

        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        } // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)


        transport = undefined; // Cache response headers

        responseHeadersString = headers || ""; // Set readyState

        jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful

        isSuccess = status >= 200 && status < 300 || status === 304; // Get response data

        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        } // Use a noop converter for missing script but not if jsonp


        if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {
          s.converters["text script"] = function () {};
        } // Convert no matter what (that way responseXXX fields are always set)


        response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining

        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader("Last-Modified");

            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }

            modified = jqXHR.getResponseHeader("etag");

            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          } // if no content


          if (status === 204 || s.type === "HEAD") {
            statusText = "nocontent"; // if not modified
          } else if (status === 304) {
            statusText = "notmodified"; // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;

          if (status || !statusText) {
            statusText = "error";

            if (status < 0) {
              status = 0;
            }
          }
        } // Set data for the fake xhr object


        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error

        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        } // Status-dependent callbacks


        jqXHR.statusCode(_statusCode);
        _statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
        } // Complete


        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger("ajaxComplete", [jqXHR, s]); // Handle the global AJAX counter

          if (! --jQuery.active) {
            jQuery.event.trigger("ajaxStop");
          }
        }
      }

      return jqXHR;
    },
    getJSON: function getJSON(url, data, callback) {
      return jQuery.get(url, data, callback, "json");
    },
    getScript: function getScript(url, callback) {
      return jQuery.get(url, undefined, callback, "script");
    }
  });
  jQuery.each(["get", "post"], function (_i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      } // The url can be an options object (which then must have .url)


      return jQuery.ajax(jQuery.extend({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      }, jQuery.isPlainObject(url) && url));
    };
  });
  jQuery.ajaxPrefilter(function (s) {
    var i;

    for (i in s.headers) {
      if (i.toLowerCase() === "content-type") {
        s.contentType = s.headers[i] || "";
      }
    }
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/ajax/jsonp.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/ajax/jsonp.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./var/nonce */ "./node_modules/jquery/src/ajax/var/nonce.js"), __webpack_require__(/*! ./var/rquery */ "./node_modules/jquery/src/ajax/var/rquery.js"), __webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isFunction, nonce, rquery) {
  "use strict";

  var oldCallbacks = [],
      rjsonp = /(=)\?(?=&|$)|\?\?/; // Default jsonp settings

  jQuery.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function jsonpCallback() {
      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
      this[callback] = true;
      return callback;
    }
  }); // Detect, normalize options and install callbacks for jsonp requests

  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
    var callbackName,
        overwritten,
        responseContainer,
        jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set

    if (jsonProp || s.dataTypes[0] === "jsonp") {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data

      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
      } // Use data converter to retrieve json after script execution


      s.converters["script json"] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + " was not called");
        }

        return responseContainer[0];
      }; // Force json dataType


      s.dataTypes[0] = "json"; // Install callback

      overwritten = window[callbackName];

      window[callbackName] = function () {
        responseContainer = arguments;
      }; // Clean-up function (fires after converters)


      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        } // Save back as free


        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use

          oldCallbacks.push(callbackName);
        } // Call if it was a function and we have a response


        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      }); // Delegate to script

      return "script";
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/ajax/load.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/ajax/load.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../core/stripAndCollapse */ "./node_modules/jquery/src/core/stripAndCollapse.js"), __webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ../core/parseHTML */ "./node_modules/jquery/src/core/parseHTML.js"), __webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js"), __webpack_require__(/*! ../traversing */ "./node_modules/jquery/src/traversing.js"), __webpack_require__(/*! ../manipulation */ "./node_modules/jquery/src/manipulation.js"), __webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, stripAndCollapse, isFunction) {
  "use strict";
  /**
   * Load a url into a page
   */

  jQuery.fn.load = function (url, params, callback) {
    var selector,
        type,
        response,
        self = this,
        off = url.indexOf(" ");

    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    } // If it's a function


    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined; // Otherwise, build a param string
    } else if (params && _typeof(params) === "object") {
      type = "POST";
    } // If we have elements to modify, make the request


    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        // If "type" variable is undefined, then "GET" method will be used.
        // Make value of this field explicit since
        // user can override it through ajaxSetup method
        type: type || "GET",
        dataType: "html",
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ? // If a selector was specified, locate the right elements in a dummy div
        // Exclude scripts to avoid IE 'Permission Denied' errors
        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result
        responseText); // If the request succeeds, this function gets "data", "status", "jqXHR"
        // but they are ignored because response was set above.
        // If it fails, this function gets "jqXHR", "status", "error"
      }).always(callback && function (jqXHR, status) {
        self.each(function () {
          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
        });
      });
    }

    return this;
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/ajax/script.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/ajax/script.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document) {
  "use strict"; // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

  jQuery.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  }); // Install script dataType

  jQuery.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function textScript(text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  }); // Handle cache's special case and crossDomain

  jQuery.ajaxPrefilter("script", function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }

    if (s.crossDomain) {
      s.type = "GET";
    }
  }); // Bind script tag hack transport

  jQuery.ajaxTransport("script", function (s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, _callback;

      return {
        send: function send(_, complete) {
          script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({
            charset: s.scriptCharset,
            src: s.url
          }).on("load error", _callback = function callback(evt) {
            script.remove();
            _callback = null;

            if (evt) {
              complete(evt.type === "error" ? 404 : 200, evt.type);
            }
          }); // Use native DOM manipulation to avoid our domManip AJAX trickery

          document.head.appendChild(script[0]);
        },
        abort: function abort() {
          if (_callback) {
            _callback();
          }
        }
      };
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/ajax/var/location.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/ajax/var/location.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return window.location;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/ajax/var/nonce.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/ajax/var/nonce.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return {
    guid: Date.now()
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/ajax/var/rquery.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery/src/ajax/var/rquery.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return /\?/;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/ajax/xhr.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/ajax/xhr.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js"), __webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, support) {
  "use strict";

  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {
    // File protocol always yields status code 0, assume 200
    0: 200,
    // Support: IE <=9 only
    // #1450: sometimes IE returns 1223 when it should be 204
    1223: 204
  },
      xhrSupported = jQuery.ajaxSettings.xhr();
  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest


    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function send(headers, complete) {
          var i,
              xhr = options.xhr();
          xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided

          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          } // Override mime type if needed


          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          } // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.


          if (!options.crossDomain && !headers["X-Requested-With"]) {
            headers["X-Requested-With"] = "XMLHttpRequest";
          } // Set headers


          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          } // Callback


          _callback = function callback(type) {
            return function () {
              if (_callback) {
                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                if (type === "abort") {
                  xhr.abort();
                } else if (type === "error") {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== "number") {
                    complete(0, "error");
                  } else {
                    complete( // File: protocol always yields status 0; see #8605, #14207
                    xhr.status, xhr.statusText);
                  }
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only
                  // IE9 has no XHR2 but throws on binary (trac-11426)
                  // For XHR2 non-text, let the caller handle it (gh-2498)
                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {
                    binary: xhr.response
                  } : {
                    text: xhr.responseText
                  }, xhr.getAllResponseHeaders());
                }
              }
            };
          }; // Listen to events


          xhr.onload = _callback();
          errorCallback = xhr.onerror = xhr.ontimeout = _callback("error"); // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts

          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (_callback) {
                    errorCallback();
                  }
                });
              }
            };
          } // Create the abort callback


          _callback = _callback("abort");

          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if (_callback) {
              throw e;
            }
          }
        },
        abort: function abort() {
          if (_callback) {
            _callback();
          }
        }
      };
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/attributes.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/attributes.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./attributes/attr */ "./node_modules/jquery/src/attributes/attr.js"), __webpack_require__(/*! ./attributes/prop */ "./node_modules/jquery/src/attributes/prop.js"), __webpack_require__(/*! ./attributes/classes */ "./node_modules/jquery/src/attributes/classes.js"), __webpack_require__(/*! ./attributes/val */ "./node_modules/jquery/src/attributes/val.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict"; // Return jQuery for attributes-only inclusion

  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/attributes/attr.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery/src/attributes/attr.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../core/access */ "./node_modules/jquery/src/core/access.js"), __webpack_require__(/*! ../core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"), __webpack_require__(/*! ./support */ "./node_modules/jquery/src/attributes/support.js"), __webpack_require__(/*! ../var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"), __webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, nodeName, support, rnothtmlwhite) {
  "use strict";

  var boolHook,
      attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function attr(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function removeAttr(name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function attr(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      } // Fallback to prop when attributes are not supported


      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      } // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined


      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);

            if (val) {
              elem.value = val;
            }

            return value;
          }
        }
      }
    },
    removeAttr: function removeAttr(elem, value) {
      var name,
          i = 0,
          // Attribute names can contain non-HTML whitespace characters
      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
      attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          elem.removeAttribute(name);
        }
      }
    }
  }); // Hooks for boolean attributes

  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }

      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (_i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret,
          handle,
          lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }

      return ret;
    };
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/attributes/classes.js":
/*!*******************************************************!*\
  !*** ./node_modules/jquery/src/attributes/classes.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../core/stripAndCollapse */ "./node_modules/jquery/src/core/stripAndCollapse.js"), __webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ../var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"), __webpack_require__(/*! ../data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"), __webpack_require__(/*! ../core/init */ "./node_modules/jquery/src/core/init.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, stripAndCollapse, isFunction, rnothtmlwhite, dataPriv) {
  "use strict";

  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }

    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }

    return [];
  }

  jQuery.fn.extend({
    addClass: function addClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem);
          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    removeClass: function removeClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(" " + clazz + " ") > -1) {
                cur = cur.replace(" " + clazz + " ", " ");
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    toggleClass: function toggleClass(value, stateVal) {
      var type = _typeof(value),
          isValidValue = type === "string" || Array.isArray(value);

      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }

      return this.each(function () {
        var className, i, self, classNames;

        if (isValidValue) {
          // Toggle individual class names
          i = 0;
          self = jQuery(this);
          classNames = classesToArray(value);

          while (className = classNames[i++]) {
            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          } // Toggle whole class name

        } else if (value === undefined || type === "boolean") {
          className = getClass(this);

          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          } // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.


          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function hasClass(selector) {
      var className,
          elem,
          i = 0;
      className = " " + selector + " ";

      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
          return true;
        }
      }

      return false;
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/attributes/prop.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery/src/attributes/prop.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../core/access */ "./node_modules/jquery/src/core/access.js"), __webpack_require__(/*! ./support */ "./node_modules/jquery/src/attributes/support.js"), __webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, support) {
  "use strict";

  var rfocusable = /^(?:input|select|textarea|button)$/i,
      rclickable = /^(?:a|area)$/i;
  jQuery.fn.extend({
    prop: function prop(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    prop: function prop(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        return elem[name] = value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function get(elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
            return 0;
          }

          return -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }); // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop

  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function get(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }

        return null;
      },
      set: function set(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }

  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/attributes/support.js":
/*!*******************************************************!*\
  !*** ./node_modules/jquery/src/attributes/support.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document, support) {
  "use strict";

  (function () {
    var input = document.createElement("input"),
        select = document.createElement("select"),
        opt = select.appendChild(document.createElement("option"));
    input.type = "checkbox"; // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"

    support.checkOn = input.value !== ""; // Support: IE <=11 only
    // Must access selectedIndex to make default options select

    support.optSelected = opt.selected; // Support: IE <=11 only
    // An input loses its value after becoming a radio

    input = document.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  return support;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/attributes/val.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/attributes/val.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../core/stripAndCollapse */ "./node_modules/jquery/src/core/stripAndCollapse.js"), __webpack_require__(/*! ./support */ "./node_modules/jquery/src/attributes/support.js"), __webpack_require__(/*! ../core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"), __webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ../core/init */ "./node_modules/jquery/src/core/init.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, stripAndCollapse, support, nodeName, isFunction) {
  "use strict";

  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function val(value) {
      var hooks,
          ret,
          valueIsFunction,
          elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }

          ret = elem.value; // Handle most common string cases

          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          } // Handle cases where value is null/undef or number


          return ret == null ? "" : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);
      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        } // Treat null/undefined as ""; convert numbers to string


        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function get(elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null ? val : // Support: IE <=10 - 11 only
          // option.text throws exceptions (#14686, #14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          stripAndCollapse(jQuery.text(elem));
        }
      },
      select: {
        get: function get(elem) {
          var value,
              option,
              i,
              options = elem.options,
              index = elem.selectedIndex,
              one = elem.type === "select-one",
              values = one ? null : [],
              max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          } // Loop through all the selected options


          for (; i < max; i++) {
            option = options[i]; // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (#2551)

            if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = jQuery(option).val(); // We don't need an array for one selects

              if (one) {
                return value;
              } // Multi-Selects return an array


              values.push(value);
            }
          }

          return values;
        },
        set: function set(elem, value) {
          var optionSet,
              option,
              options = elem.options,
              values = jQuery.makeArray(value),
              i = options.length;

          while (i--) {
            option = options[i];
            /* eslint-disable no-cond-assign */

            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }
            /* eslint-enable no-cond-assign */

          } // Force browsers to behave consistently when non-matching value is set


          if (!optionSet) {
            elem.selectedIndex = -1;
          }

          return values;
        }
      }
    }
  }); // Radios and checkboxes getter/setter

  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function set(elem, value) {
        if (Array.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
        }
      }
    };

    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/callbacks.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/callbacks.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./core/toType */ "./node_modules/jquery/src/core/toType.js"), __webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, toType, isFunction, rnothtmlwhite) {
  "use strict"; // Convert String-formatted options into Object-formatted ones

  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */


  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
    firing,
        // Last fire value for non-forgettable lists
    memory,
        // Flag to know if list was already fired
    _fired,
        // Flag to prevent firing
    _locked,
        // Actual callback list
    list = [],
        // Queue of execution data for repeatable lists
    queue = [],
        // Index of currently firing callback (modified by add/remove as needed)
    firingIndex = -1,
        // Fire callbacks
    fire = function fire() {
      // Enforce single-firing
      _locked = _locked || options.once; // Execute callbacks for all pending executions,
      // respecting firingIndex overrides and runtime changes

      _fired = firing = true;

      for (; queue.length; firingIndex = -1) {
        memory = queue.shift();

        while (++firingIndex < list.length) {
          // Run callback and check for early termination
          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
            // Jump to end and forget the data so .add doesn't re-fire
            firingIndex = list.length;
            memory = false;
          }
        }
      } // Forget the data if we're done with it


      if (!options.memory) {
        memory = false;
      }

      firing = false; // Clean up if we're done firing for good

      if (_locked) {
        // Keep an empty list if we have data for future add calls
        if (memory) {
          list = []; // Otherwise, this object is spent
        } else {
          list = "";
        }
      }
    },
        // Actual Callbacks object
    self = {
      // Add a callback or a collection of callbacks to the list
      add: function add() {
        if (list) {
          // If we have memory from a past run, we should fire after adding
          if (memory && !firing) {
            firingIndex = list.length - 1;
            queue.push(memory);
          }

          (function add(args) {
            jQuery.each(args, function (_, arg) {
              if (isFunction(arg)) {
                if (!options.unique || !self.has(arg)) {
                  list.push(arg);
                }
              } else if (arg && arg.length && toType(arg) !== "string") {
                // Inspect recursively
                add(arg);
              }
            });
          })(arguments);

          if (memory && !firing) {
            fire();
          }
        }

        return this;
      },
      // Remove a callback from the list
      remove: function remove() {
        jQuery.each(arguments, function (_, arg) {
          var index;

          while ((index = jQuery.inArray(arg, list, index)) > -1) {
            list.splice(index, 1); // Handle firing indexes

            if (index <= firingIndex) {
              firingIndex--;
            }
          }
        });
        return this;
      },
      // Check if a given callback is in the list.
      // If no argument is given, return whether or not list has callbacks attached.
      has: function has(fn) {
        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
      },
      // Remove all callbacks from the list
      empty: function empty() {
        if (list) {
          list = [];
        }

        return this;
      },
      // Disable .fire and .add
      // Abort any current/pending executions
      // Clear all callbacks and values
      disable: function disable() {
        _locked = queue = [];
        list = memory = "";
        return this;
      },
      disabled: function disabled() {
        return !list;
      },
      // Disable .fire
      // Also disable .add unless we have memory (since it would have no effect)
      // Abort any pending executions
      lock: function lock() {
        _locked = queue = [];

        if (!memory && !firing) {
          list = memory = "";
        }

        return this;
      },
      locked: function locked() {
        return !!_locked;
      },
      // Call all callbacks with the given context and arguments
      fireWith: function fireWith(context, args) {
        if (!_locked) {
          args = args || [];
          args = [context, args.slice ? args.slice() : args];
          queue.push(args);

          if (!firing) {
            fire();
          }
        }

        return this;
      },
      // Call all the callbacks with the given arguments
      fire: function fire() {
        self.fireWith(this, arguments);
        return this;
      },
      // To know if the callbacks have already been called at least once
      fired: function fired() {
        return !!_fired;
      }
    };

    return self;
  };

  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core.js":
/*!*****************************************!*\
  !*** ./node_modules/jquery/src/core.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./var/arr */ "./node_modules/jquery/src/var/arr.js"), __webpack_require__(/*! ./var/getProto */ "./node_modules/jquery/src/var/getProto.js"), __webpack_require__(/*! ./var/slice */ "./node_modules/jquery/src/var/slice.js"), __webpack_require__(/*! ./var/flat */ "./node_modules/jquery/src/var/flat.js"), __webpack_require__(/*! ./var/push */ "./node_modules/jquery/src/var/push.js"), __webpack_require__(/*! ./var/indexOf */ "./node_modules/jquery/src/var/indexOf.js"), __webpack_require__(/*! ./var/class2type */ "./node_modules/jquery/src/var/class2type.js"), __webpack_require__(/*! ./var/toString */ "./node_modules/jquery/src/var/toString.js"), __webpack_require__(/*! ./var/hasOwn */ "./node_modules/jquery/src/var/hasOwn.js"), __webpack_require__(/*! ./var/fnToString */ "./node_modules/jquery/src/var/fnToString.js"), __webpack_require__(/*! ./var/ObjectFunctionString */ "./node_modules/jquery/src/var/ObjectFunctionString.js"), __webpack_require__(/*! ./var/support */ "./node_modules/jquery/src/var/support.js"), __webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./var/isWindow */ "./node_modules/jquery/src/var/isWindow.js"), __webpack_require__(/*! ./core/DOMEval */ "./node_modules/jquery/src/core/DOMEval.js"), __webpack_require__(/*! ./core/toType */ "./node_modules/jquery/src/core/toType.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (arr, getProto, _slice, flat, push, indexOf, class2type, toString, hasOwn, fnToString, ObjectFunctionString, support, isFunction, isWindow, DOMEval, toType) {
  "use strict";

  var version = "3.6.0",
      // Define a local copy of jQuery
  jQuery = function jQuery(selector, context) {
    // The jQuery object is actually just the init constructor 'enhanced'
    // Need init if jQuery is called (just allow error to be thrown if not included)
    return new jQuery.fn.init(selector, context);
  };

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: jQuery,
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function toArray() {
      return _slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      // Return all the elements in a clean array
      if (num == null) {
        return _slice.call(this);
      } // Return just the one element from the set


      return num < 0 ? this[num + this.length] : this[num];
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

      ret.prevObject = this; // Return the newly-formed element set

      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return jQuery.each(this, callback);
    },
    map: function map(callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    even: function even() {
      return this.pushStack(jQuery.grep(this, function (_elem, i) {
        return (i + 1) % 2;
      }));
    },
    odd: function odd() {
      return this.pushStack(jQuery.grep(this, function (_elem, i) {
        return i % 2;
      }));
    },
    eq: function eq(i) {
      var len = this.length,
          j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false; // Handle a deep copy situation

    if (typeof target === "boolean") {
      deep = target; // Skip the boolean and the target

      target = arguments[i] || {};
      i++;
    } // Handle case when target is a string or something (possible in deep copy)


    if (_typeof(target) !== "object" && !isFunction(target)) {
      target = {};
    } // Extend jQuery itself if only one argument is passed


    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name]; // Prevent Object.prototype pollution
          // Prevent never-ending loop

          if (name === "__proto__" || target === copy) {
            continue;
          } // Recurse if we're merging plain objects or arrays


          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            src = target[name]; // Ensure proper type for the source value

            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }

            copyIsArray = false; // Never move original objects, clone them

            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    } // Return the modified object


    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function error(msg) {
      throw new Error(msg);
    },
    noop: function noop() {},
    isPlainObject: function isPlainObject(obj) {
      var proto, Ctor; // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects

      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }

      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

      if (!proto) {
        return true;
      } // Objects with prototype are plain iff they were constructed by a global Object function


      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    isEmptyObject: function isEmptyObject(obj) {
      var name;

      for (name in obj) {
        return false;
      }

      return true;
    },
    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function globalEval(code, options, doc) {
      DOMEval(code, {
        nonce: options && options.nonce
      }, doc);
    },
    each: function each(obj, callback) {
      var length,
          i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;

        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },
    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },
    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function merge(first, second) {
      var len = +second.length,
          j = 0,
          i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;
      return first;
    },
    grep: function grep(elems, callback, invert) {
      var callbackInverse,
          matches = [],
          i = 0,
          length = elems.length,
          callbackExpect = !invert; // Go through the array, only saving the items
      // that pass the validator function

      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);

        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },
    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
          value,
          i = 0,
          ret = []; // Go through the array, translating each of the items to their new values

      if (isArrayLike(elems)) {
        length = elems.length;

        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        } // Go through every key on the object,

      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      } // Flatten any nested arrays


      return flat(ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });

  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  } // Populate the class2type map


  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
        type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }

  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/src/jquery.js")))

/***/ }),

/***/ "./node_modules/jquery/src/core/DOMEval.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/core/DOMEval.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document) {
  "use strict";

  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true
  };

  function DOMEval(code, node, doc) {
    doc = doc || document;
    var i,
        val,
        script = doc.createElement("script");
    script.text = code;

    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || node.getAttribute && node.getAttribute(i);

        if (val) {
          script.setAttribute(i, val);
        }
      }
    }

    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  return DOMEval;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/access.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/core/access.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../core/toType */ "./node_modules/jquery/src/core/toType.js"), __webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, toType, isFunction) {
  "use strict"; // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function

  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
        len = elems.length,
        bulk = key == null; // Sets many values

    if (toType(key) === "object") {
      chainable = true;

      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      } // Sets one value

    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null; // ...except when executing function values
        } else {
          bulk = fn;

          fn = function fn(elem, _key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }

    if (chainable) {
      return elems;
    } // Gets


    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  };

  return access;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/camelCase.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/core/camelCase.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict"; // Matches dashed string for camelizing

  var rmsPrefix = /^-ms-/,
      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()

  function fcamelCase(_all, letter) {
    return letter.toUpperCase();
  } // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (#9572)


  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }

  return camelCase;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/init.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/core/init.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Initialize a jQuery object
!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./var/rsingleTag */ "./node_modules/jquery/src/core/var/rsingleTag.js"), __webpack_require__(/*! ../traversing/findFilter */ "./node_modules/jquery/src/traversing/findFilter.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, isFunction, rsingleTag) {
  "use strict"; // A central reference to the root jQuery(document)

  var rootjQuery,
      // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
  // Strict HTML recognition (#11290: must start with <)
  // Shortcut simple #id case for speed
  rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      init = jQuery.fn.init = function (selector, context, root) {
    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

    if (!selector) {
      return this;
    } // Method init() accepts an alternate rootjQuery
    // so migrate can support jQuery.sub (gh-2101)


    root = root || rootjQuery; // Handle HTML strings

    if (typeof selector === "string") {
      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
        // Assume that strings that start and end with <> are HTML and skip the regex check
        match = [null, selector, null];
      } else {
        match = rquickExpr.exec(selector);
      } // Match html or make sure no context is specified for #id


      if (match && (match[1] || !context)) {
        // HANDLE: $(html) -> $(array)
        if (match[1]) {
          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
          // Intentionally let the error be thrown if parseHTML is not present

          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)

          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
            for (match in context) {
              // Properties of context are called as methods if possible
              if (isFunction(this[match])) {
                this[match](context[match]); // ...and otherwise set as attributes
              } else {
                this.attr(match, context[match]);
              }
            }
          }

          return this; // HANDLE: $(#id)
        } else {
          elem = document.getElementById(match[2]);

          if (elem) {
            // Inject the element directly into the jQuery object
            this[0] = elem;
            this.length = 1;
          }

          return this;
        } // HANDLE: $(expr, $(...))

      } else if (!context || context.jquery) {
        return (context || root).find(selector); // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
      } else {
        return this.constructor(context).find(selector);
      } // HANDLE: $(DOMElement)

    } else if (selector.nodeType) {
      this[0] = selector;
      this.length = 1;
      return this; // HANDLE: $(function)
      // Shortcut for document ready
    } else if (isFunction(selector)) {
      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
      selector(jQuery);
    }

    return jQuery.makeArray(selector, this);
  }; // Give the init function the jQuery prototype for later instantiation


  init.prototype = jQuery.fn; // Initialize central reference

  rootjQuery = jQuery(document);
  return init;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/isAttached.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery/src/core/isAttached.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../var/documentElement */ "./node_modules/jquery/src/var/documentElement.js"), __webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js") // jQuery.contains
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, documentElement) {
  "use strict";

  var isAttached = function isAttached(elem) {
    return jQuery.contains(elem.ownerDocument, elem);
  },
      composed = {
    composed: true
  }; // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.


  if (documentElement.getRootNode) {
    isAttached = function isAttached(elem) {
      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
    };
  }

  return isAttached;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/nodeName.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/core/nodeName.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }

  return nodeName;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/parseHTML.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/core/parseHTML.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ./var/rsingleTag */ "./node_modules/jquery/src/core/var/rsingleTag.js"), __webpack_require__(/*! ../manipulation/buildFragment */ "./node_modules/jquery/src/manipulation/buildFragment.js"), // This is the only module that needs core/support
__webpack_require__(/*! ./support */ "./node_modules/jquery/src/core/support.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, rsingleTag, buildFragment, support) {
  "use strict"; // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string

  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }

    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument(""); // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)

        base = context.createElement("base");
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && []; // Single tag

    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };

  return jQuery.parseHTML;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/parseXML.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/core/parseXML.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict"; // Cross-browser xml parsing

  jQuery.parseXML = function (data) {
    var xml, parserErrorElem;

    if (!data || typeof data !== "string") {
      return null;
    } // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.


    try {
      xml = new window.DOMParser().parseFromString(data, "text/xml");
    } catch (e) {}

    parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];

    if (!xml || parserErrorElem) {
      jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function (el) {
        return el.textContent;
      }).join("\n") : data));
    }

    return xml;
  };

  return jQuery.parseXML;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/ready.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/core/ready.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ../core/readyException */ "./node_modules/jquery/src/core/readyException.js"), __webpack_require__(/*! ../deferred */ "./node_modules/jquery/src/deferred.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document) {
  "use strict"; // The deferred used on DOM ready

  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function (fn) {
    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup
    // happens at the time of error handling instead of callback
    // registration.
    .catch(function (error) {
      jQuery.readyException(error);
    });
    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,
    // Handle when the DOM is ready
    ready: function ready(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      } // Remember that the DOM is ready


      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      } // If there are functions bound, to execute


      readyList.resolveWith(document, [jQuery]);
    }
  });
  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method

  function completed() {
    document.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  } // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon


  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

    window.addEventListener("load", completed);
  }
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/readyException.js":
/*!********************************************************!*\
  !*** ./node_modules/jquery/src/core/readyException.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict";

  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/stripAndCollapse.js":
/*!**********************************************************!*\
  !*** ./node_modules/jquery/src/core/stripAndCollapse.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (rnothtmlwhite) {
  "use strict"; // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }

  return stripAndCollapse;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/support.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/core/support.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document, support) {
  "use strict"; // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337

  support.createHTMLDocument = function () {
    var body = document.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  }();

  return support;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/toType.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/core/toType.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../var/class2type */ "./node_modules/jquery/src/var/class2type.js"), __webpack_require__(/*! ../var/toString */ "./node_modules/jquery/src/var/toString.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (class2type, toString) {
  "use strict";

  function toType(obj) {
    if (obj == null) {
      return obj + "";
    } // Support: Android <=2.3 only (functionish RegExp)


    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
  }

  return toType;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/core/var/rsingleTag.js":
/*!********************************************************!*\
  !*** ./node_modules/jquery/src/core/var/rsingleTag.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict"; // rsingleTag matches a string consisting of a single HTML element with no attributes
  // and captures the element's name

  return /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css.js":
/*!****************************************!*\
  !*** ./node_modules/jquery/src/css.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./core/access */ "./node_modules/jquery/src/core/access.js"), __webpack_require__(/*! ./core/camelCase */ "./node_modules/jquery/src/core/camelCase.js"), __webpack_require__(/*! ./core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"), __webpack_require__(/*! ./var/rcssNum */ "./node_modules/jquery/src/var/rcssNum.js"), __webpack_require__(/*! ./css/var/rnumnonpx */ "./node_modules/jquery/src/css/var/rnumnonpx.js"), __webpack_require__(/*! ./css/var/cssExpand */ "./node_modules/jquery/src/css/var/cssExpand.js"), __webpack_require__(/*! ./css/var/getStyles */ "./node_modules/jquery/src/css/var/getStyles.js"), __webpack_require__(/*! ./css/var/swap */ "./node_modules/jquery/src/css/var/swap.js"), __webpack_require__(/*! ./css/curCSS */ "./node_modules/jquery/src/css/curCSS.js"), __webpack_require__(/*! ./css/adjustCSS */ "./node_modules/jquery/src/css/adjustCSS.js"), __webpack_require__(/*! ./css/addGetHookIf */ "./node_modules/jquery/src/css/addGetHookIf.js"), __webpack_require__(/*! ./css/support */ "./node_modules/jquery/src/css/support.js"), __webpack_require__(/*! ./css/finalPropName */ "./node_modules/jquery/src/css/finalPropName.js"), __webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"), __webpack_require__(/*! ./core/ready */ "./node_modules/jquery/src/core/ready.js"), __webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js") // contains
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, camelCase, nodeName, rcssNum, rnumnonpx, cssExpand, getStyles, swap, curCSS, adjustCSS, addGetHookIf, support, finalPropName) {
  "use strict";

  var // Swappable if display is none or starts with table
  // except "table", "table-cell", or "table-caption"
  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  rdisplayswap = /^(none|table(?!-c[ea]).+)/,
      rcustomProp = /^--/,
      cssShow = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      cssNormalTransform = {
    letterSpacing: "0",
    fontWeight: "400"
  };

  function setPositiveNumber(_elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }

  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === "width" ? 1 : 0,
        extra = 0,
        delta = 0; // Adjustment may not be necessary

    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === "margin") {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      } // If we get here with a content-box, we're seeking "padding" or "border" or "margin"


      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border

        if (box !== "padding") {
          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise
        } else {
          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        } // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"

      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        } // For "content" or "padding", subtract border


        if (box !== "margin") {
          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    } // Account for positive content-box scroll gutter when requested by providing computedVal


    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5 // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
      // Use an explicit zero to avoid NaN (gh-3964)
      )) || 0;
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
        // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
    // Fake content-box until we know it's needed to know the true value.
    boxSizingNeeded = !support.boxSizingReliable() || extra,
        isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
        valueIsBorderBox = isBorderBox,
        val = curCSS(elem, dimension, styles),
        offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1); // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.

    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }

      val = "auto";
    } // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.


    if ((!support.boxSizingReliable() && isBorderBox || // Support: IE 10 - 11+, Edge 15 - 18+
    // IE/Edge misreport `getComputedStyle` of table rows with width/height
    // set in CSS while `offset*` properties report correct values.
    // Interestingly, in some cases IE 9 doesn't suffer from this issue.
    !support.reliableTrDimensions() && nodeName(elem, "tr") || // Fall back to offsetWidth/offsetHeight when value is "auto"
    // This happens for inline elements with no explicit setting (gh-3571)
    val === "auto" || // Support: Android <=4.1 - 4.3 only
    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
    !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && // Make sure the element is visible & connected
    elem.getClientRects().length) {
      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box"; // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.

      valueIsBorderBox = offsetProp in elem;

      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    } // Normalize "" and auto


    val = parseFloat(val) || 0; // Adjust for the element's box model

    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
    val) + "px";
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "animationIterationCount": true,
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "gridArea": true,
      "gridColumn": true,
      "gridColumnEnd": true,
      "gridColumnStart": true,
      "gridRow": true,
      "gridRowEnd": true,
      "gridRowStart": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      } // Make sure that we're working with the right name


      var ret,
          type,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name),
          style = elem.style; // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Gets hook for the prefixed version, then unprefixed version


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

      if (value !== undefined) {
        type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)

        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret); // Fixes bug #9237

          type = "number";
        } // Make sure that null and NaN values aren't set (#7116)


        if (value == null || value !== value) {
          return;
        } // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.


        if (type === "number" && !isCustomProp) {
          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
        } // background-* props affect original clone's values


        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        } // If a hook was provided, use that value, otherwise just set the specified value


        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        } // Otherwise just get the value from the style object


        return style[name];
      }
    },
    css: function css(elem, name, extra, styles) {
      var val,
          num,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Try prefixed name followed by the unprefixed name


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      } // Otherwise, if a way to get the computed value exists, use that


      if (val === undefined) {
        val = curCSS(elem, name, styles);
      } // Convert "normal" to computed value


      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      } // Make numeric if forced or a qualifier was provided and val looks numeric


      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    }
  });
  jQuery.each(["height", "width"], function (_i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function get(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+
          // Table columns in Safari have non-zero offsetWidth & zero
          // getBoundingClientRect().width unless display is changed.
          // Support: IE <=11 only
          // Running getBoundingClientRect on a disconnected node
          // in IE throws an error.
          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, dimension, extra);
          }) : getWidthOrHeight(elem, dimension, extra);
        }
      },
      set: function set(elem, value, extra) {
        var matches,
            styles = getStyles(elem),
            // Only read styles.position if the test has a chance to fail
        // to avoid forcing a reflow.
        scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",
            // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
        boxSizingNeeded = scrollboxSizeBuggy || extra,
            isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0; // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)

        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
        } // Convert to pixels if value adjustment is needed


        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  }); // These hooks are used by animate to expand properties

  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
            expanded = {},
            // Assumes a single number if not a string
        parts = typeof value === "string" ? value.split(" ") : [value];

        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }

        return expanded;
      }
    };

    if (prefix !== "margin") {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function css(name, value) {
      return access(this, function (elem, name, value) {
        var styles,
            len,
            map = {},
            i = 0;

        if (Array.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;

          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }

          return map;
        }

        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    }
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/addGetHookIf.js":
/*!*****************************************************!*\
  !*** ./node_modules/jquery/src/css/addGetHookIf.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        } // Hook needed; redefine it so that the support test is not executed again.


        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }

  return addGetHookIf;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/adjustCSS.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/css/adjustCSS.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../var/rcssNum */ "./node_modules/jquery/src/var/rcssNum.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, rcssNum) {
  "use strict";

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
        scale,
        maxIterations = 20,
        currentValue = tween ? function () {
      return tween.cur();
    } : function () {
      return jQuery.css(elem, prop, "");
    },
        initial = currentValue(),
        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
        // Starting value computation is required for potential unit mismatches
    initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2; // Trust units reported by jQuery.css

      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point

      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);

        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }

        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on

      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }

    return adjusted;
  }

  return adjustCSS;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/curCSS.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/css/curCSS.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../core/isAttached */ "./node_modules/jquery/src/core/isAttached.js"), __webpack_require__(/*! ./var/rboxStyle */ "./node_modules/jquery/src/css/var/rboxStyle.js"), __webpack_require__(/*! ./var/rnumnonpx */ "./node_modules/jquery/src/css/var/rnumnonpx.js"), __webpack_require__(/*! ./var/getStyles */ "./node_modules/jquery/src/css/var/getStyles.js"), __webpack_require__(/*! ./support */ "./node_modules/jquery/src/css/support.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isAttached, rboxStyle, rnumnonpx, getStyles, support) {
  "use strict";

  function curCSS(elem, name, computed) {
    var width,
        minWidth,
        maxWidth,
        ret,
        // Support: Firefox 51+
    // Retrieving style before computed somehow
    // fixes an issue with getting wrong values
    // on detached elements
    style = elem.style;
    computed = computed || getStyles(elem); // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, #12537)
    //   .css('--customProperty) (#3144)

    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];

      if (ret === "" && !isAttached(elem)) {
        ret = jQuery.style(elem, name);
      } // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values


      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth; // Put in the new values to get a computed value out

        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width; // Revert the changed values

        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined ? // Support: IE <=9 - 11 only
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }

  return curCSS;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/finalPropName.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/css/finalPropName.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document, jQuery) {
  "use strict";

  var cssPrefixes = ["Webkit", "Moz", "ms"],
      emptyStyle = document.createElement("div").style,
      vendorProps = {}; // Return a vendor-prefixed property or undefined

  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
        i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;

      if (name in emptyStyle) {
        return name;
      }
    }
  } // Return a potentially-mapped jQuery.cssProps or vendor prefixed property


  function finalPropName(name) {
    var final = jQuery.cssProps[name] || vendorProps[name];

    if (final) {
      return final;
    }

    if (name in emptyStyle) {
      return name;
    }

    return vendorProps[name] = vendorPropName(name) || name;
  }

  return finalPropName;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/hiddenVisibleSelectors.js":
/*!***************************************************************!*\
  !*** ./node_modules/jquery/src/css/hiddenVisibleSelectors.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict";

  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };

  jQuery.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/showHide.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/css/showHide.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"), __webpack_require__(/*! ../css/var/isHiddenWithinTree */ "./node_modules/jquery/src/css/var/isHiddenWithinTree.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, dataPriv, isHiddenWithinTree) {
  "use strict";

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
        doc = elem.ownerDocument,
        nodeName = elem.nodeName,
        display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, "display");
    temp.parentNode.removeChild(temp);

    if (display === "none") {
      display = "block";
    }

    defaultDisplayMap[nodeName] = display;
    return display;
  }

  function showHide(elements, show) {
    var display,
        elem,
        values = [],
        index = 0,
        length = elements.length; // Determine new display value for elements that need to change

    for (; index < length; index++) {
      elem = elements[index];

      if (!elem.style) {
        continue;
      }

      display = elem.style.display;

      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;

          if (!values[index]) {
            elem.style.display = "";
          }
        }

        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none"; // Remember what we're overwriting

          dataPriv.set(elem, "display", display);
        }
      }
    } // Set the display of the elements in a second loop to avoid constant reflow


    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  return showHide;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/support.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/css/support.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ../var/documentElement */ "./node_modules/jquery/src/var/documentElement.js"), __webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, documentElement, support) {
  "use strict";

  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't

      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements

      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)

      div.style.position = "absolute";
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
      documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed

      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
        boxSizingReliableVal,
        scrollboxSizeVal,
        pixelBoxStylesVal,
        reliableTrDimensionsVal,
        reliableMarginLeftVal,
        container = document.createElement("div"),
        div = document.createElement("div"); // Finish early in limited (non-browser) environments

    if (!div.style) {
      return;
    } // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (#8908)


    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    jQuery.extend(support, {
      boxSizingReliable: function boxSizingReliable() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function pixelBoxStyles() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function pixelPosition() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function scrollboxSize() {
        computeStyleTests();
        return scrollboxSizeVal;
      },
      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      //
      // Support: Firefox 70+
      // Only Firefox includes border widths
      // in computed dimensions. (gh-4529)
      reliableTrDimensions: function reliableTrDimensions() {
        var table, tr, trChild, trStyle;

        if (reliableTrDimensionsVal == null) {
          table = document.createElement("table");
          tr = document.createElement("tr");
          trChild = document.createElement("div");
          table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
          tr.style.cssText = "border:1px solid"; // Support: Chrome 86+
          // Height set through cssText does not get applied.
          // Computed height then comes back as 0.

          tr.style.height = "1px";
          trChild.style.height = "9px"; // Support: Android 8 Chrome 86+
          // In our bodyBackground.html iframe,
          // display for all div elements is set to "inline",
          // which causes a problem only in Android 8 Chrome 86.
          // Ensuring the div is display: block
          // gets around this issue.

          trChild.style.display = "block";
          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
          trStyle = window.getComputedStyle(tr);
          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
          documentElement.removeChild(table);
        }

        return reliableTrDimensionsVal;
      }
    });
  })();

  return support;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/var/cssExpand.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/css/var/cssExpand.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return ["Top", "Right", "Bottom", "Left"];
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/var/getStyles.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/css/var/getStyles.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return function (elem) {
    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/var/isHiddenWithinTree.js":
/*!***************************************************************!*\
  !*** ./node_modules/jquery/src/css/var/isHiddenWithinTree.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../../core/isAttached */ "./node_modules/jquery/src/core/isAttached.js") // css is assumed
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isAttached) {
  "use strict"; // isHiddenWithinTree reports if an element has a non-"none" display style (inline and/or
  // through the CSS cascade), which is useful in deciding whether or not to make it visible.
  // It differs from the :hidden selector (jQuery.expr.pseudos.hidden) in two important ways:
  // * A hidden ancestor does not force an element to be classified as hidden.
  // * Being disconnected from the document does not force an element to be classified as hidden.
  // These differences improve the behavior of .toggle() et al. when applied to elements that are
  // detached or contained within hidden ancestors (gh-2404, gh-2863).

  return function (elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem; // Inline style trumps all

    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
    // Support: Firefox <=43 - 45
    // Disconnected elements can have computed display: none, so first confirm that elem is
    // in the document.
    isAttached(elem) && jQuery.css(elem, "display") === "none";
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/var/rboxStyle.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/css/var/rboxStyle.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./cssExpand */ "./node_modules/jquery/src/css/var/cssExpand.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (cssExpand) {
  "use strict";

  return new RegExp(cssExpand.join("|"), "i");
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/var/rnumnonpx.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/css/var/rnumnonpx.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../../var/pnum */ "./node_modules/jquery/src/var/pnum.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (pnum) {
  "use strict";

  return new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/css/var/swap.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/css/var/swap.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict"; // A method for quickly swapping in/out CSS properties to get correct calculations.

  return function (elem, options, callback) {
    var ret,
        name,
        old = {}; // Remember the old values, and insert the new ones

    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.call(elem); // Revert the old values

    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/data.js":
/*!*****************************************!*\
  !*** ./node_modules/jquery/src/data.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./core/access */ "./node_modules/jquery/src/core/access.js"), __webpack_require__(/*! ./core/camelCase */ "./node_modules/jquery/src/core/camelCase.js"), __webpack_require__(/*! ./data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"), __webpack_require__(/*! ./data/var/dataUser */ "./node_modules/jquery/src/data/var/dataUser.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, camelCase, dataPriv, dataUser) {
  "use strict"; //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === "true") {
      return true;
    }

    if (data === "false") {
      return false;
    }

    if (data === "null") {
      return null;
    } // Only convert to a number if it doesn't change the string


    if (data === +data + "") {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name; // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute

    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {} // Make sure we set the data so it isn't changed later


        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }

    return data;
  }

  jQuery.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },
    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function data(key, value) {
      var i,
          name,
          data,
          elem = this[0],
          attrs = elem && elem.attributes; // Gets all values

      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;

            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;

                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }

            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      } // Sets multiple values


      if (_typeof(key) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(this, function (value) {
        var data; // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.

        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get(elem, key);

          if (data !== undefined) {
            return data;
          } // Attempt to "discover" the data in
          // HTML5 custom data-* attrs


          data = dataAttr(elem, key);

          if (data !== undefined) {
            return data;
          } // We tried really hard, but the data doesn't exist.


          return;
        } // Set the data...


        this.each(function () {
          // We always store the camelCased key
          dataUser.set(this, key, value);
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/data/Data.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/data/Data.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../core/camelCase */ "./node_modules/jquery/src/core/camelCase.js"), __webpack_require__(/*! ../var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"), __webpack_require__(/*! ./var/acceptData */ "./node_modules/jquery/src/data/var/acceptData.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, camelCase, rnothtmlwhite, acceptData) {
  "use strict";

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;
  Data.prototype = {
    cache: function cache(owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando]; // If not, create one

      if (!value) {
        value = {}; // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.

        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }

      return value;
    },
    set: function set(owner, data, value) {
      var prop,
          cache = this.cache(owner); // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)

      if (typeof data === "string") {
        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }

      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
      owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function access(owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        return this.get(owner, key);
      } // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //


      this.set(owner, key, value); // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]

      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
          cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key); // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace

          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      } // Remove the expando if there's no more data


      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  return Data;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/data/var/acceptData.js":
/*!********************************************************!*\
  !*** ./node_modules/jquery/src/data/var/acceptData.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";
  /**
   * Determines whether an object can have data
   */

  return function (owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/data/var/dataPriv.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/data/var/dataPriv.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../Data */ "./node_modules/jquery/src/data/Data.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Data) {
  "use strict";

  return new Data();
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/data/var/dataUser.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/data/var/dataUser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../Data */ "./node_modules/jquery/src/data/Data.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (Data) {
  "use strict";

  return new Data();
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/deferred.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/deferred.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./var/slice */ "./node_modules/jquery/src/var/slice.js"), __webpack_require__(/*! ./callbacks */ "./node_modules/jquery/src/callbacks.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isFunction, slice) {
  "use strict";

  function Identity(v) {
    return v;
  }

  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction(method = value.promise)) {
        method.call(value).done(resolve).fail(reject); // Other thenables
      } else if (value && isFunction(method = value.then)) {
        method.call(value, resolve, reject); // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      } // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.

    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function Deferred(func) {
      var tuples = [// action, add listener, callbacks,
      // ... .then handlers, argument index, [final state]
      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
          _state = "pending",
          _promise = {
        state: function state() {
          return _state;
        },
        always: function always() {
          deferred.done(arguments).fail(arguments);
          return this;
        },
        "catch": function _catch(fn) {
          return _promise.then(null, fn);
        },
        // Keep pipe for back-compat
        pipe: function
          /* fnDone, fnFail, fnProgress */
        pipe() {
          var fns = arguments;
          return jQuery.Deferred(function (newDefer) {
            jQuery.each(tuples, function (_i, tuple) {
              // Map tuples (progress, done, fail) to arguments (done, fail, progress)
              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })
              // deferred.done(function() { bind to newDefer or newDefer.resolve })
              // deferred.fail(function() { bind to newDefer or newDefer.reject })

              deferred[tuple[1]](function () {
                var returned = fn && fn.apply(this, arguments);

                if (returned && isFunction(returned.promise)) {
                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                } else {
                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                }
              });
            });
            fns = null;
          }).promise();
        },
        then: function then(onFulfilled, onRejected, onProgress) {
          var maxDepth = 0;

          function resolve(depth, deferred, handler, special) {
            return function () {
              var that = this,
                  args = arguments,
                  mightThrow = function mightThrow() {
                var returned, then; // Support: Promises/A+ section 2.3.3.3.3
                // https://promisesaplus.com/#point-59
                // Ignore double-resolution attempts

                if (depth < maxDepth) {
                  return;
                }

                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1
                // https://promisesaplus.com/#point-48

                if (returned === deferred.promise()) {
                  throw new TypeError("Thenable self-resolution");
                } // Support: Promises/A+ sections 2.3.3.1, 3.5
                // https://promisesaplus.com/#point-54
                // https://promisesaplus.com/#point-75
                // Retrieve `then` only once


                then = returned && ( // Support: Promises/A+ section 2.3.4
                // https://promisesaplus.com/#point-64
                // Only check objects and functions for thenability
                _typeof(returned) === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable

                if (isFunction(then)) {
                  // Special processors (notify) just wait for resolution
                  if (special) {
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress
                  } else {
                    // ...and disregard older resolution values
                    maxDepth++;
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                  } // Handle all other returned values

                } else {
                  // Only substitute handlers pass on context
                  // and multiple values (non-spec behavior)
                  if (handler !== Identity) {
                    that = undefined;
                    args = [returned];
                  } // Process the value(s)
                  // Default process is resolve


                  (special || deferred.resolveWith)(that, args);
                }
              },
                  // Only normal processors (resolve) catch and reject exceptions
              process = special ? mightThrow : function () {
                try {
                  mightThrow();
                } catch (e) {
                  if (jQuery.Deferred.exceptionHook) {
                    jQuery.Deferred.exceptionHook(e, process.stackTrace);
                  } // Support: Promises/A+ section 2.3.3.3.4.1
                  // https://promisesaplus.com/#point-61
                  // Ignore post-resolution exceptions


                  if (depth + 1 >= maxDepth) {
                    // Only substitute handlers pass on context
                    // and multiple values (non-spec behavior)
                    if (handler !== Thrower) {
                      that = undefined;
                      args = [e];
                    }

                    deferred.rejectWith(that, args);
                  }
                }
              }; // Support: Promises/A+ section 2.3.3.3.1
              // https://promisesaplus.com/#point-57
              // Re-resolve promises immediately to dodge false rejection from
              // subsequent errors


              if (depth) {
                process();
              } else {
                // Call an optional hook to record the stack, in case of exception
                // since it's otherwise lost when execution goes async
                if (jQuery.Deferred.getStackHook) {
                  process.stackTrace = jQuery.Deferred.getStackHook();
                }

                window.setTimeout(process);
              }
            };
          }

          return jQuery.Deferred(function (newDefer) {
            // progress_handlers.add( ... )
            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )

            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )

            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
          }).promise();
        },
        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function promise(obj) {
          return obj != null ? jQuery.extend(obj, _promise) : _promise;
        }
      },
          deferred = {}; // Add list-specific methods

      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
            stateString = tuple[5]; // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add

        _promise[tuple[1]] = list.add; // Handle state

        if (stateString) {
          list.add(function () {
            // state = "resolved" (i.e., fulfilled)
            // state = "rejected"
            _state = stateString;
          }, // rejected_callbacks.disable
          // fulfilled_callbacks.disable
          tuples[3 - i][2].disable, // rejected_handlers.disable
          // fulfilled_handlers.disable
          tuples[3 - i][3].disable, // progress_callbacks.lock
          tuples[0][2].lock, // progress_handlers.lock
          tuples[0][3].lock);
        } // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire


        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }

        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
          return this;
        }; // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith


        deferred[tuple[0] + "With"] = list.fireWith;
      }); // Make the deferred a promise

      _promise.promise(deferred); // Call given func if any


      if (func) {
        func.call(deferred, deferred);
      } // All done!


      return deferred;
    },
    // Deferred helper
    when: function when(singleValue) {
      var // count of uncompleted subordinates
      remaining = arguments.length,
          // count of unprocessed arguments
      i = remaining,
          // subordinate fulfillment data
      resolveContexts = Array(i),
          resolveValues = slice.call(arguments),
          // the primary Deferred
      primary = jQuery.Deferred(),
          // subordinate callback factory
      updateFunc = function updateFunc(i) {
        return function (value) {
          resolveContexts[i] = this;
          resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;

          if (! --remaining) {
            primary.resolveWith(resolveContexts, resolveValues);
          }
        };
      }; // Single- and empty arguments are adopted like Promise.resolve


      if (remaining <= 1) {
        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)

        if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
          return primary.then();
        }
      } // Multiple arguments are aggregated like Promise.all array elements


      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), primary.reject);
      }

      return primary.promise();
    }
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/deferred/exceptionHook.js":
/*!***********************************************************!*\
  !*** ./node_modules/jquery/src/deferred/exceptionHook.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../deferred */ "./node_modules/jquery/src/deferred.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict"; // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.

  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function (error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
    }
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/deprecated.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/deprecated.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"), __webpack_require__(/*! ./core/camelCase */ "./node_modules/jquery/src/core/camelCase.js"), __webpack_require__(/*! ./core/toType */ "./node_modules/jquery/src/core/toType.js"), __webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./var/isWindow */ "./node_modules/jquery/src/var/isWindow.js"), __webpack_require__(/*! ./var/slice */ "./node_modules/jquery/src/var/slice.js"), __webpack_require__(/*! ./deprecated/ajax-event-alias */ "./node_modules/jquery/src/deprecated/ajax-event-alias.js"), __webpack_require__(/*! ./deprecated/event */ "./node_modules/jquery/src/deprecated/event.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, nodeName, camelCase, toType, isFunction, isWindow, slice) {
  "use strict"; // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP

  var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g; // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon

  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;

    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    } // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.


    if (!isFunction(fn)) {
      return undefined;
    } // Simulated bind


    args = slice.call(arguments, 2);

    proxy = function proxy() {
      return fn.apply(context || this, args.concat(slice.call(arguments)));
    }; // Set the guid of unique handler to the same of original handler, so it can be removed


    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    return proxy;
  };

  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };

  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;
  jQuery.now = Date.now;

  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    !isNaN(obj - parseFloat(obj));
  };

  jQuery.trim = function (text) {
    return text == null ? "" : (text + "").replace(rtrim, "");
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/deprecated/ajax-event-alias.js":
/*!****************************************************************!*\
  !*** ./node_modules/jquery/src/deprecated/ajax-event-alias.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js"), __webpack_require__(/*! ../event */ "./node_modules/jquery/src/event.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict";

  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/deprecated/event.js":
/*!*****************************************************!*\
  !*** ./node_modules/jquery/src/deprecated/event.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../event */ "./node_modules/jquery/src/event.js"), __webpack_require__(/*! ../event/trigger */ "./node_modules/jquery/src/event/trigger.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict";

  jQuery.fn.extend({
    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    },
    hover: function hover(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });
  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/dimensions.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/dimensions.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./core/access */ "./node_modules/jquery/src/core/access.js"), __webpack_require__(/*! ./var/isWindow */ "./node_modules/jquery/src/var/isWindow.js"), __webpack_require__(/*! ./css */ "./node_modules/jquery/src/css.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, isWindow) {
  "use strict"; // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

  jQuery.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    jQuery.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return access(this, function (elem, type, value) {
          var doc;

          if (isWindow(elem)) {
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
          } // Get document width or height


          if (elem.nodeType === 9) {
            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest

            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }

          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) : // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable);
      };
    });
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/effects.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/src/effects.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./core/camelCase */ "./node_modules/jquery/src/core/camelCase.js"), __webpack_require__(/*! ./var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./var/rcssNum */ "./node_modules/jquery/src/var/rcssNum.js"), __webpack_require__(/*! ./var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"), __webpack_require__(/*! ./css/var/cssExpand */ "./node_modules/jquery/src/css/var/cssExpand.js"), __webpack_require__(/*! ./css/var/isHiddenWithinTree */ "./node_modules/jquery/src/css/var/isHiddenWithinTree.js"), __webpack_require__(/*! ./css/adjustCSS */ "./node_modules/jquery/src/css/adjustCSS.js"), __webpack_require__(/*! ./data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"), __webpack_require__(/*! ./css/showHide */ "./node_modules/jquery/src/css/showHide.js"), __webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"), __webpack_require__(/*! ./queue */ "./node_modules/jquery/src/queue.js"), __webpack_require__(/*! ./deferred */ "./node_modules/jquery/src/deferred.js"), __webpack_require__(/*! ./traversing */ "./node_modules/jquery/src/traversing.js"), __webpack_require__(/*! ./manipulation */ "./node_modules/jquery/src/manipulation.js"), __webpack_require__(/*! ./css */ "./node_modules/jquery/src/css.js"), __webpack_require__(/*! ./effects/Tween */ "./node_modules/jquery/src/effects/Tween.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, camelCase, document, isFunction, rcssNum, rnothtmlwhite, cssExpand, isHiddenWithinTree, adjustCSS, dataPriv, showHide) {
  "use strict";

  var fxNow,
      inProgress,
      rfxtypes = /^(?:toggle|show|hide)$/,
      rrun = /queueHooks$/;

  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, jQuery.fx.interval);
      }

      jQuery.fx.tick();
    }
  } // Animations created synchronously will run synchronously


  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = Date.now();
  } // Generate parameters to create a standard animation


  function genFx(type, includeWidth) {
    var which,
        i = 0,
        attrs = {
      height: type
    }; // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right

    includeWidth = includeWidth ? 1 : 0;

    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs["margin" + which] = attrs["padding" + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
        collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
        index = 0,
        length = collection.length;

    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    var prop,
        value,
        toggle,
        hooks,
        oldfire,
        propTween,
        restoreDisplay,
        display,
        isBox = "width" in props || "height" in props,
        anim = this,
        orig = {},
        style = elem.style,
        hidden = elem.nodeType && isHiddenWithinTree(elem),
        dataShow = dataPriv.get(elem, "fxshow"); // Queue-skipping animations hijack the fx hooks

    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, "fx");

      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;

        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }

      hooks.unqueued++;
      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;

          if (!jQuery.queue(elem, "fx").length) {
            hooks.empty.fire();
          }
        });
      });
    } // Detect show/hide animations


    for (prop in props) {
      value = props[prop];

      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === "toggle";

        if (value === (hidden ? "hide" : "show")) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === "show" && dataShow && dataShow[prop] !== undefined) {
            hidden = true; // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }

        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
      }
    } // Bail out if this is a no-op like .hide().hide()


    propTween = !jQuery.isEmptyObject(props);

    if (!propTween && jQuery.isEmptyObject(orig)) {
      return;
    } // Restrict "overflow" and "display" styles during box animations


    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade

      restoreDisplay = dataShow && dataShow.display;

      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, "display");
      }

      display = jQuery.css(elem, "display");

      if (display === "none") {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css(elem, "display");
          showHide([elem]);
        }
      } // Animate inline elements as inline-block


      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
        if (jQuery.css(elem, "float") === "none") {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });

            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === "none" ? "" : display;
            }
          }

          style.display = "inline-block";
        }
      }
    }

    if (opts.overflow) {
      style.overflow = "hidden";
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    } // Implement show/hide animations


    propTween = false;

    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ("hidden" in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, "fxshow", {
            display: restoreDisplay
          });
        } // Store hidden/visible for toggle so `.stop().toggle()` "reverses"


        if (toggle) {
          dataShow.hidden = !hidden;
        } // Show elements before animating them


        if (hidden) {
          showHide([elem], true);
        }
        /* eslint-disable no-loop-func */


        anim.done(function () {
          /* eslint-enable no-loop-func */
          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }

          dataPriv.remove(elem, "fxshow");

          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop]);
          }
        });
      } // Per-property setup


      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;

        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass

    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];

      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];

      if (hooks && "expand" in hooks) {
        value = hooks.expand(value);
        delete props[name]; // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"

        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
        stopped,
        index = 0,
        length = Animation.prefilters.length,
        deferred = jQuery.Deferred().always(function () {
      // Don't match elem in the :animated selector
      delete tick.elem;
    }),
        tick = function tick() {
      if (stopped) {
        return false;
      }

      var currentTime = fxNow || createFxNow(),
          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // Support: Android 2.3 only
      // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
      temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

      for (; index < length; index++) {
        animation.tweens[index].run(percent);
      }

      deferred.notifyWith(elem, [animation, percent, remaining]); // If there's more to do, yield

      if (percent < 1 && length) {
        return remaining;
      } // If this was an empty animation, synthesize a final progress notification


      if (!length) {
        deferred.notifyWith(elem, [animation, 1, 0]);
      } // Resolve the animation and report its conclusion


      deferred.resolveWith(elem, [animation]);
      return false;
    },
        animation = deferred.promise({
      elem: elem,
      props: jQuery.extend({}, properties),
      opts: jQuery.extend(true, {
        specialEasing: {},
        easing: jQuery.easing._default
      }, options),
      originalProperties: properties,
      originalOptions: options,
      startTime: fxNow || createFxNow(),
      duration: options.duration,
      tweens: [],
      createTween: function createTween(prop, end) {
        var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
        animation.tweens.push(tween);
        return tween;
      },
      stop: function stop(gotoEnd) {
        var index = 0,
            // If we are going to the end, we want to run all the tweens
        // otherwise we skip this part
        length = gotoEnd ? animation.tweens.length : 0;

        if (stopped) {
          return this;
        }

        stopped = true;

        for (; index < length; index++) {
          animation.tweens[index].run(1);
        } // Resolve when we played the last frame; otherwise, reject


        if (gotoEnd) {
          deferred.notifyWith(elem, [animation, 1, 0]);
          deferred.resolveWith(elem, [animation, gotoEnd]);
        } else {
          deferred.rejectWith(elem, [animation, gotoEnd]);
        }

        return this;
      }
    }),
        props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);

      if (result) {
        if (isFunction(result.stop)) {
          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
        }

        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    } // Attach callbacks from options


    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    return animation;
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      "*": [function (prop, value) {
        var tween = this.createTween(prop, value);
        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
        return tween;
      }]
    },
    tweener: function tweener(props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ["*"];
      } else {
        props = props.match(rnothtmlwhite);
      }

      var prop,
          index = 0,
          length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },
    prefilters: [defaultPrefilter],
    prefilter: function prefilter(callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    }
  });

  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {
      complete: fn || !fn && easing || isFunction(speed) && speed,
      duration: speed,
      easing: fn && easing || easing && !isFunction(easing) && easing
    }; // Go to the end state if fx are off

    if (jQuery.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== "number") {
        if (opt.duration in jQuery.fx.speeds) {
          opt.duration = jQuery.fx.speeds[opt.duration];
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    } // Normalize opt.queue - true/undefined/null -> "fx"


    if (opt.queue == null || opt.queue === true) {
      opt.queue = "fx";
    } // Queueing


    opt.old = opt.complete;

    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function fadeTo(speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return this.filter(isHiddenWithinTree).css("opacity", 0).show() // Animate to the value specified
      .end().animate({
        opacity: to
      }, speed, easing, callback);
    },
    animate: function animate(prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
          optall = jQuery.speed(speed, easing, callback),
          doAnimation = function doAnimation() {
        // Operate on a copy of prop so per-property easing won't be lost
        var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately

        if (empty || dataPriv.get(this, "finish")) {
          anim.stop(true);
        }
      };

      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function stop(type, clearQueue, gotoEnd) {
      var stopQueue = function stopQueue(hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== "string") {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }

      if (clearQueue) {
        this.queue(type || "fx", []);
      }

      return this.each(function () {
        var dequeue = true,
            index = type != null && type + "queueHooks",
            timers = jQuery.timers,
            data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        } // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.


        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function finish(type) {
      if (type !== false) {
        type = type || "fx";
      }

      return this.each(function () {
        var index,
            data = dataPriv.get(this),
            queue = data[type + "queue"],
            hooks = data[type + "queueHooks"],
            timers = jQuery.timers,
            length = queue ? queue.length : 0; // Enable finishing flag on private data

        data.finish = true; // Empty the queue first

        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        } // Look for any active animations, and finish them


        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        } // Look for any animations in the old queue and finish them


        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        } // Turn off finishing flag


        delete data.finish;
      });
    }
  });
  jQuery.each(["toggle", "show", "hide"], function (_i, name) {
    var cssFn = jQuery.fn[name];

    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  }); // Generate shortcuts for custom animations

  jQuery.each({
    slideDown: genFx("show"),
    slideUp: genFx("hide"),
    slideToggle: genFx("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.timers = [];

  jQuery.fx.tick = function () {
    var timer,
        i = 0,
        timers = jQuery.timers;
    fxNow = Date.now();

    for (; i < timers.length; i++) {
      timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)

      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }

    fxNow = undefined;
  };

  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    jQuery.fx.start();
  };

  jQuery.fx.interval = 13;

  jQuery.fx.start = function () {
    if (inProgress) {
      return;
    }

    inProgress = true;
    schedule();
  };

  jQuery.fx.stop = function () {
    inProgress = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    // Default speed
    _default: 400
  };
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/effects/Tween.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/effects/Tween.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../css/finalPropName */ "./node_modules/jquery/src/css/finalPropName.js"), __webpack_require__(/*! ../css */ "./node_modules/jquery/src/css.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, finalPropName) {
  "use strict";

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }

  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function init(elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
    },
    cur: function cur() {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function run(percent) {
      var eased,
          hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }

      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }

      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function get(tween) {
        var result; // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.

        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
          return tween.elem[tween.prop];
        } // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.


        result = jQuery.css(tween.elem, tween.prop, ""); // Empty strings, null, undefined and "auto" are converted to 0.

        return !result || result === "auto" ? 0 : result;
      },
      set: function set(tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  }; // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes

  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function set(tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.easing = {
    linear: function linear(p) {
      return p;
    },
    swing: function swing(p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: "swing"
  };
  jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point

  jQuery.fx.step = {};
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/effects/animatedSelector.js":
/*!*************************************************************!*\
  !*** ./node_modules/jquery/src/effects/animatedSelector.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js"), __webpack_require__(/*! ../effects */ "./node_modules/jquery/src/effects.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict";

  jQuery.expr.pseudos.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/event.js":
/*!******************************************!*\
  !*** ./node_modules/jquery/src/event.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ./var/documentElement */ "./node_modules/jquery/src/var/documentElement.js"), __webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./var/rnothtmlwhite */ "./node_modules/jquery/src/var/rnothtmlwhite.js"), __webpack_require__(/*! ./var/rcheckableType */ "./node_modules/jquery/src/var/rcheckableType.js"), __webpack_require__(/*! ./var/slice */ "./node_modules/jquery/src/var/slice.js"), __webpack_require__(/*! ./data/var/acceptData */ "./node_modules/jquery/src/data/var/acceptData.js"), __webpack_require__(/*! ./data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"), __webpack_require__(/*! ./core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"), __webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"), __webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, documentElement, isFunction, rnothtmlwhite, rcheckableType, slice, acceptData, dataPriv, nodeName) {
  "use strict";

  var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  } // Support: IE <=9 - 11+
  // focus() and blur() are asynchronous, except when they are no-op.
  // So expect focus to be synchronous when the element is already active,
  // and blur to be synchronous when the element is not already active.
  // (focus and blur are always synchronous in other supported browsers,
  // this just defines when we can count on it).


  function expectSync(elem, type) {
    return elem === safeActiveElement() === (type === "focus");
  } // Support: IE <=9 only
  // Accessing document.activeElement can throw unexpectedly
  // https://bugs.jquery.com/ticket/13393


  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function _on(elem, types, selector, data, fn, one) {
    var origFn, type; // Types can be a map of types/handlers

    if (_typeof(types) === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }

      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }

      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }

    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;

      fn = function fn(event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      }; // Use same guid so caller can remove using origFn


      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }

    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }
  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */


  jQuery.event = {
    global: {},
    add: function add(elem, types, handler, data, selector) {
      var handleObjIn,
          eventHandle,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.get(elem); // Only attach events to objects that accept data

      if (!acceptData(elem)) {
        return;
      } // Caller can pass in an object of custom data in lieu of the handler


      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      } // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)


      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      } // Make sure that the handler has a unique ID, used to find/remove it later


      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      } // Init the element's event structure and main handler, if this is the first


      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }

      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      } // Handle multiple events separated by a space


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

        if (!type) {
          continue;
        } // If event changes its type, use the special event handlers for the changed type


        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn); // Init the event handler queue if we're the first

        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        } // Add to the element's handler list, delegates in front


        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        } // Keep track of which events have ever been used, for event optimization


        jQuery.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {
      var j,
          origCount,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      } // Once for each type.namespace in types; type may be omitted


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }

          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

        origCount = j = handlers.length;

        while (j--) {
          handleObj = handlers[j];

          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }

            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        } // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)


        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      } // Remove data and the expando if it's no longer used


      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function dispatch(nativeEvent) {
      var i,
          j,
          ret,
          matched,
          handleObj,
          handlerQueue,
          args = new Array(arguments.length),
          // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix(nativeEvent),
          handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],
          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event

      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      } // Determine handlers


      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

      i = 0;

      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;

        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      } // Call the postDispatch hook for the mapped type


      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },
    handlers: function handlers(event, _handlers) {
      var i,
          handleObj,
          sel,
          matchedHandlers,
          matchedSelectors,
          handlerQueue = [],
          delegateCount = _handlers.delegateCount,
          cur = event.target; // Find delegate handlers

      if (delegateCount && // Support: IE <=9
      // Black-hole SVG <use> instance trees (trac-13180)
      cur.nodeType && // Support: Firefox <=42
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11 only
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === "click" && event.button >= 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};

            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)

              sel = handleObj.selector + " ";

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
              }

              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }

            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      } // Add the remaining (directly-bound) handlers


      cur = this;

      if (delegateCount < _handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: _handlers.slice(delegateCount)
        });
      }

      return handlerQueue;
    },
    addProp: function addProp(name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: isFunction(hook) ? function () {
          if (this.originalEvent) {
            return hook(this.originalEvent);
          }
        } : function () {
          if (this.originalEvent) {
            return this.originalEvent[name];
          }
        },
        set: function set(value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },
    fix: function fix(originalEvent) {
      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function setup(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Claim the first handler

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, "click", returnTrue);
          } // Return false to allow normal processing in the caller


          return false;
        },
        trigger: function trigger(data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data; // Force setup before triggering a click

          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
            leverageNative(el, "click");
          } // Return non-false to allow normal event-path propagation


          return true;
        },
        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function _default(event) {
          var target = event.target;
          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  }; // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.

  function leverageNative(el, type, expectSync) {
    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
    if (!expectSync) {
      if (dataPriv.get(el, type) === undefined) {
        jQuery.event.add(el, type, returnTrue);
      }

      return;
    } // Register the controller as a special universal handler for all event namespaces


    dataPriv.set(el, type, false);
    jQuery.event.add(el, type, {
      namespace: false,
      handler: function handler(event) {
        var notAsync,
            result,
            saved = dataPriv.get(this, type);

        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          // Saved data should be false in such cases, but might be a leftover capture object
          // from an async native handler (gh-4350)
          if (!saved.length) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = slice.call(arguments);
            dataPriv.set(this, type, saved); // Trigger the native event and capture its result
            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous

            notAsync = expectSync(this, type);
            this[type]();
            result = dataPriv.get(this, type);

            if (saved !== result || notAsync) {
              dataPriv.set(this, type, false);
            } else {
              result = {};
            }

            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault(); // Support: Chrome 86+
              // In Chrome, if an element having a focusout handler is blurred by
              // clicking outside of it, it invokes the handler synchronously. If
              // that handler calls `.remove()` on the element, the data is cleared,
              // leaving `result` undefined. We need to guard against this.

              return result && result.value;
            } // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering the
            // native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.

          } else if ((jQuery.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          } // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments

        } else if (saved.length) {
          // ...and capture the result
          dataPriv.set(this, type, {
            value: jQuery.event.trigger( // Support: IE <=9 - 11+
            // Extend with the prototype to reset the above stopImmediatePropagation()
            jQuery.extend(saved[0], jQuery.Event.prototype), saved.slice(1), this)
          }); // Abort handling of the native event

          event.stopImmediatePropagation();
        }
      }
    });
  }

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    } // Event object


    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type; // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.

      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
      src.returnValue === false ? returnTrue : returnFalse; // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (#504, #13143)

      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget; // Event type
    } else {
      this.type = src;
    } // Put explicitly provided properties onto the event object


    if (props) {
      jQuery.extend(this, props);
    } // Create a timestamp if incoming event doesn't have one


    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed

    this[jQuery.expando] = true;
  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function preventDefault() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  }; // Includes all common event props including KeyEvent and MouseEvent specific props

  jQuery.each({
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    code: true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
    which: true
  }, jQuery.event.addProp);
  jQuery.each({
    focus: "focusin",
    blur: "focusout"
  }, function (type, delegateType) {
    jQuery.event.special[type] = {
      // Utilize native event if possible so blur/focus sequence is correct
      setup: function setup() {
        // Claim the first handler
        // dataPriv.set( this, "focus", ... )
        // dataPriv.set( this, "blur", ... )
        leverageNative(this, type, expectSync); // Return false to allow normal processing in the caller

        return false;
      },
      trigger: function trigger() {
        // Force setup before trigger
        leverageNative(this, type); // Return non-false to allow normal event-path propagation

        return true;
      },
      // Suppress native focus or blur as it's already being fired
      // in leverageNative.
      _default: function _default() {
        return true;
      },
      delegateType: delegateType
    };
  }); // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).

  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function handle(event) {
        var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window

        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }

        return ret;
      }
    };
  });
  jQuery.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;

      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }

      if (_typeof(types) === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }

        return this;
      }

      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }

      if (fn === false) {
        fn = returnFalse;
      }

      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/event/focusin.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/event/focusin.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"), __webpack_require__(/*! ./support */ "./node_modules/jquery/src/event/support.js"), __webpack_require__(/*! ../event */ "./node_modules/jquery/src/event.js"), __webpack_require__(/*! ./trigger */ "./node_modules/jquery/src/event/trigger.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, dataPriv, support) {
  "use strict"; // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

  if (!support.focusin) {
    jQuery.each({
      focus: "focusin",
      blur: "focusout"
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function handler(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function setup() {
          // Handle: regular nodes (via `this.ownerDocument`), window
          // (via `this.document`) & document (via `this`).
          var doc = this.ownerDocument || this.document || this,
              attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }

          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function teardown() {
          var doc = this.ownerDocument || this.document || this,
              attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        }
      };
    });
  }

  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/event/support.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/event/support.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (support) {
  "use strict";

  support.focusin = "onfocusin" in window;
  return support;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/event/trigger.js":
/*!**************************************************!*\
  !*** ./node_modules/jquery/src/event/trigger.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ../data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"), __webpack_require__(/*! ../data/var/acceptData */ "./node_modules/jquery/src/data/var/acceptData.js"), __webpack_require__(/*! ../var/hasOwn */ "./node_modules/jquery/src/var/hasOwn.js"), __webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ../var/isWindow */ "./node_modules/jquery/src/var/isWindow.js"), __webpack_require__(/*! ../event */ "./node_modules/jquery/src/event.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, document, dataPriv, acceptData, hasOwn, isFunction, isWindow) {
  "use strict";

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
      stopPropagationCallback = function stopPropagationCallback(e) {
    e.stopPropagation();
  };

  jQuery.extend(jQuery.event, {
    trigger: function trigger(event, data, elem, onlyHandlers) {
      var i,
          cur,
          tmp,
          bubbleType,
          ontype,
          handle,
          special,
          lastElement,
          eventPath = [elem || document],
          type = hasOwn.call(event, "type") ? event.type : event,
          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = lastElement = tmp = elem = elem || document; // Don't do events on text and comment nodes

      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      } // focus/blur morphs to focusin/out; ensure we're not firing them right now


      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }

      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

      event.result = undefined;

      if (!event.target) {
        event.target = elem;
      } // Clone any incoming data and prepend the event, creating the handler arg list


      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

      special = jQuery.event.special[type] || {};

      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      } // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;

        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }

        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        } // Only add window if we got to document (e.g., not plain obj or detached DOM)


        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      } // Fire handlers on the event path


      i = 0;

      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

        handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");

        if (handle) {
          handle.apply(cur, data);
        } // Native handler


        handle = ontype && cur[ontype];

        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);

          if (event.result === false) {
            event.preventDefault();
          }
        }
      }

      event.type = type; // If nobody prevented the default action, do it now

      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            } // Prevent re-triggering of the same event, since we already bubbled it above


            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });
      jQuery.event.trigger(e, null, elem);
    }
  });
  jQuery.fn.extend({
    trigger: function trigger(type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];

      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/exports/amd.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/exports/amd.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict"; // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return jQuery;
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/exports/global.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/exports/global.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict";

  var // Map over jQuery in case of overwrite
  _jQuery = window.jQuery,
      // Map over the $ in case of overwrite
  _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  }; // Expose jQuery and $ identifiers, even in AMD
  // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)


  if (typeof noGlobal === "undefined") {
    window.jQuery = window.$ = jQuery;
  }
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/jquery.js":
/*!*******************************************!*\
  !*** ./node_modules/jquery/src/jquery.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js"), __webpack_require__(/*! ./traversing */ "./node_modules/jquery/src/traversing.js"), __webpack_require__(/*! ./callbacks */ "./node_modules/jquery/src/callbacks.js"), __webpack_require__(/*! ./deferred */ "./node_modules/jquery/src/deferred.js"), __webpack_require__(/*! ./deferred/exceptionHook */ "./node_modules/jquery/src/deferred/exceptionHook.js"), __webpack_require__(/*! ./core/ready */ "./node_modules/jquery/src/core/ready.js"), __webpack_require__(/*! ./data */ "./node_modules/jquery/src/data.js"), __webpack_require__(/*! ./queue */ "./node_modules/jquery/src/queue.js"), __webpack_require__(/*! ./queue/delay */ "./node_modules/jquery/src/queue/delay.js"), __webpack_require__(/*! ./attributes */ "./node_modules/jquery/src/attributes.js"), __webpack_require__(/*! ./event */ "./node_modules/jquery/src/event.js"), __webpack_require__(/*! ./event/focusin */ "./node_modules/jquery/src/event/focusin.js"), __webpack_require__(/*! ./manipulation */ "./node_modules/jquery/src/manipulation.js"), __webpack_require__(/*! ./manipulation/_evalUrl */ "./node_modules/jquery/src/manipulation/_evalUrl.js"), __webpack_require__(/*! ./wrap */ "./node_modules/jquery/src/wrap.js"), __webpack_require__(/*! ./css */ "./node_modules/jquery/src/css.js"), __webpack_require__(/*! ./css/hiddenVisibleSelectors */ "./node_modules/jquery/src/css/hiddenVisibleSelectors.js"), __webpack_require__(/*! ./serialize */ "./node_modules/jquery/src/serialize.js"), __webpack_require__(/*! ./ajax */ "./node_modules/jquery/src/ajax.js"), __webpack_require__(/*! ./ajax/xhr */ "./node_modules/jquery/src/ajax/xhr.js"), __webpack_require__(/*! ./ajax/script */ "./node_modules/jquery/src/ajax/script.js"), __webpack_require__(/*! ./ajax/jsonp */ "./node_modules/jquery/src/ajax/jsonp.js"), __webpack_require__(/*! ./ajax/load */ "./node_modules/jquery/src/ajax/load.js"), __webpack_require__(/*! ./core/parseXML */ "./node_modules/jquery/src/core/parseXML.js"), __webpack_require__(/*! ./core/parseHTML */ "./node_modules/jquery/src/core/parseHTML.js"), __webpack_require__(/*! ./effects */ "./node_modules/jquery/src/effects.js"), __webpack_require__(/*! ./effects/animatedSelector */ "./node_modules/jquery/src/effects/animatedSelector.js"), __webpack_require__(/*! ./offset */ "./node_modules/jquery/src/offset.js"), __webpack_require__(/*! ./dimensions */ "./node_modules/jquery/src/dimensions.js"), __webpack_require__(/*! ./deprecated */ "./node_modules/jquery/src/deprecated.js"), __webpack_require__(/*! ./exports/amd */ "./node_modules/jquery/src/exports/amd.js"), __webpack_require__(/*! ./exports/global */ "./node_modules/jquery/src/exports/global.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict";

  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/manipulation.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/manipulation.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./core/isAttached */ "./node_modules/jquery/src/core/isAttached.js"), __webpack_require__(/*! ./var/flat */ "./node_modules/jquery/src/var/flat.js"), __webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./var/push */ "./node_modules/jquery/src/var/push.js"), __webpack_require__(/*! ./var/rcheckableType */ "./node_modules/jquery/src/var/rcheckableType.js"), __webpack_require__(/*! ./core/access */ "./node_modules/jquery/src/core/access.js"), __webpack_require__(/*! ./manipulation/var/rtagName */ "./node_modules/jquery/src/manipulation/var/rtagName.js"), __webpack_require__(/*! ./manipulation/var/rscriptType */ "./node_modules/jquery/src/manipulation/var/rscriptType.js"), __webpack_require__(/*! ./manipulation/wrapMap */ "./node_modules/jquery/src/manipulation/wrapMap.js"), __webpack_require__(/*! ./manipulation/getAll */ "./node_modules/jquery/src/manipulation/getAll.js"), __webpack_require__(/*! ./manipulation/setGlobalEval */ "./node_modules/jquery/src/manipulation/setGlobalEval.js"), __webpack_require__(/*! ./manipulation/buildFragment */ "./node_modules/jquery/src/manipulation/buildFragment.js"), __webpack_require__(/*! ./manipulation/support */ "./node_modules/jquery/src/manipulation/support.js"), __webpack_require__(/*! ./data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"), __webpack_require__(/*! ./data/var/dataUser */ "./node_modules/jquery/src/data/var/dataUser.js"), __webpack_require__(/*! ./data/var/acceptData */ "./node_modules/jquery/src/data/var/acceptData.js"), __webpack_require__(/*! ./core/DOMEval */ "./node_modules/jquery/src/core/DOMEval.js"), __webpack_require__(/*! ./core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"), __webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"), __webpack_require__(/*! ./traversing */ "./node_modules/jquery/src/traversing.js"), __webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js"), __webpack_require__(/*! ./event */ "./node_modules/jquery/src/event.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isAttached, flat, isFunction, push, rcheckableType, access, rtagName, rscriptType, wrapMap, getAll, setGlobalEval, buildFragment, support, dataPriv, dataUser, acceptData, DOMEval, nodeName) {
  "use strict";

  var // Support: IE <=10 - 11, Edge 12 - 13 only
  // In IE/Edge using regex groups here causes severe slowdowns.
  // See https://connect.microsoft.com/IE/feedback/details/1736512/
  rnoInnerhtml = /<script|<style|<link/i,
      // checked="checked" or checked
  rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g; // Prefer a tbody over its parent table for containing new rows

  function manipulationTarget(elem, content) {
    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
      return jQuery(elem).children("tbody")[0] || elem;
    }

    return elem;
  } // Replace/restore the type attribute of script elements for safe DOM manipulation


  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }

  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    } // 1. Copy private data: events, handlers, etc.


    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.get(src);
      events = pdataOld.events;

      if (events) {
        dataPriv.remove(dest, "handle events");

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    } // 2. Copy user data


    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  } // Fix IE bugs, see support tests


  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = flat(args);
    var fragment,
        first,
        scripts,
        hasScripts,
        node,
        doc,
        i = 0,
        l = collection.length,
        iNoClone = l - 1,
        value = args[0],
        valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);

        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }

        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      } // Require either new content or an interest in ignored elements to invoke the callback


      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length; // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).

        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];

            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl && !node.noModule) {
                  jQuery._evalUrl(node.src, {
                    nonce: node.nonce || node.getAttribute("nonce")
                  }, doc);
                }
              } else {
                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function _remove(elem, selector, keepData) {
    var node,
        nodes = selector ? jQuery.filter(selector, elem) : elem,
        i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, "script"));
        }

        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html;
    },
    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
          l,
          srcElements,
          destElements,
          clone = elem.cloneNode(true),
          inPage = isAttached(elem); // Fix IE cloning issues

      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      } // Copy the events from the original to the clone


      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      } // Preserve script evaluation history


      destElements = getAll(clone, "script");

      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      } // Return the cloned set


      return clone;
    },
    cleanData: function cleanData(elems) {
      var data,
          elem,
          type,
          special = jQuery.event.special,
          i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            } // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove


            elem[dataPriv.expando] = undefined;
          }

          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  jQuery.fn.extend({
    detach: function detach(selector) {
      return _remove(this, selector, true);
    },
    remove: function remove(selector) {
      return _remove(this, selector);
    },
    text: function text(value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function empty() {
      var elem,
          i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

          elem.textContent = "";
        }
      }

      return this;
    },
    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function html(value) {
      return access(this, function (value) {
        var elem = this[0] || {},
            i = 0,
            l = this.length;

        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        } // See if we can take a shortcut and just use innerHTML


        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = jQuery.htmlPrefilter(value);

          try {
            for (; i < l; i++) {
              elem = this[i] || {}; // Remove element nodes and prevent memory leaks

              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }

            elem = 0; // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }

        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function replaceWith() {
      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;

        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));

          if (parent) {
            parent.replaceChild(elem, this);
          }
        } // Force callback invocation

      }, ignored);
    }
  });
  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit

        push.apply(ret, elems.get());
      }

      return this.pushStack(ret);
    };
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/manipulation/_evalUrl.js":
/*!**********************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/_evalUrl.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../ajax */ "./node_modules/jquery/src/ajax.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict";

  jQuery._evalUrl = function (url, options, doc) {
    return jQuery.ajax({
      url: url,
      // Make this explicit, since user can override this through ajaxSetup (#11264)
      type: "GET",
      dataType: "script",
      cache: true,
      async: false,
      global: false,
      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        "text script": function textScript() {}
      },
      dataFilter: function dataFilter(response) {
        jQuery.globalEval(response, options, doc);
      }
    });
  };

  return jQuery._evalUrl;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/manipulation/buildFragment.js":
/*!***************************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/buildFragment.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../core/toType */ "./node_modules/jquery/src/core/toType.js"), __webpack_require__(/*! ../core/isAttached */ "./node_modules/jquery/src/core/isAttached.js"), __webpack_require__(/*! ./var/rtagName */ "./node_modules/jquery/src/manipulation/var/rtagName.js"), __webpack_require__(/*! ./var/rscriptType */ "./node_modules/jquery/src/manipulation/var/rscriptType.js"), __webpack_require__(/*! ./wrapMap */ "./node_modules/jquery/src/manipulation/wrapMap.js"), __webpack_require__(/*! ./getAll */ "./node_modules/jquery/src/manipulation/getAll.js"), __webpack_require__(/*! ./setGlobalEval */ "./node_modules/jquery/src/manipulation/setGlobalEval.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, toType, isAttached, rtagName, rscriptType, wrapMap, getAll, setGlobalEval) {
  "use strict";

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
        tmp,
        tag,
        wrap,
        attached,
        j,
        fragment = context.createDocumentFragment(),
        nodes = [],
        i = 0,
        l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

          j = wrap[0];

          while (j--) {
            tmp = tmp.lastChild;
          } // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit


          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)

          tmp.textContent = "";
        }
      }
    } // Remove wrapper from fragment


    fragment.textContent = "";
    i = 0;

    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }

        continue;
      }

      attached = isAttached(elem); // Append to fragment

      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

      if (attached) {
        setGlobalEval(tmp);
      } // Capture executables


      if (scripts) {
        j = 0;

        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  return buildFragment;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/manipulation/getAll.js":
/*!********************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/getAll.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../core/nodeName */ "./node_modules/jquery/src/core/nodeName.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, nodeName) {
  "use strict";

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret;

    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }

    if (tag === undefined || tag && nodeName(context, tag)) {
      return jQuery.merge([context], ret);
    }

    return ret;
  }

  return getAll;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/manipulation/setGlobalEval.js":
/*!***************************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/setGlobalEval.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (dataPriv) {
  "use strict"; // Mark scripts as having already been evaluated

  function setGlobalEval(elems, refElements) {
    var i = 0,
        l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }

  return setGlobalEval;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/manipulation/support.js":
/*!*********************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/support.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../var/document */ "./node_modules/jquery/src/var/document.js"), __webpack_require__(/*! ../var/support */ "./node_modules/jquery/src/var/support.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document, support) {
  "use strict";

  (function () {
    var fragment = document.createDocumentFragment(),
        div = fragment.appendChild(document.createElement("div")),
        input = document.createElement("input"); // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)

    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input); // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments

    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned

    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.

    div.innerHTML = "<option></option>";
    support.option = !!div.lastChild;
  })();

  return support;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/manipulation/var/rscriptType.js":
/*!*****************************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/var/rscriptType.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return /^$|^module$|\/(?:java|ecma)script/i;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/manipulation/var/rtagName.js":
/*!**************************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/var/rtagName.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict"; // rtagName captures the name from the first start tag in a string of HTML
  // https://html.spec.whatwg.org/multipage/syntax.html#tag-open-state
  // https://html.spec.whatwg.org/multipage/syntax.html#tag-name-state

  return /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/manipulation/wrapMap.js":
/*!*********************************************************!*\
  !*** ./node_modules/jquery/src/manipulation/wrapMap.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./support */ "./node_modules/jquery/src/manipulation/support.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (support) {
  "use strict"; // We have to close these tags to support XHTML (#13200)

  var wrapMap = {
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td; // Support: IE <=9 only

  if (!support.option) {
    wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
  }

  return wrapMap;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/offset.js":
/*!*******************************************!*\
  !*** ./node_modules/jquery/src/offset.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./core/access */ "./node_modules/jquery/src/core/access.js"), __webpack_require__(/*! ./var/documentElement */ "./node_modules/jquery/src/var/documentElement.js"), __webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./css/var/rnumnonpx */ "./node_modules/jquery/src/css/var/rnumnonpx.js"), __webpack_require__(/*! ./css/curCSS */ "./node_modules/jquery/src/css/curCSS.js"), __webpack_require__(/*! ./css/addGetHookIf */ "./node_modules/jquery/src/css/addGetHookIf.js"), __webpack_require__(/*! ./css/support */ "./node_modules/jquery/src/css/support.js"), __webpack_require__(/*! ./var/isWindow */ "./node_modules/jquery/src/var/isWindow.js"), __webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"), __webpack_require__(/*! ./css */ "./node_modules/jquery/src/css.js"), __webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js") // contains
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, access, documentElement, isFunction, rnumnonpx, curCSS, addGetHookIf, support, isWindow) {
  "use strict";

  jQuery.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
          curLeft,
          curCSSTop,
          curTop,
          curOffset,
          curCSSLeft,
          calculatePosition,
          position = jQuery.css(elem, "position"),
          curElem = jQuery(elem),
          props = {}; // Set position first, in-case top/left are set even on static elem

      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed

      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }

      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function offset(options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }

      var rect,
          win,
          elem = this[0];

      if (!elem) {
        return;
      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error


      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function position() {
      if (!this[0]) {
        return;
      }

      var offsetParent,
          offset,
          doc,
          elem = this[0],
          parentOffset = {
        top: 0,
        left: 0
      }; // position:fixed elements are offset from the viewport, which itself always has zero offset

      if (jQuery.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified

        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;

        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.parentNode;
        }

        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
        }
      } // Subtract parent offsets and element margins


      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    }
  }); // Create scrollLeft and scrollTop methods

  jQuery.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;

    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        // Coalesce documents and windows
        var win;

        if (isWindow(elem)) {
          win = elem;
        } else if (elem.nodeType === 9) {
          win = elem.defaultView;
        }

        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }

        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here

  jQuery.each(["top", "left"], function (_i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
      }
    });
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/queue.js":
/*!******************************************!*\
  !*** ./node_modules/jquery/src/queue.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./data/var/dataPriv */ "./node_modules/jquery/src/data/var/dataPriv.js"), __webpack_require__(/*! ./deferred */ "./node_modules/jquery/src/deferred.js"), __webpack_require__(/*! ./callbacks */ "./node_modules/jquery/src/callbacks.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, dataPriv) {
  "use strict";

  jQuery.extend({
    queue: function queue(elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }

        return queue || [];
      }
    },
    dequeue: function dequeue(elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = jQuery._queueHooks(elem, type),
          next = function next() {
        jQuery.dequeue(elem, type);
      }; // If the fx queue is dequeued, always remove the progress sentinel


      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        } // Clear up the last queue stop function


        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

        jQuery._queueHooks(this, type);

        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
          count = 1,
          defer = jQuery.Deferred(),
          elements = this,
          i = this.length,
          resolve = function resolve() {
        if (! --count) {
          defer.resolveWith(elements, [elements]);
        }
      };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }

      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");

        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }

      resolve();
      return defer.promise(obj);
    }
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/queue/delay.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/queue/delay.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../queue */ "./node_modules/jquery/src/queue.js"), __webpack_require__(/*! ../effects */ "./node_modules/jquery/src/effects.js") // Delay is optional because of this dependency
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict"; // Based off of the plugin by Clint Helfers, with permission.
  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);

      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  return jQuery.fn.delay;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/selector-sizzle.js":
/*!****************************************************!*\
  !*** ./node_modules/jquery/src/selector-sizzle.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../external/sizzle/dist/sizzle */ "./node_modules/jquery/external/sizzle/dist/sizzle.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, Sizzle) {
  "use strict";

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors; // Deprecated

  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/selector.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/selector.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./selector-sizzle */ "./node_modules/jquery/src/selector-sizzle.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/serialize.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/serialize.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./core/toType */ "./node_modules/jquery/src/core/toType.js"), __webpack_require__(/*! ./var/rcheckableType */ "./node_modules/jquery/src/var/rcheckableType.js"), __webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"), __webpack_require__(/*! ./traversing */ "./node_modules/jquery/src/traversing.js"), // filter
__webpack_require__(/*! ./attributes/prop */ "./node_modules/jquery/src/attributes/prop.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, toType, rcheckableType, isFunction) {
  "use strict";

  var rbracket = /\[\]$/,
      rCRLF = /\r?\n/g,
      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
      rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  } // Serialize an array of form elements or a set of
  // key/values into a query string


  jQuery.param = function (a, traditional) {
    var prefix,
        s = [],
        add = function add(key, valueOrFunction) {
      // If value is a function, invoke it and use its return value
      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
    };

    if (a == null) {
      return "";
    } // If an array was passed in, assume that it is an array of form elements.


    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    } // Return the resulting serialization


    return s.join("&");
  };

  jQuery.fn.extend({
    serialize: function serialize() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (_i, elem) {
        var val = jQuery(this).val();

        if (val == null) {
          return null;
        }

        if (Array.isArray(val)) {
          return jQuery.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          });
        }

        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/traversing.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/traversing.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./var/getProto */ "./node_modules/jquery/src/var/getProto.js"), __webpack_require__(/*! ./var/indexOf */ "./node_modules/jquery/src/var/indexOf.js"), __webpack_require__(/*! ./traversing/var/dir */ "./node_modules/jquery/src/traversing/var/dir.js"), __webpack_require__(/*! ./traversing/var/siblings */ "./node_modules/jquery/src/traversing/var/siblings.js"), __webpack_require__(/*! ./traversing/var/rneedsContext */ "./node_modules/jquery/src/traversing/var/rneedsContext.js"), __webpack_require__(/*! ./core/nodeName */ "./node_modules/jquery/src/core/nodeName.js"), __webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"), __webpack_require__(/*! ./traversing/findFilter */ "./node_modules/jquery/src/traversing/findFilter.js"), __webpack_require__(/*! ./selector */ "./node_modules/jquery/src/selector.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, getProto, indexOf, dir, _siblings, rneedsContext, nodeName) {
  "use strict";

  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
      // Methods guaranteed to produce a unique set when starting from a unique set
  guaranteedUnique = {
    children: true,
    contents: true,
    next: true,
    prev: true
  };
  jQuery.fn.extend({
    has: function has(target) {
      var targets = jQuery(target, this),
          l = targets.length;
      return this.filter(function () {
        var i = 0;

        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function closest(selectors, context) {
      var cur,
          i = 0,
          l = this.length,
          matched = [],
          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context

      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function index(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      } // Index in selector


      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      } // Locate the position of the desired element


      return indexOf.call(this, // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function add(selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}

    return cur;
  }

  jQuery.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, _i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, _i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, _i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      if (elem.contentDocument != null && // Support: IE 11+
      // <object> elements with no `data` attribute has an object
      // `contentDocument` with a `null` prototype.
      getProto(elem.contentDocument)) {
        return elem.contentDocument;
      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.


      if (nodeName(elem, "template")) {
        elem = elem.content || elem;
      }

      return jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);

      if (name.slice(-5) !== "Until") {
        selector = until;
      }

      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }

      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.uniqueSort(matched);
        } // Reverse order for parents* and prev-derivatives


        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }

      return this.pushStack(matched);
    };
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/traversing/findFilter.js":
/*!**********************************************************!*\
  !*** ./node_modules/jquery/src/traversing/findFilter.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../var/indexOf */ "./node_modules/jquery/src/var/indexOf.js"), __webpack_require__(/*! ../var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./var/rneedsContext */ "./node_modules/jquery/src/traversing/var/rneedsContext.js"), __webpack_require__(/*! ../selector */ "./node_modules/jquery/src/selector.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, indexOf, isFunction, rneedsContext) {
  "use strict"; // Implement the identical functionality for filter and not

  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    } // Single element


    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    } // Arraylike of elements (jQuery, arguments, Array)


    if (typeof qualifier !== "string") {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    } // Filtered directly for both simple and complex selectors


    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };

  jQuery.fn.extend({
    find: function find(selector) {
      var i,
          ret,
          len = this.length,
          self = this;

      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  });
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/traversing/var/dir.js":
/*!*******************************************************!*\
  !*** ./node_modules/jquery/src/traversing/var/dir.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../../core */ "./node_modules/jquery/src/core.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict";

  return function (elem, dir, until) {
    var matched = [],
        truncate = until !== undefined;

    while ((elem = elem[dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }

        matched.push(elem);
      }
    }

    return matched;
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/traversing/var/rneedsContext.js":
/*!*****************************************************************!*\
  !*** ./node_modules/jquery/src/traversing/var/rneedsContext.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../../core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ../../selector */ "./node_modules/jquery/src/selector.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery) {
  "use strict";

  return jQuery.expr.match.needsContext;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/traversing/var/siblings.js":
/*!************************************************************!*\
  !*** ./node_modules/jquery/src/traversing/var/siblings.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return function (n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/ObjectFunctionString.js":
/*!*************************************************************!*\
  !*** ./node_modules/jquery/src/var/ObjectFunctionString.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./fnToString */ "./node_modules/jquery/src/var/fnToString.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (fnToString) {
  "use strict";

  return fnToString.call(Object);
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/arr.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/src/var/arr.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return [];
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/class2type.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/var/class2type.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict"; // [[Class]] -> type pairs

  return {};
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/document.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/var/document.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return window.document;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/documentElement.js":
/*!********************************************************!*\
  !*** ./node_modules/jquery/src/var/documentElement.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./document */ "./node_modules/jquery/src/var/document.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (document) {
  "use strict";

  return document.documentElement;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/flat.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/var/flat.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./arr */ "./node_modules/jquery/src/var/arr.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (arr) {
  "use strict"; // Support: IE 9 - 11+, Edge 18+, Android Browser 4.0 - 4.3 only, iOS 7 - 11 only, Safari 11 only,
  // Firefox <= 61 only
  // Provide fallback for browsers without Array#flat.

  return arr.flat ? function (array) {
    return arr.flat.call(array);
  } : function (array) {
    return arr.concat.apply([], array);
  };
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/fnToString.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/var/fnToString.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./hasOwn */ "./node_modules/jquery/src/var/hasOwn.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (hasOwn) {
  "use strict";

  return hasOwn.toString;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/getProto.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/var/getProto.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return Object.getPrototypeOf;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/hasOwn.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery/src/var/hasOwn.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./class2type */ "./node_modules/jquery/src/var/class2type.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (class2type) {
  "use strict";

  return class2type.hasOwnProperty;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/indexOf.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/var/indexOf.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./arr */ "./node_modules/jquery/src/var/arr.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (arr) {
  "use strict";

  return arr.indexOf;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/isFunction.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery/src/var/isFunction.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
    // Plus for old WebKit, typeof returns "function" for HTML collections
    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
    return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/isWindow.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/var/isWindow.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return function isWindow(obj) {
    return obj != null && obj === obj.window;
  };
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/pnum.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/var/pnum.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/push.js":
/*!*********************************************!*\
  !*** ./node_modules/jquery/src/var/push.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./arr */ "./node_modules/jquery/src/var/arr.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (arr) {
  "use strict";

  return arr.push;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/rcheckableType.js":
/*!*******************************************************!*\
  !*** ./node_modules/jquery/src/var/rcheckableType.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict";

  return /^(?:checkbox|radio)$/i;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/rcssNum.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/var/rcssNum.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../var/pnum */ "./node_modules/jquery/src/var/pnum.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (pnum) {
  "use strict";

  return new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/rnothtmlwhite.js":
/*!******************************************************!*\
  !*** ./node_modules/jquery/src/var/rnothtmlwhite.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict"; // Only count HTML whitespace
  // Other whitespace should count in values
  // https://infra.spec.whatwg.org/#ascii-whitespace

  return /[^\x20\t\r\n\f]+/g;
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/slice.js":
/*!**********************************************!*\
  !*** ./node_modules/jquery/src/var/slice.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./arr */ "./node_modules/jquery/src/var/arr.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (arr) {
  "use strict";

  return arr.slice;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/support.js":
/*!************************************************!*\
  !*** ./node_modules/jquery/src/var/support.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
  "use strict"; // All support tests are defined in their respective modules.

  return {};
}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/var/toString.js":
/*!*************************************************!*\
  !*** ./node_modules/jquery/src/var/toString.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./class2type */ "./node_modules/jquery/src/var/class2type.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (class2type) {
  "use strict";

  return class2type.toString;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/jquery/src/wrap.js":
/*!*****************************************!*\
  !*** ./node_modules/jquery/src/wrap.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./core */ "./node_modules/jquery/src/core.js"), __webpack_require__(/*! ./var/isFunction */ "./node_modules/jquery/src/var/isFunction.js"), __webpack_require__(/*! ./core/init */ "./node_modules/jquery/src/core/init.js"), __webpack_require__(/*! ./manipulation */ "./node_modules/jquery/src/manipulation.js"), // clone
__webpack_require__(/*! ./traversing */ "./node_modules/jquery/src/traversing.js") // parent, contents
], __WEBPACK_AMD_DEFINE_RESULT__ = (function (jQuery, isFunction) {
  "use strict";

  jQuery.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        } // The elements to wrap the target around


        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap.map(function () {
          var elem = this;

          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }

          return elem;
        }).append(this);
      }

      return this;
    },
    wrapInner: function wrapInner(html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
            contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function wrap(html) {
      var htmlIsFunction = isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function unwrap(selector) {
      this.parent(selector).not("body").each(function () {
        jQuery(this).replaceWith(this.childNodes);
      });
      return this;
    }
  });
  return jQuery;
}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),

/***/ "./node_modules/local-time/app/assets/javascripts/local-time.js":
/*!**********************************************************************!*\
  !*** ./node_modules/local-time/app/assets/javascripts/local-time.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

(function () {
  var t = this;
  (function () {
    (function () {
      var t = [].slice;
      this.LocalTime = {
        config: {},
        run: function run() {
          return this.getController().processElements();
        },
        process: function process() {
          var e, n, r, a;

          for (n = 1 <= arguments.length ? t.call(arguments, 0) : [], r = 0, a = n.length; r < a; r++) {
            e = n[r], this.getController().processElement(e);
          }

          return n.length;
        },
        getController: function getController() {
          return null != this.controller ? this.controller : this.controller = new e.Controller();
        }
      };
    }).call(this);
  }).call(t);
  var e = t.LocalTime;
  (function () {
    (function () {
      e.config.i18n = {
        en: {
          date: {
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            abbrDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            abbrMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            yesterday: "yesterday",
            today: "today",
            tomorrow: "tomorrow",
            on: "on {date}",
            formats: {
              "default": "%b %e, %Y",
              thisYear: "%b %e"
            }
          },
          time: {
            am: "am",
            pm: "pm",
            singular: "a {time}",
            singularAn: "an {time}",
            elapsed: "{time} ago",
            second: "second",
            seconds: "seconds",
            minute: "minute",
            minutes: "minutes",
            hour: "hour",
            hours: "hours",
            formats: {
              "default": "%l:%M%P"
            }
          },
          datetime: {
            at: "{date} at {time}",
            formats: {
              "default": "%B %e, %Y at %l:%M%P %Z"
            }
          }
        }
      };
    }).call(this), function () {
      e.config.locale = "en", e.config.defaultLocale = "en";
    }.call(this), function () {
      e.config.timerInterval = 6e4;
    }.call(this), function () {
      var t, n, r;
      r = !isNaN(Date.parse("2011-01-01T12:00:00-05:00")), e.parseDate = function (t) {
        return t = t.toString(), r || (t = n(t)), new Date(Date.parse(t));
      }, t = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(Z|[-+]?[\d:]+)$/, n = function n(e) {
        var n, r, a, i, o, s, u, c, l;
        if (a = e.match(t)) return a[0], c = a[1], o = a[2], n = a[3], r = a[4], i = a[5], u = a[6], l = a[7], "Z" !== l && (s = l.replace(":", "")), c + "/" + o + "/" + n + " " + r + ":" + i + ":" + u + " GMT" + [s];
      };
    }.call(this), function () {
      e.elementMatchesSelector = function () {
        var t, e, n, r, a, i;
        return t = document.documentElement, e = null != (n = null != (r = null != (a = null != (i = t.matches) ? i : t.matchesSelector) ? a : t.webkitMatchesSelector) ? r : t.mozMatchesSelector) ? n : t.msMatchesSelector, function (t, n) {
          if ((null != t ? t.nodeType : void 0) === Node.ELEMENT_NODE) return e.call(t, n);
        };
      }();
    }.call(this), function () {
      var t, n, r;
      t = e.config, r = t.i18n, e.getI18nValue = function (a, i) {
        var o, s;
        return null == a && (a = ""), o = (null != i ? i : {
          locale: t.locale
        }).locale, s = n(r[o], a), null != s ? s : o !== t.defaultLocale ? e.getI18nValue(a, {
          locale: t.defaultLocale
        }) : void 0;
      }, e.translate = function (t, n, r) {
        var a, i, o;
        null == n && (n = {}), o = e.getI18nValue(t, r);

        for (a in n) {
          i = n[a], o = o.replace("{" + a + "}", i);
        }

        return o;
      }, n = function n(t, e) {
        var n, r, a, i, o;

        for (o = t, i = e.split("."), n = 0, a = i.length; n < a; n++) {
          if (r = i[n], null == o[r]) return null;
          o = o[r];
        }

        return o;
      };
    }.call(this), function () {
      var t, n, r, _a, i;

      t = e.getI18nValue, i = e.translate, e.strftime = _a = function a(e, o) {
        var s, u, c, l, d, h, f;
        return u = e.getDay(), s = e.getDate(), d = e.getMonth(), f = e.getFullYear(), c = e.getHours(), l = e.getMinutes(), h = e.getSeconds(), o.replace(/%(-?)([%aAbBcdeHIlmMpPSwyYZ])/g, function (o, m, p) {
          switch (p) {
            case "%":
              return "%";

            case "a":
              return t("date.abbrDayNames")[u];

            case "A":
              return t("date.dayNames")[u];

            case "b":
              return t("date.abbrMonthNames")[d];

            case "B":
              return t("date.monthNames")[d];

            case "c":
              return e.toString();

            case "d":
              return n(s, m);

            case "e":
              return s;

            case "H":
              return n(c, m);

            case "I":
              return n(_a(e, "%l"), m);

            case "l":
              return 0 === c || 12 === c ? 12 : (c + 12) % 12;

            case "m":
              return n(d + 1, m);

            case "M":
              return n(l, m);

            case "p":
              return i("time." + (c > 11 ? "pm" : "am")).toUpperCase();

            case "P":
              return i("time." + (c > 11 ? "pm" : "am"));

            case "S":
              return n(h, m);

            case "w":
              return u;

            case "y":
              return n(f % 100, m);

            case "Y":
              return f;

            case "Z":
              return r(e);
          }
        });
      }, n = function n(t, e) {
        switch (e) {
          case "-":
            return t;

          default:
            return ("0" + t).slice(-2);
        }
      }, r = function r(t) {
        var e, n, r, a, i;
        return i = t.toString(), (e = null != (n = i.match(/\(([\w\s]+)\)$/)) ? n[1] : void 0) ? /\s/.test(e) ? e.match(/\b(\w)/g).join("") : e : (e = null != (r = i.match(/(\w{3,4})\s\d{4}$/)) ? r[1] : void 0) ? e : (e = null != (a = i.match(/(UTC[\+\-]\d+)/)) ? a[1] : void 0) ? e : "";
      };
    }.call(this), function () {
      e.CalendarDate = function () {
        function t(t, e, n) {
          this.date = new Date(Date.UTC(t, e - 1)), this.date.setUTCDate(n), this.year = this.date.getUTCFullYear(), this.month = this.date.getUTCMonth() + 1, this.day = this.date.getUTCDate(), this.value = this.date.getTime();
        }

        return t.fromDate = function (t) {
          return new this(t.getFullYear(), t.getMonth() + 1, t.getDate());
        }, t.today = function () {
          return this.fromDate(new Date());
        }, t.prototype.equals = function (t) {
          return (null != t ? t.value : void 0) === this.value;
        }, t.prototype.is = function (t) {
          return this.equals(t);
        }, t.prototype.isToday = function () {
          return this.is(this.constructor.today());
        }, t.prototype.occursOnSameYearAs = function (t) {
          return this.year === (null != t ? t.year : void 0);
        }, t.prototype.occursThisYear = function () {
          return this.occursOnSameYearAs(this.constructor.today());
        }, t.prototype.daysSince = function (t) {
          if (t) return (this.date - t.date) / 864e5;
        }, t.prototype.daysPassed = function () {
          return this.constructor.today().daysSince(this);
        }, t;
      }();
    }.call(this), function () {
      var t, n, r;
      n = e.strftime, r = e.translate, t = e.getI18nValue, e.RelativeTime = function () {
        function a(t) {
          this.date = t, this.calendarDate = e.CalendarDate.fromDate(this.date);
        }

        return a.prototype.toString = function () {
          var t, e;
          return (e = this.toTimeElapsedString()) ? r("time.elapsed", {
            time: e
          }) : (t = this.toWeekdayString()) ? (e = this.toTimeString(), r("datetime.at", {
            date: t,
            time: e
          })) : r("date.on", {
            date: this.toDateString()
          });
        }, a.prototype.toTimeOrDateString = function () {
          return this.calendarDate.isToday() ? this.toTimeString() : this.toDateString();
        }, a.prototype.toTimeElapsedString = function () {
          var t, e, n, a, i;
          return n = new Date().getTime() - this.date.getTime(), a = Math.round(n / 1e3), e = Math.round(a / 60), t = Math.round(e / 60), n < 0 ? null : a < 10 ? (i = r("time.second"), r("time.singular", {
            time: i
          })) : a < 45 ? a + " " + r("time.seconds") : a < 90 ? (i = r("time.minute"), r("time.singular", {
            time: i
          })) : e < 45 ? e + " " + r("time.minutes") : e < 90 ? (i = r("time.hour"), r("time.singularAn", {
            time: i
          })) : t < 24 ? t + " " + r("time.hours") : "";
        }, a.prototype.toWeekdayString = function () {
          switch (this.calendarDate.daysPassed()) {
            case 0:
              return r("date.today");

            case 1:
              return r("date.yesterday");

            case -1:
              return r("date.tomorrow");

            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
              return n(this.date, "%A");

            default:
              return "";
          }
        }, a.prototype.toDateString = function () {
          var e;
          return e = t(this.calendarDate.occursThisYear() ? "date.formats.thisYear" : "date.formats.default"), n(this.date, e);
        }, a.prototype.toTimeString = function () {
          return n(this.date, t("time.formats.default"));
        }, a;
      }();
    }.call(this), function () {
      var t,
          n = function n(t, e) {
        return function () {
          return t.apply(e, arguments);
        };
      };

      t = e.elementMatchesSelector, e.PageObserver = function () {
        function e(t, e) {
          this.selector = t, this.callback = e, this.processInsertion = n(this.processInsertion, this), this.processMutations = n(this.processMutations, this);
        }

        return e.prototype.start = function () {
          if (!this.started) return this.observeWithMutationObserver() || this.observeWithMutationEvent(), this.started = !0;
        }, e.prototype.observeWithMutationObserver = function () {
          var t;
          if ("undefined" != typeof MutationObserver && null !== MutationObserver) return t = new MutationObserver(this.processMutations), t.observe(document.documentElement, {
            childList: !0,
            subtree: !0
          }), !0;
        }, e.prototype.observeWithMutationEvent = function () {
          return addEventListener("DOMNodeInserted", this.processInsertion, !1), !0;
        }, e.prototype.findSignificantElements = function (e) {
          var n;
          return n = [], (null != e ? e.nodeType : void 0) === Node.ELEMENT_NODE && (t(e, this.selector) && n.push(e), n.push.apply(n, e.querySelectorAll(this.selector))), n;
        }, e.prototype.processMutations = function (t) {
          var e, n, r, a, i, o, s, u;

          for (e = [], n = 0, a = t.length; n < a; n++) {
            switch (o = t[n], o.type) {
              case "childList":
                for (u = o.addedNodes, r = 0, i = u.length; r < i; r++) {
                  s = u[r], e.push.apply(e, this.findSignificantElements(s));
                }

            }
          }

          return this.notify(e);
        }, e.prototype.processInsertion = function (t) {
          var e;
          return e = this.findSignificantElements(t.target), this.notify(e);
        }, e.prototype.notify = function (t) {
          if (null != t ? t.length : void 0) return "function" == typeof this.callback ? this.callback(t) : void 0;
        }, e;
      }();
    }.call(this), function () {
      var t,
          n,
          r,
          a,
          i = function i(t, e) {
        return function () {
          return t.apply(e, arguments);
        };
      };

      r = e.parseDate, a = e.strftime, n = e.getI18nValue, t = e.config, e.Controller = function () {
        function o() {
          this.processElements = i(this.processElements, this), this.pageObserver = new e.PageObserver(s, this.processElements);
        }

        var s, u, c;
        return s = "time[data-local]:not([data-localized])", o.prototype.start = function () {
          if (!this.started) return this.processElements(), this.startTimer(), this.pageObserver.start(), this.started = !0;
        }, o.prototype.startTimer = function () {
          var e;
          if (e = t.timerInterval) return null != this.timer ? this.timer : this.timer = setInterval(this.processElements, e);
        }, o.prototype.processElements = function (t) {
          var e, n, r;

          for (null == t && (t = document.querySelectorAll(s)), n = 0, r = t.length; n < r; n++) {
            e = t[n], this.processElement(e);
          }

          return t.length;
        }, o.prototype.processElement = function (t) {
          var e, i, o, s, l, d;
          if (i = t.getAttribute("datetime"), o = t.getAttribute("data-format"), s = t.getAttribute("data-local"), l = r(i), !isNaN(l)) return t.hasAttribute("title") || (d = a(l, n("datetime.formats.default")), t.setAttribute("title", d)), t.textContent = e = function () {
            switch (s) {
              case "time":
                return u(t), a(l, o);

              case "date":
                return u(t), c(l).toDateString();

              case "time-ago":
                return c(l).toString();

              case "time-or-date":
                return c(l).toTimeOrDateString();

              case "weekday":
                return c(l).toWeekdayString();

              case "weekday-or-date":
                return c(l).toWeekdayString() || c(l).toDateString();
            }
          }(), t.hasAttribute("aria-label") ? void 0 : t.setAttribute("aria-label", e);
        }, u = function u(t) {
          return t.setAttribute("data-localized", "");
        }, c = function c(t) {
          return new e.RelativeTime(t);
        }, o;
      }();
    }.call(this), function () {
      var t, n, r, a;
      a = !1, t = function t() {
        return document.attachEvent ? "complete" === document.readyState : "loading" !== document.readyState;
      }, n = function n(t) {
        var e;
        return null != (e = "function" == typeof requestAnimationFrame ? requestAnimationFrame(t) : void 0) ? e : setTimeout(t, 17);
      }, r = function r() {
        var t;
        return t = e.getController(), t.start();
      }, e.start = function () {
        if (!a) return a = !0, "undefined" != typeof MutationObserver && null !== MutationObserver || t() ? r() : n(r);
      }, window.LocalTime === e && e.start();
    }.call(this);
  }).call(this), "object" == ( false ? undefined : _typeof(module)) && module.exports ? module.exports = e :  true && !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}).call(this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "./node_modules/turbolinks/dist/turbolinks.js":
/*!****************************************************!*\
  !*** ./node_modules/turbolinks/dist/turbolinks.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*
Turbolinks 5.2.0
Copyright © 2018 Basecamp, LLC
 */
(function () {
  var t = this;
  (function () {
    (function () {
      this.Turbolinks = {
        supported: function () {
          return null != window.history.pushState && null != window.requestAnimationFrame && null != window.addEventListener;
        }(),
        visit: function visit(t, r) {
          return e.controller.visit(t, r);
        },
        clearCache: function clearCache() {
          return e.controller.clearCache();
        },
        setProgressBarDelay: function setProgressBarDelay(t) {
          return e.controller.setProgressBarDelay(t);
        }
      };
    }).call(this);
  }).call(t);
  var e = t.Turbolinks;
  (function () {
    (function () {
      var t,
          r,
          n,
          o = [].slice;
      e.copyObject = function (t) {
        var e, r, n;
        r = {};

        for (e in t) {
          n = t[e], r[e] = n;
        }

        return r;
      }, e.closest = function (e, r) {
        return t.call(e, r);
      }, t = function () {
        var t, e;
        return t = document.documentElement, null != (e = t.closest) ? e : function (t) {
          var e;

          for (e = this; e;) {
            if (e.nodeType === Node.ELEMENT_NODE && r.call(e, t)) return e;
            e = e.parentNode;
          }
        };
      }(), e.defer = function (t) {
        return setTimeout(t, 1);
      }, e.throttle = function (t) {
        var e;
        return e = null, function () {
          var r;
          return r = 1 <= arguments.length ? o.call(arguments, 0) : [], null != e ? e : e = requestAnimationFrame(function (n) {
            return function () {
              return e = null, t.apply(n, r);
            };
          }(this));
        };
      }, e.dispatch = function (t, e) {
        var r, o, i, s, a, u;
        return a = null != e ? e : {}, u = a.target, r = a.cancelable, o = a.data, i = document.createEvent("Events"), i.initEvent(t, !0, r === !0), i.data = null != o ? o : {}, i.cancelable && !n && (s = i.preventDefault, i.preventDefault = function () {
          return this.defaultPrevented || Object.defineProperty(this, "defaultPrevented", {
            get: function get() {
              return !0;
            }
          }), s.call(this);
        }), (null != u ? u : document).dispatchEvent(i), i;
      }, n = function () {
        var t;
        return t = document.createEvent("Events"), t.initEvent("test", !0, !0), t.preventDefault(), t.defaultPrevented;
      }(), e.match = function (t, e) {
        return r.call(t, e);
      }, r = function () {
        var t, e, r, n;
        return t = document.documentElement, null != (e = null != (r = null != (n = t.matchesSelector) ? n : t.webkitMatchesSelector) ? r : t.msMatchesSelector) ? e : t.mozMatchesSelector;
      }(), e.uuid = function () {
        var t, e, r;

        for (r = "", t = e = 1; 36 >= e; t = ++e) {
          r += 9 === t || 14 === t || 19 === t || 24 === t ? "-" : 15 === t ? "4" : 20 === t ? (Math.floor(4 * Math.random()) + 8).toString(16) : Math.floor(15 * Math.random()).toString(16);
        }

        return r;
      };
    }).call(this), function () {
      e.Location = function () {
        function t(t) {
          var e, r;
          null == t && (t = ""), r = document.createElement("a"), r.href = t.toString(), this.absoluteURL = r.href, e = r.hash.length, 2 > e ? this.requestURL = this.absoluteURL : (this.requestURL = this.absoluteURL.slice(0, -e), this.anchor = r.hash.slice(1));
        }

        var e, r, n, o;
        return t.wrap = function (t) {
          return t instanceof this ? t : new this(t);
        }, t.prototype.getOrigin = function () {
          return this.absoluteURL.split("/", 3).join("/");
        }, t.prototype.getPath = function () {
          var t, e;
          return null != (t = null != (e = this.requestURL.match(/\/\/[^\/]*(\/[^?;]*)/)) ? e[1] : void 0) ? t : "/";
        }, t.prototype.getPathComponents = function () {
          return this.getPath().split("/").slice(1);
        }, t.prototype.getLastPathComponent = function () {
          return this.getPathComponents().slice(-1)[0];
        }, t.prototype.getExtension = function () {
          var t, e;
          return null != (t = null != (e = this.getLastPathComponent().match(/\.[^.]*$/)) ? e[0] : void 0) ? t : "";
        }, t.prototype.isHTML = function () {
          return this.getExtension().match(/^(?:|\.(?:htm|html|xhtml))$/);
        }, t.prototype.isPrefixedBy = function (t) {
          var e;
          return e = r(t), this.isEqualTo(t) || o(this.absoluteURL, e);
        }, t.prototype.isEqualTo = function (t) {
          return this.absoluteURL === (null != t ? t.absoluteURL : void 0);
        }, t.prototype.toCacheKey = function () {
          return this.requestURL;
        }, t.prototype.toJSON = function () {
          return this.absoluteURL;
        }, t.prototype.toString = function () {
          return this.absoluteURL;
        }, t.prototype.valueOf = function () {
          return this.absoluteURL;
        }, r = function r(t) {
          return e(t.getOrigin() + t.getPath());
        }, e = function e(t) {
          return n(t, "/") ? t : t + "/";
        }, o = function o(t, e) {
          return t.slice(0, e.length) === e;
        }, n = function n(t, e) {
          return t.slice(-e.length) === e;
        }, t;
      }();
    }.call(this), function () {
      var t = function t(_t, e) {
        return function () {
          return _t.apply(e, arguments);
        };
      };

      e.HttpRequest = function () {
        function r(r, n, o) {
          this.delegate = r, this.requestCanceled = t(this.requestCanceled, this), this.requestTimedOut = t(this.requestTimedOut, this), this.requestFailed = t(this.requestFailed, this), this.requestLoaded = t(this.requestLoaded, this), this.requestProgressed = t(this.requestProgressed, this), this.url = e.Location.wrap(n).requestURL, this.referrer = e.Location.wrap(o).absoluteURL, this.createXHR();
        }

        return r.NETWORK_FAILURE = 0, r.TIMEOUT_FAILURE = -1, r.timeout = 60, r.prototype.send = function () {
          var t;
          return this.xhr && !this.sent ? (this.notifyApplicationBeforeRequestStart(), this.setProgress(0), this.xhr.send(), this.sent = !0, "function" == typeof (t = this.delegate).requestStarted ? t.requestStarted() : void 0) : void 0;
        }, r.prototype.cancel = function () {
          return this.xhr && this.sent ? this.xhr.abort() : void 0;
        }, r.prototype.requestProgressed = function (t) {
          return t.lengthComputable ? this.setProgress(t.loaded / t.total) : void 0;
        }, r.prototype.requestLoaded = function () {
          return this.endRequest(function (t) {
            return function () {
              var e;
              return 200 <= (e = t.xhr.status) && 300 > e ? t.delegate.requestCompletedWithResponse(t.xhr.responseText, t.xhr.getResponseHeader("Turbolinks-Location")) : (t.failed = !0, t.delegate.requestFailedWithStatusCode(t.xhr.status, t.xhr.responseText));
            };
          }(this));
        }, r.prototype.requestFailed = function () {
          return this.endRequest(function (t) {
            return function () {
              return t.failed = !0, t.delegate.requestFailedWithStatusCode(t.constructor.NETWORK_FAILURE);
            };
          }(this));
        }, r.prototype.requestTimedOut = function () {
          return this.endRequest(function (t) {
            return function () {
              return t.failed = !0, t.delegate.requestFailedWithStatusCode(t.constructor.TIMEOUT_FAILURE);
            };
          }(this));
        }, r.prototype.requestCanceled = function () {
          return this.endRequest();
        }, r.prototype.notifyApplicationBeforeRequestStart = function () {
          return e.dispatch("turbolinks:request-start", {
            data: {
              url: this.url,
              xhr: this.xhr
            }
          });
        }, r.prototype.notifyApplicationAfterRequestEnd = function () {
          return e.dispatch("turbolinks:request-end", {
            data: {
              url: this.url,
              xhr: this.xhr
            }
          });
        }, r.prototype.createXHR = function () {
          return this.xhr = new XMLHttpRequest(), this.xhr.open("GET", this.url, !0), this.xhr.timeout = 1e3 * this.constructor.timeout, this.xhr.setRequestHeader("Accept", "text/html, application/xhtml+xml"), this.xhr.setRequestHeader("Turbolinks-Referrer", this.referrer), this.xhr.onprogress = this.requestProgressed, this.xhr.onload = this.requestLoaded, this.xhr.onerror = this.requestFailed, this.xhr.ontimeout = this.requestTimedOut, this.xhr.onabort = this.requestCanceled;
        }, r.prototype.endRequest = function (t) {
          return this.xhr ? (this.notifyApplicationAfterRequestEnd(), null != t && t.call(this), this.destroy()) : void 0;
        }, r.prototype.setProgress = function (t) {
          var e;
          return this.progress = t, "function" == typeof (e = this.delegate).requestProgressed ? e.requestProgressed(this.progress) : void 0;
        }, r.prototype.destroy = function () {
          var t;
          return this.setProgress(1), "function" == typeof (t = this.delegate).requestFinished && t.requestFinished(), this.delegate = null, this.xhr = null;
        }, r;
      }();
    }.call(this), function () {
      var t = function t(_t2, e) {
        return function () {
          return _t2.apply(e, arguments);
        };
      };

      e.ProgressBar = function () {
        function e() {
          this.trickle = t(this.trickle, this), this.stylesheetElement = this.createStylesheetElement(), this.progressElement = this.createProgressElement();
        }

        var r;
        return r = 300, e.defaultCSS = ".turbolinks-progress-bar {\n  position: fixed;\n  display: block;\n  top: 0;\n  left: 0;\n  height: 3px;\n  background: #0076ff;\n  z-index: 9999;\n  transition: width " + r + "ms ease-out, opacity " + r / 2 + "ms " + r / 2 + "ms ease-in;\n  transform: translate3d(0, 0, 0);\n}", e.prototype.show = function () {
          return this.visible ? void 0 : (this.visible = !0, this.installStylesheetElement(), this.installProgressElement(), this.startTrickling());
        }, e.prototype.hide = function () {
          return this.visible && !this.hiding ? (this.hiding = !0, this.fadeProgressElement(function (t) {
            return function () {
              return t.uninstallProgressElement(), t.stopTrickling(), t.visible = !1, t.hiding = !1;
            };
          }(this))) : void 0;
        }, e.prototype.setValue = function (t) {
          return this.value = t, this.refresh();
        }, e.prototype.installStylesheetElement = function () {
          return document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
        }, e.prototype.installProgressElement = function () {
          return this.progressElement.style.width = 0, this.progressElement.style.opacity = 1, document.documentElement.insertBefore(this.progressElement, document.body), this.refresh();
        }, e.prototype.fadeProgressElement = function (t) {
          return this.progressElement.style.opacity = 0, setTimeout(t, 1.5 * r);
        }, e.prototype.uninstallProgressElement = function () {
          return this.progressElement.parentNode ? document.documentElement.removeChild(this.progressElement) : void 0;
        }, e.prototype.startTrickling = function () {
          return null != this.trickleInterval ? this.trickleInterval : this.trickleInterval = setInterval(this.trickle, r);
        }, e.prototype.stopTrickling = function () {
          return clearInterval(this.trickleInterval), this.trickleInterval = null;
        }, e.prototype.trickle = function () {
          return this.setValue(this.value + Math.random() / 100);
        }, e.prototype.refresh = function () {
          return requestAnimationFrame(function (t) {
            return function () {
              return t.progressElement.style.width = 10 + 90 * t.value + "%";
            };
          }(this));
        }, e.prototype.createStylesheetElement = function () {
          var t;
          return t = document.createElement("style"), t.type = "text/css", t.textContent = this.constructor.defaultCSS, t;
        }, e.prototype.createProgressElement = function () {
          var t;
          return t = document.createElement("div"), t.className = "turbolinks-progress-bar", t;
        }, e;
      }();
    }.call(this), function () {
      var t = function t(_t3, e) {
        return function () {
          return _t3.apply(e, arguments);
        };
      };

      e.BrowserAdapter = function () {
        function r(r) {
          this.controller = r, this.showProgressBar = t(this.showProgressBar, this), this.progressBar = new e.ProgressBar();
        }

        var n, o, i;
        return i = e.HttpRequest, n = i.NETWORK_FAILURE, o = i.TIMEOUT_FAILURE, r.prototype.visitProposedToLocationWithAction = function (t, e) {
          return this.controller.startVisitToLocationWithAction(t, e);
        }, r.prototype.visitStarted = function (t) {
          return t.issueRequest(), t.changeHistory(), t.loadCachedSnapshot();
        }, r.prototype.visitRequestStarted = function (t) {
          return this.progressBar.setValue(0), t.hasCachedSnapshot() || "restore" !== t.action ? this.showProgressBarAfterDelay() : this.showProgressBar();
        }, r.prototype.visitRequestProgressed = function (t) {
          return this.progressBar.setValue(t.progress);
        }, r.prototype.visitRequestCompleted = function (t) {
          return t.loadResponse();
        }, r.prototype.visitRequestFailedWithStatusCode = function (t, e) {
          switch (e) {
            case n:
            case o:
              return this.reload();

            default:
              return t.loadResponse();
          }
        }, r.prototype.visitRequestFinished = function (t) {
          return this.hideProgressBar();
        }, r.prototype.visitCompleted = function (t) {
          return t.followRedirect();
        }, r.prototype.pageInvalidated = function () {
          return this.reload();
        }, r.prototype.showProgressBarAfterDelay = function () {
          return this.progressBarTimeout = setTimeout(this.showProgressBar, this.controller.progressBarDelay);
        }, r.prototype.showProgressBar = function () {
          return this.progressBar.show();
        }, r.prototype.hideProgressBar = function () {
          return this.progressBar.hide(), clearTimeout(this.progressBarTimeout);
        }, r.prototype.reload = function () {
          return window.location.reload();
        }, r;
      }();
    }.call(this), function () {
      var t = function t(_t4, e) {
        return function () {
          return _t4.apply(e, arguments);
        };
      };

      e.History = function () {
        function r(e) {
          this.delegate = e, this.onPageLoad = t(this.onPageLoad, this), this.onPopState = t(this.onPopState, this);
        }

        return r.prototype.start = function () {
          return this.started ? void 0 : (addEventListener("popstate", this.onPopState, !1), addEventListener("load", this.onPageLoad, !1), this.started = !0);
        }, r.prototype.stop = function () {
          return this.started ? (removeEventListener("popstate", this.onPopState, !1), removeEventListener("load", this.onPageLoad, !1), this.started = !1) : void 0;
        }, r.prototype.push = function (t, r) {
          return t = e.Location.wrap(t), this.update("push", t, r);
        }, r.prototype.replace = function (t, r) {
          return t = e.Location.wrap(t), this.update("replace", t, r);
        }, r.prototype.onPopState = function (t) {
          var r, n, o, i;
          return this.shouldHandlePopState() && (i = null != (n = t.state) ? n.turbolinks : void 0) ? (r = e.Location.wrap(window.location), o = i.restorationIdentifier, this.delegate.historyPoppedToLocationWithRestorationIdentifier(r, o)) : void 0;
        }, r.prototype.onPageLoad = function (t) {
          return e.defer(function (t) {
            return function () {
              return t.pageLoaded = !0;
            };
          }(this));
        }, r.prototype.shouldHandlePopState = function () {
          return this.pageIsLoaded();
        }, r.prototype.pageIsLoaded = function () {
          return this.pageLoaded || "complete" === document.readyState;
        }, r.prototype.update = function (t, e, r) {
          var n;
          return n = {
            turbolinks: {
              restorationIdentifier: r
            }
          }, history[t + "State"](n, null, e);
        }, r;
      }();
    }.call(this), function () {
      e.HeadDetails = function () {
        function t(t) {
          var e, r, n, s, a, u;

          for (this.elements = {}, n = 0, a = t.length; a > n; n++) {
            u = t[n], u.nodeType === Node.ELEMENT_NODE && (s = u.outerHTML, r = null != (e = this.elements)[s] ? e[s] : e[s] = {
              type: i(u),
              tracked: o(u),
              elements: []
            }, r.elements.push(u));
          }
        }

        var e, r, n, o, i;
        return t.fromHeadElement = function (t) {
          var e;
          return new this(null != (e = null != t ? t.childNodes : void 0) ? e : []);
        }, t.prototype.hasElementWithKey = function (t) {
          return t in this.elements;
        }, t.prototype.getTrackedElementSignature = function () {
          var t, e;
          return function () {
            var r, n;
            r = this.elements, n = [];

            for (t in r) {
              e = r[t].tracked, e && n.push(t);
            }

            return n;
          }.call(this).join("");
        }, t.prototype.getScriptElementsNotInDetails = function (t) {
          return this.getElementsMatchingTypeNotInDetails("script", t);
        }, t.prototype.getStylesheetElementsNotInDetails = function (t) {
          return this.getElementsMatchingTypeNotInDetails("stylesheet", t);
        }, t.prototype.getElementsMatchingTypeNotInDetails = function (t, e) {
          var r, n, o, i, s, a;
          o = this.elements, s = [];

          for (n in o) {
            i = o[n], a = i.type, r = i.elements, a !== t || e.hasElementWithKey(n) || s.push(r[0]);
          }

          return s;
        }, t.prototype.getProvisionalElements = function () {
          var t, e, r, n, o, i, s;
          r = [], n = this.elements;

          for (e in n) {
            o = n[e], s = o.type, i = o.tracked, t = o.elements, null != s || i ? t.length > 1 && r.push.apply(r, t.slice(1)) : r.push.apply(r, t);
          }

          return r;
        }, t.prototype.getMetaValue = function (t) {
          var e;
          return null != (e = this.findMetaElementByName(t)) ? e.getAttribute("content") : void 0;
        }, t.prototype.findMetaElementByName = function (t) {
          var r, n, o, i;
          r = void 0, i = this.elements;

          for (o in i) {
            n = i[o].elements, e(n[0], t) && (r = n[0]);
          }

          return r;
        }, i = function i(t) {
          return r(t) ? "script" : n(t) ? "stylesheet" : void 0;
        }, o = function o(t) {
          return "reload" === t.getAttribute("data-turbolinks-track");
        }, r = function r(t) {
          var e;
          return e = t.tagName.toLowerCase(), "script" === e;
        }, n = function n(t) {
          var e;
          return e = t.tagName.toLowerCase(), "style" === e || "link" === e && "stylesheet" === t.getAttribute("rel");
        }, e = function e(t, _e) {
          var r;
          return r = t.tagName.toLowerCase(), "meta" === r && t.getAttribute("name") === _e;
        }, t;
      }();
    }.call(this), function () {
      e.Snapshot = function () {
        function t(t, e) {
          this.headDetails = t, this.bodyElement = e;
        }

        return t.wrap = function (t) {
          return t instanceof this ? t : "string" == typeof t ? this.fromHTMLString(t) : this.fromHTMLElement(t);
        }, t.fromHTMLString = function (t) {
          var e;
          return e = document.createElement("html"), e.innerHTML = t, this.fromHTMLElement(e);
        }, t.fromHTMLElement = function (t) {
          var r, n, o, i;
          return o = t.querySelector("head"), r = null != (i = t.querySelector("body")) ? i : document.createElement("body"), n = e.HeadDetails.fromHeadElement(o), new this(n, r);
        }, t.prototype.clone = function () {
          return new this.constructor(this.headDetails, this.bodyElement.cloneNode(!0));
        }, t.prototype.getRootLocation = function () {
          var t, r;
          return r = null != (t = this.getSetting("root")) ? t : "/", new e.Location(r);
        }, t.prototype.getCacheControlValue = function () {
          return this.getSetting("cache-control");
        }, t.prototype.getElementForAnchor = function (t) {
          try {
            return this.bodyElement.querySelector("[id='" + t + "'], a[name='" + t + "']");
          } catch (e) {}
        }, t.prototype.getPermanentElements = function () {
          return this.bodyElement.querySelectorAll("[id][data-turbolinks-permanent]");
        }, t.prototype.getPermanentElementById = function (t) {
          return this.bodyElement.querySelector("#" + t + "[data-turbolinks-permanent]");
        }, t.prototype.getPermanentElementsPresentInSnapshot = function (t) {
          var e, r, n, o, i;

          for (o = this.getPermanentElements(), i = [], r = 0, n = o.length; n > r; r++) {
            e = o[r], t.getPermanentElementById(e.id) && i.push(e);
          }

          return i;
        }, t.prototype.findFirstAutofocusableElement = function () {
          return this.bodyElement.querySelector("[autofocus]");
        }, t.prototype.hasAnchor = function (t) {
          return null != this.getElementForAnchor(t);
        }, t.prototype.isPreviewable = function () {
          return "no-preview" !== this.getCacheControlValue();
        }, t.prototype.isCacheable = function () {
          return "no-cache" !== this.getCacheControlValue();
        }, t.prototype.isVisitable = function () {
          return "reload" !== this.getSetting("visit-control");
        }, t.prototype.getSetting = function (t) {
          return this.headDetails.getMetaValue("turbolinks-" + t);
        }, t;
      }();
    }.call(this), function () {
      var t = [].slice;

      e.Renderer = function () {
        function e() {}

        var r;
        return e.render = function () {
          var e, r, n, o;
          return n = arguments[0], r = arguments[1], e = 3 <= arguments.length ? t.call(arguments, 2) : [], o = function (t, e, r) {
            r.prototype = t.prototype;
            var n = new r(),
                o = t.apply(n, e);
            return Object(o) === o ? o : n;
          }(this, e, function () {}), o.delegate = n, o.render(r), o;
        }, e.prototype.renderView = function (t) {
          return this.delegate.viewWillRender(this.newBody), t(), this.delegate.viewRendered(this.newBody);
        }, e.prototype.invalidateView = function () {
          return this.delegate.viewInvalidated();
        }, e.prototype.createScriptElement = function (t) {
          var e;
          return "false" === t.getAttribute("data-turbolinks-eval") ? t : (e = document.createElement("script"), e.textContent = t.textContent, e.async = !1, r(e, t), e);
        }, r = function r(t, e) {
          var r, n, o, i, s, a, u;

          for (i = e.attributes, a = [], r = 0, n = i.length; n > r; r++) {
            s = i[r], o = s.name, u = s.value, a.push(t.setAttribute(o, u));
          }

          return a;
        }, e;
      }();
    }.call(this), function () {
      var t,
          r,
          n = function n(t, e) {
        function r() {
          this.constructor = t;
        }

        for (var n in e) {
          o.call(e, n) && (t[n] = e[n]);
        }

        return r.prototype = e.prototype, t.prototype = new r(), t.__super__ = e.prototype, t;
      },
          o = {}.hasOwnProperty;

      e.SnapshotRenderer = function (e) {
        function o(t, e, r) {
          this.currentSnapshot = t, this.newSnapshot = e, this.isPreview = r, this.currentHeadDetails = this.currentSnapshot.headDetails, this.newHeadDetails = this.newSnapshot.headDetails, this.currentBody = this.currentSnapshot.bodyElement, this.newBody = this.newSnapshot.bodyElement;
        }

        return n(o, e), o.prototype.render = function (t) {
          return this.shouldRender() ? (this.mergeHead(), this.renderView(function (e) {
            return function () {
              return e.replaceBody(), e.isPreview || e.focusFirstAutofocusableElement(), t();
            };
          }(this))) : this.invalidateView();
        }, o.prototype.mergeHead = function () {
          return this.copyNewHeadStylesheetElements(), this.copyNewHeadScriptElements(), this.removeCurrentHeadProvisionalElements(), this.copyNewHeadProvisionalElements();
        }, o.prototype.replaceBody = function () {
          var t;
          return t = this.relocateCurrentBodyPermanentElements(), this.activateNewBodyScriptElements(), this.assignNewBody(), this.replacePlaceholderElementsWithClonedPermanentElements(t);
        }, o.prototype.shouldRender = function () {
          return this.newSnapshot.isVisitable() && this.trackedElementsAreIdentical();
        }, o.prototype.trackedElementsAreIdentical = function () {
          return this.currentHeadDetails.getTrackedElementSignature() === this.newHeadDetails.getTrackedElementSignature();
        }, o.prototype.copyNewHeadStylesheetElements = function () {
          var t, e, r, n, o;

          for (n = this.getNewHeadStylesheetElements(), o = [], e = 0, r = n.length; r > e; e++) {
            t = n[e], o.push(document.head.appendChild(t));
          }

          return o;
        }, o.prototype.copyNewHeadScriptElements = function () {
          var t, e, r, n, o;

          for (n = this.getNewHeadScriptElements(), o = [], e = 0, r = n.length; r > e; e++) {
            t = n[e], o.push(document.head.appendChild(this.createScriptElement(t)));
          }

          return o;
        }, o.prototype.removeCurrentHeadProvisionalElements = function () {
          var t, e, r, n, o;

          for (n = this.getCurrentHeadProvisionalElements(), o = [], e = 0, r = n.length; r > e; e++) {
            t = n[e], o.push(document.head.removeChild(t));
          }

          return o;
        }, o.prototype.copyNewHeadProvisionalElements = function () {
          var t, e, r, n, o;

          for (n = this.getNewHeadProvisionalElements(), o = [], e = 0, r = n.length; r > e; e++) {
            t = n[e], o.push(document.head.appendChild(t));
          }

          return o;
        }, o.prototype.relocateCurrentBodyPermanentElements = function () {
          var e, n, o, i, s, a, u;

          for (a = this.getCurrentBodyPermanentElements(), u = [], e = 0, n = a.length; n > e; e++) {
            i = a[e], s = t(i), o = this.newSnapshot.getPermanentElementById(i.id), r(i, s.element), r(o, i), u.push(s);
          }

          return u;
        }, o.prototype.replacePlaceholderElementsWithClonedPermanentElements = function (t) {
          var e, n, o, i, s, a, u;

          for (u = [], o = 0, i = t.length; i > o; o++) {
            a = t[o], n = a.element, s = a.permanentElement, e = s.cloneNode(!0), u.push(r(n, e));
          }

          return u;
        }, o.prototype.activateNewBodyScriptElements = function () {
          var t, e, n, o, i, s;

          for (i = this.getNewBodyScriptElements(), s = [], e = 0, o = i.length; o > e; e++) {
            n = i[e], t = this.createScriptElement(n), s.push(r(n, t));
          }

          return s;
        }, o.prototype.assignNewBody = function () {
          return document.body = this.newBody;
        }, o.prototype.focusFirstAutofocusableElement = function () {
          var t;
          return null != (t = this.newSnapshot.findFirstAutofocusableElement()) ? t.focus() : void 0;
        }, o.prototype.getNewHeadStylesheetElements = function () {
          return this.newHeadDetails.getStylesheetElementsNotInDetails(this.currentHeadDetails);
        }, o.prototype.getNewHeadScriptElements = function () {
          return this.newHeadDetails.getScriptElementsNotInDetails(this.currentHeadDetails);
        }, o.prototype.getCurrentHeadProvisionalElements = function () {
          return this.currentHeadDetails.getProvisionalElements();
        }, o.prototype.getNewHeadProvisionalElements = function () {
          return this.newHeadDetails.getProvisionalElements();
        }, o.prototype.getCurrentBodyPermanentElements = function () {
          return this.currentSnapshot.getPermanentElementsPresentInSnapshot(this.newSnapshot);
        }, o.prototype.getNewBodyScriptElements = function () {
          return this.newBody.querySelectorAll("script");
        }, o;
      }(e.Renderer), t = function t(_t5) {
        var e;
        return e = document.createElement("meta"), e.setAttribute("name", "turbolinks-permanent-placeholder"), e.setAttribute("content", _t5.id), {
          element: e,
          permanentElement: _t5
        };
      }, r = function r(t, e) {
        var r;
        return (r = t.parentNode) ? r.replaceChild(e, t) : void 0;
      };
    }.call(this), function () {
      var t = function t(_t6, e) {
        function n() {
          this.constructor = _t6;
        }

        for (var o in e) {
          r.call(e, o) && (_t6[o] = e[o]);
        }

        return n.prototype = e.prototype, _t6.prototype = new n(), _t6.__super__ = e.prototype, _t6;
      },
          r = {}.hasOwnProperty;

      e.ErrorRenderer = function (e) {
        function r(t) {
          var e;
          e = document.createElement("html"), e.innerHTML = t, this.newHead = e.querySelector("head"), this.newBody = e.querySelector("body");
        }

        return t(r, e), r.prototype.render = function (t) {
          return this.renderView(function (e) {
            return function () {
              return e.replaceHeadAndBody(), e.activateBodyScriptElements(), t();
            };
          }(this));
        }, r.prototype.replaceHeadAndBody = function () {
          var t, e;
          return e = document.head, t = document.body, e.parentNode.replaceChild(this.newHead, e), t.parentNode.replaceChild(this.newBody, t);
        }, r.prototype.activateBodyScriptElements = function () {
          var t, e, r, n, o, i;

          for (n = this.getScriptElements(), i = [], e = 0, r = n.length; r > e; e++) {
            o = n[e], t = this.createScriptElement(o), i.push(o.parentNode.replaceChild(t, o));
          }

          return i;
        }, r.prototype.getScriptElements = function () {
          return document.documentElement.querySelectorAll("script");
        }, r;
      }(e.Renderer);
    }.call(this), function () {
      e.View = function () {
        function t(t) {
          this.delegate = t, this.htmlElement = document.documentElement;
        }

        return t.prototype.getRootLocation = function () {
          return this.getSnapshot().getRootLocation();
        }, t.prototype.getElementForAnchor = function (t) {
          return this.getSnapshot().getElementForAnchor(t);
        }, t.prototype.getSnapshot = function () {
          return e.Snapshot.fromHTMLElement(this.htmlElement);
        }, t.prototype.render = function (t, e) {
          var r, n, o;
          return o = t.snapshot, r = t.error, n = t.isPreview, this.markAsPreview(n), null != o ? this.renderSnapshot(o, n, e) : this.renderError(r, e);
        }, t.prototype.markAsPreview = function (t) {
          return t ? this.htmlElement.setAttribute("data-turbolinks-preview", "") : this.htmlElement.removeAttribute("data-turbolinks-preview");
        }, t.prototype.renderSnapshot = function (t, r, n) {
          return e.SnapshotRenderer.render(this.delegate, n, this.getSnapshot(), e.Snapshot.wrap(t), r);
        }, t.prototype.renderError = function (t, r) {
          return e.ErrorRenderer.render(this.delegate, r, t);
        }, t;
      }();
    }.call(this), function () {
      var t = function t(_t7, e) {
        return function () {
          return _t7.apply(e, arguments);
        };
      };

      e.ScrollManager = function () {
        function r(r) {
          this.delegate = r, this.onScroll = t(this.onScroll, this), this.onScroll = e.throttle(this.onScroll);
        }

        return r.prototype.start = function () {
          return this.started ? void 0 : (addEventListener("scroll", this.onScroll, !1), this.onScroll(), this.started = !0);
        }, r.prototype.stop = function () {
          return this.started ? (removeEventListener("scroll", this.onScroll, !1), this.started = !1) : void 0;
        }, r.prototype.scrollToElement = function (t) {
          return t.scrollIntoView();
        }, r.prototype.scrollToPosition = function (t) {
          var e, r;
          return e = t.x, r = t.y, window.scrollTo(e, r);
        }, r.prototype.onScroll = function (t) {
          return this.updatePosition({
            x: window.pageXOffset,
            y: window.pageYOffset
          });
        }, r.prototype.updatePosition = function (t) {
          var e;
          return this.position = t, null != (e = this.delegate) ? e.scrollPositionChanged(this.position) : void 0;
        }, r;
      }();
    }.call(this), function () {
      e.SnapshotCache = function () {
        function t(t) {
          this.size = t, this.keys = [], this.snapshots = {};
        }

        var r;
        return t.prototype.has = function (t) {
          var e;
          return e = r(t), e in this.snapshots;
        }, t.prototype.get = function (t) {
          var e;
          if (this.has(t)) return e = this.read(t), this.touch(t), e;
        }, t.prototype.put = function (t, e) {
          return this.write(t, e), this.touch(t), e;
        }, t.prototype.read = function (t) {
          var e;
          return e = r(t), this.snapshots[e];
        }, t.prototype.write = function (t, e) {
          var n;
          return n = r(t), this.snapshots[n] = e;
        }, t.prototype.touch = function (t) {
          var e, n;
          return n = r(t), e = this.keys.indexOf(n), e > -1 && this.keys.splice(e, 1), this.keys.unshift(n), this.trim();
        }, t.prototype.trim = function () {
          var t, e, r, n, o;

          for (n = this.keys.splice(this.size), o = [], t = 0, r = n.length; r > t; t++) {
            e = n[t], o.push(delete this.snapshots[e]);
          }

          return o;
        }, r = function r(t) {
          return e.Location.wrap(t).toCacheKey();
        }, t;
      }();
    }.call(this), function () {
      var t = function t(_t8, e) {
        return function () {
          return _t8.apply(e, arguments);
        };
      };

      e.Visit = function () {
        function r(r, n, o) {
          this.controller = r, this.action = o, this.performScroll = t(this.performScroll, this), this.identifier = e.uuid(), this.location = e.Location.wrap(n), this.adapter = this.controller.adapter, this.state = "initialized", this.timingMetrics = {};
        }

        var n;
        return r.prototype.start = function () {
          return "initialized" === this.state ? (this.recordTimingMetric("visitStart"), this.state = "started", this.adapter.visitStarted(this)) : void 0;
        }, r.prototype.cancel = function () {
          var t;
          return "started" === this.state ? (null != (t = this.request) && t.cancel(), this.cancelRender(), this.state = "canceled") : void 0;
        }, r.prototype.complete = function () {
          var t;
          return "started" === this.state ? (this.recordTimingMetric("visitEnd"), this.state = "completed", "function" == typeof (t = this.adapter).visitCompleted && t.visitCompleted(this), this.controller.visitCompleted(this)) : void 0;
        }, r.prototype.fail = function () {
          var t;
          return "started" === this.state ? (this.state = "failed", "function" == typeof (t = this.adapter).visitFailed ? t.visitFailed(this) : void 0) : void 0;
        }, r.prototype.changeHistory = function () {
          var t, e;
          return this.historyChanged ? void 0 : (t = this.location.isEqualTo(this.referrer) ? "replace" : this.action, e = n(t), this.controller[e](this.location, this.restorationIdentifier), this.historyChanged = !0);
        }, r.prototype.issueRequest = function () {
          return this.shouldIssueRequest() && null == this.request ? (this.progress = 0, this.request = new e.HttpRequest(this, this.location, this.referrer), this.request.send()) : void 0;
        }, r.prototype.getCachedSnapshot = function () {
          var t;
          return !(t = this.controller.getCachedSnapshotForLocation(this.location)) || null != this.location.anchor && !t.hasAnchor(this.location.anchor) || "restore" !== this.action && !t.isPreviewable() ? void 0 : t;
        }, r.prototype.hasCachedSnapshot = function () {
          return null != this.getCachedSnapshot();
        }, r.prototype.loadCachedSnapshot = function () {
          var t, e;
          return (e = this.getCachedSnapshot()) ? (t = this.shouldIssueRequest(), this.render(function () {
            var r;
            return this.cacheSnapshot(), this.controller.render({
              snapshot: e,
              isPreview: t
            }, this.performScroll), "function" == typeof (r = this.adapter).visitRendered && r.visitRendered(this), t ? void 0 : this.complete();
          })) : void 0;
        }, r.prototype.loadResponse = function () {
          return null != this.response ? this.render(function () {
            var t, e;
            return this.cacheSnapshot(), this.request.failed ? (this.controller.render({
              error: this.response
            }, this.performScroll), "function" == typeof (t = this.adapter).visitRendered && t.visitRendered(this), this.fail()) : (this.controller.render({
              snapshot: this.response
            }, this.performScroll), "function" == typeof (e = this.adapter).visitRendered && e.visitRendered(this), this.complete());
          }) : void 0;
        }, r.prototype.followRedirect = function () {
          return this.redirectedToLocation && !this.followedRedirect ? (this.location = this.redirectedToLocation, this.controller.replaceHistoryWithLocationAndRestorationIdentifier(this.redirectedToLocation, this.restorationIdentifier), this.followedRedirect = !0) : void 0;
        }, r.prototype.requestStarted = function () {
          var t;
          return this.recordTimingMetric("requestStart"), "function" == typeof (t = this.adapter).visitRequestStarted ? t.visitRequestStarted(this) : void 0;
        }, r.prototype.requestProgressed = function (t) {
          var e;
          return this.progress = t, "function" == typeof (e = this.adapter).visitRequestProgressed ? e.visitRequestProgressed(this) : void 0;
        }, r.prototype.requestCompletedWithResponse = function (t, r) {
          return this.response = t, null != r && (this.redirectedToLocation = e.Location.wrap(r)), this.adapter.visitRequestCompleted(this);
        }, r.prototype.requestFailedWithStatusCode = function (t, e) {
          return this.response = e, this.adapter.visitRequestFailedWithStatusCode(this, t);
        }, r.prototype.requestFinished = function () {
          var t;
          return this.recordTimingMetric("requestEnd"), "function" == typeof (t = this.adapter).visitRequestFinished ? t.visitRequestFinished(this) : void 0;
        }, r.prototype.performScroll = function () {
          return this.scrolled ? void 0 : ("restore" === this.action ? this.scrollToRestoredPosition() || this.scrollToTop() : this.scrollToAnchor() || this.scrollToTop(), this.scrolled = !0);
        }, r.prototype.scrollToRestoredPosition = function () {
          var t, e;
          return t = null != (e = this.restorationData) ? e.scrollPosition : void 0, null != t ? (this.controller.scrollToPosition(t), !0) : void 0;
        }, r.prototype.scrollToAnchor = function () {
          return null != this.location.anchor ? (this.controller.scrollToAnchor(this.location.anchor), !0) : void 0;
        }, r.prototype.scrollToTop = function () {
          return this.controller.scrollToPosition({
            x: 0,
            y: 0
          });
        }, r.prototype.recordTimingMetric = function (t) {
          var e;
          return null != (e = this.timingMetrics)[t] ? e[t] : e[t] = new Date().getTime();
        }, r.prototype.getTimingMetrics = function () {
          return e.copyObject(this.timingMetrics);
        }, n = function n(t) {
          switch (t) {
            case "replace":
              return "replaceHistoryWithLocationAndRestorationIdentifier";

            case "advance":
            case "restore":
              return "pushHistoryWithLocationAndRestorationIdentifier";
          }
        }, r.prototype.shouldIssueRequest = function () {
          return "restore" === this.action ? !this.hasCachedSnapshot() : !0;
        }, r.prototype.cacheSnapshot = function () {
          return this.snapshotCached ? void 0 : (this.controller.cacheSnapshot(), this.snapshotCached = !0);
        }, r.prototype.render = function (t) {
          return this.cancelRender(), this.frame = requestAnimationFrame(function (e) {
            return function () {
              return e.frame = null, t.call(e);
            };
          }(this));
        }, r.prototype.cancelRender = function () {
          return this.frame ? cancelAnimationFrame(this.frame) : void 0;
        }, r;
      }();
    }.call(this), function () {
      var t = function t(_t9, e) {
        return function () {
          return _t9.apply(e, arguments);
        };
      };

      e.Controller = function () {
        function r() {
          this.clickBubbled = t(this.clickBubbled, this), this.clickCaptured = t(this.clickCaptured, this), this.pageLoaded = t(this.pageLoaded, this), this.history = new e.History(this), this.view = new e.View(this), this.scrollManager = new e.ScrollManager(this), this.restorationData = {}, this.clearCache(), this.setProgressBarDelay(500);
        }

        return r.prototype.start = function () {
          return e.supported && !this.started ? (addEventListener("click", this.clickCaptured, !0), addEventListener("DOMContentLoaded", this.pageLoaded, !1), this.scrollManager.start(), this.startHistory(), this.started = !0, this.enabled = !0) : void 0;
        }, r.prototype.disable = function () {
          return this.enabled = !1;
        }, r.prototype.stop = function () {
          return this.started ? (removeEventListener("click", this.clickCaptured, !0), removeEventListener("DOMContentLoaded", this.pageLoaded, !1), this.scrollManager.stop(), this.stopHistory(), this.started = !1) : void 0;
        }, r.prototype.clearCache = function () {
          return this.cache = new e.SnapshotCache(10);
        }, r.prototype.visit = function (t, r) {
          var n, o;
          return null == r && (r = {}), t = e.Location.wrap(t), this.applicationAllowsVisitingLocation(t) ? this.locationIsVisitable(t) ? (n = null != (o = r.action) ? o : "advance", this.adapter.visitProposedToLocationWithAction(t, n)) : window.location = t : void 0;
        }, r.prototype.startVisitToLocationWithAction = function (t, r, n) {
          var o;
          return e.supported ? (o = this.getRestorationDataForIdentifier(n), this.startVisit(t, r, {
            restorationData: o
          })) : window.location = t;
        }, r.prototype.setProgressBarDelay = function (t) {
          return this.progressBarDelay = t;
        }, r.prototype.startHistory = function () {
          return this.location = e.Location.wrap(window.location), this.restorationIdentifier = e.uuid(), this.history.start(), this.history.replace(this.location, this.restorationIdentifier);
        }, r.prototype.stopHistory = function () {
          return this.history.stop();
        }, r.prototype.pushHistoryWithLocationAndRestorationIdentifier = function (t, r) {
          return this.restorationIdentifier = r, this.location = e.Location.wrap(t), this.history.push(this.location, this.restorationIdentifier);
        }, r.prototype.replaceHistoryWithLocationAndRestorationIdentifier = function (t, r) {
          return this.restorationIdentifier = r, this.location = e.Location.wrap(t), this.history.replace(this.location, this.restorationIdentifier);
        }, r.prototype.historyPoppedToLocationWithRestorationIdentifier = function (t, r) {
          var n;
          return this.restorationIdentifier = r, this.enabled ? (n = this.getRestorationDataForIdentifier(this.restorationIdentifier), this.startVisit(t, "restore", {
            restorationIdentifier: this.restorationIdentifier,
            restorationData: n,
            historyChanged: !0
          }), this.location = e.Location.wrap(t)) : this.adapter.pageInvalidated();
        }, r.prototype.getCachedSnapshotForLocation = function (t) {
          var e;
          return null != (e = this.cache.get(t)) ? e.clone() : void 0;
        }, r.prototype.shouldCacheSnapshot = function () {
          return this.view.getSnapshot().isCacheable();
        }, r.prototype.cacheSnapshot = function () {
          var t, r;
          return this.shouldCacheSnapshot() ? (this.notifyApplicationBeforeCachingSnapshot(), r = this.view.getSnapshot(), t = this.lastRenderedLocation, e.defer(function (e) {
            return function () {
              return e.cache.put(t, r.clone());
            };
          }(this))) : void 0;
        }, r.prototype.scrollToAnchor = function (t) {
          var e;
          return (e = this.view.getElementForAnchor(t)) ? this.scrollToElement(e) : this.scrollToPosition({
            x: 0,
            y: 0
          });
        }, r.prototype.scrollToElement = function (t) {
          return this.scrollManager.scrollToElement(t);
        }, r.prototype.scrollToPosition = function (t) {
          return this.scrollManager.scrollToPosition(t);
        }, r.prototype.scrollPositionChanged = function (t) {
          var e;
          return e = this.getCurrentRestorationData(), e.scrollPosition = t;
        }, r.prototype.render = function (t, e) {
          return this.view.render(t, e);
        }, r.prototype.viewInvalidated = function () {
          return this.adapter.pageInvalidated();
        }, r.prototype.viewWillRender = function (t) {
          return this.notifyApplicationBeforeRender(t);
        }, r.prototype.viewRendered = function () {
          return this.lastRenderedLocation = this.currentVisit.location, this.notifyApplicationAfterRender();
        }, r.prototype.pageLoaded = function () {
          return this.lastRenderedLocation = this.location, this.notifyApplicationAfterPageLoad();
        }, r.prototype.clickCaptured = function () {
          return removeEventListener("click", this.clickBubbled, !1), addEventListener("click", this.clickBubbled, !1);
        }, r.prototype.clickBubbled = function (t) {
          var e, r, n;
          return this.enabled && this.clickEventIsSignificant(t) && (r = this.getVisitableLinkForNode(t.target)) && (n = this.getVisitableLocationForLink(r)) && this.applicationAllowsFollowingLinkToLocation(r, n) ? (t.preventDefault(), e = this.getActionForLink(r), this.visit(n, {
            action: e
          })) : void 0;
        }, r.prototype.applicationAllowsFollowingLinkToLocation = function (t, e) {
          var r;
          return r = this.notifyApplicationAfterClickingLinkToLocation(t, e), !r.defaultPrevented;
        }, r.prototype.applicationAllowsVisitingLocation = function (t) {
          var e;
          return e = this.notifyApplicationBeforeVisitingLocation(t), !e.defaultPrevented;
        }, r.prototype.notifyApplicationAfterClickingLinkToLocation = function (t, r) {
          return e.dispatch("turbolinks:click", {
            target: t,
            data: {
              url: r.absoluteURL
            },
            cancelable: !0
          });
        }, r.prototype.notifyApplicationBeforeVisitingLocation = function (t) {
          return e.dispatch("turbolinks:before-visit", {
            data: {
              url: t.absoluteURL
            },
            cancelable: !0
          });
        }, r.prototype.notifyApplicationAfterVisitingLocation = function (t) {
          return e.dispatch("turbolinks:visit", {
            data: {
              url: t.absoluteURL
            }
          });
        }, r.prototype.notifyApplicationBeforeCachingSnapshot = function () {
          return e.dispatch("turbolinks:before-cache");
        }, r.prototype.notifyApplicationBeforeRender = function (t) {
          return e.dispatch("turbolinks:before-render", {
            data: {
              newBody: t
            }
          });
        }, r.prototype.notifyApplicationAfterRender = function () {
          return e.dispatch("turbolinks:render");
        }, r.prototype.notifyApplicationAfterPageLoad = function (t) {
          return null == t && (t = {}), e.dispatch("turbolinks:load", {
            data: {
              url: this.location.absoluteURL,
              timing: t
            }
          });
        }, r.prototype.startVisit = function (t, e, r) {
          var n;
          return null != (n = this.currentVisit) && n.cancel(), this.currentVisit = this.createVisit(t, e, r), this.currentVisit.start(), this.notifyApplicationAfterVisitingLocation(t);
        }, r.prototype.createVisit = function (t, r, n) {
          var o, i, s, a, u;
          return i = null != n ? n : {}, a = i.restorationIdentifier, s = i.restorationData, o = i.historyChanged, u = new e.Visit(this, t, r), u.restorationIdentifier = null != a ? a : e.uuid(), u.restorationData = e.copyObject(s), u.historyChanged = o, u.referrer = this.location, u;
        }, r.prototype.visitCompleted = function (t) {
          return this.notifyApplicationAfterPageLoad(t.getTimingMetrics());
        }, r.prototype.clickEventIsSignificant = function (t) {
          return !(t.defaultPrevented || t.target.isContentEditable || t.which > 1 || t.altKey || t.ctrlKey || t.metaKey || t.shiftKey);
        }, r.prototype.getVisitableLinkForNode = function (t) {
          return this.nodeIsVisitable(t) ? e.closest(t, "a[href]:not([target]):not([download])") : void 0;
        }, r.prototype.getVisitableLocationForLink = function (t) {
          var r;
          return r = new e.Location(t.getAttribute("href")), this.locationIsVisitable(r) ? r : void 0;
        }, r.prototype.getActionForLink = function (t) {
          var e;
          return null != (e = t.getAttribute("data-turbolinks-action")) ? e : "advance";
        }, r.prototype.nodeIsVisitable = function (t) {
          var r;
          return (r = e.closest(t, "[data-turbolinks]")) ? "false" !== r.getAttribute("data-turbolinks") : !0;
        }, r.prototype.locationIsVisitable = function (t) {
          return t.isPrefixedBy(this.view.getRootLocation()) && t.isHTML();
        }, r.prototype.getCurrentRestorationData = function () {
          return this.getRestorationDataForIdentifier(this.restorationIdentifier);
        }, r.prototype.getRestorationDataForIdentifier = function (t) {
          var e;
          return null != (e = this.restorationData)[t] ? e[t] : e[t] = {};
        }, r;
      }();
    }.call(this), function () {
      !function () {
        var t, e;
        if ((t = e = document.currentScript) && !e.hasAttribute("data-turbolinks-suppress-warning")) for (; t = t.parentNode;) {
          if (t === document.body) return console.warn("You are loading Turbolinks from a <script> element inside the <body> element. This is probably not what you meant to do!\n\nLoad your application\u2019s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.\n\nFor more information, see: https://github.com/turbolinks/turbolinks#working-with-script-elements\n\n\u2014\u2014\nSuppress this warning by adding a `data-turbolinks-suppress-warning` attribute to: %s", e.outerHTML);
        }
      }();
    }.call(this), function () {
      var t, r, n;
      e.start = function () {
        return r() ? (null == e.controller && (e.controller = t()), e.controller.start()) : void 0;
      }, r = function r() {
        return null == window.Turbolinks && (window.Turbolinks = e), n();
      }, t = function t() {
        var t;
        return t = new e.Controller(), t.adapter = new e.BrowserAdapter(t), t;
      }, n = function n() {
        return window.Turbolinks === e;
      }, n() && e.start();
    }.call(this);
  }).call(this), "object" == ( false ? undefined : _typeof(module)) && module.exports ? module.exports = e :  true && !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}).call(this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (originalModule) {
  if (!originalModule.webpackPolyfill) {
    var module = Object.create(originalModule); // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    Object.defineProperty(module, "exports", {
      enumerable: true
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ })

/******/ });
//# sourceMappingURL=application-79282a2f7982041f5f1a.js.map